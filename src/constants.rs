// Code generated by github.com/orhanbalci/emojic/emojic-gen DO NOT EDIT.

// Source: https://unicode.org/Public/emoji/13.1/emoji-test.txt
// Created at: 2021-03-23 22:59:47.739883453 UTC

#![allow(unused_imports)]

    
/// Grouped list of all emojis with sub modules.
///
/// This module contains the same set of emojis as the [`crate::flat`] module, but
/// categorized into their respective groups and subgroups via sub modules.
/// This make it easier to browse all the emojis in an intelligible way.
///
/// # Examples
///
/// ```rust
/// // prints: 🖼️
/// println!("{}", emojic::grouped::activities::arts_and_crafts::FRAMED_PICTURE);
/// ```
	pub mod grouped {

/// Activities 🎨🥇🎟️
pub mod activities {

/// arts & crafts 🎨🖼️🪢
pub mod arts_and_crafts { // activities::arts_and_crafts
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="artist palette 🎨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARTIST_PALETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARTIST_PALETTE); // 🎨 (`U+1F3A8`)"] #[doc="# assert_eq!(ARTIST_PALETTE.to_string().as_str(), \"🎨\");"]
#[doc="```"]
pub static ARTIST_PALETTE :  Emoji = Emoji::new("artist palette", "🎨"); // artist palette
#[doc="framed picture 🖼️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRAMED_PICTURE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRAMED_PICTURE); // 🖼️ (`U+1F5BC U+FE0F`)"] #[doc="# assert_eq!(FRAMED_PICTURE.to_string().as_str(), \"🖼️\");"]
#[doc="```"]
pub static FRAMED_PICTURE :  Emoji = Emoji::new("framed picture", "🖼️"); // framed picture
#[doc="knot 🪢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KNOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KNOT); // 🪢 (`U+1FAA2`)"] #[doc="# assert_eq!(KNOT.to_string().as_str(), \"🪢\");"]
#[doc="```"]
pub static KNOT :  Emoji = Emoji::new("knot", "🪢"); // knot
#[doc="performing arts 🎭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERFORMING_ARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERFORMING_ARTS); // 🎭 (`U+1F3AD`)"] #[doc="# assert_eq!(PERFORMING_ARTS.to_string().as_str(), \"🎭\");"]
#[doc="```"]
pub static PERFORMING_ARTS :  Emoji = Emoji::new("performing arts", "🎭"); // performing arts
#[doc="sewing needle 🪡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEWING_NEEDLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEWING_NEEDLE); // 🪡 (`U+1FAA1`)"] #[doc="# assert_eq!(SEWING_NEEDLE.to_string().as_str(), \"🪡\");"]
#[doc="```"]
pub static SEWING_NEEDLE :  Emoji = Emoji::new("sewing needle", "🪡"); // sewing needle
#[doc="thread 🧵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THREAD); // 🧵 (`U+1F9F5`)"] #[doc="# assert_eq!(THREAD.to_string().as_str(), \"🧵\");"]
#[doc="```"]
pub static THREAD :  Emoji = Emoji::new("thread", "🧵"); // thread
#[doc="yarn 🧶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YARN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YARN); // 🧶 (`U+1F9F6`)"] #[doc="# assert_eq!(YARN.to_string().as_str(), \"🧶\");"]
#[doc="```"]
pub static YARN :  Emoji = Emoji::new("yarn", "🧶"); // yarn
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ARTIST_PALETTE, ],
&[&FRAMED_PICTURE, ],
&[&KNOT, ],
&[&PERFORMING_ARTS, ],
&[&SEWING_NEEDLE, ],
&[&THREAD, ],
&[&YARN, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ARTIST_PALETTE, &FRAMED_PICTURE, &KNOT, &PERFORMING_ARTS, &SEWING_NEEDLE, &THREAD, &YARN, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // activities::arts_and_crafts

/// award-medal 🥇🎖️🥈
pub mod award_medal { // activities::award_medal
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="1st place medal 🥇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRST_PLACE_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRST_PLACE_MEDAL); // 🥇 (`U+1F947`)"] #[doc="# assert_eq!(FIRST_PLACE_MEDAL.to_string().as_str(), \"🥇\");"]
#[doc="```"]
pub static FIRST_PLACE_MEDAL :  Emoji = Emoji::new("1st place medal", "🥇"); // 1st place medal
#[doc="military medal 🎖️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MILITARY_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MILITARY_MEDAL); // 🎖️ (`U+1F396 U+FE0F`)"] #[doc="# assert_eq!(MILITARY_MEDAL.to_string().as_str(), \"🎖️\");"]
#[doc="```"]
pub static MILITARY_MEDAL :  Emoji = Emoji::new("military medal", "🎖️"); // military medal
#[doc="2nd place medal 🥈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SECOND_PLACE_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SECOND_PLACE_MEDAL); // 🥈 (`U+1F948`)"] #[doc="# assert_eq!(SECOND_PLACE_MEDAL.to_string().as_str(), \"🥈\");"]
#[doc="```"]
pub static SECOND_PLACE_MEDAL :  Emoji = Emoji::new("2nd place medal", "🥈"); // 2nd place medal
#[doc="sports medal 🏅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPORTS_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPORTS_MEDAL); // 🏅 (`U+1F3C5`)"] #[doc="# assert_eq!(SPORTS_MEDAL.to_string().as_str(), \"🏅\");"]
#[doc="```"]
pub static SPORTS_MEDAL :  Emoji = Emoji::new("sports medal", "🏅"); // sports medal
#[doc="3rd place medal 🥉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THIRD_PLACE_MEDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THIRD_PLACE_MEDAL); // 🥉 (`U+1F949`)"] #[doc="# assert_eq!(THIRD_PLACE_MEDAL.to_string().as_str(), \"🥉\");"]
#[doc="```"]
pub static THIRD_PLACE_MEDAL :  Emoji = Emoji::new("3rd place medal", "🥉"); // 3rd place medal
#[doc="trophy 🏆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROPHY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROPHY); // 🏆 (`U+1F3C6`)"] #[doc="# assert_eq!(TROPHY.to_string().as_str(), \"🏆\");"]
#[doc="```"]
pub static TROPHY :  Emoji = Emoji::new("trophy", "🏆"); // trophy
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FIRST_PLACE_MEDAL, ],
&[&MILITARY_MEDAL, ],
&[&SECOND_PLACE_MEDAL, ],
&[&SPORTS_MEDAL, ],
&[&THIRD_PLACE_MEDAL, ],
&[&TROPHY, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FIRST_PLACE_MEDAL, &MILITARY_MEDAL, &SECOND_PLACE_MEDAL, &SPORTS_MEDAL, &THIRD_PLACE_MEDAL, &TROPHY, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // activities::award_medal

/// event 🎟️🎈🎏
pub mod event { // activities::event
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="admission tickets 🎟️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ADMISSION_TICKETS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ADMISSION_TICKETS); // 🎟️ (`U+1F39F U+FE0F`)"] #[doc="# assert_eq!(ADMISSION_TICKETS.to_string().as_str(), \"🎟️\");"]
#[doc="```"]
pub static ADMISSION_TICKETS :  Emoji = Emoji::new("admission tickets", "🎟️"); // admission tickets
#[doc="balloon 🎈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALLOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALLOON); // 🎈 (`U+1F388`)"] #[doc="# assert_eq!(BALLOON.to_string().as_str(), \"🎈\");"]
#[doc="```"]
pub static BALLOON :  Emoji = Emoji::new("balloon", "🎈"); // balloon
#[doc="carp streamer 🎏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARP_STREAMER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARP_STREAMER); // 🎏 (`U+1F38F`)"] #[doc="# assert_eq!(CARP_STREAMER.to_string().as_str(), \"🎏\");"]
#[doc="```"]
pub static CARP_STREAMER :  Emoji = Emoji::new("carp streamer", "🎏"); // carp streamer
#[doc="Christmas tree 🎄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHRISTMAS_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHRISTMAS_TREE); // 🎄 (`U+1F384`)"] #[doc="# assert_eq!(CHRISTMAS_TREE.to_string().as_str(), \"🎄\");"]
#[doc="```"]
pub static CHRISTMAS_TREE :  Emoji = Emoji::new("Christmas tree", "🎄"); // Christmas tree
#[doc="confetti ball 🎊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONFETTI_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONFETTI_BALL); // 🎊 (`U+1F38A`)"] #[doc="# assert_eq!(CONFETTI_BALL.to_string().as_str(), \"🎊\");"]
#[doc="```"]
pub static CONFETTI_BALL :  Emoji = Emoji::new("confetti ball", "🎊"); // confetti ball
#[doc="firecracker 🧨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRECRACKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRECRACKER); // 🧨 (`U+1F9E8`)"] #[doc="# assert_eq!(FIRECRACKER.to_string().as_str(), \"🧨\");"]
#[doc="```"]
pub static FIRECRACKER :  Emoji = Emoji::new("firecracker", "🧨"); // firecracker
#[doc="fireworks 🎆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIREWORKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIREWORKS); // 🎆 (`U+1F386`)"] #[doc="# assert_eq!(FIREWORKS.to_string().as_str(), \"🎆\");"]
#[doc="```"]
pub static FIREWORKS :  Emoji = Emoji::new("fireworks", "🎆"); // fireworks
#[doc="jack-o-lantern 🎃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JACK_O_LANTERN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JACK_O_LANTERN); // 🎃 (`U+1F383`)"] #[doc="# assert_eq!(JACK_O_LANTERN.to_string().as_str(), \"🎃\");"]
#[doc="```"]
pub static JACK_O_LANTERN :  Emoji = Emoji::new("jack-o-lantern", "🎃"); // jack-o-lantern
#[doc="Japanese dolls 🎎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_DOLLS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_DOLLS); // 🎎 (`U+1F38E`)"] #[doc="# assert_eq!(JAPANESE_DOLLS.to_string().as_str(), \"🎎\");"]
#[doc="```"]
pub static JAPANESE_DOLLS :  Emoji = Emoji::new("Japanese dolls", "🎎"); // Japanese dolls
#[doc="moon viewing ceremony 🎑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOON_VIEWING_CEREMONY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOON_VIEWING_CEREMONY); // 🎑 (`U+1F391`)"] #[doc="# assert_eq!(MOON_VIEWING_CEREMONY.to_string().as_str(), \"🎑\");"]
#[doc="```"]
pub static MOON_VIEWING_CEREMONY :  Emoji = Emoji::new("moon viewing ceremony", "🎑"); // moon viewing ceremony
#[doc="party popper 🎉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARTY_POPPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARTY_POPPER); // 🎉 (`U+1F389`)"] #[doc="# assert_eq!(PARTY_POPPER.to_string().as_str(), \"🎉\");"]
#[doc="```"]
pub static PARTY_POPPER :  Emoji = Emoji::new("party popper", "🎉"); // party popper
#[doc="pine decoration 🎍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINE_DECORATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINE_DECORATION); // 🎍 (`U+1F38D`)"] #[doc="# assert_eq!(PINE_DECORATION.to_string().as_str(), \"🎍\");"]
#[doc="```"]
pub static PINE_DECORATION :  Emoji = Emoji::new("pine decoration", "🎍"); // pine decoration
#[doc="red envelope 🧧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_ENVELOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_ENVELOPE); // 🧧 (`U+1F9E7`)"] #[doc="# assert_eq!(RED_ENVELOPE.to_string().as_str(), \"🧧\");"]
#[doc="```"]
pub static RED_ENVELOPE :  Emoji = Emoji::new("red envelope", "🧧"); // red envelope
#[doc="reminder ribbon 🎗️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REMINDER_RIBBON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REMINDER_RIBBON); // 🎗️ (`U+1F397 U+FE0F`)"] #[doc="# assert_eq!(REMINDER_RIBBON.to_string().as_str(), \"🎗️\");"]
#[doc="```"]
pub static REMINDER_RIBBON :  Emoji = Emoji::new("reminder ribbon", "🎗️"); // reminder ribbon
#[doc="ribbon 🎀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIBBON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIBBON); // 🎀 (`U+1F380`)"] #[doc="# assert_eq!(RIBBON.to_string().as_str(), \"🎀\");"]
#[doc="```"]
pub static RIBBON :  Emoji = Emoji::new("ribbon", "🎀"); // ribbon
#[doc="sparkler 🎇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLER); // 🎇 (`U+1F387`)"] #[doc="# assert_eq!(SPARKLER.to_string().as_str(), \"🎇\");"]
#[doc="```"]
pub static SPARKLER :  Emoji = Emoji::new("sparkler", "🎇"); // sparkler
#[doc="sparkles ✨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLES); // ✨ (`U+2728`)"] #[doc="# assert_eq!(SPARKLES.to_string().as_str(), \"✨\");"]
#[doc="```"]
pub static SPARKLES :  Emoji = Emoji::new("sparkles", "✨"); // sparkles
#[doc="tanabata tree 🎋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TANABATA_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TANABATA_TREE); // 🎋 (`U+1F38B`)"] #[doc="# assert_eq!(TANABATA_TREE.to_string().as_str(), \"🎋\");"]
#[doc="```"]
pub static TANABATA_TREE :  Emoji = Emoji::new("tanabata tree", "🎋"); // tanabata tree
#[doc="ticket 🎫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TICKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TICKET); // 🎫 (`U+1F3AB`)"] #[doc="# assert_eq!(TICKET.to_string().as_str(), \"🎫\");"]
#[doc="```"]
pub static TICKET :  Emoji = Emoji::new("ticket", "🎫"); // ticket
#[doc="wind chime 🎐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WIND_CHIME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WIND_CHIME); // 🎐 (`U+1F390`)"] #[doc="# assert_eq!(WIND_CHIME.to_string().as_str(), \"🎐\");"]
#[doc="```"]
pub static WIND_CHIME :  Emoji = Emoji::new("wind chime", "🎐"); // wind chime
#[doc="wrapped gift 🎁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WRAPPED_GIFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WRAPPED_GIFT); // 🎁 (`U+1F381`)"] #[doc="# assert_eq!(WRAPPED_GIFT.to_string().as_str(), \"🎁\");"]
#[doc="```"]
pub static WRAPPED_GIFT :  Emoji = Emoji::new("wrapped gift", "🎁"); // wrapped gift
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ADMISSION_TICKETS, ],
&[&BALLOON, ],
&[&CARP_STREAMER, ],
&[&CHRISTMAS_TREE, ],
&[&CONFETTI_BALL, ],
&[&FIRECRACKER, ],
&[&FIREWORKS, ],
&[&JACK_O_LANTERN, ],
&[&JAPANESE_DOLLS, ],
&[&MOON_VIEWING_CEREMONY, ],
&[&PARTY_POPPER, ],
&[&PINE_DECORATION, ],
&[&RED_ENVELOPE, ],
&[&REMINDER_RIBBON, ],
&[&RIBBON, ],
&[&SPARKLER, ],
&[&SPARKLES, ],
&[&TANABATA_TREE, ],
&[&TICKET, ],
&[&WIND_CHIME, ],
&[&WRAPPED_GIFT, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ADMISSION_TICKETS, &BALLOON, &CARP_STREAMER, &CHRISTMAS_TREE, &CONFETTI_BALL, &FIRECRACKER, &FIREWORKS, &JACK_O_LANTERN, &JAPANESE_DOLLS, &MOON_VIEWING_CEREMONY, &PARTY_POPPER, &PINE_DECORATION, &RED_ENVELOPE, &REMINDER_RIBBON, &RIBBON, &SPARKLER, &SPARKLES, &TANABATA_TREE, &TICKET, &WIND_CHIME, &WRAPPED_GIFT, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // activities::event

/// game 🎯♟️♣️
pub mod game { // activities::game
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bullseye 🎯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BULLSEYE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BULLSEYE); // 🎯 (`U+1F3AF`)"] #[doc="# assert_eq!(BULLSEYE.to_string().as_str(), \"🎯\");"]
#[doc="```"]
pub static BULLSEYE :  Emoji = Emoji::new("bullseye", "🎯"); // bullseye
#[doc="chess pawn ♟️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHESS_PAWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHESS_PAWN); // ♟️ (`U+265F U+FE0F`)"] #[doc="# assert_eq!(CHESS_PAWN.to_string().as_str(), \"♟️\");"]
#[doc="```"]
pub static CHESS_PAWN :  Emoji = Emoji::new("chess pawn", "♟️"); // chess pawn
#[doc="club suit ♣️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLUB_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLUB_SUIT); // ♣️ (`U+2663 U+FE0F`)"] #[doc="# assert_eq!(CLUB_SUIT.to_string().as_str(), \"♣️\");"]
#[doc="```"]
pub static CLUB_SUIT :  Emoji = Emoji::new("club suit", "♣️"); // club suit
#[doc="crystal ball 🔮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRYSTAL_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRYSTAL_BALL); // 🔮 (`U+1F52E`)"] #[doc="# assert_eq!(CRYSTAL_BALL.to_string().as_str(), \"🔮\");"]
#[doc="```"]
pub static CRYSTAL_BALL :  Emoji = Emoji::new("crystal ball", "🔮"); // crystal ball
#[doc="diamond suit ♦️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIAMOND_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIAMOND_SUIT); // ♦️ (`U+2666 U+FE0F`)"] #[doc="# assert_eq!(DIAMOND_SUIT.to_string().as_str(), \"♦️\");"]
#[doc="```"]
pub static DIAMOND_SUIT :  Emoji = Emoji::new("diamond suit", "♦️"); // diamond suit
#[doc="flower playing cards 🎴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLOWER_PLAYING_CARDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLOWER_PLAYING_CARDS); // 🎴 (`U+1F3B4`)"] #[doc="# assert_eq!(FLOWER_PLAYING_CARDS.to_string().as_str(), \"🎴\");"]
#[doc="```"]
pub static FLOWER_PLAYING_CARDS :  Emoji = Emoji::new("flower playing cards", "🎴"); // flower playing cards
#[doc="game die 🎲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GAME_DIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GAME_DIE); // 🎲 (`U+1F3B2`)"] #[doc="# assert_eq!(GAME_DIE.to_string().as_str(), \"🎲\");"]
#[doc="```"]
pub static GAME_DIE :  Emoji = Emoji::new("game die", "🎲"); // game die
#[doc="heart suit ♥️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_SUIT); // ♥️ (`U+2665 U+FE0F`)"] #[doc="# assert_eq!(HEART_SUIT.to_string().as_str(), \"♥️\");"]
#[doc="```"]
pub static HEART_SUIT :  Emoji = Emoji::new("heart suit", "♥️"); // heart suit
#[doc="joker 🃏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JOKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JOKER); // 🃏 (`U+1F0CF`)"] #[doc="# assert_eq!(JOKER.to_string().as_str(), \"🃏\");"]
#[doc="```"]
pub static JOKER :  Emoji = Emoji::new("joker", "🃏"); // joker
#[doc="joystick 🕹️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JOYSTICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JOYSTICK); // 🕹️ (`U+1F579 U+FE0F`)"] #[doc="# assert_eq!(JOYSTICK.to_string().as_str(), \"🕹️\");"]
#[doc="```"]
pub static JOYSTICK :  Emoji = Emoji::new("joystick", "🕹️"); // joystick
#[doc="kite 🪁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KITE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KITE); // 🪁 (`U+1FA81`)"] #[doc="# assert_eq!(KITE.to_string().as_str(), \"🪁\");"]
#[doc="```"]
pub static KITE :  Emoji = Emoji::new("kite", "🪁"); // kite
#[doc="magic wand 🪄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGIC_WAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGIC_WAND); // 🪄 (`U+1FA84`)"] #[doc="# assert_eq!(MAGIC_WAND.to_string().as_str(), \"🪄\");"]
#[doc="```"]
pub static MAGIC_WAND :  Emoji = Emoji::new("magic wand", "🪄"); // magic wand
#[doc="mahjong red dragon 🀄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAHJONG_RED_DRAGON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAHJONG_RED_DRAGON); // 🀄 (`U+1F004`)"] #[doc="# assert_eq!(MAHJONG_RED_DRAGON.to_string().as_str(), \"🀄\");"]
#[doc="```"]
pub static MAHJONG_RED_DRAGON :  Emoji = Emoji::new("mahjong red dragon", "🀄"); // mahjong red dragon
#[doc="nazar amulet 🧿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAZAR_AMULET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAZAR_AMULET); // 🧿 (`U+1F9FF`)"] #[doc="# assert_eq!(NAZAR_AMULET.to_string().as_str(), \"🧿\");"]
#[doc="```"]
pub static NAZAR_AMULET :  Emoji = Emoji::new("nazar amulet", "🧿"); // nazar amulet
#[doc="nesting dolls 🪆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NESTING_DOLLS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NESTING_DOLLS); // 🪆 (`U+1FA86`)"] #[doc="# assert_eq!(NESTING_DOLLS.to_string().as_str(), \"🪆\");"]
#[doc="```"]
pub static NESTING_DOLLS :  Emoji = Emoji::new("nesting dolls", "🪆"); // nesting dolls
#[doc="piñata 🪅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINATA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINATA); // 🪅 (`U+1FA85`)"] #[doc="# assert_eq!(PINATA.to_string().as_str(), \"🪅\");"]
#[doc="```"]
pub static PINATA :  Emoji = Emoji::new("piñata", "🪅"); // piñata
#[doc="pool 8 ball 🎱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POOL_8_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POOL_8_BALL); // 🎱 (`U+1F3B1`)"] #[doc="# assert_eq!(POOL_8_BALL.to_string().as_str(), \"🎱\");"]
#[doc="```"]
pub static POOL_8_BALL :  Emoji = Emoji::new("pool 8 ball", "🎱"); // pool 8 ball
#[doc="puzzle piece 🧩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PUZZLE_PIECE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PUZZLE_PIECE); // 🧩 (`U+1F9E9`)"] #[doc="# assert_eq!(PUZZLE_PIECE.to_string().as_str(), \"🧩\");"]
#[doc="```"]
pub static PUZZLE_PIECE :  Emoji = Emoji::new("puzzle piece", "🧩"); // puzzle piece
#[doc="slot machine 🎰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLOT_MACHINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLOT_MACHINE); // 🎰 (`U+1F3B0`)"] #[doc="# assert_eq!(SLOT_MACHINE.to_string().as_str(), \"🎰\");"]
#[doc="```"]
pub static SLOT_MACHINE :  Emoji = Emoji::new("slot machine", "🎰"); // slot machine
#[doc="spade suit ♠️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPADE_SUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPADE_SUIT); // ♠️ (`U+2660 U+FE0F`)"] #[doc="# assert_eq!(SPADE_SUIT.to_string().as_str(), \"♠️\");"]
#[doc="```"]
pub static SPADE_SUIT :  Emoji = Emoji::new("spade suit", "♠️"); // spade suit
#[doc="teddy bear 🧸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEDDY_BEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEDDY_BEAR); // 🧸 (`U+1F9F8`)"] #[doc="# assert_eq!(TEDDY_BEAR.to_string().as_str(), \"🧸\");"]
#[doc="```"]
pub static TEDDY_BEAR :  Emoji = Emoji::new("teddy bear", "🧸"); // teddy bear
#[doc="video game 🎮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIDEO_GAME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIDEO_GAME); // 🎮 (`U+1F3AE`)"] #[doc="# assert_eq!(VIDEO_GAME.to_string().as_str(), \"🎮\");"]
#[doc="```"]
pub static VIDEO_GAME :  Emoji = Emoji::new("video game", "🎮"); // video game
#[doc="yo-yo 🪀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YO_YO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YO_YO); // 🪀 (`U+1FA80`)"] #[doc="# assert_eq!(YO_YO.to_string().as_str(), \"🪀\");"]
#[doc="```"]
pub static YO_YO :  Emoji = Emoji::new("yo-yo", "🪀"); // yo-yo
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BULLSEYE, ],
&[&CHESS_PAWN, ],
&[&CLUB_SUIT, ],
&[&CRYSTAL_BALL, ],
&[&DIAMOND_SUIT, ],
&[&FLOWER_PLAYING_CARDS, ],
&[&GAME_DIE, ],
&[&HEART_SUIT, ],
&[&JOKER, ],
&[&JOYSTICK, ],
&[&KITE, ],
&[&MAGIC_WAND, ],
&[&MAHJONG_RED_DRAGON, ],
&[&NAZAR_AMULET, ],
&[&NESTING_DOLLS, ],
&[&PINATA, ],
&[&POOL_8_BALL, ],
&[&PUZZLE_PIECE, ],
&[&SLOT_MACHINE, ],
&[&SPADE_SUIT, ],
&[&TEDDY_BEAR, ],
&[&VIDEO_GAME, ],
&[&YO_YO, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BULLSEYE, &CHESS_PAWN, &CLUB_SUIT, &CRYSTAL_BALL, &DIAMOND_SUIT, &FLOWER_PLAYING_CARDS, &GAME_DIE, &HEART_SUIT, &JOKER, &JOYSTICK, &KITE, &MAGIC_WAND, &MAHJONG_RED_DRAGON, &NAZAR_AMULET, &NESTING_DOLLS, &PINATA, &POOL_8_BALL, &PUZZLE_PIECE, &SLOT_MACHINE, &SPADE_SUIT, &TEDDY_BEAR, &VIDEO_GAME, &YO_YO, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // activities::game

/// sport 🏈🏸⚾
pub mod sport { // activities::sport
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="american football 🏈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AMERICAN_FOOTBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AMERICAN_FOOTBALL); // 🏈 (`U+1F3C8`)"] #[doc="# assert_eq!(AMERICAN_FOOTBALL.to_string().as_str(), \"🏈\");"]
#[doc="```"]
pub static AMERICAN_FOOTBALL :  Emoji = Emoji::new("american football", "🏈"); // american football
#[doc="badminton 🏸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BADMINTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BADMINTON); // 🏸 (`U+1F3F8`)"] #[doc="# assert_eq!(BADMINTON.to_string().as_str(), \"🏸\");"]
#[doc="```"]
pub static BADMINTON :  Emoji = Emoji::new("badminton", "🏸"); // badminton
#[doc="baseball ⚾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BASEBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BASEBALL); // ⚾ (`U+26BE`)"] #[doc="# assert_eq!(BASEBALL.to_string().as_str(), \"⚾\");"]
#[doc="```"]
pub static BASEBALL :  Emoji = Emoji::new("baseball", "⚾"); // baseball
#[doc="basketball 🏀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BASKETBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BASKETBALL); // 🏀 (`U+1F3C0`)"] #[doc="# assert_eq!(BASKETBALL.to_string().as_str(), \"🏀\");"]
#[doc="```"]
pub static BASKETBALL :  Emoji = Emoji::new("basketball", "🏀"); // basketball
#[doc="bowling 🎳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOWLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOWLING); // 🎳 (`U+1F3B3`)"] #[doc="# assert_eq!(BOWLING.to_string().as_str(), \"🎳\");"]
#[doc="```"]
pub static BOWLING :  Emoji = Emoji::new("bowling", "🎳"); // bowling
#[doc="boxing glove 🥊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOXING_GLOVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOXING_GLOVE); // 🥊 (`U+1F94A`)"] #[doc="# assert_eq!(BOXING_GLOVE.to_string().as_str(), \"🥊\");"]
#[doc="```"]
pub static BOXING_GLOVE :  Emoji = Emoji::new("boxing glove", "🥊"); // boxing glove
#[doc="cricket game 🏏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRICKET_GAME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRICKET_GAME); // 🏏 (`U+1F3CF`)"] #[doc="# assert_eq!(CRICKET_GAME.to_string().as_str(), \"🏏\");"]
#[doc="```"]
pub static CRICKET_GAME :  Emoji = Emoji::new("cricket game", "🏏"); // cricket game
#[doc="curling stone 🥌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURLING_STONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURLING_STONE); // 🥌 (`U+1F94C`)"] #[doc="# assert_eq!(CURLING_STONE.to_string().as_str(), \"🥌\");"]
#[doc="```"]
pub static CURLING_STONE :  Emoji = Emoji::new("curling stone", "🥌"); // curling stone
#[doc="diving mask 🤿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIVING_MASK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIVING_MASK); // 🤿 (`U+1F93F`)"] #[doc="# assert_eq!(DIVING_MASK.to_string().as_str(), \"🤿\");"]
#[doc="```"]
pub static DIVING_MASK :  Emoji = Emoji::new("diving mask", "🤿"); // diving mask
#[doc="field hockey 🏑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIELD_HOCKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIELD_HOCKEY); // 🏑 (`U+1F3D1`)"] #[doc="# assert_eq!(FIELD_HOCKEY.to_string().as_str(), \"🏑\");"]
#[doc="```"]
pub static FIELD_HOCKEY :  Emoji = Emoji::new("field hockey", "🏑"); // field hockey
#[doc="fishing pole 🎣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FISHING_POLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FISHING_POLE); // 🎣 (`U+1F3A3`)"] #[doc="# assert_eq!(FISHING_POLE.to_string().as_str(), \"🎣\");"]
#[doc="```"]
pub static FISHING_POLE :  Emoji = Emoji::new("fishing pole", "🎣"); // fishing pole
#[doc="flag in hole ⛳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IN_HOLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IN_HOLE); // ⛳ (`U+26F3`)"] #[doc="# assert_eq!(FLAG_IN_HOLE.to_string().as_str(), \"⛳\");"]
#[doc="```"]
pub static FLAG_IN_HOLE :  Emoji = Emoji::new("flag in hole", "⛳"); // flag in hole
#[doc="flying disc 🥏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLYING_DISC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLYING_DISC); // 🥏 (`U+1F94F`)"] #[doc="# assert_eq!(FLYING_DISC.to_string().as_str(), \"🥏\");"]
#[doc="```"]
pub static FLYING_DISC :  Emoji = Emoji::new("flying disc", "🥏"); // flying disc
#[doc="goal net 🥅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOAL_NET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOAL_NET); // 🥅 (`U+1F945`)"] #[doc="# assert_eq!(GOAL_NET.to_string().as_str(), \"🥅\");"]
#[doc="```"]
pub static GOAL_NET :  Emoji = Emoji::new("goal net", "🥅"); // goal net
#[doc="ice hockey 🏒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE_HOCKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE_HOCKEY); // 🏒 (`U+1F3D2`)"] #[doc="# assert_eq!(ICE_HOCKEY.to_string().as_str(), \"🏒\");"]
#[doc="```"]
pub static ICE_HOCKEY :  Emoji = Emoji::new("ice hockey", "🏒"); // ice hockey
#[doc="ice skate ⛸️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE_SKATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE_SKATE); // ⛸️ (`U+26F8 U+FE0F`)"] #[doc="# assert_eq!(ICE_SKATE.to_string().as_str(), \"⛸️\");"]
#[doc="```"]
pub static ICE_SKATE :  Emoji = Emoji::new("ice skate", "⛸️"); // ice skate
#[doc="lacrosse 🥍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LACROSSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LACROSSE); // 🥍 (`U+1F94D`)"] #[doc="# assert_eq!(LACROSSE.to_string().as_str(), \"🥍\");"]
#[doc="```"]
pub static LACROSSE :  Emoji = Emoji::new("lacrosse", "🥍"); // lacrosse
#[doc="martial arts uniform 🥋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MARTIAL_ARTS_UNIFORM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MARTIAL_ARTS_UNIFORM); // 🥋 (`U+1F94B`)"] #[doc="# assert_eq!(MARTIAL_ARTS_UNIFORM.to_string().as_str(), \"🥋\");"]
#[doc="```"]
pub static MARTIAL_ARTS_UNIFORM :  Emoji = Emoji::new("martial arts uniform", "🥋"); // martial arts uniform
#[doc="ping pong 🏓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PING_PONG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PING_PONG); // 🏓 (`U+1F3D3`)"] #[doc="# assert_eq!(PING_PONG.to_string().as_str(), \"🏓\");"]
#[doc="```"]
pub static PING_PONG :  Emoji = Emoji::new("ping pong", "🏓"); // ping pong
#[doc="rugby football 🏉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RUGBY_FOOTBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RUGBY_FOOTBALL); // 🏉 (`U+1F3C9`)"] #[doc="# assert_eq!(RUGBY_FOOTBALL.to_string().as_str(), \"🏉\");"]
#[doc="```"]
pub static RUGBY_FOOTBALL :  Emoji = Emoji::new("rugby football", "🏉"); // rugby football
#[doc="running shirt 🎽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RUNNING_SHIRT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RUNNING_SHIRT); // 🎽 (`U+1F3BD`)"] #[doc="# assert_eq!(RUNNING_SHIRT.to_string().as_str(), \"🎽\");"]
#[doc="```"]
pub static RUNNING_SHIRT :  Emoji = Emoji::new("running shirt", "🎽"); // running shirt
#[doc="skis 🎿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKIS); // 🎿 (`U+1F3BF`)"] #[doc="# assert_eq!(SKIS.to_string().as_str(), \"🎿\");"]
#[doc="```"]
pub static SKIS :  Emoji = Emoji::new("skis", "🎿"); // skis
#[doc="sled 🛷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLED); // 🛷 (`U+1F6F7`)"] #[doc="# assert_eq!(SLED.to_string().as_str(), \"🛷\");"]
#[doc="```"]
pub static SLED :  Emoji = Emoji::new("sled", "🛷"); // sled
#[doc="soccer ball ⚽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOCCER_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOCCER_BALL); // ⚽ (`U+26BD`)"] #[doc="# assert_eq!(SOCCER_BALL.to_string().as_str(), \"⚽\");"]
#[doc="```"]
pub static SOCCER_BALL :  Emoji = Emoji::new("soccer ball", "⚽"); // soccer ball
#[doc="softball 🥎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOFTBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOFTBALL); // 🥎 (`U+1F94E`)"] #[doc="# assert_eq!(SOFTBALL.to_string().as_str(), \"🥎\");"]
#[doc="```"]
pub static SOFTBALL :  Emoji = Emoji::new("softball", "🥎"); // softball
#[doc="tennis 🎾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TENNIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TENNIS); // 🎾 (`U+1F3BE`)"] #[doc="# assert_eq!(TENNIS.to_string().as_str(), \"🎾\");"]
#[doc="```"]
pub static TENNIS :  Emoji = Emoji::new("tennis", "🎾"); // tennis
#[doc="volleyball 🏐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VOLLEYBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VOLLEYBALL); // 🏐 (`U+1F3D0`)"] #[doc="# assert_eq!(VOLLEYBALL.to_string().as_str(), \"🏐\");"]
#[doc="```"]
pub static VOLLEYBALL :  Emoji = Emoji::new("volleyball", "🏐"); // volleyball
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AMERICAN_FOOTBALL, ],
&[&BADMINTON, ],
&[&BASEBALL, ],
&[&BASKETBALL, ],
&[&BOWLING, ],
&[&BOXING_GLOVE, ],
&[&CRICKET_GAME, ],
&[&CURLING_STONE, ],
&[&DIVING_MASK, ],
&[&FIELD_HOCKEY, ],
&[&FISHING_POLE, ],
&[&FLAG_IN_HOLE, ],
&[&FLYING_DISC, ],
&[&GOAL_NET, ],
&[&ICE_HOCKEY, ],
&[&ICE_SKATE, ],
&[&LACROSSE, ],
&[&MARTIAL_ARTS_UNIFORM, ],
&[&PING_PONG, ],
&[&RUGBY_FOOTBALL, ],
&[&RUNNING_SHIRT, ],
&[&SKIS, ],
&[&SLED, ],
&[&SOCCER_BALL, ],
&[&SOFTBALL, ],
&[&TENNIS, ],
&[&VOLLEYBALL, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AMERICAN_FOOTBALL, &BADMINTON, &BASEBALL, &BASKETBALL, &BOWLING, &BOXING_GLOVE, &CRICKET_GAME, &CURLING_STONE, &DIVING_MASK, &FIELD_HOCKEY, &FISHING_POLE, &FLAG_IN_HOLE, &FLYING_DISC, &GOAL_NET, &ICE_HOCKEY, &ICE_SKATE, &LACROSSE, &MARTIAL_ARTS_UNIFORM, &PING_PONG, &RUGBY_FOOTBALL, &RUNNING_SHIRT, &SKIS, &SLED, &SOCCER_BALL, &SOFTBALL, &TENNIS, &VOLLEYBALL, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // activities::sport
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(arts_and_crafts::all_variants())
		.chain(award_medal::all_variants())
		.chain(event::all_variants())
		.chain(game::all_variants())
		.chain(sport::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(arts_and_crafts::base_emojis())
		.chain(award_medal::base_emojis())
		.chain(event::base_emojis())
		.chain(game::base_emojis())
		.chain(sport::base_emojis())
}
} // activities

/// Animals & Nature 🐸🐤🐜
pub mod animals_and_nature {

/// animal-amphibian 🐸
pub mod animal_amphibian { // animals_and_nature::animal_amphibian
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="frog 🐸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FROG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FROG); // 🐸 (`U+1F438`)"] #[doc="# assert_eq!(FROG.to_string().as_str(), \"🐸\");"]
#[doc="```"]
pub static FROG :  Emoji = Emoji::new("frog", "🐸"); // frog
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FROG, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FROG, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::animal_amphibian

/// animal-bird 🐤🐦🐔
pub mod animal_bird { // animals_and_nature::animal_bird
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="baby chick 🐤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_CHICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_CHICK); // 🐤 (`U+1F424`)"] #[doc="# assert_eq!(BABY_CHICK.to_string().as_str(), \"🐤\");"]
#[doc="```"]
pub static BABY_CHICK :  Emoji = Emoji::new("baby chick", "🐤"); // baby chick
#[doc="bird 🐦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIRD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIRD); // 🐦 (`U+1F426`)"] #[doc="# assert_eq!(BIRD.to_string().as_str(), \"🐦\");"]
#[doc="```"]
pub static BIRD :  Emoji = Emoji::new("bird", "🐦"); // bird
#[doc="chicken 🐔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHICKEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHICKEN); // 🐔 (`U+1F414`)"] #[doc="# assert_eq!(CHICKEN.to_string().as_str(), \"🐔\");"]
#[doc="```"]
pub static CHICKEN :  Emoji = Emoji::new("chicken", "🐔"); // chicken
#[doc="dodo 🦤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DODO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DODO); // 🦤 (`U+1F9A4`)"] #[doc="# assert_eq!(DODO.to_string().as_str(), \"🦤\");"]
#[doc="```"]
pub static DODO :  Emoji = Emoji::new("dodo", "🦤"); // dodo
#[doc="dove 🕊️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOVE); // 🕊️ (`U+1F54A U+FE0F`)"] #[doc="# assert_eq!(DOVE.to_string().as_str(), \"🕊️\");"]
#[doc="```"]
pub static DOVE :  Emoji = Emoji::new("dove", "🕊️"); // dove
#[doc="duck 🦆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DUCK); // 🦆 (`U+1F986`)"] #[doc="# assert_eq!(DUCK.to_string().as_str(), \"🦆\");"]
#[doc="```"]
pub static DUCK :  Emoji = Emoji::new("duck", "🦆"); // duck
#[doc="eagle 🦅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAGLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAGLE); // 🦅 (`U+1F985`)"] #[doc="# assert_eq!(EAGLE.to_string().as_str(), \"🦅\");"]
#[doc="```"]
pub static EAGLE :  Emoji = Emoji::new("eagle", "🦅"); // eagle
#[doc="feather 🪶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FEATHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FEATHER); // 🪶 (`U+1FAB6`)"] #[doc="# assert_eq!(FEATHER.to_string().as_str(), \"🪶\");"]
#[doc="```"]
pub static FEATHER :  Emoji = Emoji::new("feather", "🪶"); // feather
#[doc="flamingo 🦩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAMINGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAMINGO); // 🦩 (`U+1F9A9`)"] #[doc="# assert_eq!(FLAMINGO.to_string().as_str(), \"🦩\");"]
#[doc="```"]
pub static FLAMINGO :  Emoji = Emoji::new("flamingo", "🦩"); // flamingo
#[doc="front-facing baby chick 🐥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRONT_FACING_BABY_CHICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRONT_FACING_BABY_CHICK); // 🐥 (`U+1F425`)"] #[doc="# assert_eq!(FRONT_FACING_BABY_CHICK.to_string().as_str(), \"🐥\");"]
#[doc="```"]
pub static FRONT_FACING_BABY_CHICK :  Emoji = Emoji::new("front-facing baby chick", "🐥"); // front-facing baby chick
#[doc="hatching chick 🐣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HATCHING_CHICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HATCHING_CHICK); // 🐣 (`U+1F423`)"] #[doc="# assert_eq!(HATCHING_CHICK.to_string().as_str(), \"🐣\");"]
#[doc="```"]
pub static HATCHING_CHICK :  Emoji = Emoji::new("hatching chick", "🐣"); // hatching chick
#[doc="owl 🦉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OWL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OWL); // 🦉 (`U+1F989`)"] #[doc="# assert_eq!(OWL.to_string().as_str(), \"🦉\");"]
#[doc="```"]
pub static OWL :  Emoji = Emoji::new("owl", "🦉"); // owl
#[doc="parrot 🦜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARROT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARROT); // 🦜 (`U+1F99C`)"] #[doc="# assert_eq!(PARROT.to_string().as_str(), \"🦜\");"]
#[doc="```"]
pub static PARROT :  Emoji = Emoji::new("parrot", "🦜"); // parrot
#[doc="peacock 🦚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEACOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEACOCK); // 🦚 (`U+1F99A`)"] #[doc="# assert_eq!(PEACOCK.to_string().as_str(), \"🦚\");"]
#[doc="```"]
pub static PEACOCK :  Emoji = Emoji::new("peacock", "🦚"); // peacock
#[doc="penguin 🐧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PENGUIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PENGUIN); // 🐧 (`U+1F427`)"] #[doc="# assert_eq!(PENGUIN.to_string().as_str(), \"🐧\");"]
#[doc="```"]
pub static PENGUIN :  Emoji = Emoji::new("penguin", "🐧"); // penguin
#[doc="rooster 🐓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROOSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROOSTER); // 🐓 (`U+1F413`)"] #[doc="# assert_eq!(ROOSTER.to_string().as_str(), \"🐓\");"]
#[doc="```"]
pub static ROOSTER :  Emoji = Emoji::new("rooster", "🐓"); // rooster
#[doc="swan 🦢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SWAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SWAN); // 🦢 (`U+1F9A2`)"] #[doc="# assert_eq!(SWAN.to_string().as_str(), \"🦢\");"]
#[doc="```"]
pub static SWAN :  Emoji = Emoji::new("swan", "🦢"); // swan
#[doc="turkey 🦃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TURKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TURKEY); // 🦃 (`U+1F983`)"] #[doc="# assert_eq!(TURKEY.to_string().as_str(), \"🦃\");"]
#[doc="```"]
pub static TURKEY :  Emoji = Emoji::new("turkey", "🦃"); // turkey
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BABY_CHICK, ],
&[&BIRD, ],
&[&CHICKEN, ],
&[&DODO, ],
&[&DOVE, ],
&[&DUCK, ],
&[&EAGLE, ],
&[&FEATHER, ],
&[&FLAMINGO, ],
&[&FRONT_FACING_BABY_CHICK, ],
&[&HATCHING_CHICK, ],
&[&OWL, ],
&[&PARROT, ],
&[&PEACOCK, ],
&[&PENGUIN, ],
&[&ROOSTER, ],
&[&SWAN, ],
&[&TURKEY, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BABY_CHICK, &BIRD, &CHICKEN, &DODO, &DOVE, &DUCK, &EAGLE, &FEATHER, &FLAMINGO, &FRONT_FACING_BABY_CHICK, &HATCHING_CHICK, &OWL, &PARROT, &PEACOCK, &PENGUIN, &ROOSTER, &SWAN, &TURKEY, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::animal_bird

/// animal-bug 🐜🪲🐛
pub mod animal_bug { // animals_and_nature::animal_bug
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="ant 🐜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANT); // 🐜 (`U+1F41C`)"] #[doc="# assert_eq!(ANT.to_string().as_str(), \"🐜\");"]
#[doc="```"]
pub static ANT :  Emoji = Emoji::new("ant", "🐜"); // ant
#[doc="beetle 🪲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEETLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEETLE); // 🪲 (`U+1FAB2`)"] #[doc="# assert_eq!(BEETLE.to_string().as_str(), \"🪲\");"]
#[doc="```"]
pub static BEETLE :  Emoji = Emoji::new("beetle", "🪲"); // beetle
#[doc="bug 🐛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUG); // 🐛 (`U+1F41B`)"] #[doc="# assert_eq!(BUG.to_string().as_str(), \"🐛\");"]
#[doc="```"]
pub static BUG :  Emoji = Emoji::new("bug", "🐛"); // bug
#[doc="butterfly 🦋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUTTERFLY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUTTERFLY); // 🦋 (`U+1F98B`)"] #[doc="# assert_eq!(BUTTERFLY.to_string().as_str(), \"🦋\");"]
#[doc="```"]
pub static BUTTERFLY :  Emoji = Emoji::new("butterfly", "🦋"); // butterfly
#[doc="cockroach 🪳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COCKROACH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COCKROACH); // 🪳 (`U+1FAB3`)"] #[doc="# assert_eq!(COCKROACH.to_string().as_str(), \"🪳\");"]
#[doc="```"]
pub static COCKROACH :  Emoji = Emoji::new("cockroach", "🪳"); // cockroach
#[doc="cricket 🦗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRICKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRICKET); // 🦗 (`U+1F997`)"] #[doc="# assert_eq!(CRICKET.to_string().as_str(), \"🦗\");"]
#[doc="```"]
pub static CRICKET :  Emoji = Emoji::new("cricket", "🦗"); // cricket
#[doc="fly 🪰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLY); // 🪰 (`U+1FAB0`)"] #[doc="# assert_eq!(FLY.to_string().as_str(), \"🪰\");"]
#[doc="```"]
pub static FLY :  Emoji = Emoji::new("fly", "🪰"); // fly
#[doc="honeybee 🐝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HONEYBEE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HONEYBEE); // 🐝 (`U+1F41D`)"] #[doc="# assert_eq!(HONEYBEE.to_string().as_str(), \"🐝\");"]
#[doc="```"]
pub static HONEYBEE :  Emoji = Emoji::new("honeybee", "🐝"); // honeybee
#[doc="lady beetle 🐞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LADY_BEETLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LADY_BEETLE); // 🐞 (`U+1F41E`)"] #[doc="# assert_eq!(LADY_BEETLE.to_string().as_str(), \"🐞\");"]
#[doc="```"]
pub static LADY_BEETLE :  Emoji = Emoji::new("lady beetle", "🐞"); // lady beetle
#[doc="microbe 🦠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MICROBE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MICROBE); // 🦠 (`U+1F9A0`)"] #[doc="# assert_eq!(MICROBE.to_string().as_str(), \"🦠\");"]
#[doc="```"]
pub static MICROBE :  Emoji = Emoji::new("microbe", "🦠"); // microbe
#[doc="mosquito 🦟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOSQUITO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOSQUITO); // 🦟 (`U+1F99F`)"] #[doc="# assert_eq!(MOSQUITO.to_string().as_str(), \"🦟\");"]
#[doc="```"]
pub static MOSQUITO :  Emoji = Emoji::new("mosquito", "🦟"); // mosquito
#[doc="scorpion 🦂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCORPION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCORPION); // 🦂 (`U+1F982`)"] #[doc="# assert_eq!(SCORPION.to_string().as_str(), \"🦂\");"]
#[doc="```"]
pub static SCORPION :  Emoji = Emoji::new("scorpion", "🦂"); // scorpion
#[doc="snail 🐌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNAIL); // 🐌 (`U+1F40C`)"] #[doc="# assert_eq!(SNAIL.to_string().as_str(), \"🐌\");"]
#[doc="```"]
pub static SNAIL :  Emoji = Emoji::new("snail", "🐌"); // snail
#[doc="spider 🕷️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIDER); // 🕷️ (`U+1F577 U+FE0F`)"] #[doc="# assert_eq!(SPIDER.to_string().as_str(), \"🕷️\");"]
#[doc="```"]
pub static SPIDER :  Emoji = Emoji::new("spider", "🕷️"); // spider
#[doc="spider web 🕸️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIDER_WEB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIDER_WEB); // 🕸️ (`U+1F578 U+FE0F`)"] #[doc="# assert_eq!(SPIDER_WEB.to_string().as_str(), \"🕸️\");"]
#[doc="```"]
pub static SPIDER_WEB :  Emoji = Emoji::new("spider web", "🕸️"); // spider web
#[doc="worm 🪱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WORM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WORM); // 🪱 (`U+1FAB1`)"] #[doc="# assert_eq!(WORM.to_string().as_str(), \"🪱\");"]
#[doc="```"]
pub static WORM :  Emoji = Emoji::new("worm", "🪱"); // worm
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANT, ],
&[&BEETLE, ],
&[&BUG, ],
&[&BUTTERFLY, ],
&[&COCKROACH, ],
&[&CRICKET, ],
&[&FLY, ],
&[&HONEYBEE, ],
&[&LADY_BEETLE, ],
&[&MICROBE, ],
&[&MOSQUITO, ],
&[&SCORPION, ],
&[&SNAIL, ],
&[&SPIDER, ],
&[&SPIDER_WEB, ],
&[&WORM, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANT, &BEETLE, &BUG, &BUTTERFLY, &COCKROACH, &CRICKET, &FLY, &HONEYBEE, &LADY_BEETLE, &MICROBE, &MOSQUITO, &SCORPION, &SNAIL, &SPIDER, &SPIDER_WEB, &WORM, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::animal_bug

/// animal-mammal 🦡🦇🐻
pub mod animal_mammal { // animals_and_nature::animal_mammal
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="badger 🦡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BADGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BADGER); // 🦡 (`U+1F9A1`)"] #[doc="# assert_eq!(BADGER.to_string().as_str(), \"🦡\");"]
#[doc="```"]
pub static BADGER :  Emoji = Emoji::new("badger", "🦡"); // badger
#[doc="bat 🦇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAT); // 🦇 (`U+1F987`)"] #[doc="# assert_eq!(BAT.to_string().as_str(), \"🦇\");"]
#[doc="```"]
pub static BAT :  Emoji = Emoji::new("bat", "🦇"); // bat
#[doc="bear 🐻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEAR); // 🐻 (`U+1F43B`)"] #[doc="# assert_eq!(BEAR.to_string().as_str(), \"🐻\");"]
#[doc="```"]
pub static BEAR :  Emoji = Emoji::new("bear", "🐻"); // bear
#[doc="beaver 🦫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEAVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEAVER); // 🦫 (`U+1F9AB`)"] #[doc="# assert_eq!(BEAVER.to_string().as_str(), \"🦫\");"]
#[doc="```"]
pub static BEAVER :  Emoji = Emoji::new("beaver", "🦫"); // beaver
#[doc="bison 🦬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BISON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BISON); // 🦬 (`U+1F9AC`)"] #[doc="# assert_eq!(BISON.to_string().as_str(), \"🦬\");"]
#[doc="```"]
pub static BISON :  Emoji = Emoji::new("bison", "🦬"); // bison
#[doc="black cat 🐈‍⬛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_CAT); // 🐈‍⬛ (`U+1F408 U+200D U+2B1B`)"] #[doc="# assert_eq!(BLACK_CAT.to_string().as_str(), \"🐈‍⬛\");"]
#[doc="```"]
pub static BLACK_CAT :  Emoji = Emoji::new("black cat", "🐈‍⬛"); // black cat
#[doc="boar 🐗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOAR); // 🐗 (`U+1F417`)"] #[doc="# assert_eq!(BOAR.to_string().as_str(), \"🐗\");"]
#[doc="```"]
pub static BOAR :  Emoji = Emoji::new("boar", "🐗"); // boar
#[doc="camel 🐪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMEL); // 🐪 (`U+1F42A`)"] #[doc="# assert_eq!(CAMEL.to_string().as_str(), \"🐪\");"]
#[doc="```"]
pub static CAMEL :  Emoji = Emoji::new("camel", "🐪"); // camel
#[doc="cat 🐈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT); // 🐈 (`U+1F408`)"] #[doc="# assert_eq!(CAT.to_string().as_str(), \"🐈\");"]
#[doc="```"]
pub static CAT :  Emoji = Emoji::new("cat", "🐈"); // cat
#[doc="cat face 🐱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT_FACE); // 🐱 (`U+1F431`)"] #[doc="# assert_eq!(CAT_FACE.to_string().as_str(), \"🐱\");"]
#[doc="```"]
pub static CAT_FACE :  Emoji = Emoji::new("cat face", "🐱"); // cat face
#[doc="chipmunk 🐿️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHIPMUNK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHIPMUNK); // 🐿️ (`U+1F43F U+FE0F`)"] #[doc="# assert_eq!(CHIPMUNK.to_string().as_str(), \"🐿️\");"]
#[doc="```"]
pub static CHIPMUNK :  Emoji = Emoji::new("chipmunk", "🐿️"); // chipmunk
#[doc="cow 🐄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COW); // 🐄 (`U+1F404`)"] #[doc="# assert_eq!(COW.to_string().as_str(), \"🐄\");"]
#[doc="```"]
pub static COW :  Emoji = Emoji::new("cow", "🐄"); // cow
#[doc="cow face 🐮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COW_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COW_FACE); // 🐮 (`U+1F42E`)"] #[doc="# assert_eq!(COW_FACE.to_string().as_str(), \"🐮\");"]
#[doc="```"]
pub static COW_FACE :  Emoji = Emoji::new("cow face", "🐮"); // cow face
#[doc="deer 🦌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DEER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DEER); // 🦌 (`U+1F98C`)"] #[doc="# assert_eq!(DEER.to_string().as_str(), \"🦌\");"]
#[doc="```"]
pub static DEER :  Emoji = Emoji::new("deer", "🦌"); // deer
#[doc="dog 🐕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOG); // 🐕 (`U+1F415`)"] #[doc="# assert_eq!(DOG.to_string().as_str(), \"🐕\");"]
#[doc="```"]
pub static DOG :  Emoji = Emoji::new("dog", "🐕"); // dog
#[doc="dog face 🐶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOG_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOG_FACE); // 🐶 (`U+1F436`)"] #[doc="# assert_eq!(DOG_FACE.to_string().as_str(), \"🐶\");"]
#[doc="```"]
pub static DOG_FACE :  Emoji = Emoji::new("dog face", "🐶"); // dog face
#[doc="elephant 🐘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEPHANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEPHANT); // 🐘 (`U+1F418`)"] #[doc="# assert_eq!(ELEPHANT.to_string().as_str(), \"🐘\");"]
#[doc="```"]
pub static ELEPHANT :  Emoji = Emoji::new("elephant", "🐘"); // elephant
#[doc="ewe 🐑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EWE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EWE); // 🐑 (`U+1F411`)"] #[doc="# assert_eq!(EWE.to_string().as_str(), \"🐑\");"]
#[doc="```"]
pub static EWE :  Emoji = Emoji::new("ewe", "🐑"); // ewe
#[doc="fox 🦊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOX); // 🦊 (`U+1F98A`)"] #[doc="# assert_eq!(FOX.to_string().as_str(), \"🦊\");"]
#[doc="```"]
pub static FOX :  Emoji = Emoji::new("fox", "🦊"); // fox
#[doc="giraffe 🦒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GIRAFFE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GIRAFFE); // 🦒 (`U+1F992`)"] #[doc="# assert_eq!(GIRAFFE.to_string().as_str(), \"🦒\");"]
#[doc="```"]
pub static GIRAFFE :  Emoji = Emoji::new("giraffe", "🦒"); // giraffe
#[doc="goat 🐐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOAT); // 🐐 (`U+1F410`)"] #[doc="# assert_eq!(GOAT.to_string().as_str(), \"🐐\");"]
#[doc="```"]
pub static GOAT :  Emoji = Emoji::new("goat", "🐐"); // goat
#[doc="gorilla 🦍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GORILLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GORILLA); // 🦍 (`U+1F98D`)"] #[doc="# assert_eq!(GORILLA.to_string().as_str(), \"🦍\");"]
#[doc="```"]
pub static GORILLA :  Emoji = Emoji::new("gorilla", "🦍"); // gorilla
#[doc="guide dog 🦮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GUIDE_DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GUIDE_DOG); // 🦮 (`U+1F9AE`)"] #[doc="# assert_eq!(GUIDE_DOG.to_string().as_str(), \"🦮\");"]
#[doc="```"]
pub static GUIDE_DOG :  Emoji = Emoji::new("guide dog", "🦮"); // guide dog
#[doc="hamster 🐹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMSTER); // 🐹 (`U+1F439`)"] #[doc="# assert_eq!(HAMSTER.to_string().as_str(), \"🐹\");"]
#[doc="```"]
pub static HAMSTER :  Emoji = Emoji::new("hamster", "🐹"); // hamster
#[doc="hedgehog 🦔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEDGEHOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEDGEHOG); // 🦔 (`U+1F994`)"] #[doc="# assert_eq!(HEDGEHOG.to_string().as_str(), \"🦔\");"]
#[doc="```"]
pub static HEDGEHOG :  Emoji = Emoji::new("hedgehog", "🦔"); // hedgehog
#[doc="hippopotamus 🦛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIPPOPOTAMUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIPPOPOTAMUS); // 🦛 (`U+1F99B`)"] #[doc="# assert_eq!(HIPPOPOTAMUS.to_string().as_str(), \"🦛\");"]
#[doc="```"]
pub static HIPPOPOTAMUS :  Emoji = Emoji::new("hippopotamus", "🦛"); // hippopotamus
#[doc="horse 🐎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORSE); // 🐎 (`U+1F40E`)"] #[doc="# assert_eq!(HORSE.to_string().as_str(), \"🐎\");"]
#[doc="```"]
pub static HORSE :  Emoji = Emoji::new("horse", "🐎"); // horse
#[doc="horse face 🐴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORSE_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORSE_FACE); // 🐴 (`U+1F434`)"] #[doc="# assert_eq!(HORSE_FACE.to_string().as_str(), \"🐴\");"]
#[doc="```"]
pub static HORSE_FACE :  Emoji = Emoji::new("horse face", "🐴"); // horse face
#[doc="kangaroo 🦘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KANGAROO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KANGAROO); // 🦘 (`U+1F998`)"] #[doc="# assert_eq!(KANGAROO.to_string().as_str(), \"🦘\");"]
#[doc="```"]
pub static KANGAROO :  Emoji = Emoji::new("kangaroo", "🦘"); // kangaroo
#[doc="koala 🐨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KOALA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KOALA); // 🐨 (`U+1F428`)"] #[doc="# assert_eq!(KOALA.to_string().as_str(), \"🐨\");"]
#[doc="```"]
pub static KOALA :  Emoji = Emoji::new("koala", "🐨"); // koala
#[doc="leopard 🐆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEOPARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEOPARD); // 🐆 (`U+1F406`)"] #[doc="# assert_eq!(LEOPARD.to_string().as_str(), \"🐆\");"]
#[doc="```"]
pub static LEOPARD :  Emoji = Emoji::new("leopard", "🐆"); // leopard
#[doc="lion 🦁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LION); // 🦁 (`U+1F981`)"] #[doc="# assert_eq!(LION.to_string().as_str(), \"🦁\");"]
#[doc="```"]
pub static LION :  Emoji = Emoji::new("lion", "🦁"); // lion
#[doc="llama 🦙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LLAMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LLAMA); // 🦙 (`U+1F999`)"] #[doc="# assert_eq!(LLAMA.to_string().as_str(), \"🦙\");"]
#[doc="```"]
pub static LLAMA :  Emoji = Emoji::new("llama", "🦙"); // llama
#[doc="mammoth 🦣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAMMOTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAMMOTH); // 🦣 (`U+1F9A3`)"] #[doc="# assert_eq!(MAMMOTH.to_string().as_str(), \"🦣\");"]
#[doc="```"]
pub static MAMMOTH :  Emoji = Emoji::new("mammoth", "🦣"); // mammoth
#[doc="monkey 🐒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONKEY); // 🐒 (`U+1F412`)"] #[doc="# assert_eq!(MONKEY.to_string().as_str(), \"🐒\");"]
#[doc="```"]
pub static MONKEY :  Emoji = Emoji::new("monkey", "🐒"); // monkey
#[doc="monkey face 🐵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONKEY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONKEY_FACE); // 🐵 (`U+1F435`)"] #[doc="# assert_eq!(MONKEY_FACE.to_string().as_str(), \"🐵\");"]
#[doc="```"]
pub static MONKEY_FACE :  Emoji = Emoji::new("monkey face", "🐵"); // monkey face
#[doc="mouse 🐁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUSE); // 🐁 (`U+1F401`)"] #[doc="# assert_eq!(MOUSE.to_string().as_str(), \"🐁\");"]
#[doc="```"]
pub static MOUSE :  Emoji = Emoji::new("mouse", "🐁"); // mouse
#[doc="mouse face 🐭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUSE_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUSE_FACE); // 🐭 (`U+1F42D`)"] #[doc="# assert_eq!(MOUSE_FACE.to_string().as_str(), \"🐭\");"]
#[doc="```"]
pub static MOUSE_FACE :  Emoji = Emoji::new("mouse face", "🐭"); // mouse face
#[doc="orangutan 🦧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGUTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGUTAN); // 🦧 (`U+1F9A7`)"] #[doc="# assert_eq!(ORANGUTAN.to_string().as_str(), \"🦧\");"]
#[doc="```"]
pub static ORANGUTAN :  Emoji = Emoji::new("orangutan", "🦧"); // orangutan
#[doc="otter 🦦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OTTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OTTER); // 🦦 (`U+1F9A6`)"] #[doc="# assert_eq!(OTTER.to_string().as_str(), \"🦦\");"]
#[doc="```"]
pub static OTTER :  Emoji = Emoji::new("otter", "🦦"); // otter
#[doc="ox 🐂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OX); // 🐂 (`U+1F402`)"] #[doc="# assert_eq!(OX.to_string().as_str(), \"🐂\");"]
#[doc="```"]
pub static OX :  Emoji = Emoji::new("ox", "🐂"); // ox
#[doc="panda 🐼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PANDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PANDA); // 🐼 (`U+1F43C`)"] #[doc="# assert_eq!(PANDA.to_string().as_str(), \"🐼\");"]
#[doc="```"]
pub static PANDA :  Emoji = Emoji::new("panda", "🐼"); // panda
#[doc="paw prints 🐾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAW_PRINTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAW_PRINTS); // 🐾 (`U+1F43E`)"] #[doc="# assert_eq!(PAW_PRINTS.to_string().as_str(), \"🐾\");"]
#[doc="```"]
pub static PAW_PRINTS :  Emoji = Emoji::new("paw prints", "🐾"); // paw prints
#[doc="pig 🐖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIG); // 🐖 (`U+1F416`)"] #[doc="# assert_eq!(PIG.to_string().as_str(), \"🐖\");"]
#[doc="```"]
pub static PIG :  Emoji = Emoji::new("pig", "🐖"); // pig
#[doc="pig face 🐷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIG_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIG_FACE); // 🐷 (`U+1F437`)"] #[doc="# assert_eq!(PIG_FACE.to_string().as_str(), \"🐷\");"]
#[doc="```"]
pub static PIG_FACE :  Emoji = Emoji::new("pig face", "🐷"); // pig face
#[doc="pig nose 🐽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIG_NOSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIG_NOSE); // 🐽 (`U+1F43D`)"] #[doc="# assert_eq!(PIG_NOSE.to_string().as_str(), \"🐽\");"]
#[doc="```"]
pub static PIG_NOSE :  Emoji = Emoji::new("pig nose", "🐽"); // pig nose
#[doc="polar bear 🐻‍❄️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLAR_BEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLAR_BEAR); // 🐻‍❄️ (`U+1F43B U+200D U+2744 U+FE0F`)"] #[doc="# assert_eq!(POLAR_BEAR.to_string().as_str(), \"🐻‍❄️\");"]
#[doc="```"]
pub static POLAR_BEAR :  Emoji = Emoji::new("polar bear", "🐻‍❄️"); // polar bear
#[doc="poodle 🐩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POODLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POODLE); // 🐩 (`U+1F429`)"] #[doc="# assert_eq!(POODLE.to_string().as_str(), \"🐩\");"]
#[doc="```"]
pub static POODLE :  Emoji = Emoji::new("poodle", "🐩"); // poodle
#[doc="rabbit 🐇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RABBIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RABBIT); // 🐇 (`U+1F407`)"] #[doc="# assert_eq!(RABBIT.to_string().as_str(), \"🐇\");"]
#[doc="```"]
pub static RABBIT :  Emoji = Emoji::new("rabbit", "🐇"); // rabbit
#[doc="rabbit face 🐰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RABBIT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RABBIT_FACE); // 🐰 (`U+1F430`)"] #[doc="# assert_eq!(RABBIT_FACE.to_string().as_str(), \"🐰\");"]
#[doc="```"]
pub static RABBIT_FACE :  Emoji = Emoji::new("rabbit face", "🐰"); // rabbit face
#[doc="raccoon 🦝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RACCOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RACCOON); // 🦝 (`U+1F99D`)"] #[doc="# assert_eq!(RACCOON.to_string().as_str(), \"🦝\");"]
#[doc="```"]
pub static RACCOON :  Emoji = Emoji::new("raccoon", "🦝"); // raccoon
#[doc="ram 🐏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAM); // 🐏 (`U+1F40F`)"] #[doc="# assert_eq!(RAM.to_string().as_str(), \"🐏\");"]
#[doc="```"]
pub static RAM :  Emoji = Emoji::new("ram", "🐏"); // ram
#[doc="rat 🐀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAT); // 🐀 (`U+1F400`)"] #[doc="# assert_eq!(RAT.to_string().as_str(), \"🐀\");"]
#[doc="```"]
pub static RAT :  Emoji = Emoji::new("rat", "🐀"); // rat
#[doc="rhinoceros 🦏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RHINOCEROS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RHINOCEROS); // 🦏 (`U+1F98F`)"] #[doc="# assert_eq!(RHINOCEROS.to_string().as_str(), \"🦏\");"]
#[doc="```"]
pub static RHINOCEROS :  Emoji = Emoji::new("rhinoceros", "🦏"); // rhinoceros
#[doc="service dog 🐕‍🦺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SERVICE_DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SERVICE_DOG); // 🐕‍🦺 (`U+1F415 U+200D U+1F9BA`)"] #[doc="# assert_eq!(SERVICE_DOG.to_string().as_str(), \"🐕‍🦺\");"]
#[doc="```"]
pub static SERVICE_DOG :  Emoji = Emoji::new("service dog", "🐕‍🦺"); // service dog
#[doc="skunk 🦨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKUNK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKUNK); // 🦨 (`U+1F9A8`)"] #[doc="# assert_eq!(SKUNK.to_string().as_str(), \"🦨\");"]
#[doc="```"]
pub static SKUNK :  Emoji = Emoji::new("skunk", "🦨"); // skunk
#[doc="sloth 🦥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLOTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLOTH); // 🦥 (`U+1F9A5`)"] #[doc="# assert_eq!(SLOTH.to_string().as_str(), \"🦥\");"]
#[doc="```"]
pub static SLOTH :  Emoji = Emoji::new("sloth", "🦥"); // sloth
#[doc="tiger 🐅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIGER); // 🐅 (`U+1F405`)"] #[doc="# assert_eq!(TIGER.to_string().as_str(), \"🐅\");"]
#[doc="```"]
pub static TIGER :  Emoji = Emoji::new("tiger", "🐅"); // tiger
#[doc="tiger face 🐯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIGER_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIGER_FACE); // 🐯 (`U+1F42F`)"] #[doc="# assert_eq!(TIGER_FACE.to_string().as_str(), \"🐯\");"]
#[doc="```"]
pub static TIGER_FACE :  Emoji = Emoji::new("tiger face", "🐯"); // tiger face
#[doc="two-hump camel 🐫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_HUMP_CAMEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_HUMP_CAMEL); // 🐫 (`U+1F42B`)"] #[doc="# assert_eq!(TWO_HUMP_CAMEL.to_string().as_str(), \"🐫\");"]
#[doc="```"]
pub static TWO_HUMP_CAMEL :  Emoji = Emoji::new("two-hump camel", "🐫"); // two-hump camel
#[doc="unicorn 🦄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UNICORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UNICORN); // 🦄 (`U+1F984`)"] #[doc="# assert_eq!(UNICORN.to_string().as_str(), \"🦄\");"]
#[doc="```"]
pub static UNICORN :  Emoji = Emoji::new("unicorn", "🦄"); // unicorn
#[doc="water buffalo 🐃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_BUFFALO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_BUFFALO); // 🐃 (`U+1F403`)"] #[doc="# assert_eq!(WATER_BUFFALO.to_string().as_str(), \"🐃\");"]
#[doc="```"]
pub static WATER_BUFFALO :  Emoji = Emoji::new("water buffalo", "🐃"); // water buffalo
#[doc="wolf 🐺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOLF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOLF); // 🐺 (`U+1F43A`)"] #[doc="# assert_eq!(WOLF.to_string().as_str(), \"🐺\");"]
#[doc="```"]
pub static WOLF :  Emoji = Emoji::new("wolf", "🐺"); // wolf
#[doc="zebra 🦓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZEBRA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZEBRA); // 🦓 (`U+1F993`)"] #[doc="# assert_eq!(ZEBRA.to_string().as_str(), \"🦓\");"]
#[doc="```"]
pub static ZEBRA :  Emoji = Emoji::new("zebra", "🦓"); // zebra
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BADGER, ],
&[&BAT, ],
&[&BEAR, ],
&[&BEAVER, ],
&[&BISON, ],
&[&BLACK_CAT, ],
&[&BOAR, ],
&[&CAMEL, ],
&[&CAT, ],
&[&CAT_FACE, ],
&[&CHIPMUNK, ],
&[&COW, ],
&[&COW_FACE, ],
&[&DEER, ],
&[&DOG, ],
&[&DOG_FACE, ],
&[&ELEPHANT, ],
&[&EWE, ],
&[&FOX, ],
&[&GIRAFFE, ],
&[&GOAT, ],
&[&GORILLA, ],
&[&GUIDE_DOG, ],
&[&HAMSTER, ],
&[&HEDGEHOG, ],
&[&HIPPOPOTAMUS, ],
&[&HORSE, ],
&[&HORSE_FACE, ],
&[&KANGAROO, ],
&[&KOALA, ],
&[&LEOPARD, ],
&[&LION, ],
&[&LLAMA, ],
&[&MAMMOTH, ],
&[&MONKEY, ],
&[&MONKEY_FACE, ],
&[&MOUSE, ],
&[&MOUSE_FACE, ],
&[&ORANGUTAN, ],
&[&OTTER, ],
&[&OX, ],
&[&PANDA, ],
&[&PAW_PRINTS, ],
&[&PIG, ],
&[&PIG_FACE, ],
&[&PIG_NOSE, ],
&[&POLAR_BEAR, ],
&[&POODLE, ],
&[&RABBIT, ],
&[&RABBIT_FACE, ],
&[&RACCOON, ],
&[&RAM, ],
&[&RAT, ],
&[&RHINOCEROS, ],
&[&SERVICE_DOG, ],
&[&SKUNK, ],
&[&SLOTH, ],
&[&TIGER, ],
&[&TIGER_FACE, ],
&[&TWO_HUMP_CAMEL, ],
&[&UNICORN, ],
&[&WATER_BUFFALO, ],
&[&WOLF, ],
&[&ZEBRA, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BADGER, &BAT, &BEAR, &BEAVER, &BISON, &BLACK_CAT, &BOAR, &CAMEL, &CAT, &CAT_FACE, &CHIPMUNK, &COW, &COW_FACE, &DEER, &DOG, &DOG_FACE, &ELEPHANT, &EWE, &FOX, &GIRAFFE, &GOAT, &GORILLA, &GUIDE_DOG, &HAMSTER, &HEDGEHOG, &HIPPOPOTAMUS, &HORSE, &HORSE_FACE, &KANGAROO, &KOALA, &LEOPARD, &LION, &LLAMA, &MAMMOTH, &MONKEY, &MONKEY_FACE, &MOUSE, &MOUSE_FACE, &ORANGUTAN, &OTTER, &OX, &PANDA, &PAW_PRINTS, &PIG, &PIG_FACE, &PIG_NOSE, &POLAR_BEAR, &POODLE, &RABBIT, &RABBIT_FACE, &RACCOON, &RAM, &RAT, &RHINOCEROS, &SERVICE_DOG, &SKUNK, &SLOTH, &TIGER, &TIGER_FACE, &TWO_HUMP_CAMEL, &UNICORN, &WATER_BUFFALO, &WOLF, &ZEBRA, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::animal_mammal

/// animal-marine 🐡🐬🐟
pub mod animal_marine { // animals_and_nature::animal_marine
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="blowfish 🐡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLOWFISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLOWFISH); // 🐡 (`U+1F421`)"] #[doc="# assert_eq!(BLOWFISH.to_string().as_str(), \"🐡\");"]
#[doc="```"]
pub static BLOWFISH :  Emoji = Emoji::new("blowfish", "🐡"); // blowfish
#[doc="dolphin 🐬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOLPHIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOLPHIN); // 🐬 (`U+1F42C`)"] #[doc="# assert_eq!(DOLPHIN.to_string().as_str(), \"🐬\");"]
#[doc="```"]
pub static DOLPHIN :  Emoji = Emoji::new("dolphin", "🐬"); // dolphin
#[doc="fish 🐟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FISH); // 🐟 (`U+1F41F`)"] #[doc="# assert_eq!(FISH.to_string().as_str(), \"🐟\");"]
#[doc="```"]
pub static FISH :  Emoji = Emoji::new("fish", "🐟"); // fish
#[doc="octopus 🐙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OCTOPUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OCTOPUS); // 🐙 (`U+1F419`)"] #[doc="# assert_eq!(OCTOPUS.to_string().as_str(), \"🐙\");"]
#[doc="```"]
pub static OCTOPUS :  Emoji = Emoji::new("octopus", "🐙"); // octopus
#[doc="seal 🦭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEAL); // 🦭 (`U+1F9AD`)"] #[doc="# assert_eq!(SEAL.to_string().as_str(), \"🦭\");"]
#[doc="```"]
pub static SEAL :  Emoji = Emoji::new("seal", "🦭"); // seal
#[doc="shark 🦈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHARK); // 🦈 (`U+1F988`)"] #[doc="# assert_eq!(SHARK.to_string().as_str(), \"🦈\");"]
#[doc="```"]
pub static SHARK :  Emoji = Emoji::new("shark", "🦈"); // shark
#[doc="spiral shell 🐚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIRAL_SHELL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIRAL_SHELL); // 🐚 (`U+1F41A`)"] #[doc="# assert_eq!(SPIRAL_SHELL.to_string().as_str(), \"🐚\");"]
#[doc="```"]
pub static SPIRAL_SHELL :  Emoji = Emoji::new("spiral shell", "🐚"); // spiral shell
#[doc="spouting whale 🐳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPOUTING_WHALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPOUTING_WHALE); // 🐳 (`U+1F433`)"] #[doc="# assert_eq!(SPOUTING_WHALE.to_string().as_str(), \"🐳\");"]
#[doc="```"]
pub static SPOUTING_WHALE :  Emoji = Emoji::new("spouting whale", "🐳"); // spouting whale
#[doc="tropical fish 🐠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROPICAL_FISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROPICAL_FISH); // 🐠 (`U+1F420`)"] #[doc="# assert_eq!(TROPICAL_FISH.to_string().as_str(), \"🐠\");"]
#[doc="```"]
pub static TROPICAL_FISH :  Emoji = Emoji::new("tropical fish", "🐠"); // tropical fish
#[doc="whale 🐋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHALE); // 🐋 (`U+1F40B`)"] #[doc="# assert_eq!(WHALE.to_string().as_str(), \"🐋\");"]
#[doc="```"]
pub static WHALE :  Emoji = Emoji::new("whale", "🐋"); // whale
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BLOWFISH, ],
&[&DOLPHIN, ],
&[&FISH, ],
&[&OCTOPUS, ],
&[&SEAL, ],
&[&SHARK, ],
&[&SPIRAL_SHELL, ],
&[&SPOUTING_WHALE, ],
&[&TROPICAL_FISH, ],
&[&WHALE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BLOWFISH, &DOLPHIN, &FISH, &OCTOPUS, &SEAL, &SHARK, &SPIRAL_SHELL, &SPOUTING_WHALE, &TROPICAL_FISH, &WHALE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::animal_marine

/// animal-reptile 🐊🐉🐲
pub mod animal_reptile { // animals_and_nature::animal_reptile
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="crocodile 🐊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROCODILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROCODILE); // 🐊 (`U+1F40A`)"] #[doc="# assert_eq!(CROCODILE.to_string().as_str(), \"🐊\");"]
#[doc="```"]
pub static CROCODILE :  Emoji = Emoji::new("crocodile", "🐊"); // crocodile
#[doc="dragon 🐉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRAGON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRAGON); // 🐉 (`U+1F409`)"] #[doc="# assert_eq!(DRAGON.to_string().as_str(), \"🐉\");"]
#[doc="```"]
pub static DRAGON :  Emoji = Emoji::new("dragon", "🐉"); // dragon
#[doc="dragon face 🐲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRAGON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRAGON_FACE); // 🐲 (`U+1F432`)"] #[doc="# assert_eq!(DRAGON_FACE.to_string().as_str(), \"🐲\");"]
#[doc="```"]
pub static DRAGON_FACE :  Emoji = Emoji::new("dragon face", "🐲"); // dragon face
#[doc="lizard 🦎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIZARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIZARD); // 🦎 (`U+1F98E`)"] #[doc="# assert_eq!(LIZARD.to_string().as_str(), \"🦎\");"]
#[doc="```"]
pub static LIZARD :  Emoji = Emoji::new("lizard", "🦎"); // lizard
#[doc="sauropod 🦕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAUROPOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAUROPOD); // 🦕 (`U+1F995`)"] #[doc="# assert_eq!(SAUROPOD.to_string().as_str(), \"🦕\");"]
#[doc="```"]
pub static SAUROPOD :  Emoji = Emoji::new("sauropod", "🦕"); // sauropod
#[doc="snake 🐍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNAKE); // 🐍 (`U+1F40D`)"] #[doc="# assert_eq!(SNAKE.to_string().as_str(), \"🐍\");"]
#[doc="```"]
pub static SNAKE :  Emoji = Emoji::new("snake", "🐍"); // snake
#[doc="turtle 🐢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TURTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TURTLE); // 🐢 (`U+1F422`)"] #[doc="# assert_eq!(TURTLE.to_string().as_str(), \"🐢\");"]
#[doc="```"]
pub static TURTLE :  Emoji = Emoji::new("turtle", "🐢"); // turtle
#[doc="T-Rex 🦖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::T_REX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", T_REX); // 🦖 (`U+1F996`)"] #[doc="# assert_eq!(T_REX.to_string().as_str(), \"🦖\");"]
#[doc="```"]
pub static T_REX :  Emoji = Emoji::new("T-Rex", "🦖"); // T-Rex
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CROCODILE, ],
&[&DRAGON, ],
&[&DRAGON_FACE, ],
&[&LIZARD, ],
&[&SAUROPOD, ],
&[&SNAKE, ],
&[&TURTLE, ],
&[&T_REX, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CROCODILE, &DRAGON, &DRAGON_FACE, &LIZARD, &SAUROPOD, &SNAKE, &TURTLE, &T_REX, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::animal_reptile

/// plant-flower 🌼💐🌸
pub mod plant_flower { // animals_and_nature::plant_flower
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="blossom 🌼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLOSSOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLOSSOM); // 🌼 (`U+1F33C`)"] #[doc="# assert_eq!(BLOSSOM.to_string().as_str(), \"🌼\");"]
#[doc="```"]
pub static BLOSSOM :  Emoji = Emoji::new("blossom", "🌼"); // blossom
#[doc="bouquet 💐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOUQUET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOUQUET); // 💐 (`U+1F490`)"] #[doc="# assert_eq!(BOUQUET.to_string().as_str(), \"💐\");"]
#[doc="```"]
pub static BOUQUET :  Emoji = Emoji::new("bouquet", "💐"); // bouquet
#[doc="cherry blossom 🌸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHERRY_BLOSSOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHERRY_BLOSSOM); // 🌸 (`U+1F338`)"] #[doc="# assert_eq!(CHERRY_BLOSSOM.to_string().as_str(), \"🌸\");"]
#[doc="```"]
pub static CHERRY_BLOSSOM :  Emoji = Emoji::new("cherry blossom", "🌸"); // cherry blossom
#[doc="hibiscus 🌺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIBISCUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIBISCUS); // 🌺 (`U+1F33A`)"] #[doc="# assert_eq!(HIBISCUS.to_string().as_str(), \"🌺\");"]
#[doc="```"]
pub static HIBISCUS :  Emoji = Emoji::new("hibiscus", "🌺"); // hibiscus
#[doc="rose 🌹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROSE); // 🌹 (`U+1F339`)"] #[doc="# assert_eq!(ROSE.to_string().as_str(), \"🌹\");"]
#[doc="```"]
pub static ROSE :  Emoji = Emoji::new("rose", "🌹"); // rose
#[doc="rosette 🏵️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROSETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROSETTE); // 🏵️ (`U+1F3F5 U+FE0F`)"] #[doc="# assert_eq!(ROSETTE.to_string().as_str(), \"🏵️\");"]
#[doc="```"]
pub static ROSETTE :  Emoji = Emoji::new("rosette", "🏵️"); // rosette
#[doc="sunflower 🌻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNFLOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNFLOWER); // 🌻 (`U+1F33B`)"] #[doc="# assert_eq!(SUNFLOWER.to_string().as_str(), \"🌻\");"]
#[doc="```"]
pub static SUNFLOWER :  Emoji = Emoji::new("sunflower", "🌻"); // sunflower
#[doc="tulip 🌷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TULIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TULIP); // 🌷 (`U+1F337`)"] #[doc="# assert_eq!(TULIP.to_string().as_str(), \"🌷\");"]
#[doc="```"]
pub static TULIP :  Emoji = Emoji::new("tulip", "🌷"); // tulip
#[doc="white flower 💮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_FLOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_FLOWER); // 💮 (`U+1F4AE`)"] #[doc="# assert_eq!(WHITE_FLOWER.to_string().as_str(), \"💮\");"]
#[doc="```"]
pub static WHITE_FLOWER :  Emoji = Emoji::new("white flower", "💮"); // white flower
#[doc="wilted flower 🥀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WILTED_FLOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WILTED_FLOWER); // 🥀 (`U+1F940`)"] #[doc="# assert_eq!(WILTED_FLOWER.to_string().as_str(), \"🥀\");"]
#[doc="```"]
pub static WILTED_FLOWER :  Emoji = Emoji::new("wilted flower", "🥀"); // wilted flower
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BLOSSOM, ],
&[&BOUQUET, ],
&[&CHERRY_BLOSSOM, ],
&[&HIBISCUS, ],
&[&ROSE, ],
&[&ROSETTE, ],
&[&SUNFLOWER, ],
&[&TULIP, ],
&[&WHITE_FLOWER, ],
&[&WILTED_FLOWER, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BLOSSOM, &BOUQUET, &CHERRY_BLOSSOM, &HIBISCUS, &ROSE, &ROSETTE, &SUNFLOWER, &TULIP, &WHITE_FLOWER, &WILTED_FLOWER, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::plant_flower

/// plant-other 🌵🌳🌲
pub mod plant_other { // animals_and_nature::plant_other
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="cactus 🌵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CACTUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CACTUS); // 🌵 (`U+1F335`)"] #[doc="# assert_eq!(CACTUS.to_string().as_str(), \"🌵\");"]
#[doc="```"]
pub static CACTUS :  Emoji = Emoji::new("cactus", "🌵"); // cactus
#[doc="deciduous tree 🌳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DECIDUOUS_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DECIDUOUS_TREE); // 🌳 (`U+1F333`)"] #[doc="# assert_eq!(DECIDUOUS_TREE.to_string().as_str(), \"🌳\");"]
#[doc="```"]
pub static DECIDUOUS_TREE :  Emoji = Emoji::new("deciduous tree", "🌳"); // deciduous tree
#[doc="evergreen tree 🌲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EVERGREEN_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EVERGREEN_TREE); // 🌲 (`U+1F332`)"] #[doc="# assert_eq!(EVERGREEN_TREE.to_string().as_str(), \"🌲\");"]
#[doc="```"]
pub static EVERGREEN_TREE :  Emoji = Emoji::new("evergreen tree", "🌲"); // evergreen tree
#[doc="fallen leaf 🍂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FALLEN_LEAF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FALLEN_LEAF); // 🍂 (`U+1F342`)"] #[doc="# assert_eq!(FALLEN_LEAF.to_string().as_str(), \"🍂\");"]
#[doc="```"]
pub static FALLEN_LEAF :  Emoji = Emoji::new("fallen leaf", "🍂"); // fallen leaf
#[doc="four leaf clover 🍀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUR_LEAF_CLOVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUR_LEAF_CLOVER); // 🍀 (`U+1F340`)"] #[doc="# assert_eq!(FOUR_LEAF_CLOVER.to_string().as_str(), \"🍀\");"]
#[doc="```"]
pub static FOUR_LEAF_CLOVER :  Emoji = Emoji::new("four leaf clover", "🍀"); // four leaf clover
#[doc="herb 🌿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HERB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HERB); // 🌿 (`U+1F33F`)"] #[doc="# assert_eq!(HERB.to_string().as_str(), \"🌿\");"]
#[doc="```"]
pub static HERB :  Emoji = Emoji::new("herb", "🌿"); // herb
#[doc="leaf fluttering in wind 🍃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEAF_FLUTTERING_IN_WIND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEAF_FLUTTERING_IN_WIND); // 🍃 (`U+1F343`)"] #[doc="# assert_eq!(LEAF_FLUTTERING_IN_WIND.to_string().as_str(), \"🍃\");"]
#[doc="```"]
pub static LEAF_FLUTTERING_IN_WIND :  Emoji = Emoji::new("leaf fluttering in wind", "🍃"); // leaf fluttering in wind
#[doc="maple leaf 🍁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAPLE_LEAF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAPLE_LEAF); // 🍁 (`U+1F341`)"] #[doc="# assert_eq!(MAPLE_LEAF.to_string().as_str(), \"🍁\");"]
#[doc="```"]
pub static MAPLE_LEAF :  Emoji = Emoji::new("maple leaf", "🍁"); // maple leaf
#[doc="palm tree 🌴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PALM_TREE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PALM_TREE); // 🌴 (`U+1F334`)"] #[doc="# assert_eq!(PALM_TREE.to_string().as_str(), \"🌴\");"]
#[doc="```"]
pub static PALM_TREE :  Emoji = Emoji::new("palm tree", "🌴"); // palm tree
#[doc="potted plant 🪴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POTTED_PLANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POTTED_PLANT); // 🪴 (`U+1FAB4`)"] #[doc="# assert_eq!(POTTED_PLANT.to_string().as_str(), \"🪴\");"]
#[doc="```"]
pub static POTTED_PLANT :  Emoji = Emoji::new("potted plant", "🪴"); // potted plant
#[doc="seedling 🌱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEEDLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEEDLING); // 🌱 (`U+1F331`)"] #[doc="# assert_eq!(SEEDLING.to_string().as_str(), \"🌱\");"]
#[doc="```"]
pub static SEEDLING :  Emoji = Emoji::new("seedling", "🌱"); // seedling
#[doc="shamrock ☘️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHAMROCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHAMROCK); // ☘️ (`U+2618 U+FE0F`)"] #[doc="# assert_eq!(SHAMROCK.to_string().as_str(), \"☘️\");"]
#[doc="```"]
pub static SHAMROCK :  Emoji = Emoji::new("shamrock", "☘️"); // shamrock
#[doc="sheaf of rice 🌾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHEAF_OF_RICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHEAF_OF_RICE); // 🌾 (`U+1F33E`)"] #[doc="# assert_eq!(SHEAF_OF_RICE.to_string().as_str(), \"🌾\");"]
#[doc="```"]
pub static SHEAF_OF_RICE :  Emoji = Emoji::new("sheaf of rice", "🌾"); // sheaf of rice
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CACTUS, ],
&[&DECIDUOUS_TREE, ],
&[&EVERGREEN_TREE, ],
&[&FALLEN_LEAF, ],
&[&FOUR_LEAF_CLOVER, ],
&[&HERB, ],
&[&LEAF_FLUTTERING_IN_WIND, ],
&[&MAPLE_LEAF, ],
&[&PALM_TREE, ],
&[&POTTED_PLANT, ],
&[&SEEDLING, ],
&[&SHAMROCK, ],
&[&SHEAF_OF_RICE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CACTUS, &DECIDUOUS_TREE, &EVERGREEN_TREE, &FALLEN_LEAF, &FOUR_LEAF_CLOVER, &HERB, &LEAF_FLUTTERING_IN_WIND, &MAPLE_LEAF, &PALM_TREE, &POTTED_PLANT, &SEEDLING, &SHAMROCK, &SHEAF_OF_RICE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // animals_and_nature::plant_other
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(animal_amphibian::all_variants())
		.chain(animal_bird::all_variants())
		.chain(animal_bug::all_variants())
		.chain(animal_mammal::all_variants())
		.chain(animal_marine::all_variants())
		.chain(animal_reptile::all_variants())
		.chain(plant_flower::all_variants())
		.chain(plant_other::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(animal_amphibian::base_emojis())
		.chain(animal_bird::base_emojis())
		.chain(animal_bug::base_emojis())
		.chain(animal_mammal::base_emojis())
		.chain(animal_marine::base_emojis())
		.chain(animal_reptile::base_emojis())
		.chain(plant_flower::base_emojis())
		.chain(plant_other::base_emojis())
}
} // animals_and_nature

/// Component 🦲🏿
pub mod component {

/// hair-style 🦲🦱🦰
pub mod hair_style { // component::hair_style
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bald 🦲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALD); // 🦲 (`U+1F9B2`)"] #[doc="# assert_eq!(BALD.to_string().as_str(), \"🦲\");"]
#[doc="```"]
pub static BALD :  Emoji = Emoji::new("bald", "🦲"); // bald
#[doc="curly hair 🦱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURLY_HAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURLY_HAIR); // 🦱 (`U+1F9B1`)"] #[doc="# assert_eq!(CURLY_HAIR.to_string().as_str(), \"🦱\");"]
#[doc="```"]
pub static CURLY_HAIR :  Emoji = Emoji::new("curly hair", "🦱"); // curly hair
#[doc="red hair 🦰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_HAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_HAIR); // 🦰 (`U+1F9B0`)"] #[doc="# assert_eq!(RED_HAIR.to_string().as_str(), \"🦰\");"]
#[doc="```"]
pub static RED_HAIR :  Emoji = Emoji::new("red hair", "🦰"); // red hair
#[doc="white hair 🦳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_HAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_HAIR); // 🦳 (`U+1F9B3`)"] #[doc="# assert_eq!(WHITE_HAIR.to_string().as_str(), \"🦳\");"]
#[doc="```"]
pub static WHITE_HAIR :  Emoji = Emoji::new("white hair", "🦳"); // white hair
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BALD, ],
&[&CURLY_HAIR, ],
&[&RED_HAIR, ],
&[&WHITE_HAIR, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BALD, &CURLY_HAIR, &RED_HAIR, &WHITE_HAIR, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // component::hair_style

/// skin-tone 🏿🏻🏾
pub mod skin_tone { // component::skin_tone
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="dark skin tone 🏿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DARK_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DARK_SKIN_TONE); // 🏿 (`U+1F3FF`)"] #[doc="# assert_eq!(DARK_SKIN_TONE.to_string().as_str(), \"🏿\");"]
#[doc="```"]
pub static DARK_SKIN_TONE :  Emoji = Emoji::new("dark skin tone", "🏿"); // dark skin tone
#[doc="light skin tone 🏻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIGHT_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIGHT_SKIN_TONE); // 🏻 (`U+1F3FB`)"] #[doc="# assert_eq!(LIGHT_SKIN_TONE.to_string().as_str(), \"🏻\");"]
#[doc="```"]
pub static LIGHT_SKIN_TONE :  Emoji = Emoji::new("light skin tone", "🏻"); // light skin tone
#[doc="medium-dark skin tone 🏾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDIUM_DARK_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDIUM_DARK_SKIN_TONE); // 🏾 (`U+1F3FE`)"] #[doc="# assert_eq!(MEDIUM_DARK_SKIN_TONE.to_string().as_str(), \"🏾\");"]
#[doc="```"]
pub static MEDIUM_DARK_SKIN_TONE :  Emoji = Emoji::new("medium-dark skin tone", "🏾"); // medium-dark skin tone
#[doc="medium-light skin tone 🏼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDIUM_LIGHT_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDIUM_LIGHT_SKIN_TONE); // 🏼 (`U+1F3FC`)"] #[doc="# assert_eq!(MEDIUM_LIGHT_SKIN_TONE.to_string().as_str(), \"🏼\");"]
#[doc="```"]
pub static MEDIUM_LIGHT_SKIN_TONE :  Emoji = Emoji::new("medium-light skin tone", "🏼"); // medium-light skin tone
#[doc="medium skin tone 🏽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDIUM_SKIN_TONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDIUM_SKIN_TONE); // 🏽 (`U+1F3FD`)"] #[doc="# assert_eq!(MEDIUM_SKIN_TONE.to_string().as_str(), \"🏽\");"]
#[doc="```"]
pub static MEDIUM_SKIN_TONE :  Emoji = Emoji::new("medium skin tone", "🏽"); // medium skin tone
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&DARK_SKIN_TONE, ],
&[&LIGHT_SKIN_TONE, ],
&[&MEDIUM_DARK_SKIN_TONE, ],
&[&MEDIUM_LIGHT_SKIN_TONE, ],
&[&MEDIUM_SKIN_TONE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&DARK_SKIN_TONE, &LIGHT_SKIN_TONE, &MEDIUM_DARK_SKIN_TONE, &MEDIUM_LIGHT_SKIN_TONE, &MEDIUM_SKIN_TONE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // component::skin_tone
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(hair_style::all_variants())
		.chain(skin_tone::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(hair_style::base_emojis())
		.chain(skin_tone::base_emojis())
}
} // component

/// Flags 🇦🇫🏴🏴󠁧󠁢󠁥󠁮󠁧󠁿
pub mod flags {

/// country-flag 🇦🇫🇦🇽🇦🇱
pub mod country_flag { // flags::country_flag
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="flag: Afghanistan 🇦🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AFGHANISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AFGHANISTAN); // 🇦🇫 (`U+1F1E6 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_AFGHANISTAN.to_string().as_str(), \"🇦🇫\");"]
#[doc="```"]
pub static FLAG_AFGHANISTAN :  Emoji = Emoji::new("flag: Afghanistan", "🇦🇫"); // flag: Afghanistan
#[doc="flag: Åland Islands 🇦🇽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ALAND_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ALAND_ISLANDS); // 🇦🇽 (`U+1F1E6 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_ALAND_ISLANDS.to_string().as_str(), \"🇦🇽\");"]
#[doc="```"]
pub static FLAG_ALAND_ISLANDS :  Emoji = Emoji::new("flag: Åland Islands", "🇦🇽"); // flag: Åland Islands
#[doc="flag: Albania 🇦🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ALBANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ALBANIA); // 🇦🇱 (`U+1F1E6 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_ALBANIA.to_string().as_str(), \"🇦🇱\");"]
#[doc="```"]
pub static FLAG_ALBANIA :  Emoji = Emoji::new("flag: Albania", "🇦🇱"); // flag: Albania
#[doc="flag: Algeria 🇩🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ALGERIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ALGERIA); // 🇩🇿 (`U+1F1E9 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_ALGERIA.to_string().as_str(), \"🇩🇿\");"]
#[doc="```"]
pub static FLAG_ALGERIA :  Emoji = Emoji::new("flag: Algeria", "🇩🇿"); // flag: Algeria
#[doc="flag: American Samoa 🇦🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AMERICAN_SAMOA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AMERICAN_SAMOA); // 🇦🇸 (`U+1F1E6 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_AMERICAN_SAMOA.to_string().as_str(), \"🇦🇸\");"]
#[doc="```"]
pub static FLAG_AMERICAN_SAMOA :  Emoji = Emoji::new("flag: American Samoa", "🇦🇸"); // flag: American Samoa
#[doc="flag: Andorra 🇦🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANDORRA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANDORRA); // 🇦🇩 (`U+1F1E6 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_ANDORRA.to_string().as_str(), \"🇦🇩\");"]
#[doc="```"]
pub static FLAG_ANDORRA :  Emoji = Emoji::new("flag: Andorra", "🇦🇩"); // flag: Andorra
#[doc="flag: Angola 🇦🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANGOLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANGOLA); // 🇦🇴 (`U+1F1E6 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_ANGOLA.to_string().as_str(), \"🇦🇴\");"]
#[doc="```"]
pub static FLAG_ANGOLA :  Emoji = Emoji::new("flag: Angola", "🇦🇴"); // flag: Angola
#[doc="flag: Anguilla 🇦🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANGUILLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANGUILLA); // 🇦🇮 (`U+1F1E6 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_ANGUILLA.to_string().as_str(), \"🇦🇮\");"]
#[doc="```"]
pub static FLAG_ANGUILLA :  Emoji = Emoji::new("flag: Anguilla", "🇦🇮"); // flag: Anguilla
#[doc="flag: Antarctica 🇦🇶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANTARCTICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANTARCTICA); // 🇦🇶 (`U+1F1E6 U+1F1F6`)"] #[doc="# assert_eq!(FLAG_ANTARCTICA.to_string().as_str(), \"🇦🇶\");"]
#[doc="```"]
pub static FLAG_ANTARCTICA :  Emoji = Emoji::new("flag: Antarctica", "🇦🇶"); // flag: Antarctica
#[doc="flag: Antigua & Barbuda 🇦🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ANTIGUA_AND_BARBUDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ANTIGUA_AND_BARBUDA); // 🇦🇬 (`U+1F1E6 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_ANTIGUA_AND_BARBUDA.to_string().as_str(), \"🇦🇬\");"]
#[doc="```"]
pub static FLAG_ANTIGUA_AND_BARBUDA :  Emoji = Emoji::new("flag: Antigua & Barbuda", "🇦🇬"); // flag: Antigua & Barbuda
#[doc="flag: Argentina 🇦🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ARGENTINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ARGENTINA); // 🇦🇷 (`U+1F1E6 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_ARGENTINA.to_string().as_str(), \"🇦🇷\");"]
#[doc="```"]
pub static FLAG_ARGENTINA :  Emoji = Emoji::new("flag: Argentina", "🇦🇷"); // flag: Argentina
#[doc="flag: Armenia 🇦🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ARMENIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ARMENIA); // 🇦🇲 (`U+1F1E6 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ARMENIA.to_string().as_str(), \"🇦🇲\");"]
#[doc="```"]
pub static FLAG_ARMENIA :  Emoji = Emoji::new("flag: Armenia", "🇦🇲"); // flag: Armenia
#[doc="flag: Aruba 🇦🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ARUBA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ARUBA); // 🇦🇼 (`U+1F1E6 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_ARUBA.to_string().as_str(), \"🇦🇼\");"]
#[doc="```"]
pub static FLAG_ARUBA :  Emoji = Emoji::new("flag: Aruba", "🇦🇼"); // flag: Aruba
#[doc="flag: Ascension Island 🇦🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ASCENSION_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ASCENSION_ISLAND); // 🇦🇨 (`U+1F1E6 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ASCENSION_ISLAND.to_string().as_str(), \"🇦🇨\");"]
#[doc="```"]
pub static FLAG_ASCENSION_ISLAND :  Emoji = Emoji::new("flag: Ascension Island", "🇦🇨"); // flag: Ascension Island
#[doc="flag: Australia 🇦🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AUSTRALIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AUSTRALIA); // 🇦🇺 (`U+1F1E6 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_AUSTRALIA.to_string().as_str(), \"🇦🇺\");"]
#[doc="```"]
pub static FLAG_AUSTRALIA :  Emoji = Emoji::new("flag: Australia", "🇦🇺"); // flag: Australia
#[doc="flag: Austria 🇦🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AUSTRIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AUSTRIA); // 🇦🇹 (`U+1F1E6 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_AUSTRIA.to_string().as_str(), \"🇦🇹\");"]
#[doc="```"]
pub static FLAG_AUSTRIA :  Emoji = Emoji::new("flag: Austria", "🇦🇹"); // flag: Austria
#[doc="flag: Azerbaijan 🇦🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_AZERBAIJAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_AZERBAIJAN); // 🇦🇿 (`U+1F1E6 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_AZERBAIJAN.to_string().as_str(), \"🇦🇿\");"]
#[doc="```"]
pub static FLAG_AZERBAIJAN :  Emoji = Emoji::new("flag: Azerbaijan", "🇦🇿"); // flag: Azerbaijan
#[doc="flag: Bahamas 🇧🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BAHAMAS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BAHAMAS); // 🇧🇸 (`U+1F1E7 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_BAHAMAS.to_string().as_str(), \"🇧🇸\");"]
#[doc="```"]
pub static FLAG_BAHAMAS :  Emoji = Emoji::new("flag: Bahamas", "🇧🇸"); // flag: Bahamas
#[doc="flag: Bahrain 🇧🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BAHRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BAHRAIN); // 🇧🇭 (`U+1F1E7 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_BAHRAIN.to_string().as_str(), \"🇧🇭\");"]
#[doc="```"]
pub static FLAG_BAHRAIN :  Emoji = Emoji::new("flag: Bahrain", "🇧🇭"); // flag: Bahrain
#[doc="flag: Bangladesh 🇧🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BANGLADESH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BANGLADESH); // 🇧🇩 (`U+1F1E7 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_BANGLADESH.to_string().as_str(), \"🇧🇩\");"]
#[doc="```"]
pub static FLAG_BANGLADESH :  Emoji = Emoji::new("flag: Bangladesh", "🇧🇩"); // flag: Bangladesh
#[doc="flag: Barbados 🇧🇧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BARBADOS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BARBADOS); // 🇧🇧 (`U+1F1E7 U+1F1E7`)"] #[doc="# assert_eq!(FLAG_BARBADOS.to_string().as_str(), \"🇧🇧\");"]
#[doc="```"]
pub static FLAG_BARBADOS :  Emoji = Emoji::new("flag: Barbados", "🇧🇧"); // flag: Barbados
#[doc="flag: Belarus 🇧🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BELARUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BELARUS); // 🇧🇾 (`U+1F1E7 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_BELARUS.to_string().as_str(), \"🇧🇾\");"]
#[doc="```"]
pub static FLAG_BELARUS :  Emoji = Emoji::new("flag: Belarus", "🇧🇾"); // flag: Belarus
#[doc="flag: Belgium 🇧🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BELGIUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BELGIUM); // 🇧🇪 (`U+1F1E7 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_BELGIUM.to_string().as_str(), \"🇧🇪\");"]
#[doc="```"]
pub static FLAG_BELGIUM :  Emoji = Emoji::new("flag: Belgium", "🇧🇪"); // flag: Belgium
#[doc="flag: Belize 🇧🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BELIZE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BELIZE); // 🇧🇿 (`U+1F1E7 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_BELIZE.to_string().as_str(), \"🇧🇿\");"]
#[doc="```"]
pub static FLAG_BELIZE :  Emoji = Emoji::new("flag: Belize", "🇧🇿"); // flag: Belize
#[doc="flag: Benin 🇧🇯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BENIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BENIN); // 🇧🇯 (`U+1F1E7 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_BENIN.to_string().as_str(), \"🇧🇯\");"]
#[doc="```"]
pub static FLAG_BENIN :  Emoji = Emoji::new("flag: Benin", "🇧🇯"); // flag: Benin
#[doc="flag: Bermuda 🇧🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BERMUDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BERMUDA); // 🇧🇲 (`U+1F1E7 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_BERMUDA.to_string().as_str(), \"🇧🇲\");"]
#[doc="```"]
pub static FLAG_BERMUDA :  Emoji = Emoji::new("flag: Bermuda", "🇧🇲"); // flag: Bermuda
#[doc="flag: Bhutan 🇧🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BHUTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BHUTAN); // 🇧🇹 (`U+1F1E7 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_BHUTAN.to_string().as_str(), \"🇧🇹\");"]
#[doc="```"]
pub static FLAG_BHUTAN :  Emoji = Emoji::new("flag: Bhutan", "🇧🇹"); // flag: Bhutan
#[doc="flag: Bolivia 🇧🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOLIVIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOLIVIA); // 🇧🇴 (`U+1F1E7 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_BOLIVIA.to_string().as_str(), \"🇧🇴\");"]
#[doc="```"]
pub static FLAG_BOLIVIA :  Emoji = Emoji::new("flag: Bolivia", "🇧🇴"); // flag: Bolivia
#[doc="flag: Bosnia & Herzegovina 🇧🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOSNIA_AND_HERZEGOVINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOSNIA_AND_HERZEGOVINA); // 🇧🇦 (`U+1F1E7 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_BOSNIA_AND_HERZEGOVINA.to_string().as_str(), \"🇧🇦\");"]
#[doc="```"]
pub static FLAG_BOSNIA_AND_HERZEGOVINA :  Emoji = Emoji::new("flag: Bosnia & Herzegovina", "🇧🇦"); // flag: Bosnia & Herzegovina
#[doc="flag: Botswana 🇧🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOTSWANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOTSWANA); // 🇧🇼 (`U+1F1E7 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_BOTSWANA.to_string().as_str(), \"🇧🇼\");"]
#[doc="```"]
pub static FLAG_BOTSWANA :  Emoji = Emoji::new("flag: Botswana", "🇧🇼"); // flag: Botswana
#[doc="flag: Bouvet Island 🇧🇻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BOUVET_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BOUVET_ISLAND); // 🇧🇻 (`U+1F1E7 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_BOUVET_ISLAND.to_string().as_str(), \"🇧🇻\");"]
#[doc="```"]
pub static FLAG_BOUVET_ISLAND :  Emoji = Emoji::new("flag: Bouvet Island", "🇧🇻"); // flag: Bouvet Island
#[doc="flag: Brazil 🇧🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRAZIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRAZIL); // 🇧🇷 (`U+1F1E7 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_BRAZIL.to_string().as_str(), \"🇧🇷\");"]
#[doc="```"]
pub static FLAG_BRAZIL :  Emoji = Emoji::new("flag: Brazil", "🇧🇷"); // flag: Brazil
#[doc="flag: British Indian Ocean Territory 🇮🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRITISH_INDIAN_OCEAN_TERRITORY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRITISH_INDIAN_OCEAN_TERRITORY); // 🇮🇴 (`U+1F1EE U+1F1F4`)"] #[doc="# assert_eq!(FLAG_BRITISH_INDIAN_OCEAN_TERRITORY.to_string().as_str(), \"🇮🇴\");"]
#[doc="```"]
pub static FLAG_BRITISH_INDIAN_OCEAN_TERRITORY :  Emoji = Emoji::new("flag: British Indian Ocean Territory", "🇮🇴"); // flag: British Indian Ocean Territory
#[doc="flag: British Virgin Islands 🇻🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRITISH_VIRGIN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRITISH_VIRGIN_ISLANDS); // 🇻🇬 (`U+1F1FB U+1F1EC`)"] #[doc="# assert_eq!(FLAG_BRITISH_VIRGIN_ISLANDS.to_string().as_str(), \"🇻🇬\");"]
#[doc="```"]
pub static FLAG_BRITISH_VIRGIN_ISLANDS :  Emoji = Emoji::new("flag: British Virgin Islands", "🇻🇬"); // flag: British Virgin Islands
#[doc="flag: Brunei 🇧🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BRUNEI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BRUNEI); // 🇧🇳 (`U+1F1E7 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_BRUNEI.to_string().as_str(), \"🇧🇳\");"]
#[doc="```"]
pub static FLAG_BRUNEI :  Emoji = Emoji::new("flag: Brunei", "🇧🇳"); // flag: Brunei
#[doc="flag: Bulgaria 🇧🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BULGARIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BULGARIA); // 🇧🇬 (`U+1F1E7 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_BULGARIA.to_string().as_str(), \"🇧🇬\");"]
#[doc="```"]
pub static FLAG_BULGARIA :  Emoji = Emoji::new("flag: Bulgaria", "🇧🇬"); // flag: Bulgaria
#[doc="flag: Burkina Faso 🇧🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BURKINA_FASO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BURKINA_FASO); // 🇧🇫 (`U+1F1E7 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_BURKINA_FASO.to_string().as_str(), \"🇧🇫\");"]
#[doc="```"]
pub static FLAG_BURKINA_FASO :  Emoji = Emoji::new("flag: Burkina Faso", "🇧🇫"); // flag: Burkina Faso
#[doc="flag: Burundi 🇧🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_BURUNDI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_BURUNDI); // 🇧🇮 (`U+1F1E7 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_BURUNDI.to_string().as_str(), \"🇧🇮\");"]
#[doc="```"]
pub static FLAG_BURUNDI :  Emoji = Emoji::new("flag: Burundi", "🇧🇮"); // flag: Burundi
#[doc="flag: Cambodia 🇰🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAMBODIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAMBODIA); // 🇰🇭 (`U+1F1F0 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_CAMBODIA.to_string().as_str(), \"🇰🇭\");"]
#[doc="```"]
pub static FLAG_CAMBODIA :  Emoji = Emoji::new("flag: Cambodia", "🇰🇭"); // flag: Cambodia
#[doc="flag: Cameroon 🇨🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAMEROON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAMEROON); // 🇨🇲 (`U+1F1E8 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_CAMEROON.to_string().as_str(), \"🇨🇲\");"]
#[doc="```"]
pub static FLAG_CAMEROON :  Emoji = Emoji::new("flag: Cameroon", "🇨🇲"); // flag: Cameroon
#[doc="flag: Canada 🇨🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CANADA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CANADA); // 🇨🇦 (`U+1F1E8 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_CANADA.to_string().as_str(), \"🇨🇦\");"]
#[doc="```"]
pub static FLAG_CANADA :  Emoji = Emoji::new("flag: Canada", "🇨🇦"); // flag: Canada
#[doc="flag: Canary Islands 🇮🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CANARY_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CANARY_ISLANDS); // 🇮🇨 (`U+1F1EE U+1F1E8`)"] #[doc="# assert_eq!(FLAG_CANARY_ISLANDS.to_string().as_str(), \"🇮🇨\");"]
#[doc="```"]
pub static FLAG_CANARY_ISLANDS :  Emoji = Emoji::new("flag: Canary Islands", "🇮🇨"); // flag: Canary Islands
#[doc="flag: Cape Verde 🇨🇻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAPE_VERDE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAPE_VERDE); // 🇨🇻 (`U+1F1E8 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_CAPE_VERDE.to_string().as_str(), \"🇨🇻\");"]
#[doc="```"]
pub static FLAG_CAPE_VERDE :  Emoji = Emoji::new("flag: Cape Verde", "🇨🇻"); // flag: Cape Verde
#[doc="flag: Caribbean Netherlands 🇧🇶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CARIBBEAN_NETHERLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CARIBBEAN_NETHERLANDS); // 🇧🇶 (`U+1F1E7 U+1F1F6`)"] #[doc="# assert_eq!(FLAG_CARIBBEAN_NETHERLANDS.to_string().as_str(), \"🇧🇶\");"]
#[doc="```"]
pub static FLAG_CARIBBEAN_NETHERLANDS :  Emoji = Emoji::new("flag: Caribbean Netherlands", "🇧🇶"); // flag: Caribbean Netherlands
#[doc="flag: Cayman Islands 🇰🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CAYMAN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CAYMAN_ISLANDS); // 🇰🇾 (`U+1F1F0 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_CAYMAN_ISLANDS.to_string().as_str(), \"🇰🇾\");"]
#[doc="```"]
pub static FLAG_CAYMAN_ISLANDS :  Emoji = Emoji::new("flag: Cayman Islands", "🇰🇾"); // flag: Cayman Islands
#[doc="flag: Central African Republic 🇨🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CENTRAL_AFRICAN_REPUBLIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CENTRAL_AFRICAN_REPUBLIC); // 🇨🇫 (`U+1F1E8 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_CENTRAL_AFRICAN_REPUBLIC.to_string().as_str(), \"🇨🇫\");"]
#[doc="```"]
pub static FLAG_CENTRAL_AFRICAN_REPUBLIC :  Emoji = Emoji::new("flag: Central African Republic", "🇨🇫"); // flag: Central African Republic
#[doc="flag: Ceuta & Melilla 🇪🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CEUTA_AND_MELILLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CEUTA_AND_MELILLA); // 🇪🇦 (`U+1F1EA U+1F1E6`)"] #[doc="# assert_eq!(FLAG_CEUTA_AND_MELILLA.to_string().as_str(), \"🇪🇦\");"]
#[doc="```"]
pub static FLAG_CEUTA_AND_MELILLA :  Emoji = Emoji::new("flag: Ceuta & Melilla", "🇪🇦"); // flag: Ceuta & Melilla
#[doc="flag: Chad 🇹🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHAD); // 🇹🇩 (`U+1F1F9 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_CHAD.to_string().as_str(), \"🇹🇩\");"]
#[doc="```"]
pub static FLAG_CHAD :  Emoji = Emoji::new("flag: Chad", "🇹🇩"); // flag: Chad
#[doc="flag: Chile 🇨🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHILE); // 🇨🇱 (`U+1F1E8 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_CHILE.to_string().as_str(), \"🇨🇱\");"]
#[doc="```"]
pub static FLAG_CHILE :  Emoji = Emoji::new("flag: Chile", "🇨🇱"); // flag: Chile
#[doc="flag: China 🇨🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHINA); // 🇨🇳 (`U+1F1E8 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_CHINA.to_string().as_str(), \"🇨🇳\");"]
#[doc="```"]
pub static FLAG_CHINA :  Emoji = Emoji::new("flag: China", "🇨🇳"); // flag: China
#[doc="flag: Christmas Island 🇨🇽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CHRISTMAS_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CHRISTMAS_ISLAND); // 🇨🇽 (`U+1F1E8 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_CHRISTMAS_ISLAND.to_string().as_str(), \"🇨🇽\");"]
#[doc="```"]
pub static FLAG_CHRISTMAS_ISLAND :  Emoji = Emoji::new("flag: Christmas Island", "🇨🇽"); // flag: Christmas Island
#[doc="flag: Clipperton Island 🇨🇵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CLIPPERTON_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CLIPPERTON_ISLAND); // 🇨🇵 (`U+1F1E8 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_CLIPPERTON_ISLAND.to_string().as_str(), \"🇨🇵\");"]
#[doc="```"]
pub static FLAG_CLIPPERTON_ISLAND :  Emoji = Emoji::new("flag: Clipperton Island", "🇨🇵"); // flag: Clipperton Island
#[doc="flag: Cocos (Keeling) Islands 🇨🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COCOS_KEELING_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COCOS_KEELING_ISLANDS); // 🇨🇨 (`U+1F1E8 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_COCOS_KEELING_ISLANDS.to_string().as_str(), \"🇨🇨\");"]
#[doc="```"]
pub static FLAG_COCOS_KEELING_ISLANDS :  Emoji = Emoji::new("flag: Cocos (Keeling) Islands", "🇨🇨"); // flag: Cocos (Keeling) Islands
#[doc="flag: Colombia 🇨🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COLOMBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COLOMBIA); // 🇨🇴 (`U+1F1E8 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_COLOMBIA.to_string().as_str(), \"🇨🇴\");"]
#[doc="```"]
pub static FLAG_COLOMBIA :  Emoji = Emoji::new("flag: Colombia", "🇨🇴"); // flag: Colombia
#[doc="flag: Comoros 🇰🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COMOROS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COMOROS); // 🇰🇲 (`U+1F1F0 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_COMOROS.to_string().as_str(), \"🇰🇲\");"]
#[doc="```"]
pub static FLAG_COMOROS :  Emoji = Emoji::new("flag: Comoros", "🇰🇲"); // flag: Comoros
#[doc="flag: Congo - Brazzaville 🇨🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CONGO_BRAZZAVILLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CONGO_BRAZZAVILLE); // 🇨🇬 (`U+1F1E8 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_CONGO_BRAZZAVILLE.to_string().as_str(), \"🇨🇬\");"]
#[doc="```"]
pub static FLAG_CONGO_BRAZZAVILLE :  Emoji = Emoji::new("flag: Congo - Brazzaville", "🇨🇬"); // flag: Congo - Brazzaville
#[doc="flag: Congo - Kinshasa 🇨🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CONGO_KINSHASA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CONGO_KINSHASA); // 🇨🇩 (`U+1F1E8 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_CONGO_KINSHASA.to_string().as_str(), \"🇨🇩\");"]
#[doc="```"]
pub static FLAG_CONGO_KINSHASA :  Emoji = Emoji::new("flag: Congo - Kinshasa", "🇨🇩"); // flag: Congo - Kinshasa
#[doc="flag: Cook Islands 🇨🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COOK_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COOK_ISLANDS); // 🇨🇰 (`U+1F1E8 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_COOK_ISLANDS.to_string().as_str(), \"🇨🇰\");"]
#[doc="```"]
pub static FLAG_COOK_ISLANDS :  Emoji = Emoji::new("flag: Cook Islands", "🇨🇰"); // flag: Cook Islands
#[doc="flag: Costa Rica 🇨🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COSTA_RICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COSTA_RICA); // 🇨🇷 (`U+1F1E8 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_COSTA_RICA.to_string().as_str(), \"🇨🇷\");"]
#[doc="```"]
pub static FLAG_COSTA_RICA :  Emoji = Emoji::new("flag: Costa Rica", "🇨🇷"); // flag: Costa Rica
#[doc="flag: Côte d’Ivoire 🇨🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_COTE_D_IVOIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_COTE_D_IVOIRE); // 🇨🇮 (`U+1F1E8 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_COTE_D_IVOIRE.to_string().as_str(), \"🇨🇮\");"]
#[doc="```"]
pub static FLAG_COTE_D_IVOIRE :  Emoji = Emoji::new("flag: Côte d’Ivoire", "🇨🇮"); // flag: Côte d’Ivoire
#[doc="flag: Croatia 🇭🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CROATIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CROATIA); // 🇭🇷 (`U+1F1ED U+1F1F7`)"] #[doc="# assert_eq!(FLAG_CROATIA.to_string().as_str(), \"🇭🇷\");"]
#[doc="```"]
pub static FLAG_CROATIA :  Emoji = Emoji::new("flag: Croatia", "🇭🇷"); // flag: Croatia
#[doc="flag: Cuba 🇨🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CUBA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CUBA); // 🇨🇺 (`U+1F1E8 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_CUBA.to_string().as_str(), \"🇨🇺\");"]
#[doc="```"]
pub static FLAG_CUBA :  Emoji = Emoji::new("flag: Cuba", "🇨🇺"); // flag: Cuba
#[doc="flag: Curaçao 🇨🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CURACAO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CURACAO); // 🇨🇼 (`U+1F1E8 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_CURACAO.to_string().as_str(), \"🇨🇼\");"]
#[doc="```"]
pub static FLAG_CURACAO :  Emoji = Emoji::new("flag: Curaçao", "🇨🇼"); // flag: Curaçao
#[doc="flag: Cyprus 🇨🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CYPRUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CYPRUS); // 🇨🇾 (`U+1F1E8 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_CYPRUS.to_string().as_str(), \"🇨🇾\");"]
#[doc="```"]
pub static FLAG_CYPRUS :  Emoji = Emoji::new("flag: Cyprus", "🇨🇾"); // flag: Cyprus
#[doc="flag: Czechia 🇨🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_CZECHIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_CZECHIA); // 🇨🇿 (`U+1F1E8 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_CZECHIA.to_string().as_str(), \"🇨🇿\");"]
#[doc="```"]
pub static FLAG_CZECHIA :  Emoji = Emoji::new("flag: Czechia", "🇨🇿"); // flag: Czechia
#[doc="flag: Denmark 🇩🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DENMARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DENMARK); // 🇩🇰 (`U+1F1E9 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_DENMARK.to_string().as_str(), \"🇩🇰\");"]
#[doc="```"]
pub static FLAG_DENMARK :  Emoji = Emoji::new("flag: Denmark", "🇩🇰"); // flag: Denmark
#[doc="flag: Diego Garcia 🇩🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DIEGO_GARCIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DIEGO_GARCIA); // 🇩🇬 (`U+1F1E9 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_DIEGO_GARCIA.to_string().as_str(), \"🇩🇬\");"]
#[doc="```"]
pub static FLAG_DIEGO_GARCIA :  Emoji = Emoji::new("flag: Diego Garcia", "🇩🇬"); // flag: Diego Garcia
#[doc="flag: Djibouti 🇩🇯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DJIBOUTI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DJIBOUTI); // 🇩🇯 (`U+1F1E9 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_DJIBOUTI.to_string().as_str(), \"🇩🇯\");"]
#[doc="```"]
pub static FLAG_DJIBOUTI :  Emoji = Emoji::new("flag: Djibouti", "🇩🇯"); // flag: Djibouti
#[doc="flag: Dominica 🇩🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DOMINICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DOMINICA); // 🇩🇲 (`U+1F1E9 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_DOMINICA.to_string().as_str(), \"🇩🇲\");"]
#[doc="```"]
pub static FLAG_DOMINICA :  Emoji = Emoji::new("flag: Dominica", "🇩🇲"); // flag: Dominica
#[doc="flag: Dominican Republic 🇩🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_DOMINICAN_REPUBLIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_DOMINICAN_REPUBLIC); // 🇩🇴 (`U+1F1E9 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_DOMINICAN_REPUBLIC.to_string().as_str(), \"🇩🇴\");"]
#[doc="```"]
pub static FLAG_DOMINICAN_REPUBLIC :  Emoji = Emoji::new("flag: Dominican Republic", "🇩🇴"); // flag: Dominican Republic
#[doc="flag: Ecuador 🇪🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ECUADOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ECUADOR); // 🇪🇨 (`U+1F1EA U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ECUADOR.to_string().as_str(), \"🇪🇨\");"]
#[doc="```"]
pub static FLAG_ECUADOR :  Emoji = Emoji::new("flag: Ecuador", "🇪🇨"); // flag: Ecuador
#[doc="flag: Egypt 🇪🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EGYPT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EGYPT); // 🇪🇬 (`U+1F1EA U+1F1EC`)"] #[doc="# assert_eq!(FLAG_EGYPT.to_string().as_str(), \"🇪🇬\");"]
#[doc="```"]
pub static FLAG_EGYPT :  Emoji = Emoji::new("flag: Egypt", "🇪🇬"); // flag: Egypt
#[doc="flag: El Salvador 🇸🇻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EL_SALVADOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EL_SALVADOR); // 🇸🇻 (`U+1F1F8 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_EL_SALVADOR.to_string().as_str(), \"🇸🇻\");"]
#[doc="```"]
pub static FLAG_EL_SALVADOR :  Emoji = Emoji::new("flag: El Salvador", "🇸🇻"); // flag: El Salvador
#[doc="flag: Equatorial Guinea 🇬🇶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EQUATORIAL_GUINEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EQUATORIAL_GUINEA); // 🇬🇶 (`U+1F1EC U+1F1F6`)"] #[doc="# assert_eq!(FLAG_EQUATORIAL_GUINEA.to_string().as_str(), \"🇬🇶\");"]
#[doc="```"]
pub static FLAG_EQUATORIAL_GUINEA :  Emoji = Emoji::new("flag: Equatorial Guinea", "🇬🇶"); // flag: Equatorial Guinea
#[doc="flag: Eritrea 🇪🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ERITREA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ERITREA); // 🇪🇷 (`U+1F1EA U+1F1F7`)"] #[doc="# assert_eq!(FLAG_ERITREA.to_string().as_str(), \"🇪🇷\");"]
#[doc="```"]
pub static FLAG_ERITREA :  Emoji = Emoji::new("flag: Eritrea", "🇪🇷"); // flag: Eritrea
#[doc="flag: Estonia 🇪🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ESTONIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ESTONIA); // 🇪🇪 (`U+1F1EA U+1F1EA`)"] #[doc="# assert_eq!(FLAG_ESTONIA.to_string().as_str(), \"🇪🇪\");"]
#[doc="```"]
pub static FLAG_ESTONIA :  Emoji = Emoji::new("flag: Estonia", "🇪🇪"); // flag: Estonia
#[doc="flag: Eswatini 🇸🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ESWATINI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ESWATINI); // 🇸🇿 (`U+1F1F8 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_ESWATINI.to_string().as_str(), \"🇸🇿\");"]
#[doc="```"]
pub static FLAG_ESWATINI :  Emoji = Emoji::new("flag: Eswatini", "🇸🇿"); // flag: Eswatini
#[doc="flag: Ethiopia 🇪🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ETHIOPIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ETHIOPIA); // 🇪🇹 (`U+1F1EA U+1F1F9`)"] #[doc="# assert_eq!(FLAG_ETHIOPIA.to_string().as_str(), \"🇪🇹\");"]
#[doc="```"]
pub static FLAG_ETHIOPIA :  Emoji = Emoji::new("flag: Ethiopia", "🇪🇹"); // flag: Ethiopia
#[doc="flag: European Union 🇪🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_EUROPEAN_UNION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_EUROPEAN_UNION); // 🇪🇺 (`U+1F1EA U+1F1FA`)"] #[doc="# assert_eq!(FLAG_EUROPEAN_UNION.to_string().as_str(), \"🇪🇺\");"]
#[doc="```"]
pub static FLAG_EUROPEAN_UNION :  Emoji = Emoji::new("flag: European Union", "🇪🇺"); // flag: European Union
#[doc="flag: Falkland Islands 🇫🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FALKLAND_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FALKLAND_ISLANDS); // 🇫🇰 (`U+1F1EB U+1F1F0`)"] #[doc="# assert_eq!(FLAG_FALKLAND_ISLANDS.to_string().as_str(), \"🇫🇰\");"]
#[doc="```"]
pub static FLAG_FALKLAND_ISLANDS :  Emoji = Emoji::new("flag: Falkland Islands", "🇫🇰"); // flag: Falkland Islands
#[doc="flag: Faroe Islands 🇫🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FAROE_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FAROE_ISLANDS); // 🇫🇴 (`U+1F1EB U+1F1F4`)"] #[doc="# assert_eq!(FLAG_FAROE_ISLANDS.to_string().as_str(), \"🇫🇴\");"]
#[doc="```"]
pub static FLAG_FAROE_ISLANDS :  Emoji = Emoji::new("flag: Faroe Islands", "🇫🇴"); // flag: Faroe Islands
#[doc="flag: Fiji 🇫🇯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FIJI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FIJI); // 🇫🇯 (`U+1F1EB U+1F1EF`)"] #[doc="# assert_eq!(FLAG_FIJI.to_string().as_str(), \"🇫🇯\");"]
#[doc="```"]
pub static FLAG_FIJI :  Emoji = Emoji::new("flag: Fiji", "🇫🇯"); // flag: Fiji
#[doc="flag: Finland 🇫🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FINLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FINLAND); // 🇫🇮 (`U+1F1EB U+1F1EE`)"] #[doc="# assert_eq!(FLAG_FINLAND.to_string().as_str(), \"🇫🇮\");"]
#[doc="```"]
pub static FLAG_FINLAND :  Emoji = Emoji::new("flag: Finland", "🇫🇮"); // flag: Finland
#[doc="flag: France 🇫🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRANCE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRANCE); // 🇫🇷 (`U+1F1EB U+1F1F7`)"] #[doc="# assert_eq!(FLAG_FRANCE.to_string().as_str(), \"🇫🇷\");"]
#[doc="```"]
pub static FLAG_FRANCE :  Emoji = Emoji::new("flag: France", "🇫🇷"); // flag: France
#[doc="flag: French Guiana 🇬🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRENCH_GUIANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRENCH_GUIANA); // 🇬🇫 (`U+1F1EC U+1F1EB`)"] #[doc="# assert_eq!(FLAG_FRENCH_GUIANA.to_string().as_str(), \"🇬🇫\");"]
#[doc="```"]
pub static FLAG_FRENCH_GUIANA :  Emoji = Emoji::new("flag: French Guiana", "🇬🇫"); // flag: French Guiana
#[doc="flag: French Polynesia 🇵🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRENCH_POLYNESIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRENCH_POLYNESIA); // 🇵🇫 (`U+1F1F5 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_FRENCH_POLYNESIA.to_string().as_str(), \"🇵🇫\");"]
#[doc="```"]
pub static FLAG_FRENCH_POLYNESIA :  Emoji = Emoji::new("flag: French Polynesia", "🇵🇫"); // flag: French Polynesia
#[doc="flag: French Southern Territories 🇹🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_FRENCH_SOUTHERN_TERRITORIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_FRENCH_SOUTHERN_TERRITORIES); // 🇹🇫 (`U+1F1F9 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_FRENCH_SOUTHERN_TERRITORIES.to_string().as_str(), \"🇹🇫\");"]
#[doc="```"]
pub static FLAG_FRENCH_SOUTHERN_TERRITORIES :  Emoji = Emoji::new("flag: French Southern Territories", "🇹🇫"); // flag: French Southern Territories
#[doc="flag: Gabon 🇬🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GABON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GABON); // 🇬🇦 (`U+1F1EC U+1F1E6`)"] #[doc="# assert_eq!(FLAG_GABON.to_string().as_str(), \"🇬🇦\");"]
#[doc="```"]
pub static FLAG_GABON :  Emoji = Emoji::new("flag: Gabon", "🇬🇦"); // flag: Gabon
#[doc="flag: Gambia 🇬🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GAMBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GAMBIA); // 🇬🇲 (`U+1F1EC U+1F1F2`)"] #[doc="# assert_eq!(FLAG_GAMBIA.to_string().as_str(), \"🇬🇲\");"]
#[doc="```"]
pub static FLAG_GAMBIA :  Emoji = Emoji::new("flag: Gambia", "🇬🇲"); // flag: Gambia
#[doc="flag: Georgia 🇬🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GEORGIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GEORGIA); // 🇬🇪 (`U+1F1EC U+1F1EA`)"] #[doc="# assert_eq!(FLAG_GEORGIA.to_string().as_str(), \"🇬🇪\");"]
#[doc="```"]
pub static FLAG_GEORGIA :  Emoji = Emoji::new("flag: Georgia", "🇬🇪"); // flag: Georgia
#[doc="flag: Germany 🇩🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GERMANY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GERMANY); // 🇩🇪 (`U+1F1E9 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_GERMANY.to_string().as_str(), \"🇩🇪\");"]
#[doc="```"]
pub static FLAG_GERMANY :  Emoji = Emoji::new("flag: Germany", "🇩🇪"); // flag: Germany
#[doc="flag: Ghana 🇬🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GHANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GHANA); // 🇬🇭 (`U+1F1EC U+1F1ED`)"] #[doc="# assert_eq!(FLAG_GHANA.to_string().as_str(), \"🇬🇭\");"]
#[doc="```"]
pub static FLAG_GHANA :  Emoji = Emoji::new("flag: Ghana", "🇬🇭"); // flag: Ghana
#[doc="flag: Gibraltar 🇬🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GIBRALTAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GIBRALTAR); // 🇬🇮 (`U+1F1EC U+1F1EE`)"] #[doc="# assert_eq!(FLAG_GIBRALTAR.to_string().as_str(), \"🇬🇮\");"]
#[doc="```"]
pub static FLAG_GIBRALTAR :  Emoji = Emoji::new("flag: Gibraltar", "🇬🇮"); // flag: Gibraltar
#[doc="flag: Greece 🇬🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GREECE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GREECE); // 🇬🇷 (`U+1F1EC U+1F1F7`)"] #[doc="# assert_eq!(FLAG_GREECE.to_string().as_str(), \"🇬🇷\");"]
#[doc="```"]
pub static FLAG_GREECE :  Emoji = Emoji::new("flag: Greece", "🇬🇷"); // flag: Greece
#[doc="flag: Greenland 🇬🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GREENLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GREENLAND); // 🇬🇱 (`U+1F1EC U+1F1F1`)"] #[doc="# assert_eq!(FLAG_GREENLAND.to_string().as_str(), \"🇬🇱\");"]
#[doc="```"]
pub static FLAG_GREENLAND :  Emoji = Emoji::new("flag: Greenland", "🇬🇱"); // flag: Greenland
#[doc="flag: Grenada 🇬🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GRENADA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GRENADA); // 🇬🇩 (`U+1F1EC U+1F1E9`)"] #[doc="# assert_eq!(FLAG_GRENADA.to_string().as_str(), \"🇬🇩\");"]
#[doc="```"]
pub static FLAG_GRENADA :  Emoji = Emoji::new("flag: Grenada", "🇬🇩"); // flag: Grenada
#[doc="flag: Guadeloupe 🇬🇵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUADELOUPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUADELOUPE); // 🇬🇵 (`U+1F1EC U+1F1F5`)"] #[doc="# assert_eq!(FLAG_GUADELOUPE.to_string().as_str(), \"🇬🇵\");"]
#[doc="```"]
pub static FLAG_GUADELOUPE :  Emoji = Emoji::new("flag: Guadeloupe", "🇬🇵"); // flag: Guadeloupe
#[doc="flag: Guam 🇬🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUAM); // 🇬🇺 (`U+1F1EC U+1F1FA`)"] #[doc="# assert_eq!(FLAG_GUAM.to_string().as_str(), \"🇬🇺\");"]
#[doc="```"]
pub static FLAG_GUAM :  Emoji = Emoji::new("flag: Guam", "🇬🇺"); // flag: Guam
#[doc="flag: Guatemala 🇬🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUATEMALA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUATEMALA); // 🇬🇹 (`U+1F1EC U+1F1F9`)"] #[doc="# assert_eq!(FLAG_GUATEMALA.to_string().as_str(), \"🇬🇹\");"]
#[doc="```"]
pub static FLAG_GUATEMALA :  Emoji = Emoji::new("flag: Guatemala", "🇬🇹"); // flag: Guatemala
#[doc="flag: Guernsey 🇬🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUERNSEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUERNSEY); // 🇬🇬 (`U+1F1EC U+1F1EC`)"] #[doc="# assert_eq!(FLAG_GUERNSEY.to_string().as_str(), \"🇬🇬\");"]
#[doc="```"]
pub static FLAG_GUERNSEY :  Emoji = Emoji::new("flag: Guernsey", "🇬🇬"); // flag: Guernsey
#[doc="flag: Guinea 🇬🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUINEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUINEA); // 🇬🇳 (`U+1F1EC U+1F1F3`)"] #[doc="# assert_eq!(FLAG_GUINEA.to_string().as_str(), \"🇬🇳\");"]
#[doc="```"]
pub static FLAG_GUINEA :  Emoji = Emoji::new("flag: Guinea", "🇬🇳"); // flag: Guinea
#[doc="flag: Guinea-Bissau 🇬🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUINEA_BISSAU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUINEA_BISSAU); // 🇬🇼 (`U+1F1EC U+1F1FC`)"] #[doc="# assert_eq!(FLAG_GUINEA_BISSAU.to_string().as_str(), \"🇬🇼\");"]
#[doc="```"]
pub static FLAG_GUINEA_BISSAU :  Emoji = Emoji::new("flag: Guinea-Bissau", "🇬🇼"); // flag: Guinea-Bissau
#[doc="flag: Guyana 🇬🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_GUYANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_GUYANA); // 🇬🇾 (`U+1F1EC U+1F1FE`)"] #[doc="# assert_eq!(FLAG_GUYANA.to_string().as_str(), \"🇬🇾\");"]
#[doc="```"]
pub static FLAG_GUYANA :  Emoji = Emoji::new("flag: Guyana", "🇬🇾"); // flag: Guyana
#[doc="flag: Haiti 🇭🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HAITI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HAITI); // 🇭🇹 (`U+1F1ED U+1F1F9`)"] #[doc="# assert_eq!(FLAG_HAITI.to_string().as_str(), \"🇭🇹\");"]
#[doc="```"]
pub static FLAG_HAITI :  Emoji = Emoji::new("flag: Haiti", "🇭🇹"); // flag: Haiti
#[doc="flag: Heard & McDonald Islands 🇭🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HEARD_AND_MCDONALD_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HEARD_AND_MCDONALD_ISLANDS); // 🇭🇲 (`U+1F1ED U+1F1F2`)"] #[doc="# assert_eq!(FLAG_HEARD_AND_MCDONALD_ISLANDS.to_string().as_str(), \"🇭🇲\");"]
#[doc="```"]
pub static FLAG_HEARD_AND_MCDONALD_ISLANDS :  Emoji = Emoji::new("flag: Heard & McDonald Islands", "🇭🇲"); // flag: Heard & McDonald Islands
#[doc="flag: Honduras 🇭🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HONDURAS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HONDURAS); // 🇭🇳 (`U+1F1ED U+1F1F3`)"] #[doc="# assert_eq!(FLAG_HONDURAS.to_string().as_str(), \"🇭🇳\");"]
#[doc="```"]
pub static FLAG_HONDURAS :  Emoji = Emoji::new("flag: Honduras", "🇭🇳"); // flag: Honduras
#[doc="flag: Hong Kong SAR China 🇭🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HONG_KONG_SAR_CHINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HONG_KONG_SAR_CHINA); // 🇭🇰 (`U+1F1ED U+1F1F0`)"] #[doc="# assert_eq!(FLAG_HONG_KONG_SAR_CHINA.to_string().as_str(), \"🇭🇰\");"]
#[doc="```"]
pub static FLAG_HONG_KONG_SAR_CHINA :  Emoji = Emoji::new("flag: Hong Kong SAR China", "🇭🇰"); // flag: Hong Kong SAR China
#[doc="flag: Hungary 🇭🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_HUNGARY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_HUNGARY); // 🇭🇺 (`U+1F1ED U+1F1FA`)"] #[doc="# assert_eq!(FLAG_HUNGARY.to_string().as_str(), \"🇭🇺\");"]
#[doc="```"]
pub static FLAG_HUNGARY :  Emoji = Emoji::new("flag: Hungary", "🇭🇺"); // flag: Hungary
#[doc="flag: Iceland 🇮🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ICELAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ICELAND); // 🇮🇸 (`U+1F1EE U+1F1F8`)"] #[doc="# assert_eq!(FLAG_ICELAND.to_string().as_str(), \"🇮🇸\");"]
#[doc="```"]
pub static FLAG_ICELAND :  Emoji = Emoji::new("flag: Iceland", "🇮🇸"); // flag: Iceland
#[doc="flag: India 🇮🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_INDIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_INDIA); // 🇮🇳 (`U+1F1EE U+1F1F3`)"] #[doc="# assert_eq!(FLAG_INDIA.to_string().as_str(), \"🇮🇳\");"]
#[doc="```"]
pub static FLAG_INDIA :  Emoji = Emoji::new("flag: India", "🇮🇳"); // flag: India
#[doc="flag: Indonesia 🇮🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_INDONESIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_INDONESIA); // 🇮🇩 (`U+1F1EE U+1F1E9`)"] #[doc="# assert_eq!(FLAG_INDONESIA.to_string().as_str(), \"🇮🇩\");"]
#[doc="```"]
pub static FLAG_INDONESIA :  Emoji = Emoji::new("flag: Indonesia", "🇮🇩"); // flag: Indonesia
#[doc="flag: Iran 🇮🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IRAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IRAN); // 🇮🇷 (`U+1F1EE U+1F1F7`)"] #[doc="# assert_eq!(FLAG_IRAN.to_string().as_str(), \"🇮🇷\");"]
#[doc="```"]
pub static FLAG_IRAN :  Emoji = Emoji::new("flag: Iran", "🇮🇷"); // flag: Iran
#[doc="flag: Iraq 🇮🇶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IRAQ;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IRAQ); // 🇮🇶 (`U+1F1EE U+1F1F6`)"] #[doc="# assert_eq!(FLAG_IRAQ.to_string().as_str(), \"🇮🇶\");"]
#[doc="```"]
pub static FLAG_IRAQ :  Emoji = Emoji::new("flag: Iraq", "🇮🇶"); // flag: Iraq
#[doc="flag: Ireland 🇮🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_IRELAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_IRELAND); // 🇮🇪 (`U+1F1EE U+1F1EA`)"] #[doc="# assert_eq!(FLAG_IRELAND.to_string().as_str(), \"🇮🇪\");"]
#[doc="```"]
pub static FLAG_IRELAND :  Emoji = Emoji::new("flag: Ireland", "🇮🇪"); // flag: Ireland
#[doc="flag: Isle of Man 🇮🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ISLE_OF_MAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ISLE_OF_MAN); // 🇮🇲 (`U+1F1EE U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ISLE_OF_MAN.to_string().as_str(), \"🇮🇲\");"]
#[doc="```"]
pub static FLAG_ISLE_OF_MAN :  Emoji = Emoji::new("flag: Isle of Man", "🇮🇲"); // flag: Isle of Man
#[doc="flag: Israel 🇮🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ISRAEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ISRAEL); // 🇮🇱 (`U+1F1EE U+1F1F1`)"] #[doc="# assert_eq!(FLAG_ISRAEL.to_string().as_str(), \"🇮🇱\");"]
#[doc="```"]
pub static FLAG_ISRAEL :  Emoji = Emoji::new("flag: Israel", "🇮🇱"); // flag: Israel
#[doc="flag: Italy 🇮🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ITALY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ITALY); // 🇮🇹 (`U+1F1EE U+1F1F9`)"] #[doc="# assert_eq!(FLAG_ITALY.to_string().as_str(), \"🇮🇹\");"]
#[doc="```"]
pub static FLAG_ITALY :  Emoji = Emoji::new("flag: Italy", "🇮🇹"); // flag: Italy
#[doc="flag: Jamaica 🇯🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JAMAICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JAMAICA); // 🇯🇲 (`U+1F1EF U+1F1F2`)"] #[doc="# assert_eq!(FLAG_JAMAICA.to_string().as_str(), \"🇯🇲\");"]
#[doc="```"]
pub static FLAG_JAMAICA :  Emoji = Emoji::new("flag: Jamaica", "🇯🇲"); // flag: Jamaica
#[doc="flag: Japan 🇯🇵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JAPAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JAPAN); // 🇯🇵 (`U+1F1EF U+1F1F5`)"] #[doc="# assert_eq!(FLAG_JAPAN.to_string().as_str(), \"🇯🇵\");"]
#[doc="```"]
pub static FLAG_JAPAN :  Emoji = Emoji::new("flag: Japan", "🇯🇵"); // flag: Japan
#[doc="flag: Jersey 🇯🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JERSEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JERSEY); // 🇯🇪 (`U+1F1EF U+1F1EA`)"] #[doc="# assert_eq!(FLAG_JERSEY.to_string().as_str(), \"🇯🇪\");"]
#[doc="```"]
pub static FLAG_JERSEY :  Emoji = Emoji::new("flag: Jersey", "🇯🇪"); // flag: Jersey
#[doc="flag: Jordan 🇯🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_JORDAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_JORDAN); // 🇯🇴 (`U+1F1EF U+1F1F4`)"] #[doc="# assert_eq!(FLAG_JORDAN.to_string().as_str(), \"🇯🇴\");"]
#[doc="```"]
pub static FLAG_JORDAN :  Emoji = Emoji::new("flag: Jordan", "🇯🇴"); // flag: Jordan
#[doc="flag: Kazakhstan 🇰🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KAZAKHSTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KAZAKHSTAN); // 🇰🇿 (`U+1F1F0 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_KAZAKHSTAN.to_string().as_str(), \"🇰🇿\");"]
#[doc="```"]
pub static FLAG_KAZAKHSTAN :  Emoji = Emoji::new("flag: Kazakhstan", "🇰🇿"); // flag: Kazakhstan
#[doc="flag: Kenya 🇰🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KENYA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KENYA); // 🇰🇪 (`U+1F1F0 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_KENYA.to_string().as_str(), \"🇰🇪\");"]
#[doc="```"]
pub static FLAG_KENYA :  Emoji = Emoji::new("flag: Kenya", "🇰🇪"); // flag: Kenya
#[doc="flag: Kiribati 🇰🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KIRIBATI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KIRIBATI); // 🇰🇮 (`U+1F1F0 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_KIRIBATI.to_string().as_str(), \"🇰🇮\");"]
#[doc="```"]
pub static FLAG_KIRIBATI :  Emoji = Emoji::new("flag: Kiribati", "🇰🇮"); // flag: Kiribati
#[doc="flag: Kosovo 🇽🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KOSOVO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KOSOVO); // 🇽🇰 (`U+1F1FD U+1F1F0`)"] #[doc="# assert_eq!(FLAG_KOSOVO.to_string().as_str(), \"🇽🇰\");"]
#[doc="```"]
pub static FLAG_KOSOVO :  Emoji = Emoji::new("flag: Kosovo", "🇽🇰"); // flag: Kosovo
#[doc="flag: Kuwait 🇰🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KUWAIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KUWAIT); // 🇰🇼 (`U+1F1F0 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_KUWAIT.to_string().as_str(), \"🇰🇼\");"]
#[doc="```"]
pub static FLAG_KUWAIT :  Emoji = Emoji::new("flag: Kuwait", "🇰🇼"); // flag: Kuwait
#[doc="flag: Kyrgyzstan 🇰🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_KYRGYZSTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_KYRGYZSTAN); // 🇰🇬 (`U+1F1F0 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_KYRGYZSTAN.to_string().as_str(), \"🇰🇬\");"]
#[doc="```"]
pub static FLAG_KYRGYZSTAN :  Emoji = Emoji::new("flag: Kyrgyzstan", "🇰🇬"); // flag: Kyrgyzstan
#[doc="flag: Laos 🇱🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LAOS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LAOS); // 🇱🇦 (`U+1F1F1 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_LAOS.to_string().as_str(), \"🇱🇦\");"]
#[doc="```"]
pub static FLAG_LAOS :  Emoji = Emoji::new("flag: Laos", "🇱🇦"); // flag: Laos
#[doc="flag: Latvia 🇱🇻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LATVIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LATVIA); // 🇱🇻 (`U+1F1F1 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_LATVIA.to_string().as_str(), \"🇱🇻\");"]
#[doc="```"]
pub static FLAG_LATVIA :  Emoji = Emoji::new("flag: Latvia", "🇱🇻"); // flag: Latvia
#[doc="flag: Lebanon 🇱🇧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LEBANON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LEBANON); // 🇱🇧 (`U+1F1F1 U+1F1E7`)"] #[doc="# assert_eq!(FLAG_LEBANON.to_string().as_str(), \"🇱🇧\");"]
#[doc="```"]
pub static FLAG_LEBANON :  Emoji = Emoji::new("flag: Lebanon", "🇱🇧"); // flag: Lebanon
#[doc="flag: Lesotho 🇱🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LESOTHO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LESOTHO); // 🇱🇸 (`U+1F1F1 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_LESOTHO.to_string().as_str(), \"🇱🇸\");"]
#[doc="```"]
pub static FLAG_LESOTHO :  Emoji = Emoji::new("flag: Lesotho", "🇱🇸"); // flag: Lesotho
#[doc="flag: Liberia 🇱🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LIBERIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LIBERIA); // 🇱🇷 (`U+1F1F1 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_LIBERIA.to_string().as_str(), \"🇱🇷\");"]
#[doc="```"]
pub static FLAG_LIBERIA :  Emoji = Emoji::new("flag: Liberia", "🇱🇷"); // flag: Liberia
#[doc="flag: Libya 🇱🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LIBYA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LIBYA); // 🇱🇾 (`U+1F1F1 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_LIBYA.to_string().as_str(), \"🇱🇾\");"]
#[doc="```"]
pub static FLAG_LIBYA :  Emoji = Emoji::new("flag: Libya", "🇱🇾"); // flag: Libya
#[doc="flag: Liechtenstein 🇱🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LIECHTENSTEIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LIECHTENSTEIN); // 🇱🇮 (`U+1F1F1 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_LIECHTENSTEIN.to_string().as_str(), \"🇱🇮\");"]
#[doc="```"]
pub static FLAG_LIECHTENSTEIN :  Emoji = Emoji::new("flag: Liechtenstein", "🇱🇮"); // flag: Liechtenstein
#[doc="flag: Lithuania 🇱🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LITHUANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LITHUANIA); // 🇱🇹 (`U+1F1F1 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_LITHUANIA.to_string().as_str(), \"🇱🇹\");"]
#[doc="```"]
pub static FLAG_LITHUANIA :  Emoji = Emoji::new("flag: Lithuania", "🇱🇹"); // flag: Lithuania
#[doc="flag: Luxembourg 🇱🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_LUXEMBOURG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_LUXEMBOURG); // 🇱🇺 (`U+1F1F1 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_LUXEMBOURG.to_string().as_str(), \"🇱🇺\");"]
#[doc="```"]
pub static FLAG_LUXEMBOURG :  Emoji = Emoji::new("flag: Luxembourg", "🇱🇺"); // flag: Luxembourg
#[doc="flag: Macao SAR China 🇲🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MACAO_SAR_CHINA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MACAO_SAR_CHINA); // 🇲🇴 (`U+1F1F2 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_MACAO_SAR_CHINA.to_string().as_str(), \"🇲🇴\");"]
#[doc="```"]
pub static FLAG_MACAO_SAR_CHINA :  Emoji = Emoji::new("flag: Macao SAR China", "🇲🇴"); // flag: Macao SAR China
#[doc="flag: Madagascar 🇲🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MADAGASCAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MADAGASCAR); // 🇲🇬 (`U+1F1F2 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_MADAGASCAR.to_string().as_str(), \"🇲🇬\");"]
#[doc="```"]
pub static FLAG_MADAGASCAR :  Emoji = Emoji::new("flag: Madagascar", "🇲🇬"); // flag: Madagascar
#[doc="flag: Malawi 🇲🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALAWI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALAWI); // 🇲🇼 (`U+1F1F2 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_MALAWI.to_string().as_str(), \"🇲🇼\");"]
#[doc="```"]
pub static FLAG_MALAWI :  Emoji = Emoji::new("flag: Malawi", "🇲🇼"); // flag: Malawi
#[doc="flag: Malaysia 🇲🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALAYSIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALAYSIA); // 🇲🇾 (`U+1F1F2 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_MALAYSIA.to_string().as_str(), \"🇲🇾\");"]
#[doc="```"]
pub static FLAG_MALAYSIA :  Emoji = Emoji::new("flag: Malaysia", "🇲🇾"); // flag: Malaysia
#[doc="flag: Maldives 🇲🇻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALDIVES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALDIVES); // 🇲🇻 (`U+1F1F2 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_MALDIVES.to_string().as_str(), \"🇲🇻\");"]
#[doc="```"]
pub static FLAG_MALDIVES :  Emoji = Emoji::new("flag: Maldives", "🇲🇻"); // flag: Maldives
#[doc="flag: Mali 🇲🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALI); // 🇲🇱 (`U+1F1F2 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_MALI.to_string().as_str(), \"🇲🇱\");"]
#[doc="```"]
pub static FLAG_MALI :  Emoji = Emoji::new("flag: Mali", "🇲🇱"); // flag: Mali
#[doc="flag: Malta 🇲🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MALTA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MALTA); // 🇲🇹 (`U+1F1F2 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_MALTA.to_string().as_str(), \"🇲🇹\");"]
#[doc="```"]
pub static FLAG_MALTA :  Emoji = Emoji::new("flag: Malta", "🇲🇹"); // flag: Malta
#[doc="flag: Marshall Islands 🇲🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MARSHALL_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MARSHALL_ISLANDS); // 🇲🇭 (`U+1F1F2 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_MARSHALL_ISLANDS.to_string().as_str(), \"🇲🇭\");"]
#[doc="```"]
pub static FLAG_MARSHALL_ISLANDS :  Emoji = Emoji::new("flag: Marshall Islands", "🇲🇭"); // flag: Marshall Islands
#[doc="flag: Martinique 🇲🇶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MARTINIQUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MARTINIQUE); // 🇲🇶 (`U+1F1F2 U+1F1F6`)"] #[doc="# assert_eq!(FLAG_MARTINIQUE.to_string().as_str(), \"🇲🇶\");"]
#[doc="```"]
pub static FLAG_MARTINIQUE :  Emoji = Emoji::new("flag: Martinique", "🇲🇶"); // flag: Martinique
#[doc="flag: Mauritania 🇲🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MAURITANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MAURITANIA); // 🇲🇷 (`U+1F1F2 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_MAURITANIA.to_string().as_str(), \"🇲🇷\");"]
#[doc="```"]
pub static FLAG_MAURITANIA :  Emoji = Emoji::new("flag: Mauritania", "🇲🇷"); // flag: Mauritania
#[doc="flag: Mauritius 🇲🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MAURITIUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MAURITIUS); // 🇲🇺 (`U+1F1F2 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_MAURITIUS.to_string().as_str(), \"🇲🇺\");"]
#[doc="```"]
pub static FLAG_MAURITIUS :  Emoji = Emoji::new("flag: Mauritius", "🇲🇺"); // flag: Mauritius
#[doc="flag: Mayotte 🇾🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MAYOTTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MAYOTTE); // 🇾🇹 (`U+1F1FE U+1F1F9`)"] #[doc="# assert_eq!(FLAG_MAYOTTE.to_string().as_str(), \"🇾🇹\");"]
#[doc="```"]
pub static FLAG_MAYOTTE :  Emoji = Emoji::new("flag: Mayotte", "🇾🇹"); // flag: Mayotte
#[doc="flag: Mexico 🇲🇽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MEXICO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MEXICO); // 🇲🇽 (`U+1F1F2 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_MEXICO.to_string().as_str(), \"🇲🇽\");"]
#[doc="```"]
pub static FLAG_MEXICO :  Emoji = Emoji::new("flag: Mexico", "🇲🇽"); // flag: Mexico
#[doc="flag: Micronesia 🇫🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MICRONESIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MICRONESIA); // 🇫🇲 (`U+1F1EB U+1F1F2`)"] #[doc="# assert_eq!(FLAG_MICRONESIA.to_string().as_str(), \"🇫🇲\");"]
#[doc="```"]
pub static FLAG_MICRONESIA :  Emoji = Emoji::new("flag: Micronesia", "🇫🇲"); // flag: Micronesia
#[doc="flag: Moldova 🇲🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MOLDOVA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MOLDOVA); // 🇲🇩 (`U+1F1F2 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_MOLDOVA.to_string().as_str(), \"🇲🇩\");"]
#[doc="```"]
pub static FLAG_MOLDOVA :  Emoji = Emoji::new("flag: Moldova", "🇲🇩"); // flag: Moldova
#[doc="flag: Monaco 🇲🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONACO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONACO); // 🇲🇨 (`U+1F1F2 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_MONACO.to_string().as_str(), \"🇲🇨\");"]
#[doc="```"]
pub static FLAG_MONACO :  Emoji = Emoji::new("flag: Monaco", "🇲🇨"); // flag: Monaco
#[doc="flag: Mongolia 🇲🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONGOLIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONGOLIA); // 🇲🇳 (`U+1F1F2 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_MONGOLIA.to_string().as_str(), \"🇲🇳\");"]
#[doc="```"]
pub static FLAG_MONGOLIA :  Emoji = Emoji::new("flag: Mongolia", "🇲🇳"); // flag: Mongolia
#[doc="flag: Montenegro 🇲🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONTENEGRO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONTENEGRO); // 🇲🇪 (`U+1F1F2 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_MONTENEGRO.to_string().as_str(), \"🇲🇪\");"]
#[doc="```"]
pub static FLAG_MONTENEGRO :  Emoji = Emoji::new("flag: Montenegro", "🇲🇪"); // flag: Montenegro
#[doc="flag: Montserrat 🇲🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MONTSERRAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MONTSERRAT); // 🇲🇸 (`U+1F1F2 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_MONTSERRAT.to_string().as_str(), \"🇲🇸\");"]
#[doc="```"]
pub static FLAG_MONTSERRAT :  Emoji = Emoji::new("flag: Montserrat", "🇲🇸"); // flag: Montserrat
#[doc="flag: Morocco 🇲🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MOROCCO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MOROCCO); // 🇲🇦 (`U+1F1F2 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_MOROCCO.to_string().as_str(), \"🇲🇦\");"]
#[doc="```"]
pub static FLAG_MOROCCO :  Emoji = Emoji::new("flag: Morocco", "🇲🇦"); // flag: Morocco
#[doc="flag: Mozambique 🇲🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MOZAMBIQUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MOZAMBIQUE); // 🇲🇿 (`U+1F1F2 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_MOZAMBIQUE.to_string().as_str(), \"🇲🇿\");"]
#[doc="```"]
pub static FLAG_MOZAMBIQUE :  Emoji = Emoji::new("flag: Mozambique", "🇲🇿"); // flag: Mozambique
#[doc="flag: Myanmar (Burma) 🇲🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_MYANMAR_BURMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_MYANMAR_BURMA); // 🇲🇲 (`U+1F1F2 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_MYANMAR_BURMA.to_string().as_str(), \"🇲🇲\");"]
#[doc="```"]
pub static FLAG_MYANMAR_BURMA :  Emoji = Emoji::new("flag: Myanmar (Burma)", "🇲🇲"); // flag: Myanmar (Burma)
#[doc="flag: Namibia 🇳🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NAMIBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NAMIBIA); // 🇳🇦 (`U+1F1F3 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_NAMIBIA.to_string().as_str(), \"🇳🇦\");"]
#[doc="```"]
pub static FLAG_NAMIBIA :  Emoji = Emoji::new("flag: Namibia", "🇳🇦"); // flag: Namibia
#[doc="flag: Nauru 🇳🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NAURU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NAURU); // 🇳🇷 (`U+1F1F3 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_NAURU.to_string().as_str(), \"🇳🇷\");"]
#[doc="```"]
pub static FLAG_NAURU :  Emoji = Emoji::new("flag: Nauru", "🇳🇷"); // flag: Nauru
#[doc="flag: Nepal 🇳🇵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NEPAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NEPAL); // 🇳🇵 (`U+1F1F3 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_NEPAL.to_string().as_str(), \"🇳🇵\");"]
#[doc="```"]
pub static FLAG_NEPAL :  Emoji = Emoji::new("flag: Nepal", "🇳🇵"); // flag: Nepal
#[doc="flag: Netherlands 🇳🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NETHERLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NETHERLANDS); // 🇳🇱 (`U+1F1F3 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_NETHERLANDS.to_string().as_str(), \"🇳🇱\");"]
#[doc="```"]
pub static FLAG_NETHERLANDS :  Emoji = Emoji::new("flag: Netherlands", "🇳🇱"); // flag: Netherlands
#[doc="flag: New Caledonia 🇳🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NEW_CALEDONIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NEW_CALEDONIA); // 🇳🇨 (`U+1F1F3 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_NEW_CALEDONIA.to_string().as_str(), \"🇳🇨\");"]
#[doc="```"]
pub static FLAG_NEW_CALEDONIA :  Emoji = Emoji::new("flag: New Caledonia", "🇳🇨"); // flag: New Caledonia
#[doc="flag: New Zealand 🇳🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NEW_ZEALAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NEW_ZEALAND); // 🇳🇿 (`U+1F1F3 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_NEW_ZEALAND.to_string().as_str(), \"🇳🇿\");"]
#[doc="```"]
pub static FLAG_NEW_ZEALAND :  Emoji = Emoji::new("flag: New Zealand", "🇳🇿"); // flag: New Zealand
#[doc="flag: Nicaragua 🇳🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NICARAGUA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NICARAGUA); // 🇳🇮 (`U+1F1F3 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_NICARAGUA.to_string().as_str(), \"🇳🇮\");"]
#[doc="```"]
pub static FLAG_NICARAGUA :  Emoji = Emoji::new("flag: Nicaragua", "🇳🇮"); // flag: Nicaragua
#[doc="flag: Niger 🇳🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NIGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NIGER); // 🇳🇪 (`U+1F1F3 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_NIGER.to_string().as_str(), \"🇳🇪\");"]
#[doc="```"]
pub static FLAG_NIGER :  Emoji = Emoji::new("flag: Niger", "🇳🇪"); // flag: Niger
#[doc="flag: Nigeria 🇳🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NIGERIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NIGERIA); // 🇳🇬 (`U+1F1F3 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_NIGERIA.to_string().as_str(), \"🇳🇬\");"]
#[doc="```"]
pub static FLAG_NIGERIA :  Emoji = Emoji::new("flag: Nigeria", "🇳🇬"); // flag: Nigeria
#[doc="flag: Niue 🇳🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NIUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NIUE); // 🇳🇺 (`U+1F1F3 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_NIUE.to_string().as_str(), \"🇳🇺\");"]
#[doc="```"]
pub static FLAG_NIUE :  Emoji = Emoji::new("flag: Niue", "🇳🇺"); // flag: Niue
#[doc="flag: Norfolk Island 🇳🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORFOLK_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORFOLK_ISLAND); // 🇳🇫 (`U+1F1F3 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_NORFOLK_ISLAND.to_string().as_str(), \"🇳🇫\");"]
#[doc="```"]
pub static FLAG_NORFOLK_ISLAND :  Emoji = Emoji::new("flag: Norfolk Island", "🇳🇫"); // flag: Norfolk Island
#[doc="flag: Northern Mariana Islands 🇲🇵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORTHERN_MARIANA_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORTHERN_MARIANA_ISLANDS); // 🇲🇵 (`U+1F1F2 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_NORTHERN_MARIANA_ISLANDS.to_string().as_str(), \"🇲🇵\");"]
#[doc="```"]
pub static FLAG_NORTHERN_MARIANA_ISLANDS :  Emoji = Emoji::new("flag: Northern Mariana Islands", "🇲🇵"); // flag: Northern Mariana Islands
#[doc="flag: North Korea 🇰🇵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORTH_KOREA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORTH_KOREA); // 🇰🇵 (`U+1F1F0 U+1F1F5`)"] #[doc="# assert_eq!(FLAG_NORTH_KOREA.to_string().as_str(), \"🇰🇵\");"]
#[doc="```"]
pub static FLAG_NORTH_KOREA :  Emoji = Emoji::new("flag: North Korea", "🇰🇵"); // flag: North Korea
#[doc="flag: North Macedonia 🇲🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORTH_MACEDONIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORTH_MACEDONIA); // 🇲🇰 (`U+1F1F2 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_NORTH_MACEDONIA.to_string().as_str(), \"🇲🇰\");"]
#[doc="```"]
pub static FLAG_NORTH_MACEDONIA :  Emoji = Emoji::new("flag: North Macedonia", "🇲🇰"); // flag: North Macedonia
#[doc="flag: Norway 🇳🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_NORWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_NORWAY); // 🇳🇴 (`U+1F1F3 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_NORWAY.to_string().as_str(), \"🇳🇴\");"]
#[doc="```"]
pub static FLAG_NORWAY :  Emoji = Emoji::new("flag: Norway", "🇳🇴"); // flag: Norway
#[doc="flag: Oman 🇴🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_OMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_OMAN); // 🇴🇲 (`U+1F1F4 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_OMAN.to_string().as_str(), \"🇴🇲\");"]
#[doc="```"]
pub static FLAG_OMAN :  Emoji = Emoji::new("flag: Oman", "🇴🇲"); // flag: Oman
#[doc="flag: Pakistan 🇵🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PAKISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PAKISTAN); // 🇵🇰 (`U+1F1F5 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_PAKISTAN.to_string().as_str(), \"🇵🇰\");"]
#[doc="```"]
pub static FLAG_PAKISTAN :  Emoji = Emoji::new("flag: Pakistan", "🇵🇰"); // flag: Pakistan
#[doc="flag: Palau 🇵🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PALAU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PALAU); // 🇵🇼 (`U+1F1F5 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_PALAU.to_string().as_str(), \"🇵🇼\");"]
#[doc="```"]
pub static FLAG_PALAU :  Emoji = Emoji::new("flag: Palau", "🇵🇼"); // flag: Palau
#[doc="flag: Palestinian Territories 🇵🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PALESTINIAN_TERRITORIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PALESTINIAN_TERRITORIES); // 🇵🇸 (`U+1F1F5 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_PALESTINIAN_TERRITORIES.to_string().as_str(), \"🇵🇸\");"]
#[doc="```"]
pub static FLAG_PALESTINIAN_TERRITORIES :  Emoji = Emoji::new("flag: Palestinian Territories", "🇵🇸"); // flag: Palestinian Territories
#[doc="flag: Panama 🇵🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PANAMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PANAMA); // 🇵🇦 (`U+1F1F5 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_PANAMA.to_string().as_str(), \"🇵🇦\");"]
#[doc="```"]
pub static FLAG_PANAMA :  Emoji = Emoji::new("flag: Panama", "🇵🇦"); // flag: Panama
#[doc="flag: Papua New Guinea 🇵🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PAPUA_NEW_GUINEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PAPUA_NEW_GUINEA); // 🇵🇬 (`U+1F1F5 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_PAPUA_NEW_GUINEA.to_string().as_str(), \"🇵🇬\");"]
#[doc="```"]
pub static FLAG_PAPUA_NEW_GUINEA :  Emoji = Emoji::new("flag: Papua New Guinea", "🇵🇬"); // flag: Papua New Guinea
#[doc="flag: Paraguay 🇵🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PARAGUAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PARAGUAY); // 🇵🇾 (`U+1F1F5 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_PARAGUAY.to_string().as_str(), \"🇵🇾\");"]
#[doc="```"]
pub static FLAG_PARAGUAY :  Emoji = Emoji::new("flag: Paraguay", "🇵🇾"); // flag: Paraguay
#[doc="flag: Peru 🇵🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PERU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PERU); // 🇵🇪 (`U+1F1F5 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_PERU.to_string().as_str(), \"🇵🇪\");"]
#[doc="```"]
pub static FLAG_PERU :  Emoji = Emoji::new("flag: Peru", "🇵🇪"); // flag: Peru
#[doc="flag: Philippines 🇵🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PHILIPPINES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PHILIPPINES); // 🇵🇭 (`U+1F1F5 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_PHILIPPINES.to_string().as_str(), \"🇵🇭\");"]
#[doc="```"]
pub static FLAG_PHILIPPINES :  Emoji = Emoji::new("flag: Philippines", "🇵🇭"); // flag: Philippines
#[doc="flag: Pitcairn Islands 🇵🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PITCAIRN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PITCAIRN_ISLANDS); // 🇵🇳 (`U+1F1F5 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_PITCAIRN_ISLANDS.to_string().as_str(), \"🇵🇳\");"]
#[doc="```"]
pub static FLAG_PITCAIRN_ISLANDS :  Emoji = Emoji::new("flag: Pitcairn Islands", "🇵🇳"); // flag: Pitcairn Islands
#[doc="flag: Poland 🇵🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_POLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_POLAND); // 🇵🇱 (`U+1F1F5 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_POLAND.to_string().as_str(), \"🇵🇱\");"]
#[doc="```"]
pub static FLAG_POLAND :  Emoji = Emoji::new("flag: Poland", "🇵🇱"); // flag: Poland
#[doc="flag: Portugal 🇵🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PORTUGAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PORTUGAL); // 🇵🇹 (`U+1F1F5 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_PORTUGAL.to_string().as_str(), \"🇵🇹\");"]
#[doc="```"]
pub static FLAG_PORTUGAL :  Emoji = Emoji::new("flag: Portugal", "🇵🇹"); // flag: Portugal
#[doc="flag: Puerto Rico 🇵🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_PUERTO_RICO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_PUERTO_RICO); // 🇵🇷 (`U+1F1F5 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_PUERTO_RICO.to_string().as_str(), \"🇵🇷\");"]
#[doc="```"]
pub static FLAG_PUERTO_RICO :  Emoji = Emoji::new("flag: Puerto Rico", "🇵🇷"); // flag: Puerto Rico
#[doc="flag: Qatar 🇶🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_QATAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_QATAR); // 🇶🇦 (`U+1F1F6 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_QATAR.to_string().as_str(), \"🇶🇦\");"]
#[doc="```"]
pub static FLAG_QATAR :  Emoji = Emoji::new("flag: Qatar", "🇶🇦"); // flag: Qatar
#[doc="flag: Réunion 🇷🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_REUNION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_REUNION); // 🇷🇪 (`U+1F1F7 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_REUNION.to_string().as_str(), \"🇷🇪\");"]
#[doc="```"]
pub static FLAG_REUNION :  Emoji = Emoji::new("flag: Réunion", "🇷🇪"); // flag: Réunion
#[doc="flag: Romania 🇷🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ROMANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ROMANIA); // 🇷🇴 (`U+1F1F7 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_ROMANIA.to_string().as_str(), \"🇷🇴\");"]
#[doc="```"]
pub static FLAG_ROMANIA :  Emoji = Emoji::new("flag: Romania", "🇷🇴"); // flag: Romania
#[doc="flag: Russia 🇷🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_RUSSIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_RUSSIA); // 🇷🇺 (`U+1F1F7 U+1F1FA`)"] #[doc="# assert_eq!(FLAG_RUSSIA.to_string().as_str(), \"🇷🇺\");"]
#[doc="```"]
pub static FLAG_RUSSIA :  Emoji = Emoji::new("flag: Russia", "🇷🇺"); // flag: Russia
#[doc="flag: Rwanda 🇷🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_RWANDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_RWANDA); // 🇷🇼 (`U+1F1F7 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_RWANDA.to_string().as_str(), \"🇷🇼\");"]
#[doc="```"]
pub static FLAG_RWANDA :  Emoji = Emoji::new("flag: Rwanda", "🇷🇼"); // flag: Rwanda
#[doc="flag: Samoa 🇼🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAMOA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAMOA); // 🇼🇸 (`U+1F1FC U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SAMOA.to_string().as_str(), \"🇼🇸\");"]
#[doc="```"]
pub static FLAG_SAMOA :  Emoji = Emoji::new("flag: Samoa", "🇼🇸"); // flag: Samoa
#[doc="flag: San Marino 🇸🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAN_MARINO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAN_MARINO); // 🇸🇲 (`U+1F1F8 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_SAN_MARINO.to_string().as_str(), \"🇸🇲\");"]
#[doc="```"]
pub static FLAG_SAN_MARINO :  Emoji = Emoji::new("flag: San Marino", "🇸🇲"); // flag: San Marino
#[doc="flag: São Tomé & Príncipe 🇸🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAO_TOME_AND_PRINCIPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAO_TOME_AND_PRINCIPE); // 🇸🇹 (`U+1F1F8 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_SAO_TOME_AND_PRINCIPE.to_string().as_str(), \"🇸🇹\");"]
#[doc="```"]
pub static FLAG_SAO_TOME_AND_PRINCIPE :  Emoji = Emoji::new("flag: São Tomé & Príncipe", "🇸🇹"); // flag: São Tomé & Príncipe
#[doc="flag: Saudi Arabia 🇸🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SAUDI_ARABIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SAUDI_ARABIA); // 🇸🇦 (`U+1F1F8 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_SAUDI_ARABIA.to_string().as_str(), \"🇸🇦\");"]
#[doc="```"]
pub static FLAG_SAUDI_ARABIA :  Emoji = Emoji::new("flag: Saudi Arabia", "🇸🇦"); // flag: Saudi Arabia
#[doc="flag: Senegal 🇸🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SENEGAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SENEGAL); // 🇸🇳 (`U+1F1F8 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_SENEGAL.to_string().as_str(), \"🇸🇳\");"]
#[doc="```"]
pub static FLAG_SENEGAL :  Emoji = Emoji::new("flag: Senegal", "🇸🇳"); // flag: Senegal
#[doc="flag: Serbia 🇷🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SERBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SERBIA); // 🇷🇸 (`U+1F1F7 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SERBIA.to_string().as_str(), \"🇷🇸\");"]
#[doc="```"]
pub static FLAG_SERBIA :  Emoji = Emoji::new("flag: Serbia", "🇷🇸"); // flag: Serbia
#[doc="flag: Seychelles 🇸🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SEYCHELLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SEYCHELLES); // 🇸🇨 (`U+1F1F8 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_SEYCHELLES.to_string().as_str(), \"🇸🇨\");"]
#[doc="```"]
pub static FLAG_SEYCHELLES :  Emoji = Emoji::new("flag: Seychelles", "🇸🇨"); // flag: Seychelles
#[doc="flag: Sierra Leone 🇸🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SIERRA_LEONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SIERRA_LEONE); // 🇸🇱 (`U+1F1F8 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_SIERRA_LEONE.to_string().as_str(), \"🇸🇱\");"]
#[doc="```"]
pub static FLAG_SIERRA_LEONE :  Emoji = Emoji::new("flag: Sierra Leone", "🇸🇱"); // flag: Sierra Leone
#[doc="flag: Singapore 🇸🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SINGAPORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SINGAPORE); // 🇸🇬 (`U+1F1F8 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_SINGAPORE.to_string().as_str(), \"🇸🇬\");"]
#[doc="```"]
pub static FLAG_SINGAPORE :  Emoji = Emoji::new("flag: Singapore", "🇸🇬"); // flag: Singapore
#[doc="flag: Sint Maarten 🇸🇽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SINT_MAARTEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SINT_MAARTEN); // 🇸🇽 (`U+1F1F8 U+1F1FD`)"] #[doc="# assert_eq!(FLAG_SINT_MAARTEN.to_string().as_str(), \"🇸🇽\");"]
#[doc="```"]
pub static FLAG_SINT_MAARTEN :  Emoji = Emoji::new("flag: Sint Maarten", "🇸🇽"); // flag: Sint Maarten
#[doc="flag: Slovakia 🇸🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SLOVAKIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SLOVAKIA); // 🇸🇰 (`U+1F1F8 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_SLOVAKIA.to_string().as_str(), \"🇸🇰\");"]
#[doc="```"]
pub static FLAG_SLOVAKIA :  Emoji = Emoji::new("flag: Slovakia", "🇸🇰"); // flag: Slovakia
#[doc="flag: Slovenia 🇸🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SLOVENIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SLOVENIA); // 🇸🇮 (`U+1F1F8 U+1F1EE`)"] #[doc="# assert_eq!(FLAG_SLOVENIA.to_string().as_str(), \"🇸🇮\");"]
#[doc="```"]
pub static FLAG_SLOVENIA :  Emoji = Emoji::new("flag: Slovenia", "🇸🇮"); // flag: Slovenia
#[doc="flag: Solomon Islands 🇸🇧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOLOMON_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOLOMON_ISLANDS); // 🇸🇧 (`U+1F1F8 U+1F1E7`)"] #[doc="# assert_eq!(FLAG_SOLOMON_ISLANDS.to_string().as_str(), \"🇸🇧\");"]
#[doc="```"]
pub static FLAG_SOLOMON_ISLANDS :  Emoji = Emoji::new("flag: Solomon Islands", "🇸🇧"); // flag: Solomon Islands
#[doc="flag: Somalia 🇸🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOMALIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOMALIA); // 🇸🇴 (`U+1F1F8 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_SOMALIA.to_string().as_str(), \"🇸🇴\");"]
#[doc="```"]
pub static FLAG_SOMALIA :  Emoji = Emoji::new("flag: Somalia", "🇸🇴"); // flag: Somalia
#[doc="flag: South Africa 🇿🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_AFRICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_AFRICA); // 🇿🇦 (`U+1F1FF U+1F1E6`)"] #[doc="# assert_eq!(FLAG_SOUTH_AFRICA.to_string().as_str(), \"🇿🇦\");"]
#[doc="```"]
pub static FLAG_SOUTH_AFRICA :  Emoji = Emoji::new("flag: South Africa", "🇿🇦"); // flag: South Africa
#[doc="flag: South Georgia & South Sandwich Islands 🇬🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS); // 🇬🇸 (`U+1F1EC U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS.to_string().as_str(), \"🇬🇸\");"]
#[doc="```"]
pub static FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS :  Emoji = Emoji::new("flag: South Georgia & South Sandwich Islands", "🇬🇸"); // flag: South Georgia & South Sandwich Islands
#[doc="flag: South Korea 🇰🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_KOREA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_KOREA); // 🇰🇷 (`U+1F1F0 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_SOUTH_KOREA.to_string().as_str(), \"🇰🇷\");"]
#[doc="```"]
pub static FLAG_SOUTH_KOREA :  Emoji = Emoji::new("flag: South Korea", "🇰🇷"); // flag: South Korea
#[doc="flag: South Sudan 🇸🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SOUTH_SUDAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SOUTH_SUDAN); // 🇸🇸 (`U+1F1F8 U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SOUTH_SUDAN.to_string().as_str(), \"🇸🇸\");"]
#[doc="```"]
pub static FLAG_SOUTH_SUDAN :  Emoji = Emoji::new("flag: South Sudan", "🇸🇸"); // flag: South Sudan
#[doc="flag: Spain 🇪🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SPAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SPAIN); // 🇪🇸 (`U+1F1EA U+1F1F8`)"] #[doc="# assert_eq!(FLAG_SPAIN.to_string().as_str(), \"🇪🇸\");"]
#[doc="```"]
pub static FLAG_SPAIN :  Emoji = Emoji::new("flag: Spain", "🇪🇸"); // flag: Spain
#[doc="flag: Sri Lanka 🇱🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SRI_LANKA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SRI_LANKA); // 🇱🇰 (`U+1F1F1 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_SRI_LANKA.to_string().as_str(), \"🇱🇰\");"]
#[doc="```"]
pub static FLAG_SRI_LANKA :  Emoji = Emoji::new("flag: Sri Lanka", "🇱🇰"); // flag: Sri Lanka
#[doc="flag: St. Barthélemy 🇧🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_BARTHELEMY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_BARTHELEMY); // 🇧🇱 (`U+1F1E7 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_ST_BARTHELEMY.to_string().as_str(), \"🇧🇱\");"]
#[doc="```"]
pub static FLAG_ST_BARTHELEMY :  Emoji = Emoji::new("flag: St. Barthélemy", "🇧🇱"); // flag: St. Barthélemy
#[doc="flag: St. Helena 🇸🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_HELENA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_HELENA); // 🇸🇭 (`U+1F1F8 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_ST_HELENA.to_string().as_str(), \"🇸🇭\");"]
#[doc="```"]
pub static FLAG_ST_HELENA :  Emoji = Emoji::new("flag: St. Helena", "🇸🇭"); // flag: St. Helena
#[doc="flag: St. Kitts & Nevis 🇰🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_KITTS_AND_NEVIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_KITTS_AND_NEVIS); // 🇰🇳 (`U+1F1F0 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_ST_KITTS_AND_NEVIS.to_string().as_str(), \"🇰🇳\");"]
#[doc="```"]
pub static FLAG_ST_KITTS_AND_NEVIS :  Emoji = Emoji::new("flag: St. Kitts & Nevis", "🇰🇳"); // flag: St. Kitts & Nevis
#[doc="flag: St. Lucia 🇱🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_LUCIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_LUCIA); // 🇱🇨 (`U+1F1F1 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ST_LUCIA.to_string().as_str(), \"🇱🇨\");"]
#[doc="```"]
pub static FLAG_ST_LUCIA :  Emoji = Emoji::new("flag: St. Lucia", "🇱🇨"); // flag: St. Lucia
#[doc="flag: St. Martin 🇲🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_MARTIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_MARTIN); // 🇲🇫 (`U+1F1F2 U+1F1EB`)"] #[doc="# assert_eq!(FLAG_ST_MARTIN.to_string().as_str(), \"🇲🇫\");"]
#[doc="```"]
pub static FLAG_ST_MARTIN :  Emoji = Emoji::new("flag: St. Martin", "🇲🇫"); // flag: St. Martin
#[doc="flag: St. Pierre & Miquelon 🇵🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_PIERRE_AND_MIQUELON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_PIERRE_AND_MIQUELON); // 🇵🇲 (`U+1F1F5 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ST_PIERRE_AND_MIQUELON.to_string().as_str(), \"🇵🇲\");"]
#[doc="```"]
pub static FLAG_ST_PIERRE_AND_MIQUELON :  Emoji = Emoji::new("flag: St. Pierre & Miquelon", "🇵🇲"); // flag: St. Pierre & Miquelon
#[doc="flag: St. Vincent & Grenadines 🇻🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ST_VINCENT_AND_GRENADINES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ST_VINCENT_AND_GRENADINES); // 🇻🇨 (`U+1F1FB U+1F1E8`)"] #[doc="# assert_eq!(FLAG_ST_VINCENT_AND_GRENADINES.to_string().as_str(), \"🇻🇨\");"]
#[doc="```"]
pub static FLAG_ST_VINCENT_AND_GRENADINES :  Emoji = Emoji::new("flag: St. Vincent & Grenadines", "🇻🇨"); // flag: St. Vincent & Grenadines
#[doc="flag: Sudan 🇸🇩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SUDAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SUDAN); // 🇸🇩 (`U+1F1F8 U+1F1E9`)"] #[doc="# assert_eq!(FLAG_SUDAN.to_string().as_str(), \"🇸🇩\");"]
#[doc="```"]
pub static FLAG_SUDAN :  Emoji = Emoji::new("flag: Sudan", "🇸🇩"); // flag: Sudan
#[doc="flag: Suriname 🇸🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SURINAME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SURINAME); // 🇸🇷 (`U+1F1F8 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_SURINAME.to_string().as_str(), \"🇸🇷\");"]
#[doc="```"]
pub static FLAG_SURINAME :  Emoji = Emoji::new("flag: Suriname", "🇸🇷"); // flag: Suriname
#[doc="flag: Svalbard & Jan Mayen 🇸🇯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SVALBARD_AND_JAN_MAYEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SVALBARD_AND_JAN_MAYEN); // 🇸🇯 (`U+1F1F8 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_SVALBARD_AND_JAN_MAYEN.to_string().as_str(), \"🇸🇯\");"]
#[doc="```"]
pub static FLAG_SVALBARD_AND_JAN_MAYEN :  Emoji = Emoji::new("flag: Svalbard & Jan Mayen", "🇸🇯"); // flag: Svalbard & Jan Mayen
#[doc="flag: Sweden 🇸🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SWEDEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SWEDEN); // 🇸🇪 (`U+1F1F8 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_SWEDEN.to_string().as_str(), \"🇸🇪\");"]
#[doc="```"]
pub static FLAG_SWEDEN :  Emoji = Emoji::new("flag: Sweden", "🇸🇪"); // flag: Sweden
#[doc="flag: Switzerland 🇨🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SWITZERLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SWITZERLAND); // 🇨🇭 (`U+1F1E8 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_SWITZERLAND.to_string().as_str(), \"🇨🇭\");"]
#[doc="```"]
pub static FLAG_SWITZERLAND :  Emoji = Emoji::new("flag: Switzerland", "🇨🇭"); // flag: Switzerland
#[doc="flag: Syria 🇸🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SYRIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SYRIA); // 🇸🇾 (`U+1F1F8 U+1F1FE`)"] #[doc="# assert_eq!(FLAG_SYRIA.to_string().as_str(), \"🇸🇾\");"]
#[doc="```"]
pub static FLAG_SYRIA :  Emoji = Emoji::new("flag: Syria", "🇸🇾"); // flag: Syria
#[doc="flag: Taiwan 🇹🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TAIWAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TAIWAN); // 🇹🇼 (`U+1F1F9 U+1F1FC`)"] #[doc="# assert_eq!(FLAG_TAIWAN.to_string().as_str(), \"🇹🇼\");"]
#[doc="```"]
pub static FLAG_TAIWAN :  Emoji = Emoji::new("flag: Taiwan", "🇹🇼"); // flag: Taiwan
#[doc="flag: Tajikistan 🇹🇯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TAJIKISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TAJIKISTAN); // 🇹🇯 (`U+1F1F9 U+1F1EF`)"] #[doc="# assert_eq!(FLAG_TAJIKISTAN.to_string().as_str(), \"🇹🇯\");"]
#[doc="```"]
pub static FLAG_TAJIKISTAN :  Emoji = Emoji::new("flag: Tajikistan", "🇹🇯"); // flag: Tajikistan
#[doc="flag: Tanzania 🇹🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TANZANIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TANZANIA); // 🇹🇿 (`U+1F1F9 U+1F1FF`)"] #[doc="# assert_eq!(FLAG_TANZANIA.to_string().as_str(), \"🇹🇿\");"]
#[doc="```"]
pub static FLAG_TANZANIA :  Emoji = Emoji::new("flag: Tanzania", "🇹🇿"); // flag: Tanzania
#[doc="flag: Thailand 🇹🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_THAILAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_THAILAND); // 🇹🇭 (`U+1F1F9 U+1F1ED`)"] #[doc="# assert_eq!(FLAG_THAILAND.to_string().as_str(), \"🇹🇭\");"]
#[doc="```"]
pub static FLAG_THAILAND :  Emoji = Emoji::new("flag: Thailand", "🇹🇭"); // flag: Thailand
#[doc="flag: Timor-Leste 🇹🇱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TIMOR_LESTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TIMOR_LESTE); // 🇹🇱 (`U+1F1F9 U+1F1F1`)"] #[doc="# assert_eq!(FLAG_TIMOR_LESTE.to_string().as_str(), \"🇹🇱\");"]
#[doc="```"]
pub static FLAG_TIMOR_LESTE :  Emoji = Emoji::new("flag: Timor-Leste", "🇹🇱"); // flag: Timor-Leste
#[doc="flag: Togo 🇹🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TOGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TOGO); // 🇹🇬 (`U+1F1F9 U+1F1EC`)"] #[doc="# assert_eq!(FLAG_TOGO.to_string().as_str(), \"🇹🇬\");"]
#[doc="```"]
pub static FLAG_TOGO :  Emoji = Emoji::new("flag: Togo", "🇹🇬"); // flag: Togo
#[doc="flag: Tokelau 🇹🇰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TOKELAU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TOKELAU); // 🇹🇰 (`U+1F1F9 U+1F1F0`)"] #[doc="# assert_eq!(FLAG_TOKELAU.to_string().as_str(), \"🇹🇰\");"]
#[doc="```"]
pub static FLAG_TOKELAU :  Emoji = Emoji::new("flag: Tokelau", "🇹🇰"); // flag: Tokelau
#[doc="flag: Tonga 🇹🇴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TONGA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TONGA); // 🇹🇴 (`U+1F1F9 U+1F1F4`)"] #[doc="# assert_eq!(FLAG_TONGA.to_string().as_str(), \"🇹🇴\");"]
#[doc="```"]
pub static FLAG_TONGA :  Emoji = Emoji::new("flag: Tonga", "🇹🇴"); // flag: Tonga
#[doc="flag: Trinidad & Tobago 🇹🇹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TRINIDAD_AND_TOBAGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TRINIDAD_AND_TOBAGO); // 🇹🇹 (`U+1F1F9 U+1F1F9`)"] #[doc="# assert_eq!(FLAG_TRINIDAD_AND_TOBAGO.to_string().as_str(), \"🇹🇹\");"]
#[doc="```"]
pub static FLAG_TRINIDAD_AND_TOBAGO :  Emoji = Emoji::new("flag: Trinidad & Tobago", "🇹🇹"); // flag: Trinidad & Tobago
#[doc="flag: Tristan da Cunha 🇹🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TRISTAN_DA_CUNHA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TRISTAN_DA_CUNHA); // 🇹🇦 (`U+1F1F9 U+1F1E6`)"] #[doc="# assert_eq!(FLAG_TRISTAN_DA_CUNHA.to_string().as_str(), \"🇹🇦\");"]
#[doc="```"]
pub static FLAG_TRISTAN_DA_CUNHA :  Emoji = Emoji::new("flag: Tristan da Cunha", "🇹🇦"); // flag: Tristan da Cunha
#[doc="flag: Tunisia 🇹🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TUNISIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TUNISIA); // 🇹🇳 (`U+1F1F9 U+1F1F3`)"] #[doc="# assert_eq!(FLAG_TUNISIA.to_string().as_str(), \"🇹🇳\");"]
#[doc="```"]
pub static FLAG_TUNISIA :  Emoji = Emoji::new("flag: Tunisia", "🇹🇳"); // flag: Tunisia
#[doc="flag: Turkey 🇹🇷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TURKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TURKEY); // 🇹🇷 (`U+1F1F9 U+1F1F7`)"] #[doc="# assert_eq!(FLAG_TURKEY.to_string().as_str(), \"🇹🇷\");"]
#[doc="```"]
pub static FLAG_TURKEY :  Emoji = Emoji::new("flag: Turkey", "🇹🇷"); // flag: Turkey
#[doc="flag: Turkmenistan 🇹🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TURKMENISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TURKMENISTAN); // 🇹🇲 (`U+1F1F9 U+1F1F2`)"] #[doc="# assert_eq!(FLAG_TURKMENISTAN.to_string().as_str(), \"🇹🇲\");"]
#[doc="```"]
pub static FLAG_TURKMENISTAN :  Emoji = Emoji::new("flag: Turkmenistan", "🇹🇲"); // flag: Turkmenistan
#[doc="flag: Turks & Caicos Islands 🇹🇨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TURKS_AND_CAICOS_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TURKS_AND_CAICOS_ISLANDS); // 🇹🇨 (`U+1F1F9 U+1F1E8`)"] #[doc="# assert_eq!(FLAG_TURKS_AND_CAICOS_ISLANDS.to_string().as_str(), \"🇹🇨\");"]
#[doc="```"]
pub static FLAG_TURKS_AND_CAICOS_ISLANDS :  Emoji = Emoji::new("flag: Turks & Caicos Islands", "🇹🇨"); // flag: Turks & Caicos Islands
#[doc="flag: Tuvalu 🇹🇻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_TUVALU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_TUVALU); // 🇹🇻 (`U+1F1F9 U+1F1FB`)"] #[doc="# assert_eq!(FLAG_TUVALU.to_string().as_str(), \"🇹🇻\");"]
#[doc="```"]
pub static FLAG_TUVALU :  Emoji = Emoji::new("flag: Tuvalu", "🇹🇻"); // flag: Tuvalu
#[doc="flag: Uganda 🇺🇬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UGANDA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UGANDA); // 🇺🇬 (`U+1F1FA U+1F1EC`)"] #[doc="# assert_eq!(FLAG_UGANDA.to_string().as_str(), \"🇺🇬\");"]
#[doc="```"]
pub static FLAG_UGANDA :  Emoji = Emoji::new("flag: Uganda", "🇺🇬"); // flag: Uganda
#[doc="flag: Ukraine 🇺🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UKRAINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UKRAINE); // 🇺🇦 (`U+1F1FA U+1F1E6`)"] #[doc="# assert_eq!(FLAG_UKRAINE.to_string().as_str(), \"🇺🇦\");"]
#[doc="```"]
pub static FLAG_UKRAINE :  Emoji = Emoji::new("flag: Ukraine", "🇺🇦"); // flag: Ukraine
#[doc="flag: United Arab Emirates 🇦🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_ARAB_EMIRATES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_ARAB_EMIRATES); // 🇦🇪 (`U+1F1E6 U+1F1EA`)"] #[doc="# assert_eq!(FLAG_UNITED_ARAB_EMIRATES.to_string().as_str(), \"🇦🇪\");"]
#[doc="```"]
pub static FLAG_UNITED_ARAB_EMIRATES :  Emoji = Emoji::new("flag: United Arab Emirates", "🇦🇪"); // flag: United Arab Emirates
#[doc="flag: United Kingdom 🇬🇧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_KINGDOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_KINGDOM); // 🇬🇧 (`U+1F1EC U+1F1E7`)"] #[doc="# assert_eq!(FLAG_UNITED_KINGDOM.to_string().as_str(), \"🇬🇧\");"]
#[doc="```"]
pub static FLAG_UNITED_KINGDOM :  Emoji = Emoji::new("flag: United Kingdom", "🇬🇧"); // flag: United Kingdom
#[doc="flag: United Nations 🇺🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_NATIONS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_NATIONS); // 🇺🇳 (`U+1F1FA U+1F1F3`)"] #[doc="# assert_eq!(FLAG_UNITED_NATIONS.to_string().as_str(), \"🇺🇳\");"]
#[doc="```"]
pub static FLAG_UNITED_NATIONS :  Emoji = Emoji::new("flag: United Nations", "🇺🇳"); // flag: United Nations
#[doc="flag: United States 🇺🇸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UNITED_STATES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UNITED_STATES); // 🇺🇸 (`U+1F1FA U+1F1F8`)"] #[doc="# assert_eq!(FLAG_UNITED_STATES.to_string().as_str(), \"🇺🇸\");"]
#[doc="```"]
pub static FLAG_UNITED_STATES :  Emoji = Emoji::new("flag: United States", "🇺🇸"); // flag: United States
#[doc="flag: Uruguay 🇺🇾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_URUGUAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_URUGUAY); // 🇺🇾 (`U+1F1FA U+1F1FE`)"] #[doc="# assert_eq!(FLAG_URUGUAY.to_string().as_str(), \"🇺🇾\");"]
#[doc="```"]
pub static FLAG_URUGUAY :  Emoji = Emoji::new("flag: Uruguay", "🇺🇾"); // flag: Uruguay
#[doc="flag: U.S. Outlying Islands 🇺🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_US_OUTLYING_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_US_OUTLYING_ISLANDS); // 🇺🇲 (`U+1F1FA U+1F1F2`)"] #[doc="# assert_eq!(FLAG_US_OUTLYING_ISLANDS.to_string().as_str(), \"🇺🇲\");"]
#[doc="```"]
pub static FLAG_US_OUTLYING_ISLANDS :  Emoji = Emoji::new("flag: U.S. Outlying Islands", "🇺🇲"); // flag: U.S. Outlying Islands
#[doc="flag: U.S. Virgin Islands 🇻🇮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_US_VIRGIN_ISLANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_US_VIRGIN_ISLANDS); // 🇻🇮 (`U+1F1FB U+1F1EE`)"] #[doc="# assert_eq!(FLAG_US_VIRGIN_ISLANDS.to_string().as_str(), \"🇻🇮\");"]
#[doc="```"]
pub static FLAG_US_VIRGIN_ISLANDS :  Emoji = Emoji::new("flag: U.S. Virgin Islands", "🇻🇮"); // flag: U.S. Virgin Islands
#[doc="flag: Uzbekistan 🇺🇿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_UZBEKISTAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_UZBEKISTAN); // 🇺🇿 (`U+1F1FA U+1F1FF`)"] #[doc="# assert_eq!(FLAG_UZBEKISTAN.to_string().as_str(), \"🇺🇿\");"]
#[doc="```"]
pub static FLAG_UZBEKISTAN :  Emoji = Emoji::new("flag: Uzbekistan", "🇺🇿"); // flag: Uzbekistan
#[doc="flag: Vanuatu 🇻🇺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VANUATU;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VANUATU); // 🇻🇺 (`U+1F1FB U+1F1FA`)"] #[doc="# assert_eq!(FLAG_VANUATU.to_string().as_str(), \"🇻🇺\");"]
#[doc="```"]
pub static FLAG_VANUATU :  Emoji = Emoji::new("flag: Vanuatu", "🇻🇺"); // flag: Vanuatu
#[doc="flag: Vatican City 🇻🇦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VATICAN_CITY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VATICAN_CITY); // 🇻🇦 (`U+1F1FB U+1F1E6`)"] #[doc="# assert_eq!(FLAG_VATICAN_CITY.to_string().as_str(), \"🇻🇦\");"]
#[doc="```"]
pub static FLAG_VATICAN_CITY :  Emoji = Emoji::new("flag: Vatican City", "🇻🇦"); // flag: Vatican City
#[doc="flag: Venezuela 🇻🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VENEZUELA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VENEZUELA); // 🇻🇪 (`U+1F1FB U+1F1EA`)"] #[doc="# assert_eq!(FLAG_VENEZUELA.to_string().as_str(), \"🇻🇪\");"]
#[doc="```"]
pub static FLAG_VENEZUELA :  Emoji = Emoji::new("flag: Venezuela", "🇻🇪"); // flag: Venezuela
#[doc="flag: Vietnam 🇻🇳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_VIETNAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_VIETNAM); // 🇻🇳 (`U+1F1FB U+1F1F3`)"] #[doc="# assert_eq!(FLAG_VIETNAM.to_string().as_str(), \"🇻🇳\");"]
#[doc="```"]
pub static FLAG_VIETNAM :  Emoji = Emoji::new("flag: Vietnam", "🇻🇳"); // flag: Vietnam
#[doc="flag: Wallis & Futuna 🇼🇫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_WALLIS_AND_FUTUNA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_WALLIS_AND_FUTUNA); // 🇼🇫 (`U+1F1FC U+1F1EB`)"] #[doc="# assert_eq!(FLAG_WALLIS_AND_FUTUNA.to_string().as_str(), \"🇼🇫\");"]
#[doc="```"]
pub static FLAG_WALLIS_AND_FUTUNA :  Emoji = Emoji::new("flag: Wallis & Futuna", "🇼🇫"); // flag: Wallis & Futuna
#[doc="flag: Western Sahara 🇪🇭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_WESTERN_SAHARA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_WESTERN_SAHARA); // 🇪🇭 (`U+1F1EA U+1F1ED`)"] #[doc="# assert_eq!(FLAG_WESTERN_SAHARA.to_string().as_str(), \"🇪🇭\");"]
#[doc="```"]
pub static FLAG_WESTERN_SAHARA :  Emoji = Emoji::new("flag: Western Sahara", "🇪🇭"); // flag: Western Sahara
#[doc="flag: Yemen 🇾🇪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_YEMEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_YEMEN); // 🇾🇪 (`U+1F1FE U+1F1EA`)"] #[doc="# assert_eq!(FLAG_YEMEN.to_string().as_str(), \"🇾🇪\");"]
#[doc="```"]
pub static FLAG_YEMEN :  Emoji = Emoji::new("flag: Yemen", "🇾🇪"); // flag: Yemen
#[doc="flag: Zambia 🇿🇲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ZAMBIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ZAMBIA); // 🇿🇲 (`U+1F1FF U+1F1F2`)"] #[doc="# assert_eq!(FLAG_ZAMBIA.to_string().as_str(), \"🇿🇲\");"]
#[doc="```"]
pub static FLAG_ZAMBIA :  Emoji = Emoji::new("flag: Zambia", "🇿🇲"); // flag: Zambia
#[doc="flag: Zimbabwe 🇿🇼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ZIMBABWE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ZIMBABWE); // 🇿🇼 (`U+1F1FF U+1F1FC`)"] #[doc="# assert_eq!(FLAG_ZIMBABWE.to_string().as_str(), \"🇿🇼\");"]
#[doc="```"]
pub static FLAG_ZIMBABWE :  Emoji = Emoji::new("flag: Zimbabwe", "🇿🇼"); // flag: Zimbabwe
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FLAG_AFGHANISTAN, ],
&[&FLAG_ALAND_ISLANDS, ],
&[&FLAG_ALBANIA, ],
&[&FLAG_ALGERIA, ],
&[&FLAG_AMERICAN_SAMOA, ],
&[&FLAG_ANDORRA, ],
&[&FLAG_ANGOLA, ],
&[&FLAG_ANGUILLA, ],
&[&FLAG_ANTARCTICA, ],
&[&FLAG_ANTIGUA_AND_BARBUDA, ],
&[&FLAG_ARGENTINA, ],
&[&FLAG_ARMENIA, ],
&[&FLAG_ARUBA, ],
&[&FLAG_ASCENSION_ISLAND, ],
&[&FLAG_AUSTRALIA, ],
&[&FLAG_AUSTRIA, ],
&[&FLAG_AZERBAIJAN, ],
&[&FLAG_BAHAMAS, ],
&[&FLAG_BAHRAIN, ],
&[&FLAG_BANGLADESH, ],
&[&FLAG_BARBADOS, ],
&[&FLAG_BELARUS, ],
&[&FLAG_BELGIUM, ],
&[&FLAG_BELIZE, ],
&[&FLAG_BENIN, ],
&[&FLAG_BERMUDA, ],
&[&FLAG_BHUTAN, ],
&[&FLAG_BOLIVIA, ],
&[&FLAG_BOSNIA_AND_HERZEGOVINA, ],
&[&FLAG_BOTSWANA, ],
&[&FLAG_BOUVET_ISLAND, ],
&[&FLAG_BRAZIL, ],
&[&FLAG_BRITISH_INDIAN_OCEAN_TERRITORY, ],
&[&FLAG_BRITISH_VIRGIN_ISLANDS, ],
&[&FLAG_BRUNEI, ],
&[&FLAG_BULGARIA, ],
&[&FLAG_BURKINA_FASO, ],
&[&FLAG_BURUNDI, ],
&[&FLAG_CAMBODIA, ],
&[&FLAG_CAMEROON, ],
&[&FLAG_CANADA, ],
&[&FLAG_CANARY_ISLANDS, ],
&[&FLAG_CAPE_VERDE, ],
&[&FLAG_CARIBBEAN_NETHERLANDS, ],
&[&FLAG_CAYMAN_ISLANDS, ],
&[&FLAG_CENTRAL_AFRICAN_REPUBLIC, ],
&[&FLAG_CEUTA_AND_MELILLA, ],
&[&FLAG_CHAD, ],
&[&FLAG_CHILE, ],
&[&FLAG_CHINA, ],
&[&FLAG_CHRISTMAS_ISLAND, ],
&[&FLAG_CLIPPERTON_ISLAND, ],
&[&FLAG_COCOS_KEELING_ISLANDS, ],
&[&FLAG_COLOMBIA, ],
&[&FLAG_COMOROS, ],
&[&FLAG_CONGO_BRAZZAVILLE, ],
&[&FLAG_CONGO_KINSHASA, ],
&[&FLAG_COOK_ISLANDS, ],
&[&FLAG_COSTA_RICA, ],
&[&FLAG_COTE_D_IVOIRE, ],
&[&FLAG_CROATIA, ],
&[&FLAG_CUBA, ],
&[&FLAG_CURACAO, ],
&[&FLAG_CYPRUS, ],
&[&FLAG_CZECHIA, ],
&[&FLAG_DENMARK, ],
&[&FLAG_DIEGO_GARCIA, ],
&[&FLAG_DJIBOUTI, ],
&[&FLAG_DOMINICA, ],
&[&FLAG_DOMINICAN_REPUBLIC, ],
&[&FLAG_ECUADOR, ],
&[&FLAG_EGYPT, ],
&[&FLAG_EL_SALVADOR, ],
&[&FLAG_EQUATORIAL_GUINEA, ],
&[&FLAG_ERITREA, ],
&[&FLAG_ESTONIA, ],
&[&FLAG_ESWATINI, ],
&[&FLAG_ETHIOPIA, ],
&[&FLAG_EUROPEAN_UNION, ],
&[&FLAG_FALKLAND_ISLANDS, ],
&[&FLAG_FAROE_ISLANDS, ],
&[&FLAG_FIJI, ],
&[&FLAG_FINLAND, ],
&[&FLAG_FRANCE, ],
&[&FLAG_FRENCH_GUIANA, ],
&[&FLAG_FRENCH_POLYNESIA, ],
&[&FLAG_FRENCH_SOUTHERN_TERRITORIES, ],
&[&FLAG_GABON, ],
&[&FLAG_GAMBIA, ],
&[&FLAG_GEORGIA, ],
&[&FLAG_GERMANY, ],
&[&FLAG_GHANA, ],
&[&FLAG_GIBRALTAR, ],
&[&FLAG_GREECE, ],
&[&FLAG_GREENLAND, ],
&[&FLAG_GRENADA, ],
&[&FLAG_GUADELOUPE, ],
&[&FLAG_GUAM, ],
&[&FLAG_GUATEMALA, ],
&[&FLAG_GUERNSEY, ],
&[&FLAG_GUINEA, ],
&[&FLAG_GUINEA_BISSAU, ],
&[&FLAG_GUYANA, ],
&[&FLAG_HAITI, ],
&[&FLAG_HEARD_AND_MCDONALD_ISLANDS, ],
&[&FLAG_HONDURAS, ],
&[&FLAG_HONG_KONG_SAR_CHINA, ],
&[&FLAG_HUNGARY, ],
&[&FLAG_ICELAND, ],
&[&FLAG_INDIA, ],
&[&FLAG_INDONESIA, ],
&[&FLAG_IRAN, ],
&[&FLAG_IRAQ, ],
&[&FLAG_IRELAND, ],
&[&FLAG_ISLE_OF_MAN, ],
&[&FLAG_ISRAEL, ],
&[&FLAG_ITALY, ],
&[&FLAG_JAMAICA, ],
&[&FLAG_JAPAN, ],
&[&FLAG_JERSEY, ],
&[&FLAG_JORDAN, ],
&[&FLAG_KAZAKHSTAN, ],
&[&FLAG_KENYA, ],
&[&FLAG_KIRIBATI, ],
&[&FLAG_KOSOVO, ],
&[&FLAG_KUWAIT, ],
&[&FLAG_KYRGYZSTAN, ],
&[&FLAG_LAOS, ],
&[&FLAG_LATVIA, ],
&[&FLAG_LEBANON, ],
&[&FLAG_LESOTHO, ],
&[&FLAG_LIBERIA, ],
&[&FLAG_LIBYA, ],
&[&FLAG_LIECHTENSTEIN, ],
&[&FLAG_LITHUANIA, ],
&[&FLAG_LUXEMBOURG, ],
&[&FLAG_MACAO_SAR_CHINA, ],
&[&FLAG_MADAGASCAR, ],
&[&FLAG_MALAWI, ],
&[&FLAG_MALAYSIA, ],
&[&FLAG_MALDIVES, ],
&[&FLAG_MALI, ],
&[&FLAG_MALTA, ],
&[&FLAG_MARSHALL_ISLANDS, ],
&[&FLAG_MARTINIQUE, ],
&[&FLAG_MAURITANIA, ],
&[&FLAG_MAURITIUS, ],
&[&FLAG_MAYOTTE, ],
&[&FLAG_MEXICO, ],
&[&FLAG_MICRONESIA, ],
&[&FLAG_MOLDOVA, ],
&[&FLAG_MONACO, ],
&[&FLAG_MONGOLIA, ],
&[&FLAG_MONTENEGRO, ],
&[&FLAG_MONTSERRAT, ],
&[&FLAG_MOROCCO, ],
&[&FLAG_MOZAMBIQUE, ],
&[&FLAG_MYANMAR_BURMA, ],
&[&FLAG_NAMIBIA, ],
&[&FLAG_NAURU, ],
&[&FLAG_NEPAL, ],
&[&FLAG_NETHERLANDS, ],
&[&FLAG_NEW_CALEDONIA, ],
&[&FLAG_NEW_ZEALAND, ],
&[&FLAG_NICARAGUA, ],
&[&FLAG_NIGER, ],
&[&FLAG_NIGERIA, ],
&[&FLAG_NIUE, ],
&[&FLAG_NORFOLK_ISLAND, ],
&[&FLAG_NORTHERN_MARIANA_ISLANDS, ],
&[&FLAG_NORTH_KOREA, ],
&[&FLAG_NORTH_MACEDONIA, ],
&[&FLAG_NORWAY, ],
&[&FLAG_OMAN, ],
&[&FLAG_PAKISTAN, ],
&[&FLAG_PALAU, ],
&[&FLAG_PALESTINIAN_TERRITORIES, ],
&[&FLAG_PANAMA, ],
&[&FLAG_PAPUA_NEW_GUINEA, ],
&[&FLAG_PARAGUAY, ],
&[&FLAG_PERU, ],
&[&FLAG_PHILIPPINES, ],
&[&FLAG_PITCAIRN_ISLANDS, ],
&[&FLAG_POLAND, ],
&[&FLAG_PORTUGAL, ],
&[&FLAG_PUERTO_RICO, ],
&[&FLAG_QATAR, ],
&[&FLAG_REUNION, ],
&[&FLAG_ROMANIA, ],
&[&FLAG_RUSSIA, ],
&[&FLAG_RWANDA, ],
&[&FLAG_SAMOA, ],
&[&FLAG_SAN_MARINO, ],
&[&FLAG_SAO_TOME_AND_PRINCIPE, ],
&[&FLAG_SAUDI_ARABIA, ],
&[&FLAG_SENEGAL, ],
&[&FLAG_SERBIA, ],
&[&FLAG_SEYCHELLES, ],
&[&FLAG_SIERRA_LEONE, ],
&[&FLAG_SINGAPORE, ],
&[&FLAG_SINT_MAARTEN, ],
&[&FLAG_SLOVAKIA, ],
&[&FLAG_SLOVENIA, ],
&[&FLAG_SOLOMON_ISLANDS, ],
&[&FLAG_SOMALIA, ],
&[&FLAG_SOUTH_AFRICA, ],
&[&FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS, ],
&[&FLAG_SOUTH_KOREA, ],
&[&FLAG_SOUTH_SUDAN, ],
&[&FLAG_SPAIN, ],
&[&FLAG_SRI_LANKA, ],
&[&FLAG_ST_BARTHELEMY, ],
&[&FLAG_ST_HELENA, ],
&[&FLAG_ST_KITTS_AND_NEVIS, ],
&[&FLAG_ST_LUCIA, ],
&[&FLAG_ST_MARTIN, ],
&[&FLAG_ST_PIERRE_AND_MIQUELON, ],
&[&FLAG_ST_VINCENT_AND_GRENADINES, ],
&[&FLAG_SUDAN, ],
&[&FLAG_SURINAME, ],
&[&FLAG_SVALBARD_AND_JAN_MAYEN, ],
&[&FLAG_SWEDEN, ],
&[&FLAG_SWITZERLAND, ],
&[&FLAG_SYRIA, ],
&[&FLAG_TAIWAN, ],
&[&FLAG_TAJIKISTAN, ],
&[&FLAG_TANZANIA, ],
&[&FLAG_THAILAND, ],
&[&FLAG_TIMOR_LESTE, ],
&[&FLAG_TOGO, ],
&[&FLAG_TOKELAU, ],
&[&FLAG_TONGA, ],
&[&FLAG_TRINIDAD_AND_TOBAGO, ],
&[&FLAG_TRISTAN_DA_CUNHA, ],
&[&FLAG_TUNISIA, ],
&[&FLAG_TURKEY, ],
&[&FLAG_TURKMENISTAN, ],
&[&FLAG_TURKS_AND_CAICOS_ISLANDS, ],
&[&FLAG_TUVALU, ],
&[&FLAG_UGANDA, ],
&[&FLAG_UKRAINE, ],
&[&FLAG_UNITED_ARAB_EMIRATES, ],
&[&FLAG_UNITED_KINGDOM, ],
&[&FLAG_UNITED_NATIONS, ],
&[&FLAG_UNITED_STATES, ],
&[&FLAG_URUGUAY, ],
&[&FLAG_US_OUTLYING_ISLANDS, ],
&[&FLAG_US_VIRGIN_ISLANDS, ],
&[&FLAG_UZBEKISTAN, ],
&[&FLAG_VANUATU, ],
&[&FLAG_VATICAN_CITY, ],
&[&FLAG_VENEZUELA, ],
&[&FLAG_VIETNAM, ],
&[&FLAG_WALLIS_AND_FUTUNA, ],
&[&FLAG_WESTERN_SAHARA, ],
&[&FLAG_YEMEN, ],
&[&FLAG_ZAMBIA, ],
&[&FLAG_ZIMBABWE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FLAG_AFGHANISTAN, &FLAG_ALAND_ISLANDS, &FLAG_ALBANIA, &FLAG_ALGERIA, &FLAG_AMERICAN_SAMOA, &FLAG_ANDORRA, &FLAG_ANGOLA, &FLAG_ANGUILLA, &FLAG_ANTARCTICA, &FLAG_ANTIGUA_AND_BARBUDA, &FLAG_ARGENTINA, &FLAG_ARMENIA, &FLAG_ARUBA, &FLAG_ASCENSION_ISLAND, &FLAG_AUSTRALIA, &FLAG_AUSTRIA, &FLAG_AZERBAIJAN, &FLAG_BAHAMAS, &FLAG_BAHRAIN, &FLAG_BANGLADESH, &FLAG_BARBADOS, &FLAG_BELARUS, &FLAG_BELGIUM, &FLAG_BELIZE, &FLAG_BENIN, &FLAG_BERMUDA, &FLAG_BHUTAN, &FLAG_BOLIVIA, &FLAG_BOSNIA_AND_HERZEGOVINA, &FLAG_BOTSWANA, &FLAG_BOUVET_ISLAND, &FLAG_BRAZIL, &FLAG_BRITISH_INDIAN_OCEAN_TERRITORY, &FLAG_BRITISH_VIRGIN_ISLANDS, &FLAG_BRUNEI, &FLAG_BULGARIA, &FLAG_BURKINA_FASO, &FLAG_BURUNDI, &FLAG_CAMBODIA, &FLAG_CAMEROON, &FLAG_CANADA, &FLAG_CANARY_ISLANDS, &FLAG_CAPE_VERDE, &FLAG_CARIBBEAN_NETHERLANDS, &FLAG_CAYMAN_ISLANDS, &FLAG_CENTRAL_AFRICAN_REPUBLIC, &FLAG_CEUTA_AND_MELILLA, &FLAG_CHAD, &FLAG_CHILE, &FLAG_CHINA, &FLAG_CHRISTMAS_ISLAND, &FLAG_CLIPPERTON_ISLAND, &FLAG_COCOS_KEELING_ISLANDS, &FLAG_COLOMBIA, &FLAG_COMOROS, &FLAG_CONGO_BRAZZAVILLE, &FLAG_CONGO_KINSHASA, &FLAG_COOK_ISLANDS, &FLAG_COSTA_RICA, &FLAG_COTE_D_IVOIRE, &FLAG_CROATIA, &FLAG_CUBA, &FLAG_CURACAO, &FLAG_CYPRUS, &FLAG_CZECHIA, &FLAG_DENMARK, &FLAG_DIEGO_GARCIA, &FLAG_DJIBOUTI, &FLAG_DOMINICA, &FLAG_DOMINICAN_REPUBLIC, &FLAG_ECUADOR, &FLAG_EGYPT, &FLAG_EL_SALVADOR, &FLAG_EQUATORIAL_GUINEA, &FLAG_ERITREA, &FLAG_ESTONIA, &FLAG_ESWATINI, &FLAG_ETHIOPIA, &FLAG_EUROPEAN_UNION, &FLAG_FALKLAND_ISLANDS, &FLAG_FAROE_ISLANDS, &FLAG_FIJI, &FLAG_FINLAND, &FLAG_FRANCE, &FLAG_FRENCH_GUIANA, &FLAG_FRENCH_POLYNESIA, &FLAG_FRENCH_SOUTHERN_TERRITORIES, &FLAG_GABON, &FLAG_GAMBIA, &FLAG_GEORGIA, &FLAG_GERMANY, &FLAG_GHANA, &FLAG_GIBRALTAR, &FLAG_GREECE, &FLAG_GREENLAND, &FLAG_GRENADA, &FLAG_GUADELOUPE, &FLAG_GUAM, &FLAG_GUATEMALA, &FLAG_GUERNSEY, &FLAG_GUINEA, &FLAG_GUINEA_BISSAU, &FLAG_GUYANA, &FLAG_HAITI, &FLAG_HEARD_AND_MCDONALD_ISLANDS, &FLAG_HONDURAS, &FLAG_HONG_KONG_SAR_CHINA, &FLAG_HUNGARY, &FLAG_ICELAND, &FLAG_INDIA, &FLAG_INDONESIA, &FLAG_IRAN, &FLAG_IRAQ, &FLAG_IRELAND, &FLAG_ISLE_OF_MAN, &FLAG_ISRAEL, &FLAG_ITALY, &FLAG_JAMAICA, &FLAG_JAPAN, &FLAG_JERSEY, &FLAG_JORDAN, &FLAG_KAZAKHSTAN, &FLAG_KENYA, &FLAG_KIRIBATI, &FLAG_KOSOVO, &FLAG_KUWAIT, &FLAG_KYRGYZSTAN, &FLAG_LAOS, &FLAG_LATVIA, &FLAG_LEBANON, &FLAG_LESOTHO, &FLAG_LIBERIA, &FLAG_LIBYA, &FLAG_LIECHTENSTEIN, &FLAG_LITHUANIA, &FLAG_LUXEMBOURG, &FLAG_MACAO_SAR_CHINA, &FLAG_MADAGASCAR, &FLAG_MALAWI, &FLAG_MALAYSIA, &FLAG_MALDIVES, &FLAG_MALI, &FLAG_MALTA, &FLAG_MARSHALL_ISLANDS, &FLAG_MARTINIQUE, &FLAG_MAURITANIA, &FLAG_MAURITIUS, &FLAG_MAYOTTE, &FLAG_MEXICO, &FLAG_MICRONESIA, &FLAG_MOLDOVA, &FLAG_MONACO, &FLAG_MONGOLIA, &FLAG_MONTENEGRO, &FLAG_MONTSERRAT, &FLAG_MOROCCO, &FLAG_MOZAMBIQUE, &FLAG_MYANMAR_BURMA, &FLAG_NAMIBIA, &FLAG_NAURU, &FLAG_NEPAL, &FLAG_NETHERLANDS, &FLAG_NEW_CALEDONIA, &FLAG_NEW_ZEALAND, &FLAG_NICARAGUA, &FLAG_NIGER, &FLAG_NIGERIA, &FLAG_NIUE, &FLAG_NORFOLK_ISLAND, &FLAG_NORTHERN_MARIANA_ISLANDS, &FLAG_NORTH_KOREA, &FLAG_NORTH_MACEDONIA, &FLAG_NORWAY, &FLAG_OMAN, &FLAG_PAKISTAN, &FLAG_PALAU, &FLAG_PALESTINIAN_TERRITORIES, &FLAG_PANAMA, &FLAG_PAPUA_NEW_GUINEA, &FLAG_PARAGUAY, &FLAG_PERU, &FLAG_PHILIPPINES, &FLAG_PITCAIRN_ISLANDS, &FLAG_POLAND, &FLAG_PORTUGAL, &FLAG_PUERTO_RICO, &FLAG_QATAR, &FLAG_REUNION, &FLAG_ROMANIA, &FLAG_RUSSIA, &FLAG_RWANDA, &FLAG_SAMOA, &FLAG_SAN_MARINO, &FLAG_SAO_TOME_AND_PRINCIPE, &FLAG_SAUDI_ARABIA, &FLAG_SENEGAL, &FLAG_SERBIA, &FLAG_SEYCHELLES, &FLAG_SIERRA_LEONE, &FLAG_SINGAPORE, &FLAG_SINT_MAARTEN, &FLAG_SLOVAKIA, &FLAG_SLOVENIA, &FLAG_SOLOMON_ISLANDS, &FLAG_SOMALIA, &FLAG_SOUTH_AFRICA, &FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS, &FLAG_SOUTH_KOREA, &FLAG_SOUTH_SUDAN, &FLAG_SPAIN, &FLAG_SRI_LANKA, &FLAG_ST_BARTHELEMY, &FLAG_ST_HELENA, &FLAG_ST_KITTS_AND_NEVIS, &FLAG_ST_LUCIA, &FLAG_ST_MARTIN, &FLAG_ST_PIERRE_AND_MIQUELON, &FLAG_ST_VINCENT_AND_GRENADINES, &FLAG_SUDAN, &FLAG_SURINAME, &FLAG_SVALBARD_AND_JAN_MAYEN, &FLAG_SWEDEN, &FLAG_SWITZERLAND, &FLAG_SYRIA, &FLAG_TAIWAN, &FLAG_TAJIKISTAN, &FLAG_TANZANIA, &FLAG_THAILAND, &FLAG_TIMOR_LESTE, &FLAG_TOGO, &FLAG_TOKELAU, &FLAG_TONGA, &FLAG_TRINIDAD_AND_TOBAGO, &FLAG_TRISTAN_DA_CUNHA, &FLAG_TUNISIA, &FLAG_TURKEY, &FLAG_TURKMENISTAN, &FLAG_TURKS_AND_CAICOS_ISLANDS, &FLAG_TUVALU, &FLAG_UGANDA, &FLAG_UKRAINE, &FLAG_UNITED_ARAB_EMIRATES, &FLAG_UNITED_KINGDOM, &FLAG_UNITED_NATIONS, &FLAG_UNITED_STATES, &FLAG_URUGUAY, &FLAG_US_OUTLYING_ISLANDS, &FLAG_US_VIRGIN_ISLANDS, &FLAG_UZBEKISTAN, &FLAG_VANUATU, &FLAG_VATICAN_CITY, &FLAG_VENEZUELA, &FLAG_VIETNAM, &FLAG_WALLIS_AND_FUTUNA, &FLAG_WESTERN_SAHARA, &FLAG_YEMEN, &FLAG_ZAMBIA, &FLAG_ZIMBABWE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // flags::country_flag

/// flag 🏴🏁🎌
pub mod flag { // flags::flag
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="black flag 🏴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_FLAG); // 🏴 (`U+1F3F4`)"] #[doc="# assert_eq!(BLACK_FLAG.to_string().as_str(), \"🏴\");"]
#[doc="```"]
pub static BLACK_FLAG :  Emoji = Emoji::new("black flag", "🏴"); // black flag
#[doc="chequered flag 🏁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHEQUERED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHEQUERED_FLAG); // 🏁 (`U+1F3C1`)"] #[doc="# assert_eq!(CHEQUERED_FLAG.to_string().as_str(), \"🏁\");"]
#[doc="```"]
pub static CHEQUERED_FLAG :  Emoji = Emoji::new("chequered flag", "🏁"); // chequered flag
#[doc="crossed flags 🎌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSSED_FLAGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSSED_FLAGS); // 🎌 (`U+1F38C`)"] #[doc="# assert_eq!(CROSSED_FLAGS.to_string().as_str(), \"🎌\");"]
#[doc="```"]
pub static CROSSED_FLAGS :  Emoji = Emoji::new("crossed flags", "🎌"); // crossed flags
#[doc="pirate flag 🏴‍☠️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIRATE_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIRATE_FLAG); // 🏴‍☠️ (`U+1F3F4 U+200D U+2620 U+FE0F`)"] #[doc="# assert_eq!(PIRATE_FLAG.to_string().as_str(), \"🏴‍☠️\");"]
#[doc="```"]
pub static PIRATE_FLAG :  Emoji = Emoji::new("pirate flag", "🏴‍☠️"); // pirate flag
#[doc="rainbow flag 🏳️‍🌈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAINBOW_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAINBOW_FLAG); // 🏳️‍🌈 (`U+1F3F3 U+FE0F U+200D U+1F308`)"] #[doc="# assert_eq!(RAINBOW_FLAG.to_string().as_str(), \"🏳️‍🌈\");"]
#[doc="```"]
pub static RAINBOW_FLAG :  Emoji = Emoji::new("rainbow flag", "🏳️‍🌈"); // rainbow flag
#[doc="transgender flag 🏳️‍⚧️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRANSGENDER_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRANSGENDER_FLAG); // 🏳️‍⚧️ (`U+1F3F3 U+FE0F U+200D U+26A7 U+FE0F`)"] #[doc="# assert_eq!(TRANSGENDER_FLAG.to_string().as_str(), \"🏳️‍⚧️\");"]
#[doc="```"]
pub static TRANSGENDER_FLAG :  Emoji = Emoji::new("transgender flag", "🏳️‍⚧️"); // transgender flag
#[doc="triangular flag 🚩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRIANGULAR_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRIANGULAR_FLAG); // 🚩 (`U+1F6A9`)"] #[doc="# assert_eq!(TRIANGULAR_FLAG.to_string().as_str(), \"🚩\");"]
#[doc="```"]
pub static TRIANGULAR_FLAG :  Emoji = Emoji::new("triangular flag", "🚩"); // triangular flag
#[doc="white flag 🏳️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_FLAG); // 🏳️ (`U+1F3F3 U+FE0F`)"] #[doc="# assert_eq!(WHITE_FLAG.to_string().as_str(), \"🏳️\");"]
#[doc="```"]
pub static WHITE_FLAG :  Emoji = Emoji::new("white flag", "🏳️"); // white flag
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BLACK_FLAG, ],
&[&CHEQUERED_FLAG, ],
&[&CROSSED_FLAGS, ],
&[&PIRATE_FLAG, ],
&[&RAINBOW_FLAG, ],
&[&TRANSGENDER_FLAG, ],
&[&TRIANGULAR_FLAG, ],
&[&WHITE_FLAG, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BLACK_FLAG, &CHEQUERED_FLAG, &CROSSED_FLAGS, &PIRATE_FLAG, &RAINBOW_FLAG, &TRANSGENDER_FLAG, &TRIANGULAR_FLAG, &WHITE_FLAG, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // flags::flag

/// subdivision-flag 🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿🏴󠁧󠁢󠁷󠁬󠁳󠁿
pub mod subdivision_flag { // flags::subdivision_flag
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="flag: England 🏴󠁧󠁢󠁥󠁮󠁧󠁿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_ENGLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_ENGLAND); // 🏴󠁧󠁢󠁥󠁮󠁧󠁿 (`U+1F3F4 U+E0067 U+E0062 U+E0065 U+E006E U+E0067 U+E007F`)"] #[doc="# assert_eq!(FLAG_ENGLAND.to_string().as_str(), \"🏴󠁧󠁢󠁥󠁮󠁧󠁿\");"]
#[doc="```"]
pub static FLAG_ENGLAND :  Emoji = Emoji::new("flag: England", "🏴󠁧󠁢󠁥󠁮󠁧󠁿"); // flag: England
#[doc="flag: Scotland 🏴󠁧󠁢󠁳󠁣󠁴󠁿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_SCOTLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_SCOTLAND); // 🏴󠁧󠁢󠁳󠁣󠁴󠁿 (`U+1F3F4 U+E0067 U+E0062 U+E0073 U+E0063 U+E0074 U+E007F`)"] #[doc="# assert_eq!(FLAG_SCOTLAND.to_string().as_str(), \"🏴󠁧󠁢󠁳󠁣󠁴󠁿\");"]
#[doc="```"]
pub static FLAG_SCOTLAND :  Emoji = Emoji::new("flag: Scotland", "🏴󠁧󠁢󠁳󠁣󠁴󠁿"); // flag: Scotland
#[doc="flag: Wales 🏴󠁧󠁢󠁷󠁬󠁳󠁿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAG_WALES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAG_WALES); // 🏴󠁧󠁢󠁷󠁬󠁳󠁿 (`U+1F3F4 U+E0067 U+E0062 U+E0077 U+E006C U+E0073 U+E007F`)"] #[doc="# assert_eq!(FLAG_WALES.to_string().as_str(), \"🏴󠁧󠁢󠁷󠁬󠁳󠁿\");"]
#[doc="```"]
pub static FLAG_WALES :  Emoji = Emoji::new("flag: Wales", "🏴󠁧󠁢󠁷󠁬󠁳󠁿"); // flag: Wales
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FLAG_ENGLAND, ],
&[&FLAG_SCOTLAND, ],
&[&FLAG_WALES, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FLAG_ENGLAND, &FLAG_SCOTLAND, &FLAG_WALES, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // flags::subdivision_flag
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(country_flag::all_variants())
		.chain(flag::all_variants())
		.chain(subdivision_flag::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(country_flag::base_emojis())
		.chain(flag::base_emojis())
		.chain(subdivision_flag::base_emojis())
}
} // flags

/// Food & Drink 🏺🍼🍱
pub mod food_and_drink {

/// dishware 🏺🥢🍴
pub mod dishware { // food_and_drink::dishware
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="amphora 🏺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AMPHORA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AMPHORA); // 🏺 (`U+1F3FA`)"] #[doc="# assert_eq!(AMPHORA.to_string().as_str(), \"🏺\");"]
#[doc="```"]
pub static AMPHORA :  Emoji = Emoji::new("amphora", "🏺"); // amphora
#[doc="chopsticks 🥢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHOPSTICKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHOPSTICKS); // 🥢 (`U+1F962`)"] #[doc="# assert_eq!(CHOPSTICKS.to_string().as_str(), \"🥢\");"]
#[doc="```"]
pub static CHOPSTICKS :  Emoji = Emoji::new("chopsticks", "🥢"); // chopsticks
#[doc="fork and knife 🍴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FORK_AND_KNIFE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FORK_AND_KNIFE); // 🍴 (`U+1F374`)"] #[doc="# assert_eq!(FORK_AND_KNIFE.to_string().as_str(), \"🍴\");"]
#[doc="```"]
pub static FORK_AND_KNIFE :  Emoji = Emoji::new("fork and knife", "🍴"); // fork and knife
#[doc="fork and knife with plate 🍽️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FORK_AND_KNIFE_WITH_PLATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FORK_AND_KNIFE_WITH_PLATE); // 🍽️ (`U+1F37D U+FE0F`)"] #[doc="# assert_eq!(FORK_AND_KNIFE_WITH_PLATE.to_string().as_str(), \"🍽️\");"]
#[doc="```"]
pub static FORK_AND_KNIFE_WITH_PLATE :  Emoji = Emoji::new("fork and knife with plate", "🍽️"); // fork and knife with plate
#[doc="kitchen knife 🔪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KITCHEN_KNIFE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KITCHEN_KNIFE); // 🔪 (`U+1F52A`)"] #[doc="# assert_eq!(KITCHEN_KNIFE.to_string().as_str(), \"🔪\");"]
#[doc="```"]
pub static KITCHEN_KNIFE :  Emoji = Emoji::new("kitchen knife", "🔪"); // kitchen knife
#[doc="spoon 🥄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPOON); // 🥄 (`U+1F944`)"] #[doc="# assert_eq!(SPOON.to_string().as_str(), \"🥄\");"]
#[doc="```"]
pub static SPOON :  Emoji = Emoji::new("spoon", "🥄"); // spoon
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AMPHORA, ],
&[&CHOPSTICKS, ],
&[&FORK_AND_KNIFE, ],
&[&FORK_AND_KNIFE_WITH_PLATE, ],
&[&KITCHEN_KNIFE, ],
&[&SPOON, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AMPHORA, &CHOPSTICKS, &FORK_AND_KNIFE, &FORK_AND_KNIFE_WITH_PLATE, &KITCHEN_KNIFE, &SPOON, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::dishware

/// drink 🍼🍺🧃
pub mod drink { // food_and_drink::drink
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="baby bottle 🍼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_BOTTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_BOTTLE); // 🍼 (`U+1F37C`)"] #[doc="# assert_eq!(BABY_BOTTLE.to_string().as_str(), \"🍼\");"]
#[doc="```"]
pub static BABY_BOTTLE :  Emoji = Emoji::new("baby bottle", "🍼"); // baby bottle
#[doc="beer mug 🍺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEER_MUG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEER_MUG); // 🍺 (`U+1F37A`)"] #[doc="# assert_eq!(BEER_MUG.to_string().as_str(), \"🍺\");"]
#[doc="```"]
pub static BEER_MUG :  Emoji = Emoji::new("beer mug", "🍺"); // beer mug
#[doc="beverage box 🧃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEVERAGE_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEVERAGE_BOX); // 🧃 (`U+1F9C3`)"] #[doc="# assert_eq!(BEVERAGE_BOX.to_string().as_str(), \"🧃\");"]
#[doc="```"]
pub static BEVERAGE_BOX :  Emoji = Emoji::new("beverage box", "🧃"); // beverage box
#[doc="bottle with popping cork 🍾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOTTLE_WITH_POPPING_CORK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOTTLE_WITH_POPPING_CORK); // 🍾 (`U+1F37E`)"] #[doc="# assert_eq!(BOTTLE_WITH_POPPING_CORK.to_string().as_str(), \"🍾\");"]
#[doc="```"]
pub static BOTTLE_WITH_POPPING_CORK :  Emoji = Emoji::new("bottle with popping cork", "🍾"); // bottle with popping cork
#[doc="bubble tea 🧋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUBBLE_TEA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUBBLE_TEA); // 🧋 (`U+1F9CB`)"] #[doc="# assert_eq!(BUBBLE_TEA.to_string().as_str(), \"🧋\");"]
#[doc="```"]
pub static BUBBLE_TEA :  Emoji = Emoji::new("bubble tea", "🧋"); // bubble tea
#[doc="clinking beer mugs 🍻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLINKING_BEER_MUGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLINKING_BEER_MUGS); // 🍻 (`U+1F37B`)"] #[doc="# assert_eq!(CLINKING_BEER_MUGS.to_string().as_str(), \"🍻\");"]
#[doc="```"]
pub static CLINKING_BEER_MUGS :  Emoji = Emoji::new("clinking beer mugs", "🍻"); // clinking beer mugs
#[doc="clinking glasses 🥂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLINKING_GLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLINKING_GLASSES); // 🥂 (`U+1F942`)"] #[doc="# assert_eq!(CLINKING_GLASSES.to_string().as_str(), \"🥂\");"]
#[doc="```"]
pub static CLINKING_GLASSES :  Emoji = Emoji::new("clinking glasses", "🥂"); // clinking glasses
#[doc="cocktail glass 🍸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COCKTAIL_GLASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COCKTAIL_GLASS); // 🍸 (`U+1F378`)"] #[doc="# assert_eq!(COCKTAIL_GLASS.to_string().as_str(), \"🍸\");"]
#[doc="```"]
pub static COCKTAIL_GLASS :  Emoji = Emoji::new("cocktail glass", "🍸"); // cocktail glass
#[doc="cup with straw 🥤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUP_WITH_STRAW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUP_WITH_STRAW); // 🥤 (`U+1F964`)"] #[doc="# assert_eq!(CUP_WITH_STRAW.to_string().as_str(), \"🥤\");"]
#[doc="```"]
pub static CUP_WITH_STRAW :  Emoji = Emoji::new("cup with straw", "🥤"); // cup with straw
#[doc="glass of milk 🥛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLASS_OF_MILK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLASS_OF_MILK); // 🥛 (`U+1F95B`)"] #[doc="# assert_eq!(GLASS_OF_MILK.to_string().as_str(), \"🥛\");"]
#[doc="```"]
pub static GLASS_OF_MILK :  Emoji = Emoji::new("glass of milk", "🥛"); // glass of milk
#[doc="hot beverage ☕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_BEVERAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_BEVERAGE); // ☕ (`U+2615`)"] #[doc="# assert_eq!(HOT_BEVERAGE.to_string().as_str(), \"☕\");"]
#[doc="```"]
pub static HOT_BEVERAGE :  Emoji = Emoji::new("hot beverage", "☕"); // hot beverage
#[doc="ice 🧊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE); // 🧊 (`U+1F9CA`)"] #[doc="# assert_eq!(ICE.to_string().as_str(), \"🧊\");"]
#[doc="```"]
pub static ICE :  Emoji = Emoji::new("ice", "🧊"); // ice
#[doc="mate 🧉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MATE); // 🧉 (`U+1F9C9`)"] #[doc="# assert_eq!(MATE.to_string().as_str(), \"🧉\");"]
#[doc="```"]
pub static MATE :  Emoji = Emoji::new("mate", "🧉"); // mate
#[doc="sake 🍶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAKE); // 🍶 (`U+1F376`)"] #[doc="# assert_eq!(SAKE.to_string().as_str(), \"🍶\");"]
#[doc="```"]
pub static SAKE :  Emoji = Emoji::new("sake", "🍶"); // sake
#[doc="teacup without handle 🍵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEACUP_WITHOUT_HANDLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEACUP_WITHOUT_HANDLE); // 🍵 (`U+1F375`)"] #[doc="# assert_eq!(TEACUP_WITHOUT_HANDLE.to_string().as_str(), \"🍵\");"]
#[doc="```"]
pub static TEACUP_WITHOUT_HANDLE :  Emoji = Emoji::new("teacup without handle", "🍵"); // teacup without handle
#[doc="teapot 🫖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEAPOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEAPOT); // 🫖 (`U+1FAD6`)"] #[doc="# assert_eq!(TEAPOT.to_string().as_str(), \"🫖\");"]
#[doc="```"]
pub static TEAPOT :  Emoji = Emoji::new("teapot", "🫖"); // teapot
#[doc="tropical drink 🍹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROPICAL_DRINK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROPICAL_DRINK); // 🍹 (`U+1F379`)"] #[doc="# assert_eq!(TROPICAL_DRINK.to_string().as_str(), \"🍹\");"]
#[doc="```"]
pub static TROPICAL_DRINK :  Emoji = Emoji::new("tropical drink", "🍹"); // tropical drink
#[doc="tumbler glass 🥃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TUMBLER_GLASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TUMBLER_GLASS); // 🥃 (`U+1F943`)"] #[doc="# assert_eq!(TUMBLER_GLASS.to_string().as_str(), \"🥃\");"]
#[doc="```"]
pub static TUMBLER_GLASS :  Emoji = Emoji::new("tumbler glass", "🥃"); // tumbler glass
#[doc="wine glass 🍷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINE_GLASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINE_GLASS); // 🍷 (`U+1F377`)"] #[doc="# assert_eq!(WINE_GLASS.to_string().as_str(), \"🍷\");"]
#[doc="```"]
pub static WINE_GLASS :  Emoji = Emoji::new("wine glass", "🍷"); // wine glass
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BABY_BOTTLE, ],
&[&BEER_MUG, ],
&[&BEVERAGE_BOX, ],
&[&BOTTLE_WITH_POPPING_CORK, ],
&[&BUBBLE_TEA, ],
&[&CLINKING_BEER_MUGS, ],
&[&CLINKING_GLASSES, ],
&[&COCKTAIL_GLASS, ],
&[&CUP_WITH_STRAW, ],
&[&GLASS_OF_MILK, ],
&[&HOT_BEVERAGE, ],
&[&ICE, ],
&[&MATE, ],
&[&SAKE, ],
&[&TEACUP_WITHOUT_HANDLE, ],
&[&TEAPOT, ],
&[&TROPICAL_DRINK, ],
&[&TUMBLER_GLASS, ],
&[&WINE_GLASS, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BABY_BOTTLE, &BEER_MUG, &BEVERAGE_BOX, &BOTTLE_WITH_POPPING_CORK, &BUBBLE_TEA, &CLINKING_BEER_MUGS, &CLINKING_GLASSES, &COCKTAIL_GLASS, &CUP_WITH_STRAW, &GLASS_OF_MILK, &HOT_BEVERAGE, &ICE, &MATE, &SAKE, &TEACUP_WITHOUT_HANDLE, &TEAPOT, &TROPICAL_DRINK, &TUMBLER_GLASS, &WINE_GLASS, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::drink

/// food-asian 🍱🍚🍛
pub mod food_asian { // food_and_drink::food_asian
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bento box 🍱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BENTO_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BENTO_BOX); // 🍱 (`U+1F371`)"] #[doc="# assert_eq!(BENTO_BOX.to_string().as_str(), \"🍱\");"]
#[doc="```"]
pub static BENTO_BOX :  Emoji = Emoji::new("bento box", "🍱"); // bento box
#[doc="cooked rice 🍚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOKED_RICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOKED_RICE); // 🍚 (`U+1F35A`)"] #[doc="# assert_eq!(COOKED_RICE.to_string().as_str(), \"🍚\");"]
#[doc="```"]
pub static COOKED_RICE :  Emoji = Emoji::new("cooked rice", "🍚"); // cooked rice
#[doc="curry rice 🍛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURRY_RICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURRY_RICE); // 🍛 (`U+1F35B`)"] #[doc="# assert_eq!(CURRY_RICE.to_string().as_str(), \"🍛\");"]
#[doc="```"]
pub static CURRY_RICE :  Emoji = Emoji::new("curry rice", "🍛"); // curry rice
#[doc="dango 🍡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DANGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DANGO); // 🍡 (`U+1F361`)"] #[doc="# assert_eq!(DANGO.to_string().as_str(), \"🍡\");"]
#[doc="```"]
pub static DANGO :  Emoji = Emoji::new("dango", "🍡"); // dango
#[doc="dumpling 🥟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DUMPLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DUMPLING); // 🥟 (`U+1F95F`)"] #[doc="# assert_eq!(DUMPLING.to_string().as_str(), \"🥟\");"]
#[doc="```"]
pub static DUMPLING :  Emoji = Emoji::new("dumpling", "🥟"); // dumpling
#[doc="fish cake with swirl 🍥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FISH_CAKE_WITH_SWIRL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FISH_CAKE_WITH_SWIRL); // 🍥 (`U+1F365`)"] #[doc="# assert_eq!(FISH_CAKE_WITH_SWIRL.to_string().as_str(), \"🍥\");"]
#[doc="```"]
pub static FISH_CAKE_WITH_SWIRL :  Emoji = Emoji::new("fish cake with swirl", "🍥"); // fish cake with swirl
#[doc="fortune cookie 🥠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FORTUNE_COOKIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FORTUNE_COOKIE); // 🥠 (`U+1F960`)"] #[doc="# assert_eq!(FORTUNE_COOKIE.to_string().as_str(), \"🥠\");"]
#[doc="```"]
pub static FORTUNE_COOKIE :  Emoji = Emoji::new("fortune cookie", "🥠"); // fortune cookie
#[doc="fried shrimp 🍤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRIED_SHRIMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRIED_SHRIMP); // 🍤 (`U+1F364`)"] #[doc="# assert_eq!(FRIED_SHRIMP.to_string().as_str(), \"🍤\");"]
#[doc="```"]
pub static FRIED_SHRIMP :  Emoji = Emoji::new("fried shrimp", "🍤"); // fried shrimp
#[doc="moon cake 🥮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOON_CAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOON_CAKE); // 🥮 (`U+1F96E`)"] #[doc="# assert_eq!(MOON_CAKE.to_string().as_str(), \"🥮\");"]
#[doc="```"]
pub static MOON_CAKE :  Emoji = Emoji::new("moon cake", "🥮"); // moon cake
#[doc="oden 🍢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ODEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ODEN); // 🍢 (`U+1F362`)"] #[doc="# assert_eq!(ODEN.to_string().as_str(), \"🍢\");"]
#[doc="```"]
pub static ODEN :  Emoji = Emoji::new("oden", "🍢"); // oden
#[doc="rice ball 🍙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RICE_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RICE_BALL); // 🍙 (`U+1F359`)"] #[doc="# assert_eq!(RICE_BALL.to_string().as_str(), \"🍙\");"]
#[doc="```"]
pub static RICE_BALL :  Emoji = Emoji::new("rice ball", "🍙"); // rice ball
#[doc="rice cracker 🍘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RICE_CRACKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RICE_CRACKER); // 🍘 (`U+1F358`)"] #[doc="# assert_eq!(RICE_CRACKER.to_string().as_str(), \"🍘\");"]
#[doc="```"]
pub static RICE_CRACKER :  Emoji = Emoji::new("rice cracker", "🍘"); // rice cracker
#[doc="roasted sweet potato 🍠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROASTED_SWEET_POTATO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROASTED_SWEET_POTATO); // 🍠 (`U+1F360`)"] #[doc="# assert_eq!(ROASTED_SWEET_POTATO.to_string().as_str(), \"🍠\");"]
#[doc="```"]
pub static ROASTED_SWEET_POTATO :  Emoji = Emoji::new("roasted sweet potato", "🍠"); // roasted sweet potato
#[doc="spaghetti 🍝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPAGHETTI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPAGHETTI); // 🍝 (`U+1F35D`)"] #[doc="# assert_eq!(SPAGHETTI.to_string().as_str(), \"🍝\");"]
#[doc="```"]
pub static SPAGHETTI :  Emoji = Emoji::new("spaghetti", "🍝"); // spaghetti
#[doc="steaming bowl 🍜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STEAMING_BOWL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STEAMING_BOWL); // 🍜 (`U+1F35C`)"] #[doc="# assert_eq!(STEAMING_BOWL.to_string().as_str(), \"🍜\");"]
#[doc="```"]
pub static STEAMING_BOWL :  Emoji = Emoji::new("steaming bowl", "🍜"); // steaming bowl
#[doc="sushi 🍣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUSHI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUSHI); // 🍣 (`U+1F363`)"] #[doc="# assert_eq!(SUSHI.to_string().as_str(), \"🍣\");"]
#[doc="```"]
pub static SUSHI :  Emoji = Emoji::new("sushi", "🍣"); // sushi
#[doc="takeout box 🥡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAKEOUT_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAKEOUT_BOX); // 🥡 (`U+1F961`)"] #[doc="# assert_eq!(TAKEOUT_BOX.to_string().as_str(), \"🥡\");"]
#[doc="```"]
pub static TAKEOUT_BOX :  Emoji = Emoji::new("takeout box", "🥡"); // takeout box
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BENTO_BOX, ],
&[&COOKED_RICE, ],
&[&CURRY_RICE, ],
&[&DANGO, ],
&[&DUMPLING, ],
&[&FISH_CAKE_WITH_SWIRL, ],
&[&FORTUNE_COOKIE, ],
&[&FRIED_SHRIMP, ],
&[&MOON_CAKE, ],
&[&ODEN, ],
&[&RICE_BALL, ],
&[&RICE_CRACKER, ],
&[&ROASTED_SWEET_POTATO, ],
&[&SPAGHETTI, ],
&[&STEAMING_BOWL, ],
&[&SUSHI, ],
&[&TAKEOUT_BOX, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BENTO_BOX, &COOKED_RICE, &CURRY_RICE, &DANGO, &DUMPLING, &FISH_CAKE_WITH_SWIRL, &FORTUNE_COOKIE, &FRIED_SHRIMP, &MOON_CAKE, &ODEN, &RICE_BALL, &RICE_CRACKER, &ROASTED_SWEET_POTATO, &SPAGHETTI, &STEAMING_BOWL, &SUSHI, &TAKEOUT_BOX, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::food_asian

/// food-fruit 🍌🫐🍒
pub mod food_fruit { // food_and_drink::food_fruit
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="banana 🍌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BANANA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BANANA); // 🍌 (`U+1F34C`)"] #[doc="# assert_eq!(BANANA.to_string().as_str(), \"🍌\");"]
#[doc="```"]
pub static BANANA :  Emoji = Emoji::new("banana", "🍌"); // banana
#[doc="blueberries 🫐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUEBERRIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUEBERRIES); // 🫐 (`U+1FAD0`)"] #[doc="# assert_eq!(BLUEBERRIES.to_string().as_str(), \"🫐\");"]
#[doc="```"]
pub static BLUEBERRIES :  Emoji = Emoji::new("blueberries", "🫐"); // blueberries
#[doc="cherries 🍒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHERRIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHERRIES); // 🍒 (`U+1F352`)"] #[doc="# assert_eq!(CHERRIES.to_string().as_str(), \"🍒\");"]
#[doc="```"]
pub static CHERRIES :  Emoji = Emoji::new("cherries", "🍒"); // cherries
#[doc="coconut 🥥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COCONUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COCONUT); // 🥥 (`U+1F965`)"] #[doc="# assert_eq!(COCONUT.to_string().as_str(), \"🥥\");"]
#[doc="```"]
pub static COCONUT :  Emoji = Emoji::new("coconut", "🥥"); // coconut
#[doc="grapes 🍇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRAPES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRAPES); // 🍇 (`U+1F347`)"] #[doc="# assert_eq!(GRAPES.to_string().as_str(), \"🍇\");"]
#[doc="```"]
pub static GRAPES :  Emoji = Emoji::new("grapes", "🍇"); // grapes
#[doc="green apple 🍏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_APPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_APPLE); // 🍏 (`U+1F34F`)"] #[doc="# assert_eq!(GREEN_APPLE.to_string().as_str(), \"🍏\");"]
#[doc="```"]
pub static GREEN_APPLE :  Emoji = Emoji::new("green apple", "🍏"); // green apple
#[doc="kiwi fruit 🥝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KIWI_FRUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KIWI_FRUIT); // 🥝 (`U+1F95D`)"] #[doc="# assert_eq!(KIWI_FRUIT.to_string().as_str(), \"🥝\");"]
#[doc="```"]
pub static KIWI_FRUIT :  Emoji = Emoji::new("kiwi fruit", "🥝"); // kiwi fruit
#[doc="lemon 🍋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEMON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEMON); // 🍋 (`U+1F34B`)"] #[doc="# assert_eq!(LEMON.to_string().as_str(), \"🍋\");"]
#[doc="```"]
pub static LEMON :  Emoji = Emoji::new("lemon", "🍋"); // lemon
#[doc="mango 🥭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MANGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MANGO); // 🥭 (`U+1F96D`)"] #[doc="# assert_eq!(MANGO.to_string().as_str(), \"🥭\");"]
#[doc="```"]
pub static MANGO :  Emoji = Emoji::new("mango", "🥭"); // mango
#[doc="melon 🍈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MELON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MELON); // 🍈 (`U+1F348`)"] #[doc="# assert_eq!(MELON.to_string().as_str(), \"🍈\");"]
#[doc="```"]
pub static MELON :  Emoji = Emoji::new("melon", "🍈"); // melon
#[doc="olive 🫒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLIVE); // 🫒 (`U+1FAD2`)"] #[doc="# assert_eq!(OLIVE.to_string().as_str(), \"🫒\");"]
#[doc="```"]
pub static OLIVE :  Emoji = Emoji::new("olive", "🫒"); // olive
#[doc="peach 🍑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEACH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEACH); // 🍑 (`U+1F351`)"] #[doc="# assert_eq!(PEACH.to_string().as_str(), \"🍑\");"]
#[doc="```"]
pub static PEACH :  Emoji = Emoji::new("peach", "🍑"); // peach
#[doc="pear 🍐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEAR); // 🍐 (`U+1F350`)"] #[doc="# assert_eq!(PEAR.to_string().as_str(), \"🍐\");"]
#[doc="```"]
pub static PEAR :  Emoji = Emoji::new("pear", "🍐"); // pear
#[doc="pineapple 🍍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINEAPPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINEAPPLE); // 🍍 (`U+1F34D`)"] #[doc="# assert_eq!(PINEAPPLE.to_string().as_str(), \"🍍\");"]
#[doc="```"]
pub static PINEAPPLE :  Emoji = Emoji::new("pineapple", "🍍"); // pineapple
#[doc="red apple 🍎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_APPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_APPLE); // 🍎 (`U+1F34E`)"] #[doc="# assert_eq!(RED_APPLE.to_string().as_str(), \"🍎\");"]
#[doc="```"]
pub static RED_APPLE :  Emoji = Emoji::new("red apple", "🍎"); // red apple
#[doc="strawberry 🍓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STRAWBERRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STRAWBERRY); // 🍓 (`U+1F353`)"] #[doc="# assert_eq!(STRAWBERRY.to_string().as_str(), \"🍓\");"]
#[doc="```"]
pub static STRAWBERRY :  Emoji = Emoji::new("strawberry", "🍓"); // strawberry
#[doc="tangerine 🍊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TANGERINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TANGERINE); // 🍊 (`U+1F34A`)"] #[doc="# assert_eq!(TANGERINE.to_string().as_str(), \"🍊\");"]
#[doc="```"]
pub static TANGERINE :  Emoji = Emoji::new("tangerine", "🍊"); // tangerine
#[doc="tomato 🍅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOMATO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOMATO); // 🍅 (`U+1F345`)"] #[doc="# assert_eq!(TOMATO.to_string().as_str(), \"🍅\");"]
#[doc="```"]
pub static TOMATO :  Emoji = Emoji::new("tomato", "🍅"); // tomato
#[doc="watermelon 🍉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATERMELON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATERMELON); // 🍉 (`U+1F349`)"] #[doc="# assert_eq!(WATERMELON.to_string().as_str(), \"🍉\");"]
#[doc="```"]
pub static WATERMELON :  Emoji = Emoji::new("watermelon", "🍉"); // watermelon
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BANANA, ],
&[&BLUEBERRIES, ],
&[&CHERRIES, ],
&[&COCONUT, ],
&[&GRAPES, ],
&[&GREEN_APPLE, ],
&[&KIWI_FRUIT, ],
&[&LEMON, ],
&[&MANGO, ],
&[&MELON, ],
&[&OLIVE, ],
&[&PEACH, ],
&[&PEAR, ],
&[&PINEAPPLE, ],
&[&RED_APPLE, ],
&[&STRAWBERRY, ],
&[&TANGERINE, ],
&[&TOMATO, ],
&[&WATERMELON, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BANANA, &BLUEBERRIES, &CHERRIES, &COCONUT, &GRAPES, &GREEN_APPLE, &KIWI_FRUIT, &LEMON, &MANGO, &MELON, &OLIVE, &PEACH, &PEAR, &PINEAPPLE, &RED_APPLE, &STRAWBERRY, &TANGERINE, &TOMATO, &WATERMELON, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::food_fruit

/// food-marine 🦀🦞🦪
pub mod food_marine { // food_and_drink::food_marine
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="crab 🦀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRAB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRAB); // 🦀 (`U+1F980`)"] #[doc="# assert_eq!(CRAB.to_string().as_str(), \"🦀\");"]
#[doc="```"]
pub static CRAB :  Emoji = Emoji::new("crab", "🦀"); // crab
#[doc="lobster 🦞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOBSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOBSTER); // 🦞 (`U+1F99E`)"] #[doc="# assert_eq!(LOBSTER.to_string().as_str(), \"🦞\");"]
#[doc="```"]
pub static LOBSTER :  Emoji = Emoji::new("lobster", "🦞"); // lobster
#[doc="oyster 🦪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OYSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OYSTER); // 🦪 (`U+1F9AA`)"] #[doc="# assert_eq!(OYSTER.to_string().as_str(), \"🦪\");"]
#[doc="```"]
pub static OYSTER :  Emoji = Emoji::new("oyster", "🦪"); // oyster
#[doc="shrimp 🦐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHRIMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHRIMP); // 🦐 (`U+1F990`)"] #[doc="# assert_eq!(SHRIMP.to_string().as_str(), \"🦐\");"]
#[doc="```"]
pub static SHRIMP :  Emoji = Emoji::new("shrimp", "🦐"); // shrimp
#[doc="squid 🦑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SQUID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SQUID); // 🦑 (`U+1F991`)"] #[doc="# assert_eq!(SQUID.to_string().as_str(), \"🦑\");"]
#[doc="```"]
pub static SQUID :  Emoji = Emoji::new("squid", "🦑"); // squid
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CRAB, ],
&[&LOBSTER, ],
&[&OYSTER, ],
&[&SHRIMP, ],
&[&SQUID, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CRAB, &LOBSTER, &OYSTER, &SHRIMP, &SQUID, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::food_marine

/// food-prepared 🥓🥯🥖
pub mod food_prepared { // food_and_drink::food_prepared
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bacon 🥓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACON); // 🥓 (`U+1F953`)"] #[doc="# assert_eq!(BACON.to_string().as_str(), \"🥓\");"]
#[doc="```"]
pub static BACON :  Emoji = Emoji::new("bacon", "🥓"); // bacon
#[doc="bagel 🥯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAGEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAGEL); // 🥯 (`U+1F96F`)"] #[doc="# assert_eq!(BAGEL.to_string().as_str(), \"🥯\");"]
#[doc="```"]
pub static BAGEL :  Emoji = Emoji::new("bagel", "🥯"); // bagel
#[doc="baguette bread 🥖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAGUETTE_BREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAGUETTE_BREAD); // 🥖 (`U+1F956`)"] #[doc="# assert_eq!(BAGUETTE_BREAD.to_string().as_str(), \"🥖\");"]
#[doc="```"]
pub static BAGUETTE_BREAD :  Emoji = Emoji::new("baguette bread", "🥖"); // baguette bread
#[doc="bowl with spoon 🥣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOWL_WITH_SPOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOWL_WITH_SPOON); // 🥣 (`U+1F963`)"] #[doc="# assert_eq!(BOWL_WITH_SPOON.to_string().as_str(), \"🥣\");"]
#[doc="```"]
pub static BOWL_WITH_SPOON :  Emoji = Emoji::new("bowl with spoon", "🥣"); // bowl with spoon
#[doc="bread 🍞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BREAD); // 🍞 (`U+1F35E`)"] #[doc="# assert_eq!(BREAD.to_string().as_str(), \"🍞\");"]
#[doc="```"]
pub static BREAD :  Emoji = Emoji::new("bread", "🍞"); // bread
#[doc="burrito 🌯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BURRITO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BURRITO); // 🌯 (`U+1F32F`)"] #[doc="# assert_eq!(BURRITO.to_string().as_str(), \"🌯\");"]
#[doc="```"]
pub static BURRITO :  Emoji = Emoji::new("burrito", "🌯"); // burrito
#[doc="butter 🧈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUTTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUTTER); // 🧈 (`U+1F9C8`)"] #[doc="# assert_eq!(BUTTER.to_string().as_str(), \"🧈\");"]
#[doc="```"]
pub static BUTTER :  Emoji = Emoji::new("butter", "🧈"); // butter
#[doc="canned food 🥫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANNED_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANNED_FOOD); // 🥫 (`U+1F96B`)"] #[doc="# assert_eq!(CANNED_FOOD.to_string().as_str(), \"🥫\");"]
#[doc="```"]
pub static CANNED_FOOD :  Emoji = Emoji::new("canned food", "🥫"); // canned food
#[doc="cheese wedge 🧀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHEESE_WEDGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHEESE_WEDGE); // 🧀 (`U+1F9C0`)"] #[doc="# assert_eq!(CHEESE_WEDGE.to_string().as_str(), \"🧀\");"]
#[doc="```"]
pub static CHEESE_WEDGE :  Emoji = Emoji::new("cheese wedge", "🧀"); // cheese wedge
#[doc="cooking 🍳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOKING); // 🍳 (`U+1F373`)"] #[doc="# assert_eq!(COOKING.to_string().as_str(), \"🍳\");"]
#[doc="```"]
pub static COOKING :  Emoji = Emoji::new("cooking", "🍳"); // cooking
#[doc="croissant 🥐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROISSANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROISSANT); // 🥐 (`U+1F950`)"] #[doc="# assert_eq!(CROISSANT.to_string().as_str(), \"🥐\");"]
#[doc="```"]
pub static CROISSANT :  Emoji = Emoji::new("croissant", "🥐"); // croissant
#[doc="cut of meat 🥩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUT_OF_MEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUT_OF_MEAT); // 🥩 (`U+1F969`)"] #[doc="# assert_eq!(CUT_OF_MEAT.to_string().as_str(), \"🥩\");"]
#[doc="```"]
pub static CUT_OF_MEAT :  Emoji = Emoji::new("cut of meat", "🥩"); // cut of meat
#[doc="egg 🥚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EGG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EGG); // 🥚 (`U+1F95A`)"] #[doc="# assert_eq!(EGG.to_string().as_str(), \"🥚\");"]
#[doc="```"]
pub static EGG :  Emoji = Emoji::new("egg", "🥚"); // egg
#[doc="falafel 🧆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FALAFEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FALAFEL); // 🧆 (`U+1F9C6`)"] #[doc="# assert_eq!(FALAFEL.to_string().as_str(), \"🧆\");"]
#[doc="```"]
pub static FALAFEL :  Emoji = Emoji::new("falafel", "🧆"); // falafel
#[doc="flatbread 🫓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLATBREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLATBREAD); // 🫓 (`U+1FAD3`)"] #[doc="# assert_eq!(FLATBREAD.to_string().as_str(), \"🫓\");"]
#[doc="```"]
pub static FLATBREAD :  Emoji = Emoji::new("flatbread", "🫓"); // flatbread
#[doc="fondue 🫕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FONDUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FONDUE); // 🫕 (`U+1FAD5`)"] #[doc="# assert_eq!(FONDUE.to_string().as_str(), \"🫕\");"]
#[doc="```"]
pub static FONDUE :  Emoji = Emoji::new("fondue", "🫕"); // fondue
#[doc="french fries 🍟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FRENCH_FRIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FRENCH_FRIES); // 🍟 (`U+1F35F`)"] #[doc="# assert_eq!(FRENCH_FRIES.to_string().as_str(), \"🍟\");"]
#[doc="```"]
pub static FRENCH_FRIES :  Emoji = Emoji::new("french fries", "🍟"); // french fries
#[doc="green salad 🥗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_SALAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_SALAD); // 🥗 (`U+1F957`)"] #[doc="# assert_eq!(GREEN_SALAD.to_string().as_str(), \"🥗\");"]
#[doc="```"]
pub static GREEN_SALAD :  Emoji = Emoji::new("green salad", "🥗"); // green salad
#[doc="hamburger 🍔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMBURGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMBURGER); // 🍔 (`U+1F354`)"] #[doc="# assert_eq!(HAMBURGER.to_string().as_str(), \"🍔\");"]
#[doc="```"]
pub static HAMBURGER :  Emoji = Emoji::new("hamburger", "🍔"); // hamburger
#[doc="hot dog 🌭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_DOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_DOG); // 🌭 (`U+1F32D`)"] #[doc="# assert_eq!(HOT_DOG.to_string().as_str(), \"🌭\");"]
#[doc="```"]
pub static HOT_DOG :  Emoji = Emoji::new("hot dog", "🌭"); // hot dog
#[doc="meat on bone 🍖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEAT_ON_BONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEAT_ON_BONE); // 🍖 (`U+1F356`)"] #[doc="# assert_eq!(MEAT_ON_BONE.to_string().as_str(), \"🍖\");"]
#[doc="```"]
pub static MEAT_ON_BONE :  Emoji = Emoji::new("meat on bone", "🍖"); // meat on bone
#[doc="pancakes 🥞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PANCAKES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PANCAKES); // 🥞 (`U+1F95E`)"] #[doc="# assert_eq!(PANCAKES.to_string().as_str(), \"🥞\");"]
#[doc="```"]
pub static PANCAKES :  Emoji = Emoji::new("pancakes", "🥞"); // pancakes
#[doc="pizza 🍕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIZZA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIZZA); // 🍕 (`U+1F355`)"] #[doc="# assert_eq!(PIZZA.to_string().as_str(), \"🍕\");"]
#[doc="```"]
pub static PIZZA :  Emoji = Emoji::new("pizza", "🍕"); // pizza
#[doc="popcorn 🍿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POPCORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POPCORN); // 🍿 (`U+1F37F`)"] #[doc="# assert_eq!(POPCORN.to_string().as_str(), \"🍿\");"]
#[doc="```"]
pub static POPCORN :  Emoji = Emoji::new("popcorn", "🍿"); // popcorn
#[doc="pot of food 🍲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POT_OF_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POT_OF_FOOD); // 🍲 (`U+1F372`)"] #[doc="# assert_eq!(POT_OF_FOOD.to_string().as_str(), \"🍲\");"]
#[doc="```"]
pub static POT_OF_FOOD :  Emoji = Emoji::new("pot of food", "🍲"); // pot of food
#[doc="poultry leg 🍗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POULTRY_LEG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POULTRY_LEG); // 🍗 (`U+1F357`)"] #[doc="# assert_eq!(POULTRY_LEG.to_string().as_str(), \"🍗\");"]
#[doc="```"]
pub static POULTRY_LEG :  Emoji = Emoji::new("poultry leg", "🍗"); // poultry leg
#[doc="pretzel 🥨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRETZEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRETZEL); // 🥨 (`U+1F968`)"] #[doc="# assert_eq!(PRETZEL.to_string().as_str(), \"🥨\");"]
#[doc="```"]
pub static PRETZEL :  Emoji = Emoji::new("pretzel", "🥨"); // pretzel
#[doc="salt 🧂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SALT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SALT); // 🧂 (`U+1F9C2`)"] #[doc="# assert_eq!(SALT.to_string().as_str(), \"🧂\");"]
#[doc="```"]
pub static SALT :  Emoji = Emoji::new("salt", "🧂"); // salt
#[doc="sandwich 🥪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SANDWICH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SANDWICH); // 🥪 (`U+1F96A`)"] #[doc="# assert_eq!(SANDWICH.to_string().as_str(), \"🥪\");"]
#[doc="```"]
pub static SANDWICH :  Emoji = Emoji::new("sandwich", "🥪"); // sandwich
#[doc="shallow pan of food 🥘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHALLOW_PAN_OF_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHALLOW_PAN_OF_FOOD); // 🥘 (`U+1F958`)"] #[doc="# assert_eq!(SHALLOW_PAN_OF_FOOD.to_string().as_str(), \"🥘\");"]
#[doc="```"]
pub static SHALLOW_PAN_OF_FOOD :  Emoji = Emoji::new("shallow pan of food", "🥘"); // shallow pan of food
#[doc="stuffed flatbread 🥙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STUFFED_FLATBREAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STUFFED_FLATBREAD); // 🥙 (`U+1F959`)"] #[doc="# assert_eq!(STUFFED_FLATBREAD.to_string().as_str(), \"🥙\");"]
#[doc="```"]
pub static STUFFED_FLATBREAD :  Emoji = Emoji::new("stuffed flatbread", "🥙"); // stuffed flatbread
#[doc="taco 🌮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TACO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TACO); // 🌮 (`U+1F32E`)"] #[doc="# assert_eq!(TACO.to_string().as_str(), \"🌮\");"]
#[doc="```"]
pub static TACO :  Emoji = Emoji::new("taco", "🌮"); // taco
#[doc="tamale 🫔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAMALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAMALE); // 🫔 (`U+1FAD4`)"] #[doc="# assert_eq!(TAMALE.to_string().as_str(), \"🫔\");"]
#[doc="```"]
pub static TAMALE :  Emoji = Emoji::new("tamale", "🫔"); // tamale
#[doc="waffle 🧇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAFFLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAFFLE); // 🧇 (`U+1F9C7`)"] #[doc="# assert_eq!(WAFFLE.to_string().as_str(), \"🧇\");"]
#[doc="```"]
pub static WAFFLE :  Emoji = Emoji::new("waffle", "🧇"); // waffle
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BACON, ],
&[&BAGEL, ],
&[&BAGUETTE_BREAD, ],
&[&BOWL_WITH_SPOON, ],
&[&BREAD, ],
&[&BURRITO, ],
&[&BUTTER, ],
&[&CANNED_FOOD, ],
&[&CHEESE_WEDGE, ],
&[&COOKING, ],
&[&CROISSANT, ],
&[&CUT_OF_MEAT, ],
&[&EGG, ],
&[&FALAFEL, ],
&[&FLATBREAD, ],
&[&FONDUE, ],
&[&FRENCH_FRIES, ],
&[&GREEN_SALAD, ],
&[&HAMBURGER, ],
&[&HOT_DOG, ],
&[&MEAT_ON_BONE, ],
&[&PANCAKES, ],
&[&PIZZA, ],
&[&POPCORN, ],
&[&POT_OF_FOOD, ],
&[&POULTRY_LEG, ],
&[&PRETZEL, ],
&[&SALT, ],
&[&SANDWICH, ],
&[&SHALLOW_PAN_OF_FOOD, ],
&[&STUFFED_FLATBREAD, ],
&[&TACO, ],
&[&TAMALE, ],
&[&WAFFLE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BACON, &BAGEL, &BAGUETTE_BREAD, &BOWL_WITH_SPOON, &BREAD, &BURRITO, &BUTTER, &CANNED_FOOD, &CHEESE_WEDGE, &COOKING, &CROISSANT, &CUT_OF_MEAT, &EGG, &FALAFEL, &FLATBREAD, &FONDUE, &FRENCH_FRIES, &GREEN_SALAD, &HAMBURGER, &HOT_DOG, &MEAT_ON_BONE, &PANCAKES, &PIZZA, &POPCORN, &POT_OF_FOOD, &POULTRY_LEG, &PRETZEL, &SALT, &SANDWICH, &SHALLOW_PAN_OF_FOOD, &STUFFED_FLATBREAD, &TACO, &TAMALE, &WAFFLE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::food_prepared

/// food-sweet 🎂🍬🍫
pub mod food_sweet { // food_and_drink::food_sweet
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="birthday cake 🎂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIRTHDAY_CAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIRTHDAY_CAKE); // 🎂 (`U+1F382`)"] #[doc="# assert_eq!(BIRTHDAY_CAKE.to_string().as_str(), \"🎂\");"]
#[doc="```"]
pub static BIRTHDAY_CAKE :  Emoji = Emoji::new("birthday cake", "🎂"); // birthday cake
#[doc="candy 🍬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANDY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANDY); // 🍬 (`U+1F36C`)"] #[doc="# assert_eq!(CANDY.to_string().as_str(), \"🍬\");"]
#[doc="```"]
pub static CANDY :  Emoji = Emoji::new("candy", "🍬"); // candy
#[doc="chocolate bar 🍫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHOCOLATE_BAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHOCOLATE_BAR); // 🍫 (`U+1F36B`)"] #[doc="# assert_eq!(CHOCOLATE_BAR.to_string().as_str(), \"🍫\");"]
#[doc="```"]
pub static CHOCOLATE_BAR :  Emoji = Emoji::new("chocolate bar", "🍫"); // chocolate bar
#[doc="cookie 🍪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOKIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOKIE); // 🍪 (`U+1F36A`)"] #[doc="# assert_eq!(COOKIE.to_string().as_str(), \"🍪\");"]
#[doc="```"]
pub static COOKIE :  Emoji = Emoji::new("cookie", "🍪"); // cookie
#[doc="cupcake 🧁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUPCAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUPCAKE); // 🧁 (`U+1F9C1`)"] #[doc="# assert_eq!(CUPCAKE.to_string().as_str(), \"🧁\");"]
#[doc="```"]
pub static CUPCAKE :  Emoji = Emoji::new("cupcake", "🧁"); // cupcake
#[doc="custard 🍮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUSTARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUSTARD); // 🍮 (`U+1F36E`)"] #[doc="# assert_eq!(CUSTARD.to_string().as_str(), \"🍮\");"]
#[doc="```"]
pub static CUSTARD :  Emoji = Emoji::new("custard", "🍮"); // custard
#[doc="doughnut 🍩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOUGHNUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOUGHNUT); // 🍩 (`U+1F369`)"] #[doc="# assert_eq!(DOUGHNUT.to_string().as_str(), \"🍩\");"]
#[doc="```"]
pub static DOUGHNUT :  Emoji = Emoji::new("doughnut", "🍩"); // doughnut
#[doc="honey pot 🍯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HONEY_POT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HONEY_POT); // 🍯 (`U+1F36F`)"] #[doc="# assert_eq!(HONEY_POT.to_string().as_str(), \"🍯\");"]
#[doc="```"]
pub static HONEY_POT :  Emoji = Emoji::new("honey pot", "🍯"); // honey pot
#[doc="ice cream 🍨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ICE_CREAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ICE_CREAM); // 🍨 (`U+1F368`)"] #[doc="# assert_eq!(ICE_CREAM.to_string().as_str(), \"🍨\");"]
#[doc="```"]
pub static ICE_CREAM :  Emoji = Emoji::new("ice cream", "🍨"); // ice cream
#[doc="lollipop 🍭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOLLIPOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOLLIPOP); // 🍭 (`U+1F36D`)"] #[doc="# assert_eq!(LOLLIPOP.to_string().as_str(), \"🍭\");"]
#[doc="```"]
pub static LOLLIPOP :  Emoji = Emoji::new("lollipop", "🍭"); // lollipop
#[doc="pie 🥧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PIE); // 🥧 (`U+1F967`)"] #[doc="# assert_eq!(PIE.to_string().as_str(), \"🥧\");"]
#[doc="```"]
pub static PIE :  Emoji = Emoji::new("pie", "🥧"); // pie
#[doc="shaved ice 🍧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHAVED_ICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHAVED_ICE); // 🍧 (`U+1F367`)"] #[doc="# assert_eq!(SHAVED_ICE.to_string().as_str(), \"🍧\");"]
#[doc="```"]
pub static SHAVED_ICE :  Emoji = Emoji::new("shaved ice", "🍧"); // shaved ice
#[doc="shortcake 🍰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHORTCAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHORTCAKE); // 🍰 (`U+1F370`)"] #[doc="# assert_eq!(SHORTCAKE.to_string().as_str(), \"🍰\");"]
#[doc="```"]
pub static SHORTCAKE :  Emoji = Emoji::new("shortcake", "🍰"); // shortcake
#[doc="soft ice cream 🍦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOFT_ICE_CREAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOFT_ICE_CREAM); // 🍦 (`U+1F366`)"] #[doc="# assert_eq!(SOFT_ICE_CREAM.to_string().as_str(), \"🍦\");"]
#[doc="```"]
pub static SOFT_ICE_CREAM :  Emoji = Emoji::new("soft ice cream", "🍦"); // soft ice cream
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BIRTHDAY_CAKE, ],
&[&CANDY, ],
&[&CHOCOLATE_BAR, ],
&[&COOKIE, ],
&[&CUPCAKE, ],
&[&CUSTARD, ],
&[&DOUGHNUT, ],
&[&HONEY_POT, ],
&[&ICE_CREAM, ],
&[&LOLLIPOP, ],
&[&PIE, ],
&[&SHAVED_ICE, ],
&[&SHORTCAKE, ],
&[&SOFT_ICE_CREAM, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BIRTHDAY_CAKE, &CANDY, &CHOCOLATE_BAR, &COOKIE, &CUPCAKE, &CUSTARD, &DOUGHNUT, &HONEY_POT, &ICE_CREAM, &LOLLIPOP, &PIE, &SHAVED_ICE, &SHORTCAKE, &SOFT_ICE_CREAM, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::food_sweet

/// food-vegetable 🥑🫑🥦
pub mod food_vegetable { // food_and_drink::food_vegetable
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="avocado 🥑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AVOCADO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AVOCADO); // 🥑 (`U+1F951`)"] #[doc="# assert_eq!(AVOCADO.to_string().as_str(), \"🥑\");"]
#[doc="```"]
pub static AVOCADO :  Emoji = Emoji::new("avocado", "🥑"); // avocado
#[doc="bell pepper 🫑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELL_PEPPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELL_PEPPER); // 🫑 (`U+1FAD1`)"] #[doc="# assert_eq!(BELL_PEPPER.to_string().as_str(), \"🫑\");"]
#[doc="```"]
pub static BELL_PEPPER :  Emoji = Emoji::new("bell pepper", "🫑"); // bell pepper
#[doc="broccoli 🥦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROCCOLI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROCCOLI); // 🥦 (`U+1F966`)"] #[doc="# assert_eq!(BROCCOLI.to_string().as_str(), \"🥦\");"]
#[doc="```"]
pub static BROCCOLI :  Emoji = Emoji::new("broccoli", "🥦"); // broccoli
#[doc="carrot 🥕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARROT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARROT); // 🥕 (`U+1F955`)"] #[doc="# assert_eq!(CARROT.to_string().as_str(), \"🥕\");"]
#[doc="```"]
pub static CARROT :  Emoji = Emoji::new("carrot", "🥕"); // carrot
#[doc="chestnut 🌰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHESTNUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHESTNUT); // 🌰 (`U+1F330`)"] #[doc="# assert_eq!(CHESTNUT.to_string().as_str(), \"🌰\");"]
#[doc="```"]
pub static CHESTNUT :  Emoji = Emoji::new("chestnut", "🌰"); // chestnut
#[doc="cucumber 🥒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUCUMBER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUCUMBER); // 🥒 (`U+1F952`)"] #[doc="# assert_eq!(CUCUMBER.to_string().as_str(), \"🥒\");"]
#[doc="```"]
pub static CUCUMBER :  Emoji = Emoji::new("cucumber", "🥒"); // cucumber
#[doc="ear of corn 🌽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAR_OF_CORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAR_OF_CORN); // 🌽 (`U+1F33D`)"] #[doc="# assert_eq!(EAR_OF_CORN.to_string().as_str(), \"🌽\");"]
#[doc="```"]
pub static EAR_OF_CORN :  Emoji = Emoji::new("ear of corn", "🌽"); // ear of corn
#[doc="eggplant 🍆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EGGPLANT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EGGPLANT); // 🍆 (`U+1F346`)"] #[doc="# assert_eq!(EGGPLANT.to_string().as_str(), \"🍆\");"]
#[doc="```"]
pub static EGGPLANT :  Emoji = Emoji::new("eggplant", "🍆"); // eggplant
#[doc="garlic 🧄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GARLIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GARLIC); // 🧄 (`U+1F9C4`)"] #[doc="# assert_eq!(GARLIC.to_string().as_str(), \"🧄\");"]
#[doc="```"]
pub static GARLIC :  Emoji = Emoji::new("garlic", "🧄"); // garlic
#[doc="hot pepper 🌶️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_PEPPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_PEPPER); // 🌶️ (`U+1F336 U+FE0F`)"] #[doc="# assert_eq!(HOT_PEPPER.to_string().as_str(), \"🌶️\");"]
#[doc="```"]
pub static HOT_PEPPER :  Emoji = Emoji::new("hot pepper", "🌶️"); // hot pepper
#[doc="leafy green 🥬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEAFY_GREEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEAFY_GREEN); // 🥬 (`U+1F96C`)"] #[doc="# assert_eq!(LEAFY_GREEN.to_string().as_str(), \"🥬\");"]
#[doc="```"]
pub static LEAFY_GREEN :  Emoji = Emoji::new("leafy green", "🥬"); // leafy green
#[doc="mushroom 🍄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSHROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSHROOM); // 🍄 (`U+1F344`)"] #[doc="# assert_eq!(MUSHROOM.to_string().as_str(), \"🍄\");"]
#[doc="```"]
pub static MUSHROOM :  Emoji = Emoji::new("mushroom", "🍄"); // mushroom
#[doc="onion 🧅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONION); // 🧅 (`U+1F9C5`)"] #[doc="# assert_eq!(ONION.to_string().as_str(), \"🧅\");"]
#[doc="```"]
pub static ONION :  Emoji = Emoji::new("onion", "🧅"); // onion
#[doc="peanuts 🥜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEANUTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEANUTS); // 🥜 (`U+1F95C`)"] #[doc="# assert_eq!(PEANUTS.to_string().as_str(), \"🥜\");"]
#[doc="```"]
pub static PEANUTS :  Emoji = Emoji::new("peanuts", "🥜"); // peanuts
#[doc="potato 🥔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POTATO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POTATO); // 🥔 (`U+1F954`)"] #[doc="# assert_eq!(POTATO.to_string().as_str(), \"🥔\");"]
#[doc="```"]
pub static POTATO :  Emoji = Emoji::new("potato", "🥔"); // potato
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AVOCADO, ],
&[&BELL_PEPPER, ],
&[&BROCCOLI, ],
&[&CARROT, ],
&[&CHESTNUT, ],
&[&CUCUMBER, ],
&[&EAR_OF_CORN, ],
&[&EGGPLANT, ],
&[&GARLIC, ],
&[&HOT_PEPPER, ],
&[&LEAFY_GREEN, ],
&[&MUSHROOM, ],
&[&ONION, ],
&[&PEANUTS, ],
&[&POTATO, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AVOCADO, &BELL_PEPPER, &BROCCOLI, &CARROT, &CHESTNUT, &CUCUMBER, &EAR_OF_CORN, &EGGPLANT, &GARLIC, &HOT_PEPPER, &LEAFY_GREEN, &MUSHROOM, &ONION, &PEANUTS, &POTATO, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // food_and_drink::food_vegetable
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(dishware::all_variants())
		.chain(drink::all_variants())
		.chain(food_asian::all_variants())
		.chain(food_fruit::all_variants())
		.chain(food_marine::all_variants())
		.chain(food_prepared::all_variants())
		.chain(food_sweet::all_variants())
		.chain(food_vegetable::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(dishware::base_emojis())
		.chain(drink::base_emojis())
		.chain(food_asian::base_emojis())
		.chain(food_fruit::base_emojis())
		.chain(food_marine::base_emojis())
		.chain(food_prepared::base_emojis())
		.chain(food_sweet::base_emojis())
		.chain(food_vegetable::base_emojis())
}
} // food_and_drink

/// Objects 📘🎒🧮
pub mod objects {

/// book-paper 📘🔖📑
pub mod book_paper { // objects::book_paper
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="blue book 📘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_BOOK); // 📘 (`U+1F4D8`)"] #[doc="# assert_eq!(BLUE_BOOK.to_string().as_str(), \"📘\");"]
#[doc="```"]
pub static BLUE_BOOK :  Emoji = Emoji::new("blue book", "📘"); // blue book
#[doc="bookmark 🔖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOKMARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOKMARK); // 🔖 (`U+1F516`)"] #[doc="# assert_eq!(BOOKMARK.to_string().as_str(), \"🔖\");"]
#[doc="```"]
pub static BOOKMARK :  Emoji = Emoji::new("bookmark", "🔖"); // bookmark
#[doc="bookmark tabs 📑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOKMARK_TABS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOKMARK_TABS); // 📑 (`U+1F4D1`)"] #[doc="# assert_eq!(BOOKMARK_TABS.to_string().as_str(), \"📑\");"]
#[doc="```"]
pub static BOOKMARK_TABS :  Emoji = Emoji::new("bookmark tabs", "📑"); // bookmark tabs
#[doc="books 📚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOKS); // 📚 (`U+1F4DA`)"] #[doc="# assert_eq!(BOOKS.to_string().as_str(), \"📚\");"]
#[doc="```"]
pub static BOOKS :  Emoji = Emoji::new("books", "📚"); // books
#[doc="closed book 📕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_BOOK); // 📕 (`U+1F4D5`)"] #[doc="# assert_eq!(CLOSED_BOOK.to_string().as_str(), \"📕\");"]
#[doc="```"]
pub static CLOSED_BOOK :  Emoji = Emoji::new("closed book", "📕"); // closed book
#[doc="green book 📗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_BOOK); // 📗 (`U+1F4D7`)"] #[doc="# assert_eq!(GREEN_BOOK.to_string().as_str(), \"📗\");"]
#[doc="```"]
pub static GREEN_BOOK :  Emoji = Emoji::new("green book", "📗"); // green book
#[doc="label 🏷️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LABEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LABEL); // 🏷️ (`U+1F3F7 U+FE0F`)"] #[doc="# assert_eq!(LABEL.to_string().as_str(), \"🏷️\");"]
#[doc="```"]
pub static LABEL :  Emoji = Emoji::new("label", "🏷️"); // label
#[doc="ledger 📒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEDGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEDGER); // 📒 (`U+1F4D2`)"] #[doc="# assert_eq!(LEDGER.to_string().as_str(), \"📒\");"]
#[doc="```"]
pub static LEDGER :  Emoji = Emoji::new("ledger", "📒"); // ledger
#[doc="newspaper 📰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEWSPAPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEWSPAPER); // 📰 (`U+1F4F0`)"] #[doc="# assert_eq!(NEWSPAPER.to_string().as_str(), \"📰\");"]
#[doc="```"]
pub static NEWSPAPER :  Emoji = Emoji::new("newspaper", "📰"); // newspaper
#[doc="notebook 📓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NOTEBOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NOTEBOOK); // 📓 (`U+1F4D3`)"] #[doc="# assert_eq!(NOTEBOOK.to_string().as_str(), \"📓\");"]
#[doc="```"]
pub static NOTEBOOK :  Emoji = Emoji::new("notebook", "📓"); // notebook
#[doc="notebook with decorative cover 📔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NOTEBOOK_WITH_DECORATIVE_COVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NOTEBOOK_WITH_DECORATIVE_COVER); // 📔 (`U+1F4D4`)"] #[doc="# assert_eq!(NOTEBOOK_WITH_DECORATIVE_COVER.to_string().as_str(), \"📔\");"]
#[doc="```"]
pub static NOTEBOOK_WITH_DECORATIVE_COVER :  Emoji = Emoji::new("notebook with decorative cover", "📔"); // notebook with decorative cover
#[doc="open book 📖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_BOOK); // 📖 (`U+1F4D6`)"] #[doc="# assert_eq!(OPEN_BOOK.to_string().as_str(), \"📖\");"]
#[doc="```"]
pub static OPEN_BOOK :  Emoji = Emoji::new("open book", "📖"); // open book
#[doc="orange book 📙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_BOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_BOOK); // 📙 (`U+1F4D9`)"] #[doc="# assert_eq!(ORANGE_BOOK.to_string().as_str(), \"📙\");"]
#[doc="```"]
pub static ORANGE_BOOK :  Emoji = Emoji::new("orange book", "📙"); // orange book
#[doc="page facing up 📄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAGE_FACING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAGE_FACING_UP); // 📄 (`U+1F4C4`)"] #[doc="# assert_eq!(PAGE_FACING_UP.to_string().as_str(), \"📄\");"]
#[doc="```"]
pub static PAGE_FACING_UP :  Emoji = Emoji::new("page facing up", "📄"); // page facing up
#[doc="page with curl 📃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAGE_WITH_CURL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAGE_WITH_CURL); // 📃 (`U+1F4C3`)"] #[doc="# assert_eq!(PAGE_WITH_CURL.to_string().as_str(), \"📃\");"]
#[doc="```"]
pub static PAGE_WITH_CURL :  Emoji = Emoji::new("page with curl", "📃"); // page with curl
#[doc="rolled-up newspaper 🗞️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLED_UP_NEWSPAPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLED_UP_NEWSPAPER); // 🗞️ (`U+1F5DE U+FE0F`)"] #[doc="# assert_eq!(ROLLED_UP_NEWSPAPER.to_string().as_str(), \"🗞️\");"]
#[doc="```"]
pub static ROLLED_UP_NEWSPAPER :  Emoji = Emoji::new("rolled-up newspaper", "🗞️"); // rolled-up newspaper
#[doc="scroll 📜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCROLL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCROLL); // 📜 (`U+1F4DC`)"] #[doc="# assert_eq!(SCROLL.to_string().as_str(), \"📜\");"]
#[doc="```"]
pub static SCROLL :  Emoji = Emoji::new("scroll", "📜"); // scroll
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BLUE_BOOK, ],
&[&BOOKMARK, ],
&[&BOOKMARK_TABS, ],
&[&BOOKS, ],
&[&CLOSED_BOOK, ],
&[&GREEN_BOOK, ],
&[&LABEL, ],
&[&LEDGER, ],
&[&NEWSPAPER, ],
&[&NOTEBOOK, ],
&[&NOTEBOOK_WITH_DECORATIVE_COVER, ],
&[&OPEN_BOOK, ],
&[&ORANGE_BOOK, ],
&[&PAGE_FACING_UP, ],
&[&PAGE_WITH_CURL, ],
&[&ROLLED_UP_NEWSPAPER, ],
&[&SCROLL, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BLUE_BOOK, &BOOKMARK, &BOOKMARK_TABS, &BOOKS, &CLOSED_BOOK, &GREEN_BOOK, &LABEL, &LEDGER, &NEWSPAPER, &NOTEBOOK, &NOTEBOOK_WITH_DECORATIVE_COVER, &OPEN_BOOK, &ORANGE_BOOK, &PAGE_FACING_UP, &PAGE_WITH_CURL, &ROLLED_UP_NEWSPAPER, &SCROLL, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::book_paper

/// clothing 🎒🩰👙
pub mod clothing { // objects::clothing
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="backpack 🎒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKPACK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKPACK); // 🎒 (`U+1F392`)"] #[doc="# assert_eq!(BACKPACK.to_string().as_str(), \"🎒\");"]
#[doc="```"]
pub static BACKPACK :  Emoji = Emoji::new("backpack", "🎒"); // backpack
#[doc="ballet shoes 🩰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALLET_SHOES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALLET_SHOES); // 🩰 (`U+1FA70`)"] #[doc="# assert_eq!(BALLET_SHOES.to_string().as_str(), \"🩰\");"]
#[doc="```"]
pub static BALLET_SHOES :  Emoji = Emoji::new("ballet shoes", "🩰"); // ballet shoes
#[doc="bikini 👙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIKINI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIKINI); // 👙 (`U+1F459`)"] #[doc="# assert_eq!(BIKINI.to_string().as_str(), \"👙\");"]
#[doc="```"]
pub static BIKINI :  Emoji = Emoji::new("bikini", "👙"); // bikini
#[doc="billed cap 🧢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BILLED_CAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BILLED_CAP); // 🧢 (`U+1F9E2`)"] #[doc="# assert_eq!(BILLED_CAP.to_string().as_str(), \"🧢\");"]
#[doc="```"]
pub static BILLED_CAP :  Emoji = Emoji::new("billed cap", "🧢"); // billed cap
#[doc="briefs 🩲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIEFS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIEFS); // 🩲 (`U+1FA72`)"] #[doc="# assert_eq!(BRIEFS.to_string().as_str(), \"🩲\");"]
#[doc="```"]
pub static BRIEFS :  Emoji = Emoji::new("briefs", "🩲"); // briefs
#[doc="clutch bag 👝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLUTCH_BAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLUTCH_BAG); // 👝 (`U+1F45D`)"] #[doc="# assert_eq!(CLUTCH_BAG.to_string().as_str(), \"👝\");"]
#[doc="```"]
pub static CLUTCH_BAG :  Emoji = Emoji::new("clutch bag", "👝"); // clutch bag
#[doc="coat 🧥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COAT); // 🧥 (`U+1F9E5`)"] #[doc="# assert_eq!(COAT.to_string().as_str(), \"🧥\");"]
#[doc="```"]
pub static COAT :  Emoji = Emoji::new("coat", "🧥"); // coat
#[doc="crown 👑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROWN); // 👑 (`U+1F451`)"] #[doc="# assert_eq!(CROWN.to_string().as_str(), \"👑\");"]
#[doc="```"]
pub static CROWN :  Emoji = Emoji::new("crown", "👑"); // crown
#[doc="dress 👗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRESS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRESS); // 👗 (`U+1F457`)"] #[doc="# assert_eq!(DRESS.to_string().as_str(), \"👗\");"]
#[doc="```"]
pub static DRESS :  Emoji = Emoji::new("dress", "👗"); // dress
#[doc="flat shoe 🥿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLAT_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLAT_SHOE); // 🥿 (`U+1F97F`)"] #[doc="# assert_eq!(FLAT_SHOE.to_string().as_str(), \"🥿\");"]
#[doc="```"]
pub static FLAT_SHOE :  Emoji = Emoji::new("flat shoe", "🥿"); // flat shoe
#[doc="gem stone 💎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GEM_STONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GEM_STONE); // 💎 (`U+1F48E`)"] #[doc="# assert_eq!(GEM_STONE.to_string().as_str(), \"💎\");"]
#[doc="```"]
pub static GEM_STONE :  Emoji = Emoji::new("gem stone", "💎"); // gem stone
#[doc="glasses 👓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLASSES); // 👓 (`U+1F453`)"] #[doc="# assert_eq!(GLASSES.to_string().as_str(), \"👓\");"]
#[doc="```"]
pub static GLASSES :  Emoji = Emoji::new("glasses", "👓"); // glasses
#[doc="gloves 🧤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOVES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOVES); // 🧤 (`U+1F9E4`)"] #[doc="# assert_eq!(GLOVES.to_string().as_str(), \"🧤\");"]
#[doc="```"]
pub static GLOVES :  Emoji = Emoji::new("gloves", "🧤"); // gloves
#[doc="goggles 🥽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOGGLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOGGLES); // 🥽 (`U+1F97D`)"] #[doc="# assert_eq!(GOGGLES.to_string().as_str(), \"🥽\");"]
#[doc="```"]
pub static GOGGLES :  Emoji = Emoji::new("goggles", "🥽"); // goggles
#[doc="graduation cap 🎓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRADUATION_CAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRADUATION_CAP); // 🎓 (`U+1F393`)"] #[doc="# assert_eq!(GRADUATION_CAP.to_string().as_str(), \"🎓\");"]
#[doc="```"]
pub static GRADUATION_CAP :  Emoji = Emoji::new("graduation cap", "🎓"); // graduation cap
#[doc="handbag 👜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HANDBAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HANDBAG); // 👜 (`U+1F45C`)"] #[doc="# assert_eq!(HANDBAG.to_string().as_str(), \"👜\");"]
#[doc="```"]
pub static HANDBAG :  Emoji = Emoji::new("handbag", "👜"); // handbag
#[doc="high-heeled shoe 👠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIGH_HEELED_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIGH_HEELED_SHOE); // 👠 (`U+1F460`)"] #[doc="# assert_eq!(HIGH_HEELED_SHOE.to_string().as_str(), \"👠\");"]
#[doc="```"]
pub static HIGH_HEELED_SHOE :  Emoji = Emoji::new("high-heeled shoe", "👠"); // high-heeled shoe
#[doc="hiking boot 🥾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIKING_BOOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIKING_BOOT); // 🥾 (`U+1F97E`)"] #[doc="# assert_eq!(HIKING_BOOT.to_string().as_str(), \"🥾\");"]
#[doc="```"]
pub static HIKING_BOOT :  Emoji = Emoji::new("hiking boot", "🥾"); // hiking boot
#[doc="jeans 👖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JEANS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JEANS); // 👖 (`U+1F456`)"] #[doc="# assert_eq!(JEANS.to_string().as_str(), \"👖\");"]
#[doc="```"]
pub static JEANS :  Emoji = Emoji::new("jeans", "👖"); // jeans
#[doc="kimono 👘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KIMONO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KIMONO); // 👘 (`U+1F458`)"] #[doc="# assert_eq!(KIMONO.to_string().as_str(), \"👘\");"]
#[doc="```"]
pub static KIMONO :  Emoji = Emoji::new("kimono", "👘"); // kimono
#[doc="lab coat 🥼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAB_COAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAB_COAT); // 🥼 (`U+1F97C`)"] #[doc="# assert_eq!(LAB_COAT.to_string().as_str(), \"🥼\");"]
#[doc="```"]
pub static LAB_COAT :  Emoji = Emoji::new("lab coat", "🥼"); // lab coat
#[doc="lipstick 💄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIPSTICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIPSTICK); // 💄 (`U+1F484`)"] #[doc="# assert_eq!(LIPSTICK.to_string().as_str(), \"💄\");"]
#[doc="```"]
pub static LIPSTICK :  Emoji = Emoji::new("lipstick", "💄"); // lipstick
#[doc="man’s shoe 👞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAN_S_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAN_S_SHOE); // 👞 (`U+1F45E`)"] #[doc="# assert_eq!(MAN_S_SHOE.to_string().as_str(), \"👞\");"]
#[doc="```"]
pub static MAN_S_SHOE :  Emoji = Emoji::new("man’s shoe", "👞"); // man’s shoe
#[doc="military helmet 🪖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MILITARY_HELMET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MILITARY_HELMET); // 🪖 (`U+1FA96`)"] #[doc="# assert_eq!(MILITARY_HELMET.to_string().as_str(), \"🪖\");"]
#[doc="```"]
pub static MILITARY_HELMET :  Emoji = Emoji::new("military helmet", "🪖"); // military helmet
#[doc="necktie 👔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NECKTIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NECKTIE); // 👔 (`U+1F454`)"] #[doc="# assert_eq!(NECKTIE.to_string().as_str(), \"👔\");"]
#[doc="```"]
pub static NECKTIE :  Emoji = Emoji::new("necktie", "👔"); // necktie
#[doc="one-piece swimsuit 🩱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONE_PIECE_SWIMSUIT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONE_PIECE_SWIMSUIT); // 🩱 (`U+1FA71`)"] #[doc="# assert_eq!(ONE_PIECE_SWIMSUIT.to_string().as_str(), \"🩱\");"]
#[doc="```"]
pub static ONE_PIECE_SWIMSUIT :  Emoji = Emoji::new("one-piece swimsuit", "🩱"); // one-piece swimsuit
#[doc="prayer beads 📿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRAYER_BEADS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRAYER_BEADS); // 📿 (`U+1F4FF`)"] #[doc="# assert_eq!(PRAYER_BEADS.to_string().as_str(), \"📿\");"]
#[doc="```"]
pub static PRAYER_BEADS :  Emoji = Emoji::new("prayer beads", "📿"); // prayer beads
#[doc="purse 👛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURSE); // 👛 (`U+1F45B`)"] #[doc="# assert_eq!(PURSE.to_string().as_str(), \"👛\");"]
#[doc="```"]
pub static PURSE :  Emoji = Emoji::new("purse", "👛"); // purse
#[doc="rescue worker’s helmet ⛑️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RESCUE_WORKER_S_HELMET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RESCUE_WORKER_S_HELMET); // ⛑️ (`U+26D1 U+FE0F`)"] #[doc="# assert_eq!(RESCUE_WORKER_S_HELMET.to_string().as_str(), \"⛑️\");"]
#[doc="```"]
pub static RESCUE_WORKER_S_HELMET :  Emoji = Emoji::new("rescue worker’s helmet", "⛑️"); // rescue worker’s helmet
#[doc="ring 💍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RING); // 💍 (`U+1F48D`)"] #[doc="# assert_eq!(RING.to_string().as_str(), \"💍\");"]
#[doc="```"]
pub static RING :  Emoji = Emoji::new("ring", "💍"); // ring
#[doc="running shoe 👟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RUNNING_SHOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RUNNING_SHOE); // 👟 (`U+1F45F`)"] #[doc="# assert_eq!(RUNNING_SHOE.to_string().as_str(), \"👟\");"]
#[doc="```"]
pub static RUNNING_SHOE :  Emoji = Emoji::new("running shoe", "👟"); // running shoe
#[doc="safety vest 🦺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAFETY_VEST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAFETY_VEST); // 🦺 (`U+1F9BA`)"] #[doc="# assert_eq!(SAFETY_VEST.to_string().as_str(), \"🦺\");"]
#[doc="```"]
pub static SAFETY_VEST :  Emoji = Emoji::new("safety vest", "🦺"); // safety vest
#[doc="sari 🥻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SARI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SARI); // 🥻 (`U+1F97B`)"] #[doc="# assert_eq!(SARI.to_string().as_str(), \"🥻\");"]
#[doc="```"]
pub static SARI :  Emoji = Emoji::new("sari", "🥻"); // sari
#[doc="scarf 🧣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCARF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCARF); // 🧣 (`U+1F9E3`)"] #[doc="# assert_eq!(SCARF.to_string().as_str(), \"🧣\");"]
#[doc="```"]
pub static SCARF :  Emoji = Emoji::new("scarf", "🧣"); // scarf
#[doc="shopping bags 🛍️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOPPING_BAGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOPPING_BAGS); // 🛍️ (`U+1F6CD U+FE0F`)"] #[doc="# assert_eq!(SHOPPING_BAGS.to_string().as_str(), \"🛍️\");"]
#[doc="```"]
pub static SHOPPING_BAGS :  Emoji = Emoji::new("shopping bags", "🛍️"); // shopping bags
#[doc="shorts 🩳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHORTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHORTS); // 🩳 (`U+1FA73`)"] #[doc="# assert_eq!(SHORTS.to_string().as_str(), \"🩳\");"]
#[doc="```"]
pub static SHORTS :  Emoji = Emoji::new("shorts", "🩳"); // shorts
#[doc="socks 🧦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOCKS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOCKS); // 🧦 (`U+1F9E6`)"] #[doc="# assert_eq!(SOCKS.to_string().as_str(), \"🧦\");"]
#[doc="```"]
pub static SOCKS :  Emoji = Emoji::new("socks", "🧦"); // socks
#[doc="sunglasses 🕶️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNGLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNGLASSES); // 🕶️ (`U+1F576 U+FE0F`)"] #[doc="# assert_eq!(SUNGLASSES.to_string().as_str(), \"🕶️\");"]
#[doc="```"]
pub static SUNGLASSES :  Emoji = Emoji::new("sunglasses", "🕶️"); // sunglasses
#[doc="thong sandal 🩴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THONG_SANDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THONG_SANDAL); // 🩴 (`U+1FA74`)"] #[doc="# assert_eq!(THONG_SANDAL.to_string().as_str(), \"🩴\");"]
#[doc="```"]
pub static THONG_SANDAL :  Emoji = Emoji::new("thong sandal", "🩴"); // thong sandal
#[doc="top hat 🎩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOP_HAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOP_HAT); // 🎩 (`U+1F3A9`)"] #[doc="# assert_eq!(TOP_HAT.to_string().as_str(), \"🎩\");"]
#[doc="```"]
pub static TOP_HAT :  Emoji = Emoji::new("top hat", "🎩"); // top hat
#[doc="t-shirt 👕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::T_SHIRT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", T_SHIRT); // 👕 (`U+1F455`)"] #[doc="# assert_eq!(T_SHIRT.to_string().as_str(), \"👕\");"]
#[doc="```"]
pub static T_SHIRT :  Emoji = Emoji::new("t-shirt", "👕"); // t-shirt
#[doc="woman’s boot 👢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_BOOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_BOOT); // 👢 (`U+1F462`)"] #[doc="# assert_eq!(WOMAN_S_BOOT.to_string().as_str(), \"👢\");"]
#[doc="```"]
pub static WOMAN_S_BOOT :  Emoji = Emoji::new("woman’s boot", "👢"); // woman’s boot
#[doc="woman’s clothes 👚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_CLOTHES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_CLOTHES); // 👚 (`U+1F45A`)"] #[doc="# assert_eq!(WOMAN_S_CLOTHES.to_string().as_str(), \"👚\");"]
#[doc="```"]
pub static WOMAN_S_CLOTHES :  Emoji = Emoji::new("woman’s clothes", "👚"); // woman’s clothes
#[doc="woman’s hat 👒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_HAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_HAT); // 👒 (`U+1F452`)"] #[doc="# assert_eq!(WOMAN_S_HAT.to_string().as_str(), \"👒\");"]
#[doc="```"]
pub static WOMAN_S_HAT :  Emoji = Emoji::new("woman’s hat", "👒"); // woman’s hat
#[doc="woman’s sandal 👡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_S_SANDAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_S_SANDAL); // 👡 (`U+1F461`)"] #[doc="# assert_eq!(WOMAN_S_SANDAL.to_string().as_str(), \"👡\");"]
#[doc="```"]
pub static WOMAN_S_SANDAL :  Emoji = Emoji::new("woman’s sandal", "👡"); // woman’s sandal
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BACKPACK, ],
&[&BALLET_SHOES, ],
&[&BIKINI, ],
&[&BILLED_CAP, ],
&[&BRIEFS, ],
&[&CLUTCH_BAG, ],
&[&COAT, ],
&[&CROWN, ],
&[&DRESS, ],
&[&FLAT_SHOE, ],
&[&GEM_STONE, ],
&[&GLASSES, ],
&[&GLOVES, ],
&[&GOGGLES, ],
&[&GRADUATION_CAP, ],
&[&HANDBAG, ],
&[&HIGH_HEELED_SHOE, ],
&[&HIKING_BOOT, ],
&[&JEANS, ],
&[&KIMONO, ],
&[&LAB_COAT, ],
&[&LIPSTICK, ],
&[&MAN_S_SHOE, ],
&[&MILITARY_HELMET, ],
&[&NECKTIE, ],
&[&ONE_PIECE_SWIMSUIT, ],
&[&PRAYER_BEADS, ],
&[&PURSE, ],
&[&RESCUE_WORKER_S_HELMET, ],
&[&RING, ],
&[&RUNNING_SHOE, ],
&[&SAFETY_VEST, ],
&[&SARI, ],
&[&SCARF, ],
&[&SHOPPING_BAGS, ],
&[&SHORTS, ],
&[&SOCKS, ],
&[&SUNGLASSES, ],
&[&THONG_SANDAL, ],
&[&TOP_HAT, ],
&[&T_SHIRT, ],
&[&WOMAN_S_BOOT, ],
&[&WOMAN_S_CLOTHES, ],
&[&WOMAN_S_HAT, ],
&[&WOMAN_S_SANDAL, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BACKPACK, &BALLET_SHOES, &BIKINI, &BILLED_CAP, &BRIEFS, &CLUTCH_BAG, &COAT, &CROWN, &DRESS, &FLAT_SHOE, &GEM_STONE, &GLASSES, &GLOVES, &GOGGLES, &GRADUATION_CAP, &HANDBAG, &HIGH_HEELED_SHOE, &HIKING_BOOT, &JEANS, &KIMONO, &LAB_COAT, &LIPSTICK, &MAN_S_SHOE, &MILITARY_HELMET, &NECKTIE, &ONE_PIECE_SWIMSUIT, &PRAYER_BEADS, &PURSE, &RESCUE_WORKER_S_HELMET, &RING, &RUNNING_SHOE, &SAFETY_VEST, &SARI, &SCARF, &SHOPPING_BAGS, &SHORTS, &SOCKS, &SUNGLASSES, &THONG_SANDAL, &TOP_HAT, &T_SHIRT, &WOMAN_S_BOOT, &WOMAN_S_CLOTHES, &WOMAN_S_HAT, &WOMAN_S_SANDAL, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::clothing

/// computer 🧮🔋💽
pub mod computer { // objects::computer
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="abacus 🧮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ABACUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ABACUS); // 🧮 (`U+1F9EE`)"] #[doc="# assert_eq!(ABACUS.to_string().as_str(), \"🧮\");"]
#[doc="```"]
pub static ABACUS :  Emoji = Emoji::new("abacus", "🧮"); // abacus
#[doc="battery 🔋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BATTERY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BATTERY); // 🔋 (`U+1F50B`)"] #[doc="# assert_eq!(BATTERY.to_string().as_str(), \"🔋\");"]
#[doc="```"]
pub static BATTERY :  Emoji = Emoji::new("battery", "🔋"); // battery
#[doc="computer disk 💽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMPUTER_DISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMPUTER_DISK); // 💽 (`U+1F4BD`)"] #[doc="# assert_eq!(COMPUTER_DISK.to_string().as_str(), \"💽\");"]
#[doc="```"]
pub static COMPUTER_DISK :  Emoji = Emoji::new("computer disk", "💽"); // computer disk
#[doc="computer mouse 🖱️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMPUTER_MOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMPUTER_MOUSE); // 🖱️ (`U+1F5B1 U+FE0F`)"] #[doc="# assert_eq!(COMPUTER_MOUSE.to_string().as_str(), \"🖱️\");"]
#[doc="```"]
pub static COMPUTER_MOUSE :  Emoji = Emoji::new("computer mouse", "🖱️"); // computer mouse
#[doc="desktop computer 🖥️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DESKTOP_COMPUTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DESKTOP_COMPUTER); // 🖥️ (`U+1F5A5 U+FE0F`)"] #[doc="# assert_eq!(DESKTOP_COMPUTER.to_string().as_str(), \"🖥️\");"]
#[doc="```"]
pub static DESKTOP_COMPUTER :  Emoji = Emoji::new("desktop computer", "🖥️"); // desktop computer
#[doc="dvd 📀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DVD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DVD); // 📀 (`U+1F4C0`)"] #[doc="# assert_eq!(DVD.to_string().as_str(), \"📀\");"]
#[doc="```"]
pub static DVD :  Emoji = Emoji::new("dvd", "📀"); // dvd
#[doc="electric plug 🔌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELECTRIC_PLUG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELECTRIC_PLUG); // 🔌 (`U+1F50C`)"] #[doc="# assert_eq!(ELECTRIC_PLUG.to_string().as_str(), \"🔌\");"]
#[doc="```"]
pub static ELECTRIC_PLUG :  Emoji = Emoji::new("electric plug", "🔌"); // electric plug
#[doc="floppy disk 💾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLOPPY_DISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLOPPY_DISK); // 💾 (`U+1F4BE`)"] #[doc="# assert_eq!(FLOPPY_DISK.to_string().as_str(), \"💾\");"]
#[doc="```"]
pub static FLOPPY_DISK :  Emoji = Emoji::new("floppy disk", "💾"); // floppy disk
#[doc="keyboard ⌨️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYBOARD); // ⌨️ (`U+2328 U+FE0F`)"] #[doc="# assert_eq!(KEYBOARD.to_string().as_str(), \"⌨️\");"]
#[doc="```"]
pub static KEYBOARD :  Emoji = Emoji::new("keyboard", "⌨️"); // keyboard
#[doc="laptop 💻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAPTOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAPTOP); // 💻 (`U+1F4BB`)"] #[doc="# assert_eq!(LAPTOP.to_string().as_str(), \"💻\");"]
#[doc="```"]
pub static LAPTOP :  Emoji = Emoji::new("laptop", "💻"); // laptop
#[doc="optical disk 💿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPTICAL_DISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPTICAL_DISK); // 💿 (`U+1F4BF`)"] #[doc="# assert_eq!(OPTICAL_DISK.to_string().as_str(), \"💿\");"]
#[doc="```"]
pub static OPTICAL_DISK :  Emoji = Emoji::new("optical disk", "💿"); // optical disk
#[doc="printer 🖨️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRINTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRINTER); // 🖨️ (`U+1F5A8 U+FE0F`)"] #[doc="# assert_eq!(PRINTER.to_string().as_str(), \"🖨️\");"]
#[doc="```"]
pub static PRINTER :  Emoji = Emoji::new("printer", "🖨️"); // printer
#[doc="trackball 🖲️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRACKBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRACKBALL); // 🖲️ (`U+1F5B2 U+FE0F`)"] #[doc="# assert_eq!(TRACKBALL.to_string().as_str(), \"🖲️\");"]
#[doc="```"]
pub static TRACKBALL :  Emoji = Emoji::new("trackball", "🖲️"); // trackball
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ABACUS, ],
&[&BATTERY, ],
&[&COMPUTER_DISK, ],
&[&COMPUTER_MOUSE, ],
&[&DESKTOP_COMPUTER, ],
&[&DVD, ],
&[&ELECTRIC_PLUG, ],
&[&FLOPPY_DISK, ],
&[&KEYBOARD, ],
&[&LAPTOP, ],
&[&OPTICAL_DISK, ],
&[&PRINTER, ],
&[&TRACKBALL, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ABACUS, &BATTERY, &COMPUTER_DISK, &COMPUTER_MOUSE, &DESKTOP_COMPUTER, &DVD, &ELECTRIC_PLUG, &FLOPPY_DISK, &KEYBOARD, &LAPTOP, &OPTICAL_DISK, &PRINTER, &TRACKBALL, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::computer

/// household 🧺🛁🛏️
pub mod household { // objects::household
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="basket 🧺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BASKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BASKET); // 🧺 (`U+1F9FA`)"] #[doc="# assert_eq!(BASKET.to_string().as_str(), \"🧺\");"]
#[doc="```"]
pub static BASKET :  Emoji = Emoji::new("basket", "🧺"); // basket
#[doc="bathtub 🛁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BATHTUB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BATHTUB); // 🛁 (`U+1F6C1`)"] #[doc="# assert_eq!(BATHTUB.to_string().as_str(), \"🛁\");"]
#[doc="```"]
pub static BATHTUB :  Emoji = Emoji::new("bathtub", "🛁"); // bathtub
#[doc="bed 🛏️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BED); // 🛏️ (`U+1F6CF U+FE0F`)"] #[doc="# assert_eq!(BED.to_string().as_str(), \"🛏️\");"]
#[doc="```"]
pub static BED :  Emoji = Emoji::new("bed", "🛏️"); // bed
#[doc="broom 🧹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROOM); // 🧹 (`U+1F9F9`)"] #[doc="# assert_eq!(BROOM.to_string().as_str(), \"🧹\");"]
#[doc="```"]
pub static BROOM :  Emoji = Emoji::new("broom", "🧹"); // broom
#[doc="bucket 🪣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUCKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUCKET); // 🪣 (`U+1FAA3`)"] #[doc="# assert_eq!(BUCKET.to_string().as_str(), \"🪣\");"]
#[doc="```"]
pub static BUCKET :  Emoji = Emoji::new("bucket", "🪣"); // bucket
#[doc="chair 🪑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHAIR); // 🪑 (`U+1FA91`)"] #[doc="# assert_eq!(CHAIR.to_string().as_str(), \"🪑\");"]
#[doc="```"]
pub static CHAIR :  Emoji = Emoji::new("chair", "🪑"); // chair
#[doc="couch and lamp 🛋️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COUCH_AND_LAMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COUCH_AND_LAMP); // 🛋️ (`U+1F6CB U+FE0F`)"] #[doc="# assert_eq!(COUCH_AND_LAMP.to_string().as_str(), \"🛋️\");"]
#[doc="```"]
pub static COUCH_AND_LAMP :  Emoji = Emoji::new("couch and lamp", "🛋️"); // couch and lamp
#[doc="door 🚪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOOR); // 🚪 (`U+1F6AA`)"] #[doc="# assert_eq!(DOOR.to_string().as_str(), \"🚪\");"]
#[doc="```"]
pub static DOOR :  Emoji = Emoji::new("door", "🚪"); // door
#[doc="elevator 🛗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEVATOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEVATOR); // 🛗 (`U+1F6D7`)"] #[doc="# assert_eq!(ELEVATOR.to_string().as_str(), \"🛗\");"]
#[doc="```"]
pub static ELEVATOR :  Emoji = Emoji::new("elevator", "🛗"); // elevator
#[doc="fire extinguisher 🧯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRE_EXTINGUISHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRE_EXTINGUISHER); // 🧯 (`U+1F9EF`)"] #[doc="# assert_eq!(FIRE_EXTINGUISHER.to_string().as_str(), \"🧯\");"]
#[doc="```"]
pub static FIRE_EXTINGUISHER :  Emoji = Emoji::new("fire extinguisher", "🧯"); // fire extinguisher
#[doc="lotion bottle 🧴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOTION_BOTTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOTION_BOTTLE); // 🧴 (`U+1F9F4`)"] #[doc="# assert_eq!(LOTION_BOTTLE.to_string().as_str(), \"🧴\");"]
#[doc="```"]
pub static LOTION_BOTTLE :  Emoji = Emoji::new("lotion bottle", "🧴"); // lotion bottle
#[doc="mirror 🪞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MIRROR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MIRROR); // 🪞 (`U+1FA9E`)"] #[doc="# assert_eq!(MIRROR.to_string().as_str(), \"🪞\");"]
#[doc="```"]
pub static MIRROR :  Emoji = Emoji::new("mirror", "🪞"); // mirror
#[doc="mouse trap 🪤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUSE_TRAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUSE_TRAP); // 🪤 (`U+1FAA4`)"] #[doc="# assert_eq!(MOUSE_TRAP.to_string().as_str(), \"🪤\");"]
#[doc="```"]
pub static MOUSE_TRAP :  Emoji = Emoji::new("mouse trap", "🪤"); // mouse trap
#[doc="plunger 🪠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLUNGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLUNGER); // 🪠 (`U+1FAA0`)"] #[doc="# assert_eq!(PLUNGER.to_string().as_str(), \"🪠\");"]
#[doc="```"]
pub static PLUNGER :  Emoji = Emoji::new("plunger", "🪠"); // plunger
#[doc="razor 🪒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAZOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAZOR); // 🪒 (`U+1FA92`)"] #[doc="# assert_eq!(RAZOR.to_string().as_str(), \"🪒\");"]
#[doc="```"]
pub static RAZOR :  Emoji = Emoji::new("razor", "🪒"); // razor
#[doc="roll of paper 🧻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLL_OF_PAPER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLL_OF_PAPER); // 🧻 (`U+1F9FB`)"] #[doc="# assert_eq!(ROLL_OF_PAPER.to_string().as_str(), \"🧻\");"]
#[doc="```"]
pub static ROLL_OF_PAPER :  Emoji = Emoji::new("roll of paper", "🧻"); // roll of paper
#[doc="safety pin 🧷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAFETY_PIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAFETY_PIN); // 🧷 (`U+1F9F7`)"] #[doc="# assert_eq!(SAFETY_PIN.to_string().as_str(), \"🧷\");"]
#[doc="```"]
pub static SAFETY_PIN :  Emoji = Emoji::new("safety pin", "🧷"); // safety pin
#[doc="shopping cart 🛒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOPPING_CART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOPPING_CART); // 🛒 (`U+1F6D2`)"] #[doc="# assert_eq!(SHOPPING_CART.to_string().as_str(), \"🛒\");"]
#[doc="```"]
pub static SHOPPING_CART :  Emoji = Emoji::new("shopping cart", "🛒"); // shopping cart
#[doc="shower 🚿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOWER); // 🚿 (`U+1F6BF`)"] #[doc="# assert_eq!(SHOWER.to_string().as_str(), \"🚿\");"]
#[doc="```"]
pub static SHOWER :  Emoji = Emoji::new("shower", "🚿"); // shower
#[doc="soap 🧼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOAP); // 🧼 (`U+1F9FC`)"] #[doc="# assert_eq!(SOAP.to_string().as_str(), \"🧼\");"]
#[doc="```"]
pub static SOAP :  Emoji = Emoji::new("soap", "🧼"); // soap
#[doc="sponge 🧽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPONGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPONGE); // 🧽 (`U+1F9FD`)"] #[doc="# assert_eq!(SPONGE.to_string().as_str(), \"🧽\");"]
#[doc="```"]
pub static SPONGE :  Emoji = Emoji::new("sponge", "🧽"); // sponge
#[doc="toilet 🚽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOILET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOILET); // 🚽 (`U+1F6BD`)"] #[doc="# assert_eq!(TOILET.to_string().as_str(), \"🚽\");"]
#[doc="```"]
pub static TOILET :  Emoji = Emoji::new("toilet", "🚽"); // toilet
#[doc="toothbrush 🪥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOOTHBRUSH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOOTHBRUSH); // 🪥 (`U+1FAA5`)"] #[doc="# assert_eq!(TOOTHBRUSH.to_string().as_str(), \"🪥\");"]
#[doc="```"]
pub static TOOTHBRUSH :  Emoji = Emoji::new("toothbrush", "🪥"); // toothbrush
#[doc="window 🪟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINDOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINDOW); // 🪟 (`U+1FA9F`)"] #[doc="# assert_eq!(WINDOW.to_string().as_str(), \"🪟\");"]
#[doc="```"]
pub static WINDOW :  Emoji = Emoji::new("window", "🪟"); // window
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BASKET, ],
&[&BATHTUB, ],
&[&BED, ],
&[&BROOM, ],
&[&BUCKET, ],
&[&CHAIR, ],
&[&COUCH_AND_LAMP, ],
&[&DOOR, ],
&[&ELEVATOR, ],
&[&FIRE_EXTINGUISHER, ],
&[&LOTION_BOTTLE, ],
&[&MIRROR, ],
&[&MOUSE_TRAP, ],
&[&PLUNGER, ],
&[&RAZOR, ],
&[&ROLL_OF_PAPER, ],
&[&SAFETY_PIN, ],
&[&SHOPPING_CART, ],
&[&SHOWER, ],
&[&SOAP, ],
&[&SPONGE, ],
&[&TOILET, ],
&[&TOOTHBRUSH, ],
&[&WINDOW, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BASKET, &BATHTUB, &BED, &BROOM, &BUCKET, &CHAIR, &COUCH_AND_LAMP, &DOOR, &ELEVATOR, &FIRE_EXTINGUISHER, &LOTION_BOTTLE, &MIRROR, &MOUSE_TRAP, &PLUNGER, &RAZOR, &ROLL_OF_PAPER, &SAFETY_PIN, &SHOPPING_CART, &SHOWER, &SOAP, &SPONGE, &TOILET, &TOOTHBRUSH, &WINDOW, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::household

/// light & video 📷📸🕯️
pub mod light_and_video { // objects::light_and_video
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="camera 📷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMERA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMERA); // 📷 (`U+1F4F7`)"] #[doc="# assert_eq!(CAMERA.to_string().as_str(), \"📷\");"]
#[doc="```"]
pub static CAMERA :  Emoji = Emoji::new("camera", "📷"); // camera
#[doc="camera with flash 📸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMERA_WITH_FLASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMERA_WITH_FLASH); // 📸 (`U+1F4F8`)"] #[doc="# assert_eq!(CAMERA_WITH_FLASH.to_string().as_str(), \"📸\");"]
#[doc="```"]
pub static CAMERA_WITH_FLASH :  Emoji = Emoji::new("camera with flash", "📸"); // camera with flash
#[doc="candle 🕯️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANDLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANDLE); // 🕯️ (`U+1F56F U+FE0F`)"] #[doc="# assert_eq!(CANDLE.to_string().as_str(), \"🕯️\");"]
#[doc="```"]
pub static CANDLE :  Emoji = Emoji::new("candle", "🕯️"); // candle
#[doc="clapper board 🎬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLAPPER_BOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLAPPER_BOARD); // 🎬 (`U+1F3AC`)"] #[doc="# assert_eq!(CLAPPER_BOARD.to_string().as_str(), \"🎬\");"]
#[doc="```"]
pub static CLAPPER_BOARD :  Emoji = Emoji::new("clapper board", "🎬"); // clapper board
#[doc="diya lamp 🪔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIYA_LAMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIYA_LAMP); // 🪔 (`U+1FA94`)"] #[doc="# assert_eq!(DIYA_LAMP.to_string().as_str(), \"🪔\");"]
#[doc="```"]
pub static DIYA_LAMP :  Emoji = Emoji::new("diya lamp", "🪔"); // diya lamp
#[doc="film frames 🎞️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILM_FRAMES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILM_FRAMES); // 🎞️ (`U+1F39E U+FE0F`)"] #[doc="# assert_eq!(FILM_FRAMES.to_string().as_str(), \"🎞️\");"]
#[doc="```"]
pub static FILM_FRAMES :  Emoji = Emoji::new("film frames", "🎞️"); // film frames
#[doc="film projector 📽️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILM_PROJECTOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILM_PROJECTOR); // 📽️ (`U+1F4FD U+FE0F`)"] #[doc="# assert_eq!(FILM_PROJECTOR.to_string().as_str(), \"📽️\");"]
#[doc="```"]
pub static FILM_PROJECTOR :  Emoji = Emoji::new("film projector", "📽️"); // film projector
#[doc="flashlight 🔦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLASHLIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLASHLIGHT); // 🔦 (`U+1F526`)"] #[doc="# assert_eq!(FLASHLIGHT.to_string().as_str(), \"🔦\");"]
#[doc="```"]
pub static FLASHLIGHT :  Emoji = Emoji::new("flashlight", "🔦"); // flashlight
#[doc="light bulb 💡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIGHT_BULB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIGHT_BULB); // 💡 (`U+1F4A1`)"] #[doc="# assert_eq!(LIGHT_BULB.to_string().as_str(), \"💡\");"]
#[doc="```"]
pub static LIGHT_BULB :  Emoji = Emoji::new("light bulb", "💡"); // light bulb
#[doc="magnifying glass tilted left 🔍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGNIFYING_GLASS_TILTED_LEFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGNIFYING_GLASS_TILTED_LEFT); // 🔍 (`U+1F50D`)"] #[doc="# assert_eq!(MAGNIFYING_GLASS_TILTED_LEFT.to_string().as_str(), \"🔍\");"]
#[doc="```"]
pub static MAGNIFYING_GLASS_TILTED_LEFT :  Emoji = Emoji::new("magnifying glass tilted left", "🔍"); // magnifying glass tilted left
#[doc="magnifying glass tilted right 🔎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGNIFYING_GLASS_TILTED_RIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGNIFYING_GLASS_TILTED_RIGHT); // 🔎 (`U+1F50E`)"] #[doc="# assert_eq!(MAGNIFYING_GLASS_TILTED_RIGHT.to_string().as_str(), \"🔎\");"]
#[doc="```"]
pub static MAGNIFYING_GLASS_TILTED_RIGHT :  Emoji = Emoji::new("magnifying glass tilted right", "🔎"); // magnifying glass tilted right
#[doc="movie camera 🎥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOVIE_CAMERA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOVIE_CAMERA); // 🎥 (`U+1F3A5`)"] #[doc="# assert_eq!(MOVIE_CAMERA.to_string().as_str(), \"🎥\");"]
#[doc="```"]
pub static MOVIE_CAMERA :  Emoji = Emoji::new("movie camera", "🎥"); // movie camera
#[doc="red paper lantern 🏮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_PAPER_LANTERN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_PAPER_LANTERN); // 🏮 (`U+1F3EE`)"] #[doc="# assert_eq!(RED_PAPER_LANTERN.to_string().as_str(), \"🏮\");"]
#[doc="```"]
pub static RED_PAPER_LANTERN :  Emoji = Emoji::new("red paper lantern", "🏮"); // red paper lantern
#[doc="television 📺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELEVISION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELEVISION); // 📺 (`U+1F4FA`)"] #[doc="# assert_eq!(TELEVISION.to_string().as_str(), \"📺\");"]
#[doc="```"]
pub static TELEVISION :  Emoji = Emoji::new("television", "📺"); // television
#[doc="videocassette 📼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIDEOCASSETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIDEOCASSETTE); // 📼 (`U+1F4FC`)"] #[doc="# assert_eq!(VIDEOCASSETTE.to_string().as_str(), \"📼\");"]
#[doc="```"]
pub static VIDEOCASSETTE :  Emoji = Emoji::new("videocassette", "📼"); // videocassette
#[doc="video camera 📹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIDEO_CAMERA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIDEO_CAMERA); // 📹 (`U+1F4F9`)"] #[doc="# assert_eq!(VIDEO_CAMERA.to_string().as_str(), \"📹\");"]
#[doc="```"]
pub static VIDEO_CAMERA :  Emoji = Emoji::new("video camera", "📹"); // video camera
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CAMERA, ],
&[&CAMERA_WITH_FLASH, ],
&[&CANDLE, ],
&[&CLAPPER_BOARD, ],
&[&DIYA_LAMP, ],
&[&FILM_FRAMES, ],
&[&FILM_PROJECTOR, ],
&[&FLASHLIGHT, ],
&[&LIGHT_BULB, ],
&[&MAGNIFYING_GLASS_TILTED_LEFT, ],
&[&MAGNIFYING_GLASS_TILTED_RIGHT, ],
&[&MOVIE_CAMERA, ],
&[&RED_PAPER_LANTERN, ],
&[&TELEVISION, ],
&[&VIDEOCASSETTE, ],
&[&VIDEO_CAMERA, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CAMERA, &CAMERA_WITH_FLASH, &CANDLE, &CLAPPER_BOARD, &DIYA_LAMP, &FILM_FRAMES, &FILM_PROJECTOR, &FLASHLIGHT, &LIGHT_BULB, &MAGNIFYING_GLASS_TILTED_LEFT, &MAGNIFYING_GLASS_TILTED_RIGHT, &MOVIE_CAMERA, &RED_PAPER_LANTERN, &TELEVISION, &VIDEOCASSETTE, &VIDEO_CAMERA, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::light_and_video

/// lock 🔑🔒🔐
pub mod lock { // objects::lock
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="key 🔑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEY); // 🔑 (`U+1F511`)"] #[doc="# assert_eq!(KEY.to_string().as_str(), \"🔑\");"]
#[doc="```"]
pub static KEY :  Emoji = Emoji::new("key", "🔑"); // key
#[doc="locked 🔒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCKED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCKED); // 🔒 (`U+1F512`)"] #[doc="# assert_eq!(LOCKED.to_string().as_str(), \"🔒\");"]
#[doc="```"]
pub static LOCKED :  Emoji = Emoji::new("locked", "🔒"); // locked
#[doc="locked with key 🔐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCKED_WITH_KEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCKED_WITH_KEY); // 🔐 (`U+1F510`)"] #[doc="# assert_eq!(LOCKED_WITH_KEY.to_string().as_str(), \"🔐\");"]
#[doc="```"]
pub static LOCKED_WITH_KEY :  Emoji = Emoji::new("locked with key", "🔐"); // locked with key
#[doc="locked with pen 🔏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCKED_WITH_PEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCKED_WITH_PEN); // 🔏 (`U+1F50F`)"] #[doc="# assert_eq!(LOCKED_WITH_PEN.to_string().as_str(), \"🔏\");"]
#[doc="```"]
pub static LOCKED_WITH_PEN :  Emoji = Emoji::new("locked with pen", "🔏"); // locked with pen
#[doc="old key 🗝️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLD_KEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLD_KEY); // 🗝️ (`U+1F5DD U+FE0F`)"] #[doc="# assert_eq!(OLD_KEY.to_string().as_str(), \"🗝️\");"]
#[doc="```"]
pub static OLD_KEY :  Emoji = Emoji::new("old key", "🗝️"); // old key
#[doc="unlocked 🔓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UNLOCKED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UNLOCKED); // 🔓 (`U+1F513`)"] #[doc="# assert_eq!(UNLOCKED.to_string().as_str(), \"🔓\");"]
#[doc="```"]
pub static UNLOCKED :  Emoji = Emoji::new("unlocked", "🔓"); // unlocked
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&KEY, ],
&[&LOCKED, ],
&[&LOCKED_WITH_KEY, ],
&[&LOCKED_WITH_PEN, ],
&[&OLD_KEY, ],
&[&UNLOCKED, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&KEY, &LOCKED, &LOCKED_WITH_KEY, &LOCKED_WITH_PEN, &OLD_KEY, &UNLOCKED, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::lock

/// mail 🗳️📪📫
pub mod mail { // objects::mail
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="ballot box with ballot 🗳️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALLOT_BOX_WITH_BALLOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALLOT_BOX_WITH_BALLOT); // 🗳️ (`U+1F5F3 U+FE0F`)"] #[doc="# assert_eq!(BALLOT_BOX_WITH_BALLOT.to_string().as_str(), \"🗳️\");"]
#[doc="```"]
pub static BALLOT_BOX_WITH_BALLOT :  Emoji = Emoji::new("ballot box with ballot", "🗳️"); // ballot box with ballot
#[doc="closed mailbox with lowered flag 📪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_MAILBOX_WITH_LOWERED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_MAILBOX_WITH_LOWERED_FLAG); // 📪 (`U+1F4EA`)"] #[doc="# assert_eq!(CLOSED_MAILBOX_WITH_LOWERED_FLAG.to_string().as_str(), \"📪\");"]
#[doc="```"]
pub static CLOSED_MAILBOX_WITH_LOWERED_FLAG :  Emoji = Emoji::new("closed mailbox with lowered flag", "📪"); // closed mailbox with lowered flag
#[doc="closed mailbox with raised flag 📫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_MAILBOX_WITH_RAISED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_MAILBOX_WITH_RAISED_FLAG); // 📫 (`U+1F4EB`)"] #[doc="# assert_eq!(CLOSED_MAILBOX_WITH_RAISED_FLAG.to_string().as_str(), \"📫\");"]
#[doc="```"]
pub static CLOSED_MAILBOX_WITH_RAISED_FLAG :  Emoji = Emoji::new("closed mailbox with raised flag", "📫"); // closed mailbox with raised flag
#[doc="envelope ✉️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ENVELOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ENVELOPE); // ✉️ (`U+2709 U+FE0F`)"] #[doc="# assert_eq!(ENVELOPE.to_string().as_str(), \"✉️\");"]
#[doc="```"]
pub static ENVELOPE :  Emoji = Emoji::new("envelope", "✉️"); // envelope
#[doc="envelope with arrow 📩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ENVELOPE_WITH_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ENVELOPE_WITH_ARROW); // 📩 (`U+1F4E9`)"] #[doc="# assert_eq!(ENVELOPE_WITH_ARROW.to_string().as_str(), \"📩\");"]
#[doc="```"]
pub static ENVELOPE_WITH_ARROW :  Emoji = Emoji::new("envelope with arrow", "📩"); // envelope with arrow
#[doc="e-mail 📧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::E_MAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", E_MAIL); // 📧 (`U+1F4E7`)"] #[doc="# assert_eq!(E_MAIL.to_string().as_str(), \"📧\");"]
#[doc="```"]
pub static E_MAIL :  Emoji = Emoji::new("e-mail", "📧"); // e-mail
#[doc="inbox tray 📥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INBOX_TRAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INBOX_TRAY); // 📥 (`U+1F4E5`)"] #[doc="# assert_eq!(INBOX_TRAY.to_string().as_str(), \"📥\");"]
#[doc="```"]
pub static INBOX_TRAY :  Emoji = Emoji::new("inbox tray", "📥"); // inbox tray
#[doc="incoming envelope 📨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INCOMING_ENVELOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INCOMING_ENVELOPE); // 📨 (`U+1F4E8`)"] #[doc="# assert_eq!(INCOMING_ENVELOPE.to_string().as_str(), \"📨\");"]
#[doc="```"]
pub static INCOMING_ENVELOPE :  Emoji = Emoji::new("incoming envelope", "📨"); // incoming envelope
#[doc="open mailbox with lowered flag 📭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_MAILBOX_WITH_LOWERED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_MAILBOX_WITH_LOWERED_FLAG); // 📭 (`U+1F4ED`)"] #[doc="# assert_eq!(OPEN_MAILBOX_WITH_LOWERED_FLAG.to_string().as_str(), \"📭\");"]
#[doc="```"]
pub static OPEN_MAILBOX_WITH_LOWERED_FLAG :  Emoji = Emoji::new("open mailbox with lowered flag", "📭"); // open mailbox with lowered flag
#[doc="open mailbox with raised flag 📬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_MAILBOX_WITH_RAISED_FLAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_MAILBOX_WITH_RAISED_FLAG); // 📬 (`U+1F4EC`)"] #[doc="# assert_eq!(OPEN_MAILBOX_WITH_RAISED_FLAG.to_string().as_str(), \"📬\");"]
#[doc="```"]
pub static OPEN_MAILBOX_WITH_RAISED_FLAG :  Emoji = Emoji::new("open mailbox with raised flag", "📬"); // open mailbox with raised flag
#[doc="outbox tray 📤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OUTBOX_TRAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OUTBOX_TRAY); // 📤 (`U+1F4E4`)"] #[doc="# assert_eq!(OUTBOX_TRAY.to_string().as_str(), \"📤\");"]
#[doc="```"]
pub static OUTBOX_TRAY :  Emoji = Emoji::new("outbox tray", "📤"); // outbox tray
#[doc="package 📦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PACKAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PACKAGE); // 📦 (`U+1F4E6`)"] #[doc="# assert_eq!(PACKAGE.to_string().as_str(), \"📦\");"]
#[doc="```"]
pub static PACKAGE :  Emoji = Emoji::new("package", "📦"); // package
#[doc="postbox 📮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POSTBOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POSTBOX); // 📮 (`U+1F4EE`)"] #[doc="# assert_eq!(POSTBOX.to_string().as_str(), \"📮\");"]
#[doc="```"]
pub static POSTBOX :  Emoji = Emoji::new("postbox", "📮"); // postbox
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BALLOT_BOX_WITH_BALLOT, ],
&[&CLOSED_MAILBOX_WITH_LOWERED_FLAG, ],
&[&CLOSED_MAILBOX_WITH_RAISED_FLAG, ],
&[&ENVELOPE, ],
&[&ENVELOPE_WITH_ARROW, ],
&[&E_MAIL, ],
&[&INBOX_TRAY, ],
&[&INCOMING_ENVELOPE, ],
&[&OPEN_MAILBOX_WITH_LOWERED_FLAG, ],
&[&OPEN_MAILBOX_WITH_RAISED_FLAG, ],
&[&OUTBOX_TRAY, ],
&[&PACKAGE, ],
&[&POSTBOX, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BALLOT_BOX_WITH_BALLOT, &CLOSED_MAILBOX_WITH_LOWERED_FLAG, &CLOSED_MAILBOX_WITH_RAISED_FLAG, &ENVELOPE, &ENVELOPE_WITH_ARROW, &E_MAIL, &INBOX_TRAY, &INCOMING_ENVELOPE, &OPEN_MAILBOX_WITH_LOWERED_FLAG, &OPEN_MAILBOX_WITH_RAISED_FLAG, &OUTBOX_TRAY, &PACKAGE, &POSTBOX, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::mail

/// medical 🩹🩸💊
pub mod medical { // objects::medical
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="adhesive bandage 🩹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ADHESIVE_BANDAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ADHESIVE_BANDAGE); // 🩹 (`U+1FA79`)"] #[doc="# assert_eq!(ADHESIVE_BANDAGE.to_string().as_str(), \"🩹\");"]
#[doc="```"]
pub static ADHESIVE_BANDAGE :  Emoji = Emoji::new("adhesive bandage", "🩹"); // adhesive bandage
#[doc="drop of blood 🩸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DROP_OF_BLOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DROP_OF_BLOOD); // 🩸 (`U+1FA78`)"] #[doc="# assert_eq!(DROP_OF_BLOOD.to_string().as_str(), \"🩸\");"]
#[doc="```"]
pub static DROP_OF_BLOOD :  Emoji = Emoji::new("drop of blood", "🩸"); // drop of blood
#[doc="pill 💊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PILL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PILL); // 💊 (`U+1F48A`)"] #[doc="# assert_eq!(PILL.to_string().as_str(), \"💊\");"]
#[doc="```"]
pub static PILL :  Emoji = Emoji::new("pill", "💊"); // pill
#[doc="stethoscope 🩺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STETHOSCOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STETHOSCOPE); // 🩺 (`U+1FA7A`)"] #[doc="# assert_eq!(STETHOSCOPE.to_string().as_str(), \"🩺\");"]
#[doc="```"]
pub static STETHOSCOPE :  Emoji = Emoji::new("stethoscope", "🩺"); // stethoscope
#[doc="syringe 💉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SYRINGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SYRINGE); // 💉 (`U+1F489`)"] #[doc="# assert_eq!(SYRINGE.to_string().as_str(), \"💉\");"]
#[doc="```"]
pub static SYRINGE :  Emoji = Emoji::new("syringe", "💉"); // syringe
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ADHESIVE_BANDAGE, ],
&[&DROP_OF_BLOOD, ],
&[&PILL, ],
&[&STETHOSCOPE, ],
&[&SYRINGE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ADHESIVE_BANDAGE, &DROP_OF_BLOOD, &PILL, &STETHOSCOPE, &SYRINGE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::medical

/// money 💹🪙💳
pub mod money { // objects::money
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="chart increasing with yen 💹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHART_INCREASING_WITH_YEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHART_INCREASING_WITH_YEN); // 💹 (`U+1F4B9`)"] #[doc="# assert_eq!(CHART_INCREASING_WITH_YEN.to_string().as_str(), \"💹\");"]
#[doc="```"]
pub static CHART_INCREASING_WITH_YEN :  Emoji = Emoji::new("chart increasing with yen", "💹"); // chart increasing with yen
#[doc="coin 🪙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COIN); // 🪙 (`U+1FA99`)"] #[doc="# assert_eq!(COIN.to_string().as_str(), \"🪙\");"]
#[doc="```"]
pub static COIN :  Emoji = Emoji::new("coin", "🪙"); // coin
#[doc="credit card 💳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CREDIT_CARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CREDIT_CARD); // 💳 (`U+1F4B3`)"] #[doc="# assert_eq!(CREDIT_CARD.to_string().as_str(), \"💳\");"]
#[doc="```"]
pub static CREDIT_CARD :  Emoji = Emoji::new("credit card", "💳"); // credit card
#[doc="dollar banknote 💵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOLLAR_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOLLAR_BANKNOTE); // 💵 (`U+1F4B5`)"] #[doc="# assert_eq!(DOLLAR_BANKNOTE.to_string().as_str(), \"💵\");"]
#[doc="```"]
pub static DOLLAR_BANKNOTE :  Emoji = Emoji::new("dollar banknote", "💵"); // dollar banknote
#[doc="euro banknote 💶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EURO_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EURO_BANKNOTE); // 💶 (`U+1F4B6`)"] #[doc="# assert_eq!(EURO_BANKNOTE.to_string().as_str(), \"💶\");"]
#[doc="```"]
pub static EURO_BANKNOTE :  Emoji = Emoji::new("euro banknote", "💶"); // euro banknote
#[doc="money bag 💰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONEY_BAG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONEY_BAG); // 💰 (`U+1F4B0`)"] #[doc="# assert_eq!(MONEY_BAG.to_string().as_str(), \"💰\");"]
#[doc="```"]
pub static MONEY_BAG :  Emoji = Emoji::new("money bag", "💰"); // money bag
#[doc="money with wings 💸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONEY_WITH_WINGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONEY_WITH_WINGS); // 💸 (`U+1F4B8`)"] #[doc="# assert_eq!(MONEY_WITH_WINGS.to_string().as_str(), \"💸\");"]
#[doc="```"]
pub static MONEY_WITH_WINGS :  Emoji = Emoji::new("money with wings", "💸"); // money with wings
#[doc="pound banknote 💷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POUND_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POUND_BANKNOTE); // 💷 (`U+1F4B7`)"] #[doc="# assert_eq!(POUND_BANKNOTE.to_string().as_str(), \"💷\");"]
#[doc="```"]
pub static POUND_BANKNOTE :  Emoji = Emoji::new("pound banknote", "💷"); // pound banknote
#[doc="receipt 🧾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RECEIPT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RECEIPT); // 🧾 (`U+1F9FE`)"] #[doc="# assert_eq!(RECEIPT.to_string().as_str(), \"🧾\");"]
#[doc="```"]
pub static RECEIPT :  Emoji = Emoji::new("receipt", "🧾"); // receipt
#[doc="yen banknote 💴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YEN_BANKNOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YEN_BANKNOTE); // 💴 (`U+1F4B4`)"] #[doc="# assert_eq!(YEN_BANKNOTE.to_string().as_str(), \"💴\");"]
#[doc="```"]
pub static YEN_BANKNOTE :  Emoji = Emoji::new("yen banknote", "💴"); // yen banknote
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CHART_INCREASING_WITH_YEN, ],
&[&COIN, ],
&[&CREDIT_CARD, ],
&[&DOLLAR_BANKNOTE, ],
&[&EURO_BANKNOTE, ],
&[&MONEY_BAG, ],
&[&MONEY_WITH_WINGS, ],
&[&POUND_BANKNOTE, ],
&[&RECEIPT, ],
&[&YEN_BANKNOTE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CHART_INCREASING_WITH_YEN, &COIN, &CREDIT_CARD, &DOLLAR_BANKNOTE, &EURO_BANKNOTE, &MONEY_BAG, &MONEY_WITH_WINGS, &POUND_BANKNOTE, &RECEIPT, &YEN_BANKNOTE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::money

/// music 🎛️🎧🎚️
pub mod music { // objects::music
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="control knobs 🎛️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONTROL_KNOBS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONTROL_KNOBS); // 🎛️ (`U+1F39B U+FE0F`)"] #[doc="# assert_eq!(CONTROL_KNOBS.to_string().as_str(), \"🎛️\");"]
#[doc="```"]
pub static CONTROL_KNOBS :  Emoji = Emoji::new("control knobs", "🎛️"); // control knobs
#[doc="headphone 🎧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEADPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEADPHONE); // 🎧 (`U+1F3A7`)"] #[doc="# assert_eq!(HEADPHONE.to_string().as_str(), \"🎧\");"]
#[doc="```"]
pub static HEADPHONE :  Emoji = Emoji::new("headphone", "🎧"); // headphone
#[doc="level slider 🎚️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEVEL_SLIDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEVEL_SLIDER); // 🎚️ (`U+1F39A U+FE0F`)"] #[doc="# assert_eq!(LEVEL_SLIDER.to_string().as_str(), \"🎚️\");"]
#[doc="```"]
pub static LEVEL_SLIDER :  Emoji = Emoji::new("level slider", "🎚️"); // level slider
#[doc="microphone 🎤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MICROPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MICROPHONE); // 🎤 (`U+1F3A4`)"] #[doc="# assert_eq!(MICROPHONE.to_string().as_str(), \"🎤\");"]
#[doc="```"]
pub static MICROPHONE :  Emoji = Emoji::new("microphone", "🎤"); // microphone
#[doc="musical note 🎵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_NOTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_NOTE); // 🎵 (`U+1F3B5`)"] #[doc="# assert_eq!(MUSICAL_NOTE.to_string().as_str(), \"🎵\");"]
#[doc="```"]
pub static MUSICAL_NOTE :  Emoji = Emoji::new("musical note", "🎵"); // musical note
#[doc="musical notes 🎶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_NOTES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_NOTES); // 🎶 (`U+1F3B6`)"] #[doc="# assert_eq!(MUSICAL_NOTES.to_string().as_str(), \"🎶\");"]
#[doc="```"]
pub static MUSICAL_NOTES :  Emoji = Emoji::new("musical notes", "🎶"); // musical notes
#[doc="musical score 🎼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_SCORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_SCORE); // 🎼 (`U+1F3BC`)"] #[doc="# assert_eq!(MUSICAL_SCORE.to_string().as_str(), \"🎼\");"]
#[doc="```"]
pub static MUSICAL_SCORE :  Emoji = Emoji::new("musical score", "🎼"); // musical score
#[doc="radio 📻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RADIO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RADIO); // 📻 (`U+1F4FB`)"] #[doc="# assert_eq!(RADIO.to_string().as_str(), \"📻\");"]
#[doc="```"]
pub static RADIO :  Emoji = Emoji::new("radio", "📻"); // radio
#[doc="studio microphone 🎙️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STUDIO_MICROPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STUDIO_MICROPHONE); // 🎙️ (`U+1F399 U+FE0F`)"] #[doc="# assert_eq!(STUDIO_MICROPHONE.to_string().as_str(), \"🎙️\");"]
#[doc="```"]
pub static STUDIO_MICROPHONE :  Emoji = Emoji::new("studio microphone", "🎙️"); // studio microphone
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CONTROL_KNOBS, ],
&[&HEADPHONE, ],
&[&LEVEL_SLIDER, ],
&[&MICROPHONE, ],
&[&MUSICAL_NOTE, ],
&[&MUSICAL_NOTES, ],
&[&MUSICAL_SCORE, ],
&[&RADIO, ],
&[&STUDIO_MICROPHONE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CONTROL_KNOBS, &HEADPHONE, &LEVEL_SLIDER, &MICROPHONE, &MUSICAL_NOTE, &MUSICAL_NOTES, &MUSICAL_SCORE, &RADIO, &STUDIO_MICROPHONE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::music

/// musical-instrument 🪗🪕🥁
pub mod musical_instrument { // objects::musical_instrument
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="accordion 🪗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ACCORDION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ACCORDION); // 🪗 (`U+1FA97`)"] #[doc="# assert_eq!(ACCORDION.to_string().as_str(), \"🪗\");"]
#[doc="```"]
pub static ACCORDION :  Emoji = Emoji::new("accordion", "🪗"); // accordion
#[doc="banjo 🪕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BANJO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BANJO); // 🪕 (`U+1FA95`)"] #[doc="# assert_eq!(BANJO.to_string().as_str(), \"🪕\");"]
#[doc="```"]
pub static BANJO :  Emoji = Emoji::new("banjo", "🪕"); // banjo
#[doc="drum 🥁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DRUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DRUM); // 🥁 (`U+1F941`)"] #[doc="# assert_eq!(DRUM.to_string().as_str(), \"🥁\");"]
#[doc="```"]
pub static DRUM :  Emoji = Emoji::new("drum", "🥁"); // drum
#[doc="guitar 🎸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GUITAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GUITAR); // 🎸 (`U+1F3B8`)"] #[doc="# assert_eq!(GUITAR.to_string().as_str(), \"🎸\");"]
#[doc="```"]
pub static GUITAR :  Emoji = Emoji::new("guitar", "🎸"); // guitar
#[doc="long drum 🪘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LONG_DRUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LONG_DRUM); // 🪘 (`U+1FA98`)"] #[doc="# assert_eq!(LONG_DRUM.to_string().as_str(), \"🪘\");"]
#[doc="```"]
pub static LONG_DRUM :  Emoji = Emoji::new("long drum", "🪘"); // long drum
#[doc="musical keyboard 🎹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUSICAL_KEYBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUSICAL_KEYBOARD); // 🎹 (`U+1F3B9`)"] #[doc="# assert_eq!(MUSICAL_KEYBOARD.to_string().as_str(), \"🎹\");"]
#[doc="```"]
pub static MUSICAL_KEYBOARD :  Emoji = Emoji::new("musical keyboard", "🎹"); // musical keyboard
#[doc="saxophone 🎷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAXOPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAXOPHONE); // 🎷 (`U+1F3B7`)"] #[doc="# assert_eq!(SAXOPHONE.to_string().as_str(), \"🎷\");"]
#[doc="```"]
pub static SAXOPHONE :  Emoji = Emoji::new("saxophone", "🎷"); // saxophone
#[doc="trumpet 🎺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRUMPET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRUMPET); // 🎺 (`U+1F3BA`)"] #[doc="# assert_eq!(TRUMPET.to_string().as_str(), \"🎺\");"]
#[doc="```"]
pub static TRUMPET :  Emoji = Emoji::new("trumpet", "🎺"); // trumpet
#[doc="violin 🎻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIOLIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIOLIN); // 🎻 (`U+1F3BB`)"] #[doc="# assert_eq!(VIOLIN.to_string().as_str(), \"🎻\");"]
#[doc="```"]
pub static VIOLIN :  Emoji = Emoji::new("violin", "🎻"); // violin
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ACCORDION, ],
&[&BANJO, ],
&[&DRUM, ],
&[&GUITAR, ],
&[&LONG_DRUM, ],
&[&MUSICAL_KEYBOARD, ],
&[&SAXOPHONE, ],
&[&TRUMPET, ],
&[&VIOLIN, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ACCORDION, &BANJO, &DRUM, &GUITAR, &LONG_DRUM, &MUSICAL_KEYBOARD, &SAXOPHONE, &TRUMPET, &VIOLIN, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::musical_instrument

/// office 📊💼📅
pub mod office { // objects::office
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bar chart 📊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAR_CHART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAR_CHART); // 📊 (`U+1F4CA`)"] #[doc="# assert_eq!(BAR_CHART.to_string().as_str(), \"📊\");"]
#[doc="```"]
pub static BAR_CHART :  Emoji = Emoji::new("bar chart", "📊"); // bar chart
#[doc="briefcase 💼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIEFCASE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIEFCASE); // 💼 (`U+1F4BC`)"] #[doc="# assert_eq!(BRIEFCASE.to_string().as_str(), \"💼\");"]
#[doc="```"]
pub static BRIEFCASE :  Emoji = Emoji::new("briefcase", "💼"); // briefcase
#[doc="calendar 📅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CALENDAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CALENDAR); // 📅 (`U+1F4C5`)"] #[doc="# assert_eq!(CALENDAR.to_string().as_str(), \"📅\");"]
#[doc="```"]
pub static CALENDAR :  Emoji = Emoji::new("calendar", "📅"); // calendar
#[doc="card file box 🗃️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARD_FILE_BOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARD_FILE_BOX); // 🗃️ (`U+1F5C3 U+FE0F`)"] #[doc="# assert_eq!(CARD_FILE_BOX.to_string().as_str(), \"🗃️\");"]
#[doc="```"]
pub static CARD_FILE_BOX :  Emoji = Emoji::new("card file box", "🗃️"); // card file box
#[doc="card index 📇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARD_INDEX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARD_INDEX); // 📇 (`U+1F4C7`)"] #[doc="# assert_eq!(CARD_INDEX.to_string().as_str(), \"📇\");"]
#[doc="```"]
pub static CARD_INDEX :  Emoji = Emoji::new("card index", "📇"); // card index
#[doc="card index dividers 🗂️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARD_INDEX_DIVIDERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARD_INDEX_DIVIDERS); // 🗂️ (`U+1F5C2 U+FE0F`)"] #[doc="# assert_eq!(CARD_INDEX_DIVIDERS.to_string().as_str(), \"🗂️\");"]
#[doc="```"]
pub static CARD_INDEX_DIVIDERS :  Emoji = Emoji::new("card index dividers", "🗂️"); // card index dividers
#[doc="chart decreasing 📉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHART_DECREASING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHART_DECREASING); // 📉 (`U+1F4C9`)"] #[doc="# assert_eq!(CHART_DECREASING.to_string().as_str(), \"📉\");"]
#[doc="```"]
pub static CHART_DECREASING :  Emoji = Emoji::new("chart decreasing", "📉"); // chart decreasing
#[doc="chart increasing 📈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHART_INCREASING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHART_INCREASING); // 📈 (`U+1F4C8`)"] #[doc="# assert_eq!(CHART_INCREASING.to_string().as_str(), \"📈\");"]
#[doc="```"]
pub static CHART_INCREASING :  Emoji = Emoji::new("chart increasing", "📈"); // chart increasing
#[doc="clipboard 📋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLIPBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLIPBOARD); // 📋 (`U+1F4CB`)"] #[doc="# assert_eq!(CLIPBOARD.to_string().as_str(), \"📋\");"]
#[doc="```"]
pub static CLIPBOARD :  Emoji = Emoji::new("clipboard", "📋"); // clipboard
#[doc="file cabinet 🗄️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILE_CABINET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILE_CABINET); // 🗄️ (`U+1F5C4 U+FE0F`)"] #[doc="# assert_eq!(FILE_CABINET.to_string().as_str(), \"🗄️\");"]
#[doc="```"]
pub static FILE_CABINET :  Emoji = Emoji::new("file cabinet", "🗄️"); // file cabinet
#[doc="file folder 📁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FILE_FOLDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FILE_FOLDER); // 📁 (`U+1F4C1`)"] #[doc="# assert_eq!(FILE_FOLDER.to_string().as_str(), \"📁\");"]
#[doc="```"]
pub static FILE_FOLDER :  Emoji = Emoji::new("file folder", "📁"); // file folder
#[doc="linked paperclips 🖇️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LINKED_PAPERCLIPS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LINKED_PAPERCLIPS); // 🖇️ (`U+1F587 U+FE0F`)"] #[doc="# assert_eq!(LINKED_PAPERCLIPS.to_string().as_str(), \"🖇️\");"]
#[doc="```"]
pub static LINKED_PAPERCLIPS :  Emoji = Emoji::new("linked paperclips", "🖇️"); // linked paperclips
#[doc="open file folder 📂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_FILE_FOLDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_FILE_FOLDER); // 📂 (`U+1F4C2`)"] #[doc="# assert_eq!(OPEN_FILE_FOLDER.to_string().as_str(), \"📂\");"]
#[doc="```"]
pub static OPEN_FILE_FOLDER :  Emoji = Emoji::new("open file folder", "📂"); // open file folder
#[doc="paperclip 📎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAPERCLIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAPERCLIP); // 📎 (`U+1F4CE`)"] #[doc="# assert_eq!(PAPERCLIP.to_string().as_str(), \"📎\");"]
#[doc="```"]
pub static PAPERCLIP :  Emoji = Emoji::new("paperclip", "📎"); // paperclip
#[doc="pushpin 📌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PUSHPIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PUSHPIN); // 📌 (`U+1F4CC`)"] #[doc="# assert_eq!(PUSHPIN.to_string().as_str(), \"📌\");"]
#[doc="```"]
pub static PUSHPIN :  Emoji = Emoji::new("pushpin", "📌"); // pushpin
#[doc="round pushpin 📍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROUND_PUSHPIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROUND_PUSHPIN); // 📍 (`U+1F4CD`)"] #[doc="# assert_eq!(ROUND_PUSHPIN.to_string().as_str(), \"📍\");"]
#[doc="```"]
pub static ROUND_PUSHPIN :  Emoji = Emoji::new("round pushpin", "📍"); // round pushpin
#[doc="scissors ✂️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCISSORS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCISSORS); // ✂️ (`U+2702 U+FE0F`)"] #[doc="# assert_eq!(SCISSORS.to_string().as_str(), \"✂️\");"]
#[doc="```"]
pub static SCISSORS :  Emoji = Emoji::new("scissors", "✂️"); // scissors
#[doc="spiral calendar 🗓️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIRAL_CALENDAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIRAL_CALENDAR); // 🗓️ (`U+1F5D3 U+FE0F`)"] #[doc="# assert_eq!(SPIRAL_CALENDAR.to_string().as_str(), \"🗓️\");"]
#[doc="```"]
pub static SPIRAL_CALENDAR :  Emoji = Emoji::new("spiral calendar", "🗓️"); // spiral calendar
#[doc="spiral notepad 🗒️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPIRAL_NOTEPAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPIRAL_NOTEPAD); // 🗒️ (`U+1F5D2 U+FE0F`)"] #[doc="# assert_eq!(SPIRAL_NOTEPAD.to_string().as_str(), \"🗒️\");"]
#[doc="```"]
pub static SPIRAL_NOTEPAD :  Emoji = Emoji::new("spiral notepad", "🗒️"); // spiral notepad
#[doc="straight ruler 📏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STRAIGHT_RULER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STRAIGHT_RULER); // 📏 (`U+1F4CF`)"] #[doc="# assert_eq!(STRAIGHT_RULER.to_string().as_str(), \"📏\");"]
#[doc="```"]
pub static STRAIGHT_RULER :  Emoji = Emoji::new("straight ruler", "📏"); // straight ruler
#[doc="tear-off calendar 📆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEAR_OFF_CALENDAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEAR_OFF_CALENDAR); // 📆 (`U+1F4C6`)"] #[doc="# assert_eq!(TEAR_OFF_CALENDAR.to_string().as_str(), \"📆\");"]
#[doc="```"]
pub static TEAR_OFF_CALENDAR :  Emoji = Emoji::new("tear-off calendar", "📆"); // tear-off calendar
#[doc="triangular ruler 📐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRIANGULAR_RULER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRIANGULAR_RULER); // 📐 (`U+1F4D0`)"] #[doc="# assert_eq!(TRIANGULAR_RULER.to_string().as_str(), \"📐\");"]
#[doc="```"]
pub static TRIANGULAR_RULER :  Emoji = Emoji::new("triangular ruler", "📐"); // triangular ruler
#[doc="wastebasket 🗑️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WASTEBASKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WASTEBASKET); // 🗑️ (`U+1F5D1 U+FE0F`)"] #[doc="# assert_eq!(WASTEBASKET.to_string().as_str(), \"🗑️\");"]
#[doc="```"]
pub static WASTEBASKET :  Emoji = Emoji::new("wastebasket", "🗑️"); // wastebasket
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BAR_CHART, ],
&[&BRIEFCASE, ],
&[&CALENDAR, ],
&[&CARD_FILE_BOX, ],
&[&CARD_INDEX, ],
&[&CARD_INDEX_DIVIDERS, ],
&[&CHART_DECREASING, ],
&[&CHART_INCREASING, ],
&[&CLIPBOARD, ],
&[&FILE_CABINET, ],
&[&FILE_FOLDER, ],
&[&LINKED_PAPERCLIPS, ],
&[&OPEN_FILE_FOLDER, ],
&[&PAPERCLIP, ],
&[&PUSHPIN, ],
&[&ROUND_PUSHPIN, ],
&[&SCISSORS, ],
&[&SPIRAL_CALENDAR, ],
&[&SPIRAL_NOTEPAD, ],
&[&STRAIGHT_RULER, ],
&[&TEAR_OFF_CALENDAR, ],
&[&TRIANGULAR_RULER, ],
&[&WASTEBASKET, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BAR_CHART, &BRIEFCASE, &CALENDAR, &CARD_FILE_BOX, &CARD_INDEX, &CARD_INDEX_DIVIDERS, &CHART_DECREASING, &CHART_INCREASING, &CLIPBOARD, &FILE_CABINET, &FILE_FOLDER, &LINKED_PAPERCLIPS, &OPEN_FILE_FOLDER, &PAPERCLIP, &PUSHPIN, &ROUND_PUSHPIN, &SCISSORS, &SPIRAL_CALENDAR, &SPIRAL_NOTEPAD, &STRAIGHT_RULER, &TEAR_OFF_CALENDAR, &TRIANGULAR_RULER, &WASTEBASKET, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::office

/// other-object 🚬⚰️⚱️
pub mod other_object { // objects::other_object
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="cigarette 🚬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CIGARETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CIGARETTE); // 🚬 (`U+1F6AC`)"] #[doc="# assert_eq!(CIGARETTE.to_string().as_str(), \"🚬\");"]
#[doc="```"]
pub static CIGARETTE :  Emoji = Emoji::new("cigarette", "🚬"); // cigarette
#[doc="coffin ⚰️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COFFIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COFFIN); // ⚰️ (`U+26B0 U+FE0F`)"] #[doc="# assert_eq!(COFFIN.to_string().as_str(), \"⚰️\");"]
#[doc="```"]
pub static COFFIN :  Emoji = Emoji::new("coffin", "⚰️"); // coffin
#[doc="funeral urn ⚱️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FUNERAL_URN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FUNERAL_URN); // ⚱️ (`U+26B1 U+FE0F`)"] #[doc="# assert_eq!(FUNERAL_URN.to_string().as_str(), \"⚱️\");"]
#[doc="```"]
pub static FUNERAL_URN :  Emoji = Emoji::new("funeral urn", "⚱️"); // funeral urn
#[doc="headstone 🪦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEADSTONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEADSTONE); // 🪦 (`U+1FAA6`)"] #[doc="# assert_eq!(HEADSTONE.to_string().as_str(), \"🪦\");"]
#[doc="```"]
pub static HEADSTONE :  Emoji = Emoji::new("headstone", "🪦"); // headstone
#[doc="moai 🗿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOAI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOAI); // 🗿 (`U+1F5FF`)"] #[doc="# assert_eq!(MOAI.to_string().as_str(), \"🗿\");"]
#[doc="```"]
pub static MOAI :  Emoji = Emoji::new("moai", "🗿"); // moai
#[doc="placard 🪧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLACARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLACARD); // 🪧 (`U+1FAA7`)"] #[doc="# assert_eq!(PLACARD.to_string().as_str(), \"🪧\");"]
#[doc="```"]
pub static PLACARD :  Emoji = Emoji::new("placard", "🪧"); // placard
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CIGARETTE, ],
&[&COFFIN, ],
&[&FUNERAL_URN, ],
&[&HEADSTONE, ],
&[&MOAI, ],
&[&PLACARD, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CIGARETTE, &COFFIN, &FUNERAL_URN, &HEADSTONE, &MOAI, &PLACARD, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::other_object

/// phone 📠📱📲
pub mod phone { // objects::phone
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="fax machine 📠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAX_MACHINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAX_MACHINE); // 📠 (`U+1F4E0`)"] #[doc="# assert_eq!(FAX_MACHINE.to_string().as_str(), \"📠\");"]
#[doc="```"]
pub static FAX_MACHINE :  Emoji = Emoji::new("fax machine", "📠"); // fax machine
#[doc="mobile phone 📱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOBILE_PHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOBILE_PHONE); // 📱 (`U+1F4F1`)"] #[doc="# assert_eq!(MOBILE_PHONE.to_string().as_str(), \"📱\");"]
#[doc="```"]
pub static MOBILE_PHONE :  Emoji = Emoji::new("mobile phone", "📱"); // mobile phone
#[doc="mobile phone with arrow 📲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOBILE_PHONE_WITH_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOBILE_PHONE_WITH_ARROW); // 📲 (`U+1F4F2`)"] #[doc="# assert_eq!(MOBILE_PHONE_WITH_ARROW.to_string().as_str(), \"📲\");"]
#[doc="```"]
pub static MOBILE_PHONE_WITH_ARROW :  Emoji = Emoji::new("mobile phone with arrow", "📲"); // mobile phone with arrow
#[doc="pager 📟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAGER); // 📟 (`U+1F4DF`)"] #[doc="# assert_eq!(PAGER.to_string().as_str(), \"📟\");"]
#[doc="```"]
pub static PAGER :  Emoji = Emoji::new("pager", "📟"); // pager
#[doc="telephone ☎️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELEPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELEPHONE); // ☎️ (`U+260E U+FE0F`)"] #[doc="# assert_eq!(TELEPHONE.to_string().as_str(), \"☎️\");"]
#[doc="```"]
pub static TELEPHONE :  Emoji = Emoji::new("telephone", "☎️"); // telephone
#[doc="telephone receiver 📞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELEPHONE_RECEIVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELEPHONE_RECEIVER); // 📞 (`U+1F4DE`)"] #[doc="# assert_eq!(TELEPHONE_RECEIVER.to_string().as_str(), \"📞\");"]
#[doc="```"]
pub static TELEPHONE_RECEIVER :  Emoji = Emoji::new("telephone receiver", "📞"); // telephone receiver
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FAX_MACHINE, ],
&[&MOBILE_PHONE, ],
&[&MOBILE_PHONE_WITH_ARROW, ],
&[&PAGER, ],
&[&TELEPHONE, ],
&[&TELEPHONE_RECEIVER, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FAX_MACHINE, &MOBILE_PHONE, &MOBILE_PHONE_WITH_ARROW, &PAGER, &TELEPHONE, &TELEPHONE_RECEIVER, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::phone

/// science ⚗️🧬🔬
pub mod science { // objects::science
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="alembic ⚗️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALEMBIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALEMBIC); // ⚗️ (`U+2697 U+FE0F`)"] #[doc="# assert_eq!(ALEMBIC.to_string().as_str(), \"⚗️\");"]
#[doc="```"]
pub static ALEMBIC :  Emoji = Emoji::new("alembic", "⚗️"); // alembic
#[doc="dna 🧬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DNA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DNA); // 🧬 (`U+1F9EC`)"] #[doc="# assert_eq!(DNA.to_string().as_str(), \"🧬\");"]
#[doc="```"]
pub static DNA :  Emoji = Emoji::new("dna", "🧬"); // dna
#[doc="microscope 🔬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MICROSCOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MICROSCOPE); // 🔬 (`U+1F52C`)"] #[doc="# assert_eq!(MICROSCOPE.to_string().as_str(), \"🔬\");"]
#[doc="```"]
pub static MICROSCOPE :  Emoji = Emoji::new("microscope", "🔬"); // microscope
#[doc="petri dish 🧫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PETRI_DISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PETRI_DISH); // 🧫 (`U+1F9EB`)"] #[doc="# assert_eq!(PETRI_DISH.to_string().as_str(), \"🧫\");"]
#[doc="```"]
pub static PETRI_DISH :  Emoji = Emoji::new("petri dish", "🧫"); // petri dish
#[doc="satellite antenna 📡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SATELLITE_ANTENNA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SATELLITE_ANTENNA); // 📡 (`U+1F4E1`)"] #[doc="# assert_eq!(SATELLITE_ANTENNA.to_string().as_str(), \"📡\");"]
#[doc="```"]
pub static SATELLITE_ANTENNA :  Emoji = Emoji::new("satellite antenna", "📡"); // satellite antenna
#[doc="telescope 🔭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TELESCOPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TELESCOPE); // 🔭 (`U+1F52D`)"] #[doc="# assert_eq!(TELESCOPE.to_string().as_str(), \"🔭\");"]
#[doc="```"]
pub static TELESCOPE :  Emoji = Emoji::new("telescope", "🔭"); // telescope
#[doc="test tube 🧪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEST_TUBE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEST_TUBE); // 🧪 (`U+1F9EA`)"] #[doc="# assert_eq!(TEST_TUBE.to_string().as_str(), \"🧪\");"]
#[doc="```"]
pub static TEST_TUBE :  Emoji = Emoji::new("test tube", "🧪"); // test tube
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ALEMBIC, ],
&[&DNA, ],
&[&MICROSCOPE, ],
&[&PETRI_DISH, ],
&[&SATELLITE_ANTENNA, ],
&[&TELESCOPE, ],
&[&TEST_TUBE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ALEMBIC, &DNA, &MICROSCOPE, &PETRI_DISH, &SATELLITE_ANTENNA, &TELESCOPE, &TEST_TUBE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::science

/// sound 🔔🔕📢
pub mod sound { // objects::sound
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bell 🔔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELL); // 🔔 (`U+1F514`)"] #[doc="# assert_eq!(BELL.to_string().as_str(), \"🔔\");"]
#[doc="```"]
pub static BELL :  Emoji = Emoji::new("bell", "🔔"); // bell
#[doc="bell with slash 🔕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELL_WITH_SLASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELL_WITH_SLASH); // 🔕 (`U+1F515`)"] #[doc="# assert_eq!(BELL_WITH_SLASH.to_string().as_str(), \"🔕\");"]
#[doc="```"]
pub static BELL_WITH_SLASH :  Emoji = Emoji::new("bell with slash", "🔕"); // bell with slash
#[doc="loudspeaker 📢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOUDSPEAKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOUDSPEAKER); // 📢 (`U+1F4E2`)"] #[doc="# assert_eq!(LOUDSPEAKER.to_string().as_str(), \"📢\");"]
#[doc="```"]
pub static LOUDSPEAKER :  Emoji = Emoji::new("loudspeaker", "📢"); // loudspeaker
#[doc="megaphone 📣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEGAPHONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEGAPHONE); // 📣 (`U+1F4E3`)"] #[doc="# assert_eq!(MEGAPHONE.to_string().as_str(), \"📣\");"]
#[doc="```"]
pub static MEGAPHONE :  Emoji = Emoji::new("megaphone", "📣"); // megaphone
#[doc="muted speaker 🔇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MUTED_SPEAKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MUTED_SPEAKER); // 🔇 (`U+1F507`)"] #[doc="# assert_eq!(MUTED_SPEAKER.to_string().as_str(), \"🔇\");"]
#[doc="```"]
pub static MUTED_SPEAKER :  Emoji = Emoji::new("muted speaker", "🔇"); // muted speaker
#[doc="postal horn 📯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POSTAL_HORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POSTAL_HORN); // 📯 (`U+1F4EF`)"] #[doc="# assert_eq!(POSTAL_HORN.to_string().as_str(), \"📯\");"]
#[doc="```"]
pub static POSTAL_HORN :  Emoji = Emoji::new("postal horn", "📯"); // postal horn
#[doc="speaker high volume 🔊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKER_HIGH_VOLUME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKER_HIGH_VOLUME); // 🔊 (`U+1F50A`)"] #[doc="# assert_eq!(SPEAKER_HIGH_VOLUME.to_string().as_str(), \"🔊\");"]
#[doc="```"]
pub static SPEAKER_HIGH_VOLUME :  Emoji = Emoji::new("speaker high volume", "🔊"); // speaker high volume
#[doc="speaker low volume 🔈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKER_LOW_VOLUME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKER_LOW_VOLUME); // 🔈 (`U+1F508`)"] #[doc="# assert_eq!(SPEAKER_LOW_VOLUME.to_string().as_str(), \"🔈\");"]
#[doc="```"]
pub static SPEAKER_LOW_VOLUME :  Emoji = Emoji::new("speaker low volume", "🔈"); // speaker low volume
#[doc="speaker medium volume 🔉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKER_MEDIUM_VOLUME;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKER_MEDIUM_VOLUME); // 🔉 (`U+1F509`)"] #[doc="# assert_eq!(SPEAKER_MEDIUM_VOLUME.to_string().as_str(), \"🔉\");"]
#[doc="```"]
pub static SPEAKER_MEDIUM_VOLUME :  Emoji = Emoji::new("speaker medium volume", "🔉"); // speaker medium volume
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BELL, ],
&[&BELL_WITH_SLASH, ],
&[&LOUDSPEAKER, ],
&[&MEGAPHONE, ],
&[&MUTED_SPEAKER, ],
&[&POSTAL_HORN, ],
&[&SPEAKER_HIGH_VOLUME, ],
&[&SPEAKER_LOW_VOLUME, ],
&[&SPEAKER_MEDIUM_VOLUME, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BELL, &BELL_WITH_SLASH, &LOUDSPEAKER, &MEGAPHONE, &MUTED_SPEAKER, &POSTAL_HORN, &SPEAKER_HIGH_VOLUME, &SPEAKER_LOW_VOLUME, &SPEAKER_MEDIUM_VOLUME, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::sound

/// tool 🪓⚖️🪃
pub mod tool { // objects::tool
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="axe 🪓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AXE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AXE); // 🪓 (`U+1FA93`)"] #[doc="# assert_eq!(AXE.to_string().as_str(), \"🪓\");"]
#[doc="```"]
pub static AXE :  Emoji = Emoji::new("axe", "🪓"); // axe
#[doc="balance scale ⚖️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BALANCE_SCALE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BALANCE_SCALE); // ⚖️ (`U+2696 U+FE0F`)"] #[doc="# assert_eq!(BALANCE_SCALE.to_string().as_str(), \"⚖️\");"]
#[doc="```"]
pub static BALANCE_SCALE :  Emoji = Emoji::new("balance scale", "⚖️"); // balance scale
#[doc="boomerang 🪃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOOMERANG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOOMERANG); // 🪃 (`U+1FA83`)"] #[doc="# assert_eq!(BOOMERANG.to_string().as_str(), \"🪃\");"]
#[doc="```"]
pub static BOOMERANG :  Emoji = Emoji::new("boomerang", "🪃"); // boomerang
#[doc="bow and arrow 🏹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOW_AND_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOW_AND_ARROW); // 🏹 (`U+1F3F9`)"] #[doc="# assert_eq!(BOW_AND_ARROW.to_string().as_str(), \"🏹\");"]
#[doc="```"]
pub static BOW_AND_ARROW :  Emoji = Emoji::new("bow and arrow", "🏹"); // bow and arrow
#[doc="carpentry saw 🪚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CARPENTRY_SAW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CARPENTRY_SAW); // 🪚 (`U+1FA9A`)"] #[doc="# assert_eq!(CARPENTRY_SAW.to_string().as_str(), \"🪚\");"]
#[doc="```"]
pub static CARPENTRY_SAW :  Emoji = Emoji::new("carpentry saw", "🪚"); // carpentry saw
#[doc="chains ⛓️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHAINS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHAINS); // ⛓️ (`U+26D3 U+FE0F`)"] #[doc="# assert_eq!(CHAINS.to_string().as_str(), \"⛓️\");"]
#[doc="```"]
pub static CHAINS :  Emoji = Emoji::new("chains", "⛓️"); // chains
#[doc="clamp 🗜️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLAMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLAMP); // 🗜️ (`U+1F5DC U+FE0F`)"] #[doc="# assert_eq!(CLAMP.to_string().as_str(), \"🗜️\");"]
#[doc="```"]
pub static CLAMP :  Emoji = Emoji::new("clamp", "🗜️"); // clamp
#[doc="crossed swords ⚔️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSSED_SWORDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSSED_SWORDS); // ⚔️ (`U+2694 U+FE0F`)"] #[doc="# assert_eq!(CROSSED_SWORDS.to_string().as_str(), \"⚔️\");"]
#[doc="```"]
pub static CROSSED_SWORDS :  Emoji = Emoji::new("crossed swords", "⚔️"); // crossed swords
#[doc="dagger 🗡️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DAGGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DAGGER); // 🗡️ (`U+1F5E1 U+FE0F`)"] #[doc="# assert_eq!(DAGGER.to_string().as_str(), \"🗡️\");"]
#[doc="```"]
pub static DAGGER :  Emoji = Emoji::new("dagger", "🗡️"); // dagger
#[doc="gear ⚙️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GEAR); // ⚙️ (`U+2699 U+FE0F`)"] #[doc="# assert_eq!(GEAR.to_string().as_str(), \"⚙️\");"]
#[doc="```"]
pub static GEAR :  Emoji = Emoji::new("gear", "⚙️"); // gear
#[doc="hammer 🔨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMMER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMMER); // 🔨 (`U+1F528`)"] #[doc="# assert_eq!(HAMMER.to_string().as_str(), \"🔨\");"]
#[doc="```"]
pub static HAMMER :  Emoji = Emoji::new("hammer", "🔨"); // hammer
#[doc="hammer and pick ⚒️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMMER_AND_PICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMMER_AND_PICK); // ⚒️ (`U+2692 U+FE0F`)"] #[doc="# assert_eq!(HAMMER_AND_PICK.to_string().as_str(), \"⚒️\");"]
#[doc="```"]
pub static HAMMER_AND_PICK :  Emoji = Emoji::new("hammer and pick", "⚒️"); // hammer and pick
#[doc="hammer and wrench 🛠️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAMMER_AND_WRENCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAMMER_AND_WRENCH); // 🛠️ (`U+1F6E0 U+FE0F`)"] #[doc="# assert_eq!(HAMMER_AND_WRENCH.to_string().as_str(), \"🛠️\");"]
#[doc="```"]
pub static HAMMER_AND_WRENCH :  Emoji = Emoji::new("hammer and wrench", "🛠️"); // hammer and wrench
#[doc="hook 🪝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOOK); // 🪝 (`U+1FA9D`)"] #[doc="# assert_eq!(HOOK.to_string().as_str(), \"🪝\");"]
#[doc="```"]
pub static HOOK :  Emoji = Emoji::new("hook", "🪝"); // hook
#[doc="ladder 🪜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LADDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LADDER); // 🪜 (`U+1FA9C`)"] #[doc="# assert_eq!(LADDER.to_string().as_str(), \"🪜\");"]
#[doc="```"]
pub static LADDER :  Emoji = Emoji::new("ladder", "🪜"); // ladder
#[doc="link 🔗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LINK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LINK); // 🔗 (`U+1F517`)"] #[doc="# assert_eq!(LINK.to_string().as_str(), \"🔗\");"]
#[doc="```"]
pub static LINK :  Emoji = Emoji::new("link", "🔗"); // link
#[doc="magnet 🧲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGNET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGNET); // 🧲 (`U+1F9F2`)"] #[doc="# assert_eq!(MAGNET.to_string().as_str(), \"🧲\");"]
#[doc="```"]
pub static MAGNET :  Emoji = Emoji::new("magnet", "🧲"); // magnet
#[doc="nut and bolt 🔩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NUT_AND_BOLT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NUT_AND_BOLT); // 🔩 (`U+1F529`)"] #[doc="# assert_eq!(NUT_AND_BOLT.to_string().as_str(), \"🔩\");"]
#[doc="```"]
pub static NUT_AND_BOLT :  Emoji = Emoji::new("nut and bolt", "🔩"); // nut and bolt
#[doc="pick ⛏️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PICK); // ⛏️ (`U+26CF U+FE0F`)"] #[doc="# assert_eq!(PICK.to_string().as_str(), \"⛏️\");"]
#[doc="```"]
pub static PICK :  Emoji = Emoji::new("pick", "⛏️"); // pick
#[doc="screwdriver 🪛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCREWDRIVER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCREWDRIVER); // 🪛 (`U+1FA9B`)"] #[doc="# assert_eq!(SCREWDRIVER.to_string().as_str(), \"🪛\");"]
#[doc="```"]
pub static SCREWDRIVER :  Emoji = Emoji::new("screwdriver", "🪛"); // screwdriver
#[doc="shield 🛡️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHIELD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHIELD); // 🛡️ (`U+1F6E1 U+FE0F`)"] #[doc="# assert_eq!(SHIELD.to_string().as_str(), \"🛡️\");"]
#[doc="```"]
pub static SHIELD :  Emoji = Emoji::new("shield", "🛡️"); // shield
#[doc="toolbox 🧰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOOLBOX;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOOLBOX); // 🧰 (`U+1F9F0`)"] #[doc="# assert_eq!(TOOLBOX.to_string().as_str(), \"🧰\");"]
#[doc="```"]
pub static TOOLBOX :  Emoji = Emoji::new("toolbox", "🧰"); // toolbox
#[doc="water pistol 🔫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_PISTOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_PISTOL); // 🔫 (`U+1F52B`)"] #[doc="# assert_eq!(WATER_PISTOL.to_string().as_str(), \"🔫\");"]
#[doc="```"]
pub static WATER_PISTOL :  Emoji = Emoji::new("water pistol", "🔫"); // water pistol
#[doc="white cane 🦯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_CANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_CANE); // 🦯 (`U+1F9AF`)"] #[doc="# assert_eq!(WHITE_CANE.to_string().as_str(), \"🦯\");"]
#[doc="```"]
pub static WHITE_CANE :  Emoji = Emoji::new("white cane", "🦯"); // white cane
#[doc="wrench 🔧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WRENCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WRENCH); // 🔧 (`U+1F527`)"] #[doc="# assert_eq!(WRENCH.to_string().as_str(), \"🔧\");"]
#[doc="```"]
pub static WRENCH :  Emoji = Emoji::new("wrench", "🔧"); // wrench
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AXE, ],
&[&BALANCE_SCALE, ],
&[&BOOMERANG, ],
&[&BOW_AND_ARROW, ],
&[&CARPENTRY_SAW, ],
&[&CHAINS, ],
&[&CLAMP, ],
&[&CROSSED_SWORDS, ],
&[&DAGGER, ],
&[&GEAR, ],
&[&HAMMER, ],
&[&HAMMER_AND_PICK, ],
&[&HAMMER_AND_WRENCH, ],
&[&HOOK, ],
&[&LADDER, ],
&[&LINK, ],
&[&MAGNET, ],
&[&NUT_AND_BOLT, ],
&[&PICK, ],
&[&SCREWDRIVER, ],
&[&SHIELD, ],
&[&TOOLBOX, ],
&[&WATER_PISTOL, ],
&[&WHITE_CANE, ],
&[&WRENCH, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AXE, &BALANCE_SCALE, &BOOMERANG, &BOW_AND_ARROW, &CARPENTRY_SAW, &CHAINS, &CLAMP, &CROSSED_SWORDS, &DAGGER, &GEAR, &HAMMER, &HAMMER_AND_PICK, &HAMMER_AND_WRENCH, &HOOK, &LADDER, &LINK, &MAGNET, &NUT_AND_BOLT, &PICK, &SCREWDRIVER, &SHIELD, &TOOLBOX, &WATER_PISTOL, &WHITE_CANE, &WRENCH, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::tool

/// writing ✒️🖍️🖋️
pub mod writing { // objects::writing
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="black nib ✒️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_NIB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_NIB); // ✒️ (`U+2712 U+FE0F`)"] #[doc="# assert_eq!(BLACK_NIB.to_string().as_str(), \"✒️\");"]
#[doc="```"]
pub static BLACK_NIB :  Emoji = Emoji::new("black nib", "✒️"); // black nib
#[doc="crayon 🖍️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRAYON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRAYON); // 🖍️ (`U+1F58D U+FE0F`)"] #[doc="# assert_eq!(CRAYON.to_string().as_str(), \"🖍️\");"]
#[doc="```"]
pub static CRAYON :  Emoji = Emoji::new("crayon", "🖍️"); // crayon
#[doc="fountain pen 🖋️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUNTAIN_PEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUNTAIN_PEN); // 🖋️ (`U+1F58B U+FE0F`)"] #[doc="# assert_eq!(FOUNTAIN_PEN.to_string().as_str(), \"🖋️\");"]
#[doc="```"]
pub static FOUNTAIN_PEN :  Emoji = Emoji::new("fountain pen", "🖋️"); // fountain pen
#[doc="memo 📝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEMO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEMO); // 📝 (`U+1F4DD`)"] #[doc="# assert_eq!(MEMO.to_string().as_str(), \"📝\");"]
#[doc="```"]
pub static MEMO :  Emoji = Emoji::new("memo", "📝"); // memo
#[doc="paintbrush 🖌️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAINTBRUSH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAINTBRUSH); // 🖌️ (`U+1F58C U+FE0F`)"] #[doc="# assert_eq!(PAINTBRUSH.to_string().as_str(), \"🖌️\");"]
#[doc="```"]
pub static PAINTBRUSH :  Emoji = Emoji::new("paintbrush", "🖌️"); // paintbrush
#[doc="pen 🖊️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEN); // 🖊️ (`U+1F58A U+FE0F`)"] #[doc="# assert_eq!(PEN.to_string().as_str(), \"🖊️\");"]
#[doc="```"]
pub static PEN :  Emoji = Emoji::new("pen", "🖊️"); // pen
#[doc="pencil ✏️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PENCIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PENCIL); // ✏️ (`U+270F U+FE0F`)"] #[doc="# assert_eq!(PENCIL.to_string().as_str(), \"✏️\");"]
#[doc="```"]
pub static PENCIL :  Emoji = Emoji::new("pencil", "✏️"); // pencil
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BLACK_NIB, ],
&[&CRAYON, ],
&[&FOUNTAIN_PEN, ],
&[&MEMO, ],
&[&PAINTBRUSH, ],
&[&PEN, ],
&[&PENCIL, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BLACK_NIB, &CRAYON, &FOUNTAIN_PEN, &MEMO, &PAINTBRUSH, &PEN, &PENCIL, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // objects::writing
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(book_paper::all_variants())
		.chain(clothing::all_variants())
		.chain(computer::all_variants())
		.chain(household::all_variants())
		.chain(light_and_video::all_variants())
		.chain(lock::all_variants())
		.chain(mail::all_variants())
		.chain(medical::all_variants())
		.chain(money::all_variants())
		.chain(music::all_variants())
		.chain(musical_instrument::all_variants())
		.chain(office::all_variants())
		.chain(other_object::all_variants())
		.chain(phone::all_variants())
		.chain(science::all_variants())
		.chain(sound::all_variants())
		.chain(tool::all_variants())
		.chain(writing::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(book_paper::base_emojis())
		.chain(clothing::base_emojis())
		.chain(computer::base_emojis())
		.chain(household::base_emojis())
		.chain(light_and_video::base_emojis())
		.chain(lock::base_emojis())
		.chain(mail::base_emojis())
		.chain(medical::base_emojis())
		.chain(money::base_emojis())
		.chain(music::base_emojis())
		.chain(musical_instrument::base_emojis())
		.chain(office::base_emojis())
		.chain(other_object::base_emojis())
		.chain(phone::base_emojis())
		.chain(science::base_emojis())
		.chain(sound::base_emojis())
		.chain(tool::base_emojis())
		.chain(writing::base_emojis())
}
} // objects

/// People & Body 🫀💑🤛
pub mod people_and_body {

/// body-parts 🫀🦴🧠
pub mod body_parts { // people_and_body::body_parts
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="anatomical heart 🫀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANATOMICAL_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANATOMICAL_HEART); // 🫀 (`U+1FAC0`)"] #[doc="# assert_eq!(ANATOMICAL_HEART.to_string().as_str(), \"🫀\");"]
#[doc="```"]
pub static ANATOMICAL_HEART :  Emoji = Emoji::new("anatomical heart", "🫀"); // anatomical heart
#[doc="bone 🦴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BONE); // 🦴 (`U+1F9B4`)"] #[doc="# assert_eq!(BONE.to_string().as_str(), \"🦴\");"]
#[doc="```"]
pub static BONE :  Emoji = Emoji::new("bone", "🦴"); // bone
#[doc="brain 🧠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRAIN); // 🧠 (`U+1F9E0`)"] #[doc="# assert_eq!(BRAIN.to_string().as_str(), \"🧠\");"]
#[doc="```"]
pub static BRAIN :  Emoji = Emoji::new("brain", "🧠"); // brain
#[doc="ear 👂"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAR); // 👂 (`U+1F442`)"] #[doc="# assert_eq!(EAR.to_string().as_str(), \"👂\");"]#[doc="println!(\"{}\", EAR.tone(Tone::Light)); // 👂🏻 (`U+1F442 U+1F3FB`)"] #[doc="# assert_eq!(EAR.tone(Tone::Light).to_string().as_str(), \"👂🏻\");"]#[doc="println!(\"{}\", EAR.tone(Tone::MediumLight)); // 👂🏼 (`U+1F442 U+1F3FC`)"] #[doc="# assert_eq!(EAR.tone(Tone::MediumLight).to_string().as_str(), \"👂🏼\");"]#[doc="println!(\"{}\", EAR.tone(Tone::Medium)); // 👂🏽 (`U+1F442 U+1F3FD`)"] #[doc="# assert_eq!(EAR.tone(Tone::Medium).to_string().as_str(), \"👂🏽\");"]#[doc="println!(\"{}\", EAR.tone(Tone::MediumDark)); // 👂🏾 (`U+1F442 U+1F3FE`)"] #[doc="# assert_eq!(EAR.tone(Tone::MediumDark).to_string().as_str(), \"👂🏾\");"]#[doc="println!(\"{}\", EAR.tone(Tone::Dark)); // 👂🏿 (`U+1F442 U+1F3FF`)"] #[doc="# assert_eq!(EAR.tone(Tone::Dark).to_string().as_str(), \"👂🏿\");"]
#[doc="```"]
pub static EAR: With<Tone,Emoji> = With::new(Emoji::new("ear","👂"), 
	&[
		Emoji::new("ear: light skin tone","👂🏻"),
	Emoji::new("ear: medium-light skin tone","👂🏼"),
	Emoji::new("ear: medium skin tone","👂🏽"),
	Emoji::new("ear: medium-dark skin tone","👂🏾"),
	Emoji::new("ear: dark skin tone","👂🏿"),
	]);

#[doc="ear with hearing aid 🦻"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EAR_WITH_HEARING_AID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EAR_WITH_HEARING_AID); // 🦻 (`U+1F9BB`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.to_string().as_str(), \"🦻\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::Light)); // 🦻🏻 (`U+1F9BB U+1F3FB`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::Light).to_string().as_str(), \"🦻🏻\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::MediumLight)); // 🦻🏼 (`U+1F9BB U+1F3FC`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::MediumLight).to_string().as_str(), \"🦻🏼\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::Medium)); // 🦻🏽 (`U+1F9BB U+1F3FD`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::Medium).to_string().as_str(), \"🦻🏽\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::MediumDark)); // 🦻🏾 (`U+1F9BB U+1F3FE`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::MediumDark).to_string().as_str(), \"🦻🏾\");"]#[doc="println!(\"{}\", EAR_WITH_HEARING_AID.tone(Tone::Dark)); // 🦻🏿 (`U+1F9BB U+1F3FF`)"] #[doc="# assert_eq!(EAR_WITH_HEARING_AID.tone(Tone::Dark).to_string().as_str(), \"🦻🏿\");"]
#[doc="```"]
pub static EAR_WITH_HEARING_AID: With<Tone,Emoji> = With::new(Emoji::new("ear with hearing aid","🦻"), 
	&[
		Emoji::new("ear with hearing aid: light skin tone","🦻🏻"),
	Emoji::new("ear with hearing aid: medium-light skin tone","🦻🏼"),
	Emoji::new("ear with hearing aid: medium skin tone","🦻🏽"),
	Emoji::new("ear with hearing aid: medium-dark skin tone","🦻🏾"),
	Emoji::new("ear with hearing aid: dark skin tone","🦻🏿"),
	]);

#[doc="eye 👁️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EYE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EYE); // 👁️ (`U+1F441 U+FE0F`)"] #[doc="# assert_eq!(EYE.to_string().as_str(), \"👁️\");"]
#[doc="```"]
pub static EYE :  Emoji = Emoji::new("eye", "👁️"); // eye
#[doc="eyes 👀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EYES); // 👀 (`U+1F440`)"] #[doc="# assert_eq!(EYES.to_string().as_str(), \"👀\");"]
#[doc="```"]
pub static EYES :  Emoji = Emoji::new("eyes", "👀"); // eyes
#[doc="flexed biceps 💪"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLEXED_BICEPS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLEXED_BICEPS); // 💪 (`U+1F4AA`)"] #[doc="# assert_eq!(FLEXED_BICEPS.to_string().as_str(), \"💪\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::Light)); // 💪🏻 (`U+1F4AA U+1F3FB`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::Light).to_string().as_str(), \"💪🏻\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::MediumLight)); // 💪🏼 (`U+1F4AA U+1F3FC`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::MediumLight).to_string().as_str(), \"💪🏼\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::Medium)); // 💪🏽 (`U+1F4AA U+1F3FD`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::Medium).to_string().as_str(), \"💪🏽\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::MediumDark)); // 💪🏾 (`U+1F4AA U+1F3FE`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::MediumDark).to_string().as_str(), \"💪🏾\");"]#[doc="println!(\"{}\", FLEXED_BICEPS.tone(Tone::Dark)); // 💪🏿 (`U+1F4AA U+1F3FF`)"] #[doc="# assert_eq!(FLEXED_BICEPS.tone(Tone::Dark).to_string().as_str(), \"💪🏿\");"]
#[doc="```"]
pub static FLEXED_BICEPS: With<Tone,Emoji> = With::new(Emoji::new("flexed biceps","💪"), 
	&[
		Emoji::new("flexed biceps: light skin tone","💪🏻"),
	Emoji::new("flexed biceps: medium-light skin tone","💪🏼"),
	Emoji::new("flexed biceps: medium skin tone","💪🏽"),
	Emoji::new("flexed biceps: medium-dark skin tone","💪🏾"),
	Emoji::new("flexed biceps: dark skin tone","💪🏿"),
	]);

#[doc="foot 🦶"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOOT); // 🦶 (`U+1F9B6`)"] #[doc="# assert_eq!(FOOT.to_string().as_str(), \"🦶\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::Light)); // 🦶🏻 (`U+1F9B6 U+1F3FB`)"] #[doc="# assert_eq!(FOOT.tone(Tone::Light).to_string().as_str(), \"🦶🏻\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::MediumLight)); // 🦶🏼 (`U+1F9B6 U+1F3FC`)"] #[doc="# assert_eq!(FOOT.tone(Tone::MediumLight).to_string().as_str(), \"🦶🏼\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::Medium)); // 🦶🏽 (`U+1F9B6 U+1F3FD`)"] #[doc="# assert_eq!(FOOT.tone(Tone::Medium).to_string().as_str(), \"🦶🏽\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::MediumDark)); // 🦶🏾 (`U+1F9B6 U+1F3FE`)"] #[doc="# assert_eq!(FOOT.tone(Tone::MediumDark).to_string().as_str(), \"🦶🏾\");"]#[doc="println!(\"{}\", FOOT.tone(Tone::Dark)); // 🦶🏿 (`U+1F9B6 U+1F3FF`)"] #[doc="# assert_eq!(FOOT.tone(Tone::Dark).to_string().as_str(), \"🦶🏿\");"]
#[doc="```"]
pub static FOOT: With<Tone,Emoji> = With::new(Emoji::new("foot","🦶"), 
	&[
		Emoji::new("foot: light skin tone","🦶🏻"),
	Emoji::new("foot: medium-light skin tone","🦶🏼"),
	Emoji::new("foot: medium skin tone","🦶🏽"),
	Emoji::new("foot: medium-dark skin tone","🦶🏾"),
	Emoji::new("foot: dark skin tone","🦶🏿"),
	]);

#[doc="leg 🦵"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEG); // 🦵 (`U+1F9B5`)"] #[doc="# assert_eq!(LEG.to_string().as_str(), \"🦵\");"]#[doc="println!(\"{}\", LEG.tone(Tone::Light)); // 🦵🏻 (`U+1F9B5 U+1F3FB`)"] #[doc="# assert_eq!(LEG.tone(Tone::Light).to_string().as_str(), \"🦵🏻\");"]#[doc="println!(\"{}\", LEG.tone(Tone::MediumLight)); // 🦵🏼 (`U+1F9B5 U+1F3FC`)"] #[doc="# assert_eq!(LEG.tone(Tone::MediumLight).to_string().as_str(), \"🦵🏼\");"]#[doc="println!(\"{}\", LEG.tone(Tone::Medium)); // 🦵🏽 (`U+1F9B5 U+1F3FD`)"] #[doc="# assert_eq!(LEG.tone(Tone::Medium).to_string().as_str(), \"🦵🏽\");"]#[doc="println!(\"{}\", LEG.tone(Tone::MediumDark)); // 🦵🏾 (`U+1F9B5 U+1F3FE`)"] #[doc="# assert_eq!(LEG.tone(Tone::MediumDark).to_string().as_str(), \"🦵🏾\");"]#[doc="println!(\"{}\", LEG.tone(Tone::Dark)); // 🦵🏿 (`U+1F9B5 U+1F3FF`)"] #[doc="# assert_eq!(LEG.tone(Tone::Dark).to_string().as_str(), \"🦵🏿\");"]
#[doc="```"]
pub static LEG: With<Tone,Emoji> = With::new(Emoji::new("leg","🦵"), 
	&[
		Emoji::new("leg: light skin tone","🦵🏻"),
	Emoji::new("leg: medium-light skin tone","🦵🏼"),
	Emoji::new("leg: medium skin tone","🦵🏽"),
	Emoji::new("leg: medium-dark skin tone","🦵🏾"),
	Emoji::new("leg: dark skin tone","🦵🏿"),
	]);

#[doc="lungs 🫁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LUNGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LUNGS); // 🫁 (`U+1FAC1`)"] #[doc="# assert_eq!(LUNGS.to_string().as_str(), \"🫁\");"]
#[doc="```"]
pub static LUNGS :  Emoji = Emoji::new("lungs", "🫁"); // lungs
#[doc="mechanical arm 🦾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MECHANICAL_ARM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MECHANICAL_ARM); // 🦾 (`U+1F9BE`)"] #[doc="# assert_eq!(MECHANICAL_ARM.to_string().as_str(), \"🦾\");"]
#[doc="```"]
pub static MECHANICAL_ARM :  Emoji = Emoji::new("mechanical arm", "🦾"); // mechanical arm
#[doc="mechanical leg 🦿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MECHANICAL_LEG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MECHANICAL_LEG); // 🦿 (`U+1F9BF`)"] #[doc="# assert_eq!(MECHANICAL_LEG.to_string().as_str(), \"🦿\");"]
#[doc="```"]
pub static MECHANICAL_LEG :  Emoji = Emoji::new("mechanical leg", "🦿"); // mechanical leg
#[doc="mouth 👄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUTH); // 👄 (`U+1F444`)"] #[doc="# assert_eq!(MOUTH.to_string().as_str(), \"👄\");"]
#[doc="```"]
pub static MOUTH :  Emoji = Emoji::new("mouth", "👄"); // mouth
#[doc="nose 👃"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NOSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NOSE); // 👃 (`U+1F443`)"] #[doc="# assert_eq!(NOSE.to_string().as_str(), \"👃\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::Light)); // 👃🏻 (`U+1F443 U+1F3FB`)"] #[doc="# assert_eq!(NOSE.tone(Tone::Light).to_string().as_str(), \"👃🏻\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::MediumLight)); // 👃🏼 (`U+1F443 U+1F3FC`)"] #[doc="# assert_eq!(NOSE.tone(Tone::MediumLight).to_string().as_str(), \"👃🏼\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::Medium)); // 👃🏽 (`U+1F443 U+1F3FD`)"] #[doc="# assert_eq!(NOSE.tone(Tone::Medium).to_string().as_str(), \"👃🏽\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::MediumDark)); // 👃🏾 (`U+1F443 U+1F3FE`)"] #[doc="# assert_eq!(NOSE.tone(Tone::MediumDark).to_string().as_str(), \"👃🏾\");"]#[doc="println!(\"{}\", NOSE.tone(Tone::Dark)); // 👃🏿 (`U+1F443 U+1F3FF`)"] #[doc="# assert_eq!(NOSE.tone(Tone::Dark).to_string().as_str(), \"👃🏿\");"]
#[doc="```"]
pub static NOSE: With<Tone,Emoji> = With::new(Emoji::new("nose","👃"), 
	&[
		Emoji::new("nose: light skin tone","👃🏻"),
	Emoji::new("nose: medium-light skin tone","👃🏼"),
	Emoji::new("nose: medium skin tone","👃🏽"),
	Emoji::new("nose: medium-dark skin tone","👃🏾"),
	Emoji::new("nose: dark skin tone","👃🏿"),
	]);

#[doc="tongue 👅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TONGUE); // 👅 (`U+1F445`)"] #[doc="# assert_eq!(TONGUE.to_string().as_str(), \"👅\");"]
#[doc="```"]
pub static TONGUE :  Emoji = Emoji::new("tongue", "👅"); // tongue
#[doc="tooth 🦷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOOTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOOTH); // 🦷 (`U+1F9B7`)"] #[doc="# assert_eq!(TOOTH.to_string().as_str(), \"🦷\");"]
#[doc="```"]
pub static TOOTH :  Emoji = Emoji::new("tooth", "🦷"); // tooth
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANATOMICAL_HEART, ],
&[&BONE, ],
&[&BRAIN, ],
&[&EAR.default, &EAR.tone(Tone::Light), &EAR.tone(Tone::MediumLight), &EAR.tone(Tone::Medium), &EAR.tone(Tone::MediumDark), &EAR.tone(Tone::Dark), ],
&[&EAR_WITH_HEARING_AID.default, &EAR_WITH_HEARING_AID.tone(Tone::Light), &EAR_WITH_HEARING_AID.tone(Tone::MediumLight), &EAR_WITH_HEARING_AID.tone(Tone::Medium), &EAR_WITH_HEARING_AID.tone(Tone::MediumDark), &EAR_WITH_HEARING_AID.tone(Tone::Dark), ],
&[&EYE, ],
&[&EYES, ],
&[&FLEXED_BICEPS.default, &FLEXED_BICEPS.tone(Tone::Light), &FLEXED_BICEPS.tone(Tone::MediumLight), &FLEXED_BICEPS.tone(Tone::Medium), &FLEXED_BICEPS.tone(Tone::MediumDark), &FLEXED_BICEPS.tone(Tone::Dark), ],
&[&FOOT.default, &FOOT.tone(Tone::Light), &FOOT.tone(Tone::MediumLight), &FOOT.tone(Tone::Medium), &FOOT.tone(Tone::MediumDark), &FOOT.tone(Tone::Dark), ],
&[&LEG.default, &LEG.tone(Tone::Light), &LEG.tone(Tone::MediumLight), &LEG.tone(Tone::Medium), &LEG.tone(Tone::MediumDark), &LEG.tone(Tone::Dark), ],
&[&LUNGS, ],
&[&MECHANICAL_ARM, ],
&[&MECHANICAL_LEG, ],
&[&MOUTH, ],
&[&NOSE.default, &NOSE.tone(Tone::Light), &NOSE.tone(Tone::MediumLight), &NOSE.tone(Tone::Medium), &NOSE.tone(Tone::MediumDark), &NOSE.tone(Tone::Dark), ],
&[&TONGUE, ],
&[&TOOTH, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANATOMICAL_HEART, &BONE, &BRAIN, &EAR.default, &EAR_WITH_HEARING_AID.default, &EYE, &EYES, &FLEXED_BICEPS.default, &FOOT.default, &LEG.default, &LUNGS, &MECHANICAL_ARM, &MECHANICAL_LEG, &MOUTH, &NOSE.default, &TONGUE, &TOOTH, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::body_parts

/// family 💑👪💏
pub mod family { // people_and_body::family
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="couple with heart 💑"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COUPLE_WITH_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COUPLE_WITH_HEART); // 💑 (`U+1F491`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.to_string().as_str(), \"💑\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::Light)); // 💑🏻 (`U+1F491 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::Light).to_string().as_str(), \"💑🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumLight))); // 🧑🏻‍❤️‍🧑🏼 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"🧑🏻‍❤️‍🧑🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::Medium))); // 🧑🏻‍❤️‍🧑🏽 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"🧑🏻‍❤️‍🧑🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumDark))); // 🧑🏻‍❤️‍🧑🏾 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"🧑🏻‍❤️‍🧑🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Light, Tone::Dark))); // 🧑🏻‍❤️‍🧑🏿 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"🧑🏻‍❤️‍🧑🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Light))); // 🧑🏼‍❤️‍🧑🏻 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"🧑🏼‍❤️‍🧑🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::MediumLight)); // 💑🏼 (`U+1F491 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::MediumLight).to_string().as_str(), \"💑🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Medium))); // 🧑🏼‍❤️‍🧑🏽 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"🧑🏼‍❤️‍🧑🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::MediumDark))); // 🧑🏼‍❤️‍🧑🏾 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"🧑🏼‍❤️‍🧑🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Dark))); // 🧑🏼‍❤️‍🧑🏿 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"🧑🏼‍❤️‍🧑🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Light))); // 🧑🏽‍❤️‍🧑🏻 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"🧑🏽‍❤️‍🧑🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumLight))); // 🧑🏽‍❤️‍🧑🏼 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"🧑🏽‍❤️‍🧑🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::Medium)); // 💑🏽 (`U+1F491 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::Medium).to_string().as_str(), \"💑🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumDark))); // 🧑🏽‍❤️‍🧑🏾 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"🧑🏽‍❤️‍🧑🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Dark))); // 🧑🏽‍❤️‍🧑🏿 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"🧑🏽‍❤️‍🧑🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Light))); // 🧑🏾‍❤️‍🧑🏻 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"🧑🏾‍❤️‍🧑🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::MediumLight))); // 🧑🏾‍❤️‍🧑🏼 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"🧑🏾‍❤️‍🧑🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Medium))); // 🧑🏾‍❤️‍🧑🏽 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"🧑🏾‍❤️‍🧑🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::MediumDark)); // 💑🏾 (`U+1F491 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::MediumDark).to_string().as_str(), \"💑🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Dark))); // 🧑🏾‍❤️‍🧑🏿 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"🧑🏾‍❤️‍🧑🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Light))); // 🧑🏿‍❤️‍🧑🏻 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"🧑🏿‍❤️‍🧑🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumLight))); // 🧑🏿‍❤️‍🧑🏼 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"🧑🏿‍❤️‍🧑🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Medium))); // 🧑🏿‍❤️‍🧑🏽 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"🧑🏿‍❤️‍🧑🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumDark))); // 🧑🏿‍❤️‍🧑🏾 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"🧑🏿‍❤️‍🧑🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.tone(Tone::Dark)); // 💑🏿 (`U+1F491 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.tone(Tone::Dark).to_string().as_str(), \"💑🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males)); // 👨‍❤️‍👨 (`U+1F468 U+200D U+2764 U+FE0F U+200D U+1F468`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).to_string().as_str(), \"👨‍❤️‍👨\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Light)); // 👨🏻‍❤️‍👨🏻 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Light).to_string().as_str(), \"👨🏻‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight))); // 👨🏻‍❤️‍👨🏼 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👨🏻‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Medium))); // 👨🏻‍❤️‍👨🏽 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👨🏻‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark))); // 👨🏻‍❤️‍👨🏾 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👨🏻‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Dark))); // 👨🏻‍❤️‍👨🏿 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👨🏻‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light))); // 👨🏼‍❤️‍👨🏻 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👨🏼‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumLight)); // 👨🏼‍❤️‍👨🏼 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium))); // 👨🏼‍❤️‍👨🏽 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👨🏼‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark))); // 👨🏼‍❤️‍👨🏾 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👨🏼‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark))); // 👨🏼‍❤️‍👨🏿 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👨🏼‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Light))); // 👨🏽‍❤️‍👨🏻 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👨🏽‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight))); // 👨🏽‍❤️‍👨🏼 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👨🏽‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Medium)); // 👨🏽‍❤️‍👨🏽 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark))); // 👨🏽‍❤️‍👨🏾 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👨🏽‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Dark))); // 👨🏽‍❤️‍👨🏿 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👨🏽‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light))); // 👨🏾‍❤️‍👨🏻 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👨🏾‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight))); // 👨🏾‍❤️‍👨🏼 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👨🏾‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium))); // 👨🏾‍❤️‍👨🏽 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👨🏾‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumDark)); // 👨🏾‍❤️‍👨🏾 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark))); // 👨🏾‍❤️‍👨🏿 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👨🏾‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Light))); // 👨🏿‍❤️‍👨🏻 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👨🏿‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight))); // 👨🏿‍❤️‍👨🏼 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👨🏿‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Medium))); // 👨🏿‍❤️‍👨🏽 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👨🏿‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark))); // 👨🏿‍❤️‍👨🏾 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👨🏿‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Dark)); // 👨🏿‍❤️‍👨🏿 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Males).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed)); // 👩‍❤️‍👨 (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F468`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).to_string().as_str(), \"👩‍❤️‍👨\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Light)); // 👩🏻‍❤️‍👨🏻 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Light).to_string().as_str(), \"👩🏻‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight))); // 👩🏻‍❤️‍👨🏼 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👩🏻‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium))); // 👩🏻‍❤️‍👨🏽 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👩🏻‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark))); // 👩🏻‍❤️‍👨🏾 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👩🏻‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark))); // 👩🏻‍❤️‍👨🏿 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👩🏻‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light))); // 👩🏼‍❤️‍👨🏻 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👩🏼‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumLight)); // 👩🏼‍❤️‍👨🏼 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium))); // 👩🏼‍❤️‍👨🏽 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👩🏼‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark))); // 👩🏼‍❤️‍👨🏾 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👩🏼‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark))); // 👩🏼‍❤️‍👨🏿 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👩🏼‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light))); // 👩🏽‍❤️‍👨🏻 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👩🏽‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight))); // 👩🏽‍❤️‍👨🏼 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👩🏽‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Medium)); // 👩🏽‍❤️‍👨🏽 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark))); // 👩🏽‍❤️‍👨🏾 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👩🏽‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark))); // 👩🏽‍❤️‍👨🏿 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👩🏽‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light))); // 👩🏾‍❤️‍👨🏻 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👩🏾‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight))); // 👩🏾‍❤️‍👨🏼 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👩🏾‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium))); // 👩🏾‍❤️‍👨🏽 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👩🏾‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumDark)); // 👩🏾‍❤️‍👨🏾 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark))); // 👩🏾‍❤️‍👨🏿 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👩🏾‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light))); // 👩🏿‍❤️‍👨🏻 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👩🏿‍❤️‍👨🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight))); // 👩🏿‍❤️‍👨🏼 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👩🏿‍❤️‍👨🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium))); // 👩🏿‍❤️‍👨🏽 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👩🏿‍❤️‍👨🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark))); // 👩🏿‍❤️‍👨🏾 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👩🏿‍❤️‍👨🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Dark)); // 👩🏿‍❤️‍👨🏿 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Mixed).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍❤️‍👨🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females)); // 👩‍❤️‍👩 (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F469`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).to_string().as_str(), \"👩‍❤️‍👩\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Light)); // 👩🏻‍❤️‍👩🏻 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Light).to_string().as_str(), \"👩🏻‍❤️‍👩🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight))); // 👩🏻‍❤️‍👩🏼 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👩🏻‍❤️‍👩🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Medium))); // 👩🏻‍❤️‍👩🏽 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👩🏻‍❤️‍👩🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark))); // 👩🏻‍❤️‍👩🏾 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👩🏻‍❤️‍👩🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Dark))); // 👩🏻‍❤️‍👩🏿 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👩🏻‍❤️‍👩🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light))); // 👩🏼‍❤️‍👩🏻 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👩🏼‍❤️‍👩🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumLight)); // 👩🏼‍❤️‍👩🏼 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍❤️‍👩🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium))); // 👩🏼‍❤️‍👩🏽 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👩🏼‍❤️‍👩🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark))); // 👩🏼‍❤️‍👩🏾 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👩🏼‍❤️‍👩🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark))); // 👩🏼‍❤️‍👩🏿 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👩🏼‍❤️‍👩🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Light))); // 👩🏽‍❤️‍👩🏻 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👩🏽‍❤️‍👩🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight))); // 👩🏽‍❤️‍👩🏼 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👩🏽‍❤️‍👩🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Medium)); // 👩🏽‍❤️‍👩🏽 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍❤️‍👩🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark))); // 👩🏽‍❤️‍👩🏾 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👩🏽‍❤️‍👩🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Dark))); // 👩🏽‍❤️‍👩🏿 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👩🏽‍❤️‍👩🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light))); // 👩🏾‍❤️‍👩🏻 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👩🏾‍❤️‍👩🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight))); // 👩🏾‍❤️‍👩🏼 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👩🏾‍❤️‍👩🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium))); // 👩🏾‍❤️‍👩🏽 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👩🏾‍❤️‍👩🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumDark)); // 👩🏾‍❤️‍👩🏾 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍❤️‍👩🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark))); // 👩🏾‍❤️‍👩🏿 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👩🏾‍❤️‍👩🏿\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Light))); // 👩🏿‍❤️‍👩🏻 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👩🏿‍❤️‍👩🏻\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight))); // 👩🏿‍❤️‍👩🏼 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👩🏿‍❤️‍👩🏼\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Medium))); // 👩🏿‍❤️‍👩🏽 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👩🏿‍❤️‍👩🏽\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark))); // 👩🏿‍❤️‍👩🏾 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👩🏿‍❤️‍👩🏾\");"]#[doc="println!(\"{}\", COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Dark)); // 👩🏿‍❤️‍👩🏿 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(COUPLE_WITH_HEART.gender(Pair::Females).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍❤️‍👩🏿\");"]
#[doc="```"]
pub static COUPLE_WITH_HEART: With<Pair,With<TonePair,Emoji>> = With::new(With::new(Emoji::new("couple with heart","💑"), 
	&[
		Emoji::new("couple with heart: light skin tone","💑🏻"),
	Emoji::new("couple with heart: person, person, light skin tone, medium-light skin tone","🧑🏻‍❤️‍🧑🏼"),
	Emoji::new("couple with heart: person, person, light skin tone, medium skin tone","🧑🏻‍❤️‍🧑🏽"),
	Emoji::new("couple with heart: person, person, light skin tone, medium-dark skin tone","🧑🏻‍❤️‍🧑🏾"),
	Emoji::new("couple with heart: person, person, light skin tone, dark skin tone","🧑🏻‍❤️‍🧑🏿"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, light skin tone","🧑🏼‍❤️‍🧑🏻"),
	Emoji::new("couple with heart: medium-light skin tone","💑🏼"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, medium skin tone","🧑🏼‍❤️‍🧑🏽"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, medium-dark skin tone","🧑🏼‍❤️‍🧑🏾"),
	Emoji::new("couple with heart: person, person, medium-light skin tone, dark skin tone","🧑🏼‍❤️‍🧑🏿"),
	Emoji::new("couple with heart: person, person, medium skin tone, light skin tone","🧑🏽‍❤️‍🧑🏻"),
	Emoji::new("couple with heart: person, person, medium skin tone, medium-light skin tone","🧑🏽‍❤️‍🧑🏼"),
	Emoji::new("couple with heart: medium skin tone","💑🏽"),
	Emoji::new("couple with heart: person, person, medium skin tone, medium-dark skin tone","🧑🏽‍❤️‍🧑🏾"),
	Emoji::new("couple with heart: person, person, medium skin tone, dark skin tone","🧑🏽‍❤️‍🧑🏿"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, light skin tone","🧑🏾‍❤️‍🧑🏻"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, medium-light skin tone","🧑🏾‍❤️‍🧑🏼"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, medium skin tone","🧑🏾‍❤️‍🧑🏽"),
	Emoji::new("couple with heart: medium-dark skin tone","💑🏾"),
	Emoji::new("couple with heart: person, person, medium-dark skin tone, dark skin tone","🧑🏾‍❤️‍🧑🏿"),
	Emoji::new("couple with heart: person, person, dark skin tone, light skin tone","🧑🏿‍❤️‍🧑🏻"),
	Emoji::new("couple with heart: person, person, dark skin tone, medium-light skin tone","🧑🏿‍❤️‍🧑🏼"),
	Emoji::new("couple with heart: person, person, dark skin tone, medium skin tone","🧑🏿‍❤️‍🧑🏽"),
	Emoji::new("couple with heart: person, person, dark skin tone, medium-dark skin tone","🧑🏿‍❤️‍🧑🏾"),
	Emoji::new("couple with heart: dark skin tone","💑🏿"),
	]), 
	&[
		With::new(Emoji::new("couple with heart: man, man","👨‍❤️‍👨"), 
	&[
		Emoji::new("couple with heart: man, man, light skin tone","👨🏻‍❤️‍👨🏻"),
	Emoji::new("couple with heart: man, man, light skin tone, medium-light skin tone","👨🏻‍❤️‍👨🏼"),
	Emoji::new("couple with heart: man, man, light skin tone, medium skin tone","👨🏻‍❤️‍👨🏽"),
	Emoji::new("couple with heart: man, man, light skin tone, medium-dark skin tone","👨🏻‍❤️‍👨🏾"),
	Emoji::new("couple with heart: man, man, light skin tone, dark skin tone","👨🏻‍❤️‍👨🏿"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, light skin tone","👨🏼‍❤️‍👨🏻"),
	Emoji::new("couple with heart: man, man, medium-light skin tone","👨🏼‍❤️‍👨🏼"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, medium skin tone","👨🏼‍❤️‍👨🏽"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, medium-dark skin tone","👨🏼‍❤️‍👨🏾"),
	Emoji::new("couple with heart: man, man, medium-light skin tone, dark skin tone","👨🏼‍❤️‍👨🏿"),
	Emoji::new("couple with heart: man, man, medium skin tone, light skin tone","👨🏽‍❤️‍👨🏻"),
	Emoji::new("couple with heart: man, man, medium skin tone, medium-light skin tone","👨🏽‍❤️‍👨🏼"),
	Emoji::new("couple with heart: man, man, medium skin tone","👨🏽‍❤️‍👨🏽"),
	Emoji::new("couple with heart: man, man, medium skin tone, medium-dark skin tone","👨🏽‍❤️‍👨🏾"),
	Emoji::new("couple with heart: man, man, medium skin tone, dark skin tone","👨🏽‍❤️‍👨🏿"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, light skin tone","👨🏾‍❤️‍👨🏻"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, medium-light skin tone","👨🏾‍❤️‍👨🏼"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, medium skin tone","👨🏾‍❤️‍👨🏽"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone","👨🏾‍❤️‍👨🏾"),
	Emoji::new("couple with heart: man, man, medium-dark skin tone, dark skin tone","👨🏾‍❤️‍👨🏿"),
	Emoji::new("couple with heart: man, man, dark skin tone, light skin tone","👨🏿‍❤️‍👨🏻"),
	Emoji::new("couple with heart: man, man, dark skin tone, medium-light skin tone","👨🏿‍❤️‍👨🏼"),
	Emoji::new("couple with heart: man, man, dark skin tone, medium skin tone","👨🏿‍❤️‍👨🏽"),
	Emoji::new("couple with heart: man, man, dark skin tone, medium-dark skin tone","👨🏿‍❤️‍👨🏾"),
	Emoji::new("couple with heart: man, man, dark skin tone","👨🏿‍❤️‍👨🏿"),
	]),
	With::new(Emoji::new("couple with heart: woman, man","👩‍❤️‍👨"), 
	&[
		Emoji::new("couple with heart: woman, man, light skin tone","👩🏻‍❤️‍👨🏻"),
	Emoji::new("couple with heart: woman, man, light skin tone, medium-light skin tone","👩🏻‍❤️‍👨🏼"),
	Emoji::new("couple with heart: woman, man, light skin tone, medium skin tone","👩🏻‍❤️‍👨🏽"),
	Emoji::new("couple with heart: woman, man, light skin tone, medium-dark skin tone","👩🏻‍❤️‍👨🏾"),
	Emoji::new("couple with heart: woman, man, light skin tone, dark skin tone","👩🏻‍❤️‍👨🏿"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, light skin tone","👩🏼‍❤️‍👨🏻"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone","👩🏼‍❤️‍👨🏼"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, medium skin tone","👩🏼‍❤️‍👨🏽"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, medium-dark skin tone","👩🏼‍❤️‍👨🏾"),
	Emoji::new("couple with heart: woman, man, medium-light skin tone, dark skin tone","👩🏼‍❤️‍👨🏿"),
	Emoji::new("couple with heart: woman, man, medium skin tone, light skin tone","👩🏽‍❤️‍👨🏻"),
	Emoji::new("couple with heart: woman, man, medium skin tone, medium-light skin tone","👩🏽‍❤️‍👨🏼"),
	Emoji::new("couple with heart: woman, man, medium skin tone","👩🏽‍❤️‍👨🏽"),
	Emoji::new("couple with heart: woman, man, medium skin tone, medium-dark skin tone","👩🏽‍❤️‍👨🏾"),
	Emoji::new("couple with heart: woman, man, medium skin tone, dark skin tone","👩🏽‍❤️‍👨🏿"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, light skin tone","👩🏾‍❤️‍👨🏻"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, medium-light skin tone","👩🏾‍❤️‍👨🏼"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, medium skin tone","👩🏾‍❤️‍👨🏽"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone","👩🏾‍❤️‍👨🏾"),
	Emoji::new("couple with heart: woman, man, medium-dark skin tone, dark skin tone","👩🏾‍❤️‍👨🏿"),
	Emoji::new("couple with heart: woman, man, dark skin tone, light skin tone","👩🏿‍❤️‍👨🏻"),
	Emoji::new("couple with heart: woman, man, dark skin tone, medium-light skin tone","👩🏿‍❤️‍👨🏼"),
	Emoji::new("couple with heart: woman, man, dark skin tone, medium skin tone","👩🏿‍❤️‍👨🏽"),
	Emoji::new("couple with heart: woman, man, dark skin tone, medium-dark skin tone","👩🏿‍❤️‍👨🏾"),
	Emoji::new("couple with heart: woman, man, dark skin tone","👩🏿‍❤️‍👨🏿"),
	]),
	With::new(Emoji::new("couple with heart: woman, woman","👩‍❤️‍👩"), 
	&[
		Emoji::new("couple with heart: woman, woman, light skin tone","👩🏻‍❤️‍👩🏻"),
	Emoji::new("couple with heart: woman, woman, light skin tone, medium-light skin tone","👩🏻‍❤️‍👩🏼"),
	Emoji::new("couple with heart: woman, woman, light skin tone, medium skin tone","👩🏻‍❤️‍👩🏽"),
	Emoji::new("couple with heart: woman, woman, light skin tone, medium-dark skin tone","👩🏻‍❤️‍👩🏾"),
	Emoji::new("couple with heart: woman, woman, light skin tone, dark skin tone","👩🏻‍❤️‍👩🏿"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, light skin tone","👩🏼‍❤️‍👩🏻"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone","👩🏼‍❤️‍👩🏼"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, medium skin tone","👩🏼‍❤️‍👩🏽"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, medium-dark skin tone","👩🏼‍❤️‍👩🏾"),
	Emoji::new("couple with heart: woman, woman, medium-light skin tone, dark skin tone","👩🏼‍❤️‍👩🏿"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, light skin tone","👩🏽‍❤️‍👩🏻"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, medium-light skin tone","👩🏽‍❤️‍👩🏼"),
	Emoji::new("couple with heart: woman, woman, medium skin tone","👩🏽‍❤️‍👩🏽"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, medium-dark skin tone","👩🏽‍❤️‍👩🏾"),
	Emoji::new("couple with heart: woman, woman, medium skin tone, dark skin tone","👩🏽‍❤️‍👩🏿"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, light skin tone","👩🏾‍❤️‍👩🏻"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, medium-light skin tone","👩🏾‍❤️‍👩🏼"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, medium skin tone","👩🏾‍❤️‍👩🏽"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone","👩🏾‍❤️‍👩🏾"),
	Emoji::new("couple with heart: woman, woman, medium-dark skin tone, dark skin tone","👩🏾‍❤️‍👩🏿"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, light skin tone","👩🏿‍❤️‍👩🏻"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, medium-light skin tone","👩🏿‍❤️‍👩🏼"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, medium skin tone","👩🏿‍❤️‍👩🏽"),
	Emoji::new("couple with heart: woman, woman, dark skin tone, medium-dark skin tone","👩🏿‍❤️‍👩🏾"),
	Emoji::new("couple with heart: woman, woman, dark skin tone","👩🏿‍❤️‍👩🏿"),
	]),
	]);

#[doc="family 👪"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAMILY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAMILY); // 👪 (`U+1F46A`)"] #[doc="# assert_eq!(FAMILY.to_string().as_str(), \"👪\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Gender::Male))); // 👨‍👦 (`U+1F468 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Gender::Male)).to_string().as_str(), \"👨‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Gender::Female))); // 👨‍👧 (`U+1F468 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Gender::Female)).to_string().as_str(), \"👨‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Pair::Males))); // 👨‍👦‍👦 (`U+1F468 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Pair::Males)).to_string().as_str(), \"👨‍👦‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Pair::Mixed))); // 👨‍👧‍👦 (`U+1F468 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Pair::Mixed)).to_string().as_str(), \"👨‍👧‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Male, Pair::Females))); // 👨‍👧‍👧 (`U+1F468 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Male, Pair::Females)).to_string().as_str(), \"👨‍👧‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Gender::Male))); // 👩‍👦 (`U+1F469 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Gender::Male)).to_string().as_str(), \"👩‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Gender::Female))); // 👩‍👧 (`U+1F469 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Gender::Female)).to_string().as_str(), \"👩‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Pair::Males))); // 👩‍👦‍👦 (`U+1F469 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Pair::Males)).to_string().as_str(), \"👩‍👦‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Pair::Mixed))); // 👩‍👧‍👦 (`U+1F469 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Pair::Mixed)).to_string().as_str(), \"👩‍👧‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Gender::Female, Pair::Females))); // 👩‍👧‍👧 (`U+1F469 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Gender::Female, Pair::Females)).to_string().as_str(), \"👩‍👧‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Gender::Male))); // 👨‍👨‍👦 (`U+1F468 U+200D U+1F468 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Gender::Male)).to_string().as_str(), \"👨‍👨‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Gender::Female))); // 👨‍👨‍👧 (`U+1F468 U+200D U+1F468 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Gender::Female)).to_string().as_str(), \"👨‍👨‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Pair::Males))); // 👨‍👨‍👦‍👦 (`U+1F468 U+200D U+1F468 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Pair::Males)).to_string().as_str(), \"👨‍👨‍👦‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Pair::Mixed))); // 👨‍👨‍👧‍👦 (`U+1F468 U+200D U+1F468 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Pair::Mixed)).to_string().as_str(), \"👨‍👨‍👧‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Males, Pair::Females))); // 👨‍👨‍👧‍👧 (`U+1F468 U+200D U+1F468 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Males, Pair::Females)).to_string().as_str(), \"👨‍👨‍👧‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Gender::Male))); // 👨‍👩‍👦 (`U+1F468 U+200D U+1F469 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Gender::Male)).to_string().as_str(), \"👨‍👩‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Gender::Female))); // 👨‍👩‍👧 (`U+1F468 U+200D U+1F469 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Gender::Female)).to_string().as_str(), \"👨‍👩‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Pair::Males))); // 👨‍👩‍👦‍👦 (`U+1F468 U+200D U+1F469 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Pair::Males)).to_string().as_str(), \"👨‍👩‍👦‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Pair::Mixed))); // 👨‍👩‍👧‍👦 (`U+1F468 U+200D U+1F469 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Pair::Mixed)).to_string().as_str(), \"👨‍👩‍👧‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Mixed, Pair::Females))); // 👨‍👩‍👧‍👧 (`U+1F468 U+200D U+1F469 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Mixed, Pair::Females)).to_string().as_str(), \"👨‍👩‍👧‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Gender::Male))); // 👩‍👩‍👦 (`U+1F469 U+200D U+1F469 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Gender::Male)).to_string().as_str(), \"👩‍👩‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Gender::Female))); // 👩‍👩‍👧 (`U+1F469 U+200D U+1F469 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Gender::Female)).to_string().as_str(), \"👩‍👩‍👧\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Pair::Males))); // 👩‍👩‍👦‍👦 (`U+1F469 U+200D U+1F469 U+200D U+1F466 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Pair::Males)).to_string().as_str(), \"👩‍👩‍👦‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Pair::Mixed))); // 👩‍👩‍👧‍👦 (`U+1F469 U+200D U+1F469 U+200D U+1F467 U+200D U+1F466`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Pair::Mixed)).to_string().as_str(), \"👩‍👩‍👧‍👦\");"]#[doc="println!(\"{}\", FAMILY.gender((Pair::Females, Pair::Females))); // 👩‍👩‍👧‍👧 (`U+1F469 U+200D U+1F469 U+200D U+1F467 U+200D U+1F467`)"] #[doc="# assert_eq!(FAMILY.gender((Pair::Females, Pair::Females)).to_string().as_str(), \"👩‍👩‍👧‍👧\");"]
#[doc="```"]
pub static FAMILY: With<Family,Emoji> = With::new(Emoji::new("family","👪"), 
	&[
		Emoji::new("family: man, boy","👨‍👦"),
	Emoji::new("family: man, girl","👨‍👧"),
	Emoji::new("family: man, boy, boy","👨‍👦‍👦"),
	Emoji::new("family: man, girl, boy","👨‍👧‍👦"),
	Emoji::new("family: man, girl, girl","👨‍👧‍👧"),
	Emoji::new("family: woman, boy","👩‍👦"),
	Emoji::new("family: woman, girl","👩‍👧"),
	Emoji::new("family: woman, boy, boy","👩‍👦‍👦"),
	Emoji::new("family: woman, girl, boy","👩‍👧‍👦"),
	Emoji::new("family: woman, girl, girl","👩‍👧‍👧"),
	Emoji::new("family: man, man, boy","👨‍👨‍👦"),
	Emoji::new("family: man, man, girl","👨‍👨‍👧"),
	Emoji::new("family: man, man, boy, boy","👨‍👨‍👦‍👦"),
	Emoji::new("family: man, man, girl, boy","👨‍👨‍👧‍👦"),
	Emoji::new("family: man, man, girl, girl","👨‍👨‍👧‍👧"),
	Emoji::new("family: man, woman, boy","👨‍👩‍👦"),
	Emoji::new("family: man, woman, girl","👨‍👩‍👧"),
	Emoji::new("family: man, woman, boy, boy","👨‍👩‍👦‍👦"),
	Emoji::new("family: man, woman, girl, boy","👨‍👩‍👧‍👦"),
	Emoji::new("family: man, woman, girl, girl","👨‍👩‍👧‍👧"),
	Emoji::new("family: woman, woman, boy","👩‍👩‍👦"),
	Emoji::new("family: woman, woman, girl","👩‍👩‍👧"),
	Emoji::new("family: woman, woman, boy, boy","👩‍👩‍👦‍👦"),
	Emoji::new("family: woman, woman, girl, boy","👩‍👩‍👧‍👦"),
	Emoji::new("family: woman, woman, girl, girl","👩‍👩‍👧‍👧"),
	]);

#[doc="kiss 💏"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISS); // 💏 (`U+1F48F`)"] #[doc="# assert_eq!(KISS.to_string().as_str(), \"💏\");"]#[doc="println!(\"{}\", KISS.tone(Tone::Light)); // 💏🏻 (`U+1F48F U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone(Tone::Light).to_string().as_str(), \"💏🏻\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::MediumLight))); // 🧑🏻‍❤️‍💋‍🧑🏼 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"🧑🏻‍❤️‍💋‍🧑🏼\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::Medium))); // 🧑🏻‍❤️‍💋‍🧑🏽 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"🧑🏻‍❤️‍💋‍🧑🏽\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::MediumDark))); // 🧑🏻‍❤️‍💋‍🧑🏾 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"🧑🏻‍❤️‍💋‍🧑🏾\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Light, Tone::Dark))); // 🧑🏻‍❤️‍💋‍🧑🏿 (`U+1F9D1 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"🧑🏻‍❤️‍💋‍🧑🏿\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::Light))); // 🧑🏼‍❤️‍💋‍🧑🏻 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"🧑🏼‍❤️‍💋‍🧑🏻\");"]#[doc="println!(\"{}\", KISS.tone(Tone::MediumLight)); // 💏🏼 (`U+1F48F U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone(Tone::MediumLight).to_string().as_str(), \"💏🏼\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::Medium))); // 🧑🏼‍❤️‍💋‍🧑🏽 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"🧑🏼‍❤️‍💋‍🧑🏽\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::MediumDark))); // 🧑🏼‍❤️‍💋‍🧑🏾 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"🧑🏼‍❤️‍💋‍🧑🏾\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumLight, Tone::Dark))); // 🧑🏼‍❤️‍💋‍🧑🏿 (`U+1F9D1 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"🧑🏼‍❤️‍💋‍🧑🏿\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::Light))); // 🧑🏽‍❤️‍💋‍🧑🏻 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"🧑🏽‍❤️‍💋‍🧑🏻\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::MediumLight))); // 🧑🏽‍❤️‍💋‍🧑🏼 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"🧑🏽‍❤️‍💋‍🧑🏼\");"]#[doc="println!(\"{}\", KISS.tone(Tone::Medium)); // 💏🏽 (`U+1F48F U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone(Tone::Medium).to_string().as_str(), \"💏🏽\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::MediumDark))); // 🧑🏽‍❤️‍💋‍🧑🏾 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"🧑🏽‍❤️‍💋‍🧑🏾\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Medium, Tone::Dark))); // 🧑🏽‍❤️‍💋‍🧑🏿 (`U+1F9D1 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"🧑🏽‍❤️‍💋‍🧑🏿\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::Light))); // 🧑🏾‍❤️‍💋‍🧑🏻 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"🧑🏾‍❤️‍💋‍🧑🏻\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::MediumLight))); // 🧑🏾‍❤️‍💋‍🧑🏼 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"🧑🏾‍❤️‍💋‍🧑🏼\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::Medium))); // 🧑🏾‍❤️‍💋‍🧑🏽 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"🧑🏾‍❤️‍💋‍🧑🏽\");"]#[doc="println!(\"{}\", KISS.tone(Tone::MediumDark)); // 💏🏾 (`U+1F48F U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone(Tone::MediumDark).to_string().as_str(), \"💏🏾\");"]#[doc="println!(\"{}\", KISS.tone((Tone::MediumDark, Tone::Dark))); // 🧑🏾‍❤️‍💋‍🧑🏿 (`U+1F9D1 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"🧑🏾‍❤️‍💋‍🧑🏿\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::Light))); // 🧑🏿‍❤️‍💋‍🧑🏻 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"🧑🏿‍❤️‍💋‍🧑🏻\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::MediumLight))); // 🧑🏿‍❤️‍💋‍🧑🏼 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"🧑🏿‍❤️‍💋‍🧑🏼\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::Medium))); // 🧑🏿‍❤️‍💋‍🧑🏽 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"🧑🏿‍❤️‍💋‍🧑🏽\");"]#[doc="println!(\"{}\", KISS.tone((Tone::Dark, Tone::MediumDark))); // 🧑🏿‍❤️‍💋‍🧑🏾 (`U+1F9D1 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(KISS.tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"🧑🏿‍❤️‍💋‍🧑🏾\");"]#[doc="println!(\"{}\", KISS.tone(Tone::Dark)); // 💏🏿 (`U+1F48F U+1F3FF`)"] #[doc="# assert_eq!(KISS.tone(Tone::Dark).to_string().as_str(), \"💏🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males)); // 👨‍❤️‍💋‍👨 (`U+1F468 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).to_string().as_str(), \"👨‍❤️‍💋‍👨\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::Light)); // 👨🏻‍❤️‍💋‍👨🏻 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::Light).to_string().as_str(), \"👨🏻‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight))); // 👨🏻‍❤️‍💋‍👨🏼 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👨🏻‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::Medium))); // 👨🏻‍❤️‍💋‍👨🏽 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👨🏻‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark))); // 👨🏻‍❤️‍💋‍👨🏾 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👨🏻‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Light, Tone::Dark))); // 👨🏻‍❤️‍💋‍👨🏿 (`U+1F468 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👨🏻‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light))); // 👨🏼‍❤️‍💋‍👨🏻 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👨🏼‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::MediumLight)); // 👨🏼‍❤️‍💋‍👨🏼 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium))); // 👨🏼‍❤️‍💋‍👨🏽 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👨🏼‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark))); // 👨🏼‍❤️‍💋‍👨🏾 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👨🏼‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark))); // 👨🏼‍❤️‍💋‍👨🏿 (`U+1F468 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👨🏼‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Light))); // 👨🏽‍❤️‍💋‍👨🏻 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👨🏽‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight))); // 👨🏽‍❤️‍💋‍👨🏼 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👨🏽‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::Medium)); // 👨🏽‍❤️‍💋‍👨🏽 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark))); // 👨🏽‍❤️‍💋‍👨🏾 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👨🏽‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark))); // 👨🏽‍❤️‍💋‍👨🏿 (`U+1F468 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👨🏽‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light))); // 👨🏾‍❤️‍💋‍👨🏻 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👨🏾‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight))); // 👨🏾‍❤️‍💋‍👨🏼 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👨🏾‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium))); // 👨🏾‍❤️‍💋‍👨🏽 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👨🏾‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::MediumDark)); // 👨🏾‍❤️‍💋‍👨🏾 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark))); // 👨🏾‍❤️‍💋‍👨🏿 (`U+1F468 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👨🏾‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Light))); // 👨🏿‍❤️‍💋‍👨🏻 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👨🏿‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight))); // 👨🏿‍❤️‍💋‍👨🏼 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👨🏿‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium))); // 👨🏿‍❤️‍💋‍👨🏽 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👨🏿‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark))); // 👨🏿‍❤️‍💋‍👨🏾 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👨🏿‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Males).tone(Tone::Dark)); // 👨🏿‍❤️‍💋‍👨🏿 (`U+1F468 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Males).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed)); // 👩‍❤️‍💋‍👨 (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).to_string().as_str(), \"👩‍❤️‍💋‍👨\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::Light)); // 👩🏻‍❤️‍💋‍👨🏻 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::Light).to_string().as_str(), \"👩🏻‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight))); // 👩🏻‍❤️‍💋‍👨🏼 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium))); // 👩🏻‍❤️‍💋‍👨🏽 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark))); // 👩🏻‍❤️‍💋‍👨🏾 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark))); // 👩🏻‍❤️‍💋‍👨🏿 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light))); // 👩🏼‍❤️‍💋‍👨🏻 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::MediumLight)); // 👩🏼‍❤️‍💋‍👨🏼 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium))); // 👩🏼‍❤️‍💋‍👨🏽 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark))); // 👩🏼‍❤️‍💋‍👨🏾 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark))); // 👩🏼‍❤️‍💋‍👨🏿 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light))); // 👩🏽‍❤️‍💋‍👨🏻 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight))); // 👩🏽‍❤️‍💋‍👨🏼 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::Medium)); // 👩🏽‍❤️‍💋‍👨🏽 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark))); // 👩🏽‍❤️‍💋‍👨🏾 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark))); // 👩🏽‍❤️‍💋‍👨🏿 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light))); // 👩🏾‍❤️‍💋‍👨🏻 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight))); // 👩🏾‍❤️‍💋‍👨🏼 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium))); // 👩🏾‍❤️‍💋‍👨🏽 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::MediumDark)); // 👩🏾‍❤️‍💋‍👨🏾 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark))); // 👩🏾‍❤️‍💋‍👨🏿 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light))); // 👩🏿‍❤️‍💋‍👨🏻 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👨🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight))); // 👩🏿‍❤️‍💋‍👨🏼 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👨🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium))); // 👩🏿‍❤️‍💋‍👨🏽 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👨🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark))); // 👩🏿‍❤️‍💋‍👨🏾 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👨🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Mixed).tone(Tone::Dark)); // 👩🏿‍❤️‍💋‍👨🏿 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Mixed).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍❤️‍💋‍👨🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females)); // 👩‍❤️‍💋‍👩 (`U+1F469 U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).to_string().as_str(), \"👩‍❤️‍💋‍👩\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::Light)); // 👩🏻‍❤️‍💋‍👩🏻 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::Light).to_string().as_str(), \"👩🏻‍❤️‍💋‍👩🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight))); // 👩🏻‍❤️‍💋‍👩🏼 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👩🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::Medium))); // 👩🏻‍❤️‍💋‍👩🏽 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👩🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark))); // 👩🏻‍❤️‍💋‍👩🏾 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👩🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Light, Tone::Dark))); // 👩🏻‍❤️‍💋‍👩🏿 (`U+1F469 U+1F3FB U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👩🏻‍❤️‍💋‍👩🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light))); // 👩🏼‍❤️‍💋‍👩🏻 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👩🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::MediumLight)); // 👩🏼‍❤️‍💋‍👩🏼 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍❤️‍💋‍👩🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium))); // 👩🏼‍❤️‍💋‍👩🏽 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👩🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark))); // 👩🏼‍❤️‍💋‍👩🏾 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👩🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark))); // 👩🏼‍❤️‍💋‍👩🏿 (`U+1F469 U+1F3FC U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👩🏼‍❤️‍💋‍👩🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Light))); // 👩🏽‍❤️‍💋‍👩🏻 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👩🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight))); // 👩🏽‍❤️‍💋‍👩🏼 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👩🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::Medium)); // 👩🏽‍❤️‍💋‍👩🏽 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍❤️‍💋‍👩🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark))); // 👩🏽‍❤️‍💋‍👩🏾 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👩🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark))); // 👩🏽‍❤️‍💋‍👩🏿 (`U+1F469 U+1F3FD U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👩🏽‍❤️‍💋‍👩🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light))); // 👩🏾‍❤️‍💋‍👩🏻 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👩🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight))); // 👩🏾‍❤️‍💋‍👩🏼 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👩🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium))); // 👩🏾‍❤️‍💋‍👩🏽 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👩🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::MediumDark)); // 👩🏾‍❤️‍💋‍👩🏾 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍❤️‍💋‍👩🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark))); // 👩🏾‍❤️‍💋‍👩🏿 (`U+1F469 U+1F3FE U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👩🏾‍❤️‍💋‍👩🏿\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Light))); // 👩🏿‍❤️‍💋‍👩🏻 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👩🏻\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight))); // 👩🏿‍❤️‍💋‍👩🏼 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👩🏼\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium))); // 👩🏿‍❤️‍💋‍👩🏽 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👩🏽\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark))); // 👩🏿‍❤️‍💋‍👩🏾 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👩🏿‍❤️‍💋‍👩🏾\");"]#[doc="println!(\"{}\", KISS.gender(Pair::Females).tone(Tone::Dark)); // 👩🏿‍❤️‍💋‍👩🏿 (`U+1F469 U+1F3FF U+200D U+2764 U+FE0F U+200D U+1F48B U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(KISS.gender(Pair::Females).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍❤️‍💋‍👩🏿\");"]
#[doc="```"]
pub static KISS: With<Pair,With<TonePair,Emoji>> = With::new(With::new(Emoji::new("kiss","💏"), 
	&[
		Emoji::new("kiss: light skin tone","💏🏻"),
	Emoji::new("kiss: person, person, light skin tone, medium-light skin tone","🧑🏻‍❤️‍💋‍🧑🏼"),
	Emoji::new("kiss: person, person, light skin tone, medium skin tone","🧑🏻‍❤️‍💋‍🧑🏽"),
	Emoji::new("kiss: person, person, light skin tone, medium-dark skin tone","🧑🏻‍❤️‍💋‍🧑🏾"),
	Emoji::new("kiss: person, person, light skin tone, dark skin tone","🧑🏻‍❤️‍💋‍🧑🏿"),
	Emoji::new("kiss: person, person, medium-light skin tone, light skin tone","🧑🏼‍❤️‍💋‍🧑🏻"),
	Emoji::new("kiss: medium-light skin tone","💏🏼"),
	Emoji::new("kiss: person, person, medium-light skin tone, medium skin tone","🧑🏼‍❤️‍💋‍🧑🏽"),
	Emoji::new("kiss: person, person, medium-light skin tone, medium-dark skin tone","🧑🏼‍❤️‍💋‍🧑🏾"),
	Emoji::new("kiss: person, person, medium-light skin tone, dark skin tone","🧑🏼‍❤️‍💋‍🧑🏿"),
	Emoji::new("kiss: person, person, medium skin tone, light skin tone","🧑🏽‍❤️‍💋‍🧑🏻"),
	Emoji::new("kiss: person, person, medium skin tone, medium-light skin tone","🧑🏽‍❤️‍💋‍🧑🏼"),
	Emoji::new("kiss: medium skin tone","💏🏽"),
	Emoji::new("kiss: person, person, medium skin tone, medium-dark skin tone","🧑🏽‍❤️‍💋‍🧑🏾"),
	Emoji::new("kiss: person, person, medium skin tone, dark skin tone","🧑🏽‍❤️‍💋‍🧑🏿"),
	Emoji::new("kiss: person, person, medium-dark skin tone, light skin tone","🧑🏾‍❤️‍💋‍🧑🏻"),
	Emoji::new("kiss: person, person, medium-dark skin tone, medium-light skin tone","🧑🏾‍❤️‍💋‍🧑🏼"),
	Emoji::new("kiss: person, person, medium-dark skin tone, medium skin tone","🧑🏾‍❤️‍💋‍🧑🏽"),
	Emoji::new("kiss: medium-dark skin tone","💏🏾"),
	Emoji::new("kiss: person, person, medium-dark skin tone, dark skin tone","🧑🏾‍❤️‍💋‍🧑🏿"),
	Emoji::new("kiss: person, person, dark skin tone, light skin tone","🧑🏿‍❤️‍💋‍🧑🏻"),
	Emoji::new("kiss: person, person, dark skin tone, medium-light skin tone","🧑🏿‍❤️‍💋‍🧑🏼"),
	Emoji::new("kiss: person, person, dark skin tone, medium skin tone","🧑🏿‍❤️‍💋‍🧑🏽"),
	Emoji::new("kiss: person, person, dark skin tone, medium-dark skin tone","🧑🏿‍❤️‍💋‍🧑🏾"),
	Emoji::new("kiss: dark skin tone","💏🏿"),
	]), 
	&[
		With::new(Emoji::new("kiss: man, man","👨‍❤️‍💋‍👨"), 
	&[
		Emoji::new("kiss: man, man, light skin tone","👨🏻‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: man, man, light skin tone, medium-light skin tone","👨🏻‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: man, man, light skin tone, medium skin tone","👨🏻‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: man, man, light skin tone, medium-dark skin tone","👨🏻‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: man, man, light skin tone, dark skin tone","👨🏻‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: man, man, medium-light skin tone, light skin tone","👨🏼‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: man, man, medium-light skin tone","👨🏼‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: man, man, medium-light skin tone, medium skin tone","👨🏼‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: man, man, medium-light skin tone, medium-dark skin tone","👨🏼‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: man, man, medium-light skin tone, dark skin tone","👨🏼‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: man, man, medium skin tone, light skin tone","👨🏽‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: man, man, medium skin tone, medium-light skin tone","👨🏽‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: man, man, medium skin tone","👨🏽‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: man, man, medium skin tone, medium-dark skin tone","👨🏽‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: man, man, medium skin tone, dark skin tone","👨🏽‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: man, man, medium-dark skin tone, light skin tone","👨🏾‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: man, man, medium-dark skin tone, medium-light skin tone","👨🏾‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: man, man, medium-dark skin tone, medium skin tone","👨🏾‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: man, man, medium-dark skin tone","👨🏾‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: man, man, medium-dark skin tone, dark skin tone","👨🏾‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: man, man, dark skin tone, light skin tone","👨🏿‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: man, man, dark skin tone, medium-light skin tone","👨🏿‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: man, man, dark skin tone, medium skin tone","👨🏿‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: man, man, dark skin tone, medium-dark skin tone","👨🏿‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: man, man, dark skin tone","👨🏿‍❤️‍💋‍👨🏿"),
	]),
	With::new(Emoji::new("kiss: woman, man","👩‍❤️‍💋‍👨"), 
	&[
		Emoji::new("kiss: woman, man, light skin tone","👩🏻‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: woman, man, light skin tone, medium-light skin tone","👩🏻‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: woman, man, light skin tone, medium skin tone","👩🏻‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: woman, man, light skin tone, medium-dark skin tone","👩🏻‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: woman, man, light skin tone, dark skin tone","👩🏻‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: woman, man, medium-light skin tone, light skin tone","👩🏼‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: woman, man, medium-light skin tone","👩🏼‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: woman, man, medium-light skin tone, medium skin tone","👩🏼‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: woman, man, medium-light skin tone, medium-dark skin tone","👩🏼‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: woman, man, medium-light skin tone, dark skin tone","👩🏼‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: woman, man, medium skin tone, light skin tone","👩🏽‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: woman, man, medium skin tone, medium-light skin tone","👩🏽‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: woman, man, medium skin tone","👩🏽‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: woman, man, medium skin tone, medium-dark skin tone","👩🏽‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: woman, man, medium skin tone, dark skin tone","👩🏽‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, light skin tone","👩🏾‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, medium-light skin tone","👩🏾‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, medium skin tone","👩🏾‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: woman, man, medium-dark skin tone","👩🏾‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: woman, man, medium-dark skin tone, dark skin tone","👩🏾‍❤️‍💋‍👨🏿"),
	Emoji::new("kiss: woman, man, dark skin tone, light skin tone","👩🏿‍❤️‍💋‍👨🏻"),
	Emoji::new("kiss: woman, man, dark skin tone, medium-light skin tone","👩🏿‍❤️‍💋‍👨🏼"),
	Emoji::new("kiss: woman, man, dark skin tone, medium skin tone","👩🏿‍❤️‍💋‍👨🏽"),
	Emoji::new("kiss: woman, man, dark skin tone, medium-dark skin tone","👩🏿‍❤️‍💋‍👨🏾"),
	Emoji::new("kiss: woman, man, dark skin tone","👩🏿‍❤️‍💋‍👨🏿"),
	]),
	With::new(Emoji::new("kiss: woman, woman","👩‍❤️‍💋‍👩"), 
	&[
		Emoji::new("kiss: woman, woman, light skin tone","👩🏻‍❤️‍💋‍👩🏻"),
	Emoji::new("kiss: woman, woman, light skin tone, medium-light skin tone","👩🏻‍❤️‍💋‍👩🏼"),
	Emoji::new("kiss: woman, woman, light skin tone, medium skin tone","👩🏻‍❤️‍💋‍👩🏽"),
	Emoji::new("kiss: woman, woman, light skin tone, medium-dark skin tone","👩🏻‍❤️‍💋‍👩🏾"),
	Emoji::new("kiss: woman, woman, light skin tone, dark skin tone","👩🏻‍❤️‍💋‍👩🏿"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, light skin tone","👩🏼‍❤️‍💋‍👩🏻"),
	Emoji::new("kiss: woman, woman, medium-light skin tone","👩🏼‍❤️‍💋‍👩🏼"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, medium skin tone","👩🏼‍❤️‍💋‍👩🏽"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, medium-dark skin tone","👩🏼‍❤️‍💋‍👩🏾"),
	Emoji::new("kiss: woman, woman, medium-light skin tone, dark skin tone","👩🏼‍❤️‍💋‍👩🏿"),
	Emoji::new("kiss: woman, woman, medium skin tone, light skin tone","👩🏽‍❤️‍💋‍👩🏻"),
	Emoji::new("kiss: woman, woman, medium skin tone, medium-light skin tone","👩🏽‍❤️‍💋‍👩🏼"),
	Emoji::new("kiss: woman, woman, medium skin tone","👩🏽‍❤️‍💋‍👩🏽"),
	Emoji::new("kiss: woman, woman, medium skin tone, medium-dark skin tone","👩🏽‍❤️‍💋‍👩🏾"),
	Emoji::new("kiss: woman, woman, medium skin tone, dark skin tone","👩🏽‍❤️‍💋‍👩🏿"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, light skin tone","👩🏾‍❤️‍💋‍👩🏻"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, medium-light skin tone","👩🏾‍❤️‍💋‍👩🏼"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, medium skin tone","👩🏾‍❤️‍💋‍👩🏽"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone","👩🏾‍❤️‍💋‍👩🏾"),
	Emoji::new("kiss: woman, woman, medium-dark skin tone, dark skin tone","👩🏾‍❤️‍💋‍👩🏿"),
	Emoji::new("kiss: woman, woman, dark skin tone, light skin tone","👩🏿‍❤️‍💋‍👩🏻"),
	Emoji::new("kiss: woman, woman, dark skin tone, medium-light skin tone","👩🏿‍❤️‍💋‍👩🏼"),
	Emoji::new("kiss: woman, woman, dark skin tone, medium skin tone","👩🏿‍❤️‍💋‍👩🏽"),
	Emoji::new("kiss: woman, woman, dark skin tone, medium-dark skin tone","👩🏿‍❤️‍💋‍👩🏾"),
	Emoji::new("kiss: woman, woman, dark skin tone","👩🏿‍❤️‍💋‍👩🏿"),
	]),
	]);

#[doc="person holding hands 🧑‍🤝‍🧑"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_HOLDING_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_HOLDING_HANDS); // 🧑‍🤝‍🧑 (`U+1F9D1 U+200D U+1F91D U+200D U+1F9D1`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.to_string().as_str(), \"🧑‍🤝‍🧑\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::Light)); // 🧑🏻‍🤝‍🧑🏻 (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🤝‍🧑🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumLight))); // 🧑🏻‍🤝‍🧑🏼 (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"🧑🏻‍🤝‍🧑🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Medium))); // 🧑🏻‍🤝‍🧑🏽 (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"🧑🏻‍🤝‍🧑🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumDark))); // 🧑🏻‍🤝‍🧑🏾 (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"🧑🏻‍🤝‍🧑🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Dark))); // 🧑🏻‍🤝‍🧑🏿 (`U+1F9D1 U+1F3FB U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"🧑🏻‍🤝‍🧑🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Light))); // 🧑🏼‍🤝‍🧑🏻 (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"🧑🏼‍🤝‍🧑🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::MediumLight)); // 🧑🏼‍🤝‍🧑🏼 (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🤝‍🧑🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Medium))); // 🧑🏼‍🤝‍🧑🏽 (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"🧑🏼‍🤝‍🧑🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::MediumDark))); // 🧑🏼‍🤝‍🧑🏾 (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"🧑🏼‍🤝‍🧑🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Dark))); // 🧑🏼‍🤝‍🧑🏿 (`U+1F9D1 U+1F3FC U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"🧑🏼‍🤝‍🧑🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Light))); // 🧑🏽‍🤝‍🧑🏻 (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"🧑🏽‍🤝‍🧑🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumLight))); // 🧑🏽‍🤝‍🧑🏼 (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"🧑🏽‍🤝‍🧑🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::Medium)); // 🧑🏽‍🤝‍🧑🏽 (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🤝‍🧑🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumDark))); // 🧑🏽‍🤝‍🧑🏾 (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"🧑🏽‍🤝‍🧑🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Dark))); // 🧑🏽‍🤝‍🧑🏿 (`U+1F9D1 U+1F3FD U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"🧑🏽‍🤝‍🧑🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Light))); // 🧑🏾‍🤝‍🧑🏻 (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"🧑🏾‍🤝‍🧑🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::MediumLight))); // 🧑🏾‍🤝‍🧑🏼 (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"🧑🏾‍🤝‍🧑🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Medium))); // 🧑🏾‍🤝‍🧑🏽 (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"🧑🏾‍🤝‍🧑🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::MediumDark)); // 🧑🏾‍🤝‍🧑🏾 (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🤝‍🧑🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Dark))); // 🧑🏾‍🤝‍🧑🏿 (`U+1F9D1 U+1F3FE U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"🧑🏾‍🤝‍🧑🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Light))); // 🧑🏿‍🤝‍🧑🏻 (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"🧑🏿‍🤝‍🧑🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumLight))); // 🧑🏿‍🤝‍🧑🏼 (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"🧑🏿‍🤝‍🧑🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Medium))); // 🧑🏿‍🤝‍🧑🏽 (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"🧑🏿‍🤝‍🧑🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumDark))); // 🧑🏿‍🤝‍🧑🏾 (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"🧑🏿‍🤝‍🧑🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.tone(Tone::Dark)); // 🧑🏿‍🤝‍🧑🏿 (`U+1F9D1 U+1F3FF U+200D U+1F91D U+200D U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🤝‍🧑🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males)); // 👬 (`U+1F46C`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).to_string().as_str(), \"👬\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Light)); // 👬🏻 (`U+1F46C U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Light).to_string().as_str(), \"👬🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight))); // 👨🏻‍🤝‍👨🏼 (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👨🏻‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Medium))); // 👨🏻‍🤝‍👨🏽 (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👨🏻‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark))); // 👨🏻‍🤝‍👨🏾 (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👨🏻‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Dark))); // 👨🏻‍🤝‍👨🏿 (`U+1F468 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👨🏻‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light))); // 👨🏼‍🤝‍👨🏻 (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👨🏼‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumLight)); // 👬🏼 (`U+1F46C U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumLight).to_string().as_str(), \"👬🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium))); // 👨🏼‍🤝‍👨🏽 (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👨🏼‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark))); // 👨🏼‍🤝‍👨🏾 (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👨🏼‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark))); // 👨🏼‍🤝‍👨🏿 (`U+1F468 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👨🏼‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Light))); // 👨🏽‍🤝‍👨🏻 (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👨🏽‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight))); // 👨🏽‍🤝‍👨🏼 (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👨🏽‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Medium)); // 👬🏽 (`U+1F46C U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Medium).to_string().as_str(), \"👬🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark))); // 👨🏽‍🤝‍👨🏾 (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👨🏽‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark))); // 👨🏽‍🤝‍👨🏿 (`U+1F468 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👨🏽‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light))); // 👨🏾‍🤝‍👨🏻 (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👨🏾‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight))); // 👨🏾‍🤝‍👨🏼 (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👨🏾‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium))); // 👨🏾‍🤝‍👨🏽 (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👨🏾‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumDark)); // 👬🏾 (`U+1F46C U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::MediumDark).to_string().as_str(), \"👬🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark))); // 👨🏾‍🤝‍👨🏿 (`U+1F468 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👨🏾‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Light))); // 👨🏿‍🤝‍👨🏻 (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👨🏿‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight))); // 👨🏿‍🤝‍👨🏼 (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👨🏿‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium))); // 👨🏿‍🤝‍👨🏽 (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👨🏿‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark))); // 👨🏿‍🤝‍👨🏾 (`U+1F468 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👨🏿‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Dark)); // 👬🏿 (`U+1F46C U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Males).tone(Tone::Dark).to_string().as_str(), \"👬🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed)); // 👫 (`U+1F46B`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).to_string().as_str(), \"👫\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Light)); // 👫🏻 (`U+1F46B U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Light).to_string().as_str(), \"👫🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight))); // 👩🏻‍🤝‍👨🏼 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👩🏻‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium))); // 👩🏻‍🤝‍👨🏽 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👩🏻‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark))); // 👩🏻‍🤝‍👨🏾 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👩🏻‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark))); // 👩🏻‍🤝‍👨🏿 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👩🏻‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light))); // 👩🏼‍🤝‍👨🏻 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👩🏼‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumLight)); // 👫🏼 (`U+1F46B U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumLight).to_string().as_str(), \"👫🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium))); // 👩🏼‍🤝‍👨🏽 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👩🏼‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark))); // 👩🏼‍🤝‍👨🏾 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👩🏼‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark))); // 👩🏼‍🤝‍👨🏿 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👩🏼‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light))); // 👩🏽‍🤝‍👨🏻 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👩🏽‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight))); // 👩🏽‍🤝‍👨🏼 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👩🏽‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Medium)); // 👫🏽 (`U+1F46B U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Medium).to_string().as_str(), \"👫🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark))); // 👩🏽‍🤝‍👨🏾 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👩🏽‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark))); // 👩🏽‍🤝‍👨🏿 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👩🏽‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light))); // 👩🏾‍🤝‍👨🏻 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👩🏾‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight))); // 👩🏾‍🤝‍👨🏼 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👩🏾‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium))); // 👩🏾‍🤝‍👨🏽 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👩🏾‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumDark)); // 👫🏾 (`U+1F46B U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::MediumDark).to_string().as_str(), \"👫🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark))); // 👩🏾‍🤝‍👨🏿 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👩🏾‍🤝‍👨🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light))); // 👩🏿‍🤝‍👨🏻 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👩🏿‍🤝‍👨🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight))); // 👩🏿‍🤝‍👨🏼 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👩🏿‍🤝‍👨🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium))); // 👩🏿‍🤝‍👨🏽 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👩🏿‍🤝‍👨🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark))); // 👩🏿‍🤝‍👨🏾 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👩🏿‍🤝‍👨🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Dark)); // 👫🏿 (`U+1F46B U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Mixed).tone(Tone::Dark).to_string().as_str(), \"👫🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females)); // 👭 (`U+1F46D`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).to_string().as_str(), \"👭\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Light)); // 👭🏻 (`U+1F46D U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Light).to_string().as_str(), \"👭🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight))); // 👩🏻‍🤝‍👩🏼 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumLight)).to_string().as_str(), \"👩🏻‍🤝‍👩🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Medium))); // 👩🏻‍🤝‍👩🏽 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Medium)).to_string().as_str(), \"👩🏻‍🤝‍👩🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark))); // 👩🏻‍🤝‍👩🏾 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::MediumDark)).to_string().as_str(), \"👩🏻‍🤝‍👩🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Dark))); // 👩🏻‍🤝‍👩🏿 (`U+1F469 U+1F3FB U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Light, Tone::Dark)).to_string().as_str(), \"👩🏻‍🤝‍👩🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light))); // 👩🏼‍🤝‍👩🏻 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Light)).to_string().as_str(), \"👩🏼‍🤝‍👩🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumLight)); // 👭🏼 (`U+1F46D U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumLight).to_string().as_str(), \"👭🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium))); // 👩🏼‍🤝‍👩🏽 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Medium)).to_string().as_str(), \"👩🏼‍🤝‍👩🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark))); // 👩🏼‍🤝‍👩🏾 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::MediumDark)).to_string().as_str(), \"👩🏼‍🤝‍👩🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark))); // 👩🏼‍🤝‍👩🏿 (`U+1F469 U+1F3FC U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumLight, Tone::Dark)).to_string().as_str(), \"👩🏼‍🤝‍👩🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Light))); // 👩🏽‍🤝‍👩🏻 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Light)).to_string().as_str(), \"👩🏽‍🤝‍👩🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight))); // 👩🏽‍🤝‍👩🏼 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumLight)).to_string().as_str(), \"👩🏽‍🤝‍👩🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Medium)); // 👭🏽 (`U+1F46D U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Medium).to_string().as_str(), \"👭🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark))); // 👩🏽‍🤝‍👩🏾 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::MediumDark)).to_string().as_str(), \"👩🏽‍🤝‍👩🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark))); // 👩🏽‍🤝‍👩🏿 (`U+1F469 U+1F3FD U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Medium, Tone::Dark)).to_string().as_str(), \"👩🏽‍🤝‍👩🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light))); // 👩🏾‍🤝‍👩🏻 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Light)).to_string().as_str(), \"👩🏾‍🤝‍👩🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight))); // 👩🏾‍🤝‍👩🏼 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::MediumLight)).to_string().as_str(), \"👩🏾‍🤝‍👩🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium))); // 👩🏾‍🤝‍👩🏽 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Medium)).to_string().as_str(), \"👩🏾‍🤝‍👩🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumDark)); // 👭🏾 (`U+1F46D U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::MediumDark).to_string().as_str(), \"👭🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark))); // 👩🏾‍🤝‍👩🏿 (`U+1F469 U+1F3FE U+200D U+1F91D U+200D U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::MediumDark, Tone::Dark)).to_string().as_str(), \"👩🏾‍🤝‍👩🏿\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Light))); // 👩🏿‍🤝‍👩🏻 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Light)).to_string().as_str(), \"👩🏿‍🤝‍👩🏻\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight))); // 👩🏿‍🤝‍👩🏼 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumLight)).to_string().as_str(), \"👩🏿‍🤝‍👩🏼\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium))); // 👩🏿‍🤝‍👩🏽 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::Medium)).to_string().as_str(), \"👩🏿‍🤝‍👩🏽\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark))); // 👩🏿‍🤝‍👩🏾 (`U+1F469 U+1F3FF U+200D U+1F91D U+200D U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone((Tone::Dark, Tone::MediumDark)).to_string().as_str(), \"👩🏿‍🤝‍👩🏾\");"]#[doc="println!(\"{}\", PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Dark)); // 👭🏿 (`U+1F46D U+1F3FF`)"] #[doc="# assert_eq!(PERSON_HOLDING_HANDS.gender(Pair::Females).tone(Tone::Dark).to_string().as_str(), \"👭🏿\");"]
#[doc="```"]
pub static PERSON_HOLDING_HANDS: With<Pair,With<TonePair,Emoji>> = With::new(With::new(Emoji::new("people holding hands","🧑‍🤝‍🧑"), 
	&[
		Emoji::new("people holding hands: light skin tone","🧑🏻‍🤝‍🧑🏻"),
	Emoji::new("people holding hands: light skin tone, medium-light skin tone","🧑🏻‍🤝‍🧑🏼"),
	Emoji::new("people holding hands: light skin tone, medium skin tone","🧑🏻‍🤝‍🧑🏽"),
	Emoji::new("people holding hands: light skin tone, medium-dark skin tone","🧑🏻‍🤝‍🧑🏾"),
	Emoji::new("people holding hands: light skin tone, dark skin tone","🧑🏻‍🤝‍🧑🏿"),
	Emoji::new("people holding hands: medium-light skin tone, light skin tone","🧑🏼‍🤝‍🧑🏻"),
	Emoji::new("people holding hands: medium-light skin tone","🧑🏼‍🤝‍🧑🏼"),
	Emoji::new("people holding hands: medium-light skin tone, medium skin tone","🧑🏼‍🤝‍🧑🏽"),
	Emoji::new("people holding hands: medium-light skin tone, medium-dark skin tone","🧑🏼‍🤝‍🧑🏾"),
	Emoji::new("people holding hands: medium-light skin tone, dark skin tone","🧑🏼‍🤝‍🧑🏿"),
	Emoji::new("people holding hands: medium skin tone, light skin tone","🧑🏽‍🤝‍🧑🏻"),
	Emoji::new("people holding hands: medium skin tone, medium-light skin tone","🧑🏽‍🤝‍🧑🏼"),
	Emoji::new("people holding hands: medium skin tone","🧑🏽‍🤝‍🧑🏽"),
	Emoji::new("people holding hands: medium skin tone, medium-dark skin tone","🧑🏽‍🤝‍🧑🏾"),
	Emoji::new("people holding hands: medium skin tone, dark skin tone","🧑🏽‍🤝‍🧑🏿"),
	Emoji::new("people holding hands: medium-dark skin tone, light skin tone","🧑🏾‍🤝‍🧑🏻"),
	Emoji::new("people holding hands: medium-dark skin tone, medium-light skin tone","🧑🏾‍🤝‍🧑🏼"),
	Emoji::new("people holding hands: medium-dark skin tone, medium skin tone","🧑🏾‍🤝‍🧑🏽"),
	Emoji::new("people holding hands: medium-dark skin tone","🧑🏾‍🤝‍🧑🏾"),
	Emoji::new("people holding hands: medium-dark skin tone, dark skin tone","🧑🏾‍🤝‍🧑🏿"),
	Emoji::new("people holding hands: dark skin tone, light skin tone","🧑🏿‍🤝‍🧑🏻"),
	Emoji::new("people holding hands: dark skin tone, medium-light skin tone","🧑🏿‍🤝‍🧑🏼"),
	Emoji::new("people holding hands: dark skin tone, medium skin tone","🧑🏿‍🤝‍🧑🏽"),
	Emoji::new("people holding hands: dark skin tone, medium-dark skin tone","🧑🏿‍🤝‍🧑🏾"),
	Emoji::new("people holding hands: dark skin tone","🧑🏿‍🤝‍🧑🏿"),
	]), 
	&[
		With::new(Emoji::new("men holding hands","👬"), 
	&[
		Emoji::new("men holding hands: light skin tone","👬🏻"),
	Emoji::new("men holding hands: light skin tone, medium-light skin tone","👨🏻‍🤝‍👨🏼"),
	Emoji::new("men holding hands: light skin tone, medium skin tone","👨🏻‍🤝‍👨🏽"),
	Emoji::new("men holding hands: light skin tone, medium-dark skin tone","👨🏻‍🤝‍👨🏾"),
	Emoji::new("men holding hands: light skin tone, dark skin tone","👨🏻‍🤝‍👨🏿"),
	Emoji::new("men holding hands: medium-light skin tone, light skin tone","👨🏼‍🤝‍👨🏻"),
	Emoji::new("men holding hands: medium-light skin tone","👬🏼"),
	Emoji::new("men holding hands: medium-light skin tone, medium skin tone","👨🏼‍🤝‍👨🏽"),
	Emoji::new("men holding hands: medium-light skin tone, medium-dark skin tone","👨🏼‍🤝‍👨🏾"),
	Emoji::new("men holding hands: medium-light skin tone, dark skin tone","👨🏼‍🤝‍👨🏿"),
	Emoji::new("men holding hands: medium skin tone, light skin tone","👨🏽‍🤝‍👨🏻"),
	Emoji::new("men holding hands: medium skin tone, medium-light skin tone","👨🏽‍🤝‍👨🏼"),
	Emoji::new("men holding hands: medium skin tone","👬🏽"),
	Emoji::new("men holding hands: medium skin tone, medium-dark skin tone","👨🏽‍🤝‍👨🏾"),
	Emoji::new("men holding hands: medium skin tone, dark skin tone","👨🏽‍🤝‍👨🏿"),
	Emoji::new("men holding hands: medium-dark skin tone, light skin tone","👨🏾‍🤝‍👨🏻"),
	Emoji::new("men holding hands: medium-dark skin tone, medium-light skin tone","👨🏾‍🤝‍👨🏼"),
	Emoji::new("men holding hands: medium-dark skin tone, medium skin tone","👨🏾‍🤝‍👨🏽"),
	Emoji::new("men holding hands: medium-dark skin tone","👬🏾"),
	Emoji::new("men holding hands: medium-dark skin tone, dark skin tone","👨🏾‍🤝‍👨🏿"),
	Emoji::new("men holding hands: dark skin tone, light skin tone","👨🏿‍🤝‍👨🏻"),
	Emoji::new("men holding hands: dark skin tone, medium-light skin tone","👨🏿‍🤝‍👨🏼"),
	Emoji::new("men holding hands: dark skin tone, medium skin tone","👨🏿‍🤝‍👨🏽"),
	Emoji::new("men holding hands: dark skin tone, medium-dark skin tone","👨🏿‍🤝‍👨🏾"),
	Emoji::new("men holding hands: dark skin tone","👬🏿"),
	]),
	With::new(Emoji::new("woman and man holding hands","👫"), 
	&[
		Emoji::new("woman and man holding hands: light skin tone","👫🏻"),
	Emoji::new("woman and man holding hands: light skin tone, medium-light skin tone","👩🏻‍🤝‍👨🏼"),
	Emoji::new("woman and man holding hands: light skin tone, medium skin tone","👩🏻‍🤝‍👨🏽"),
	Emoji::new("woman and man holding hands: light skin tone, medium-dark skin tone","👩🏻‍🤝‍👨🏾"),
	Emoji::new("woman and man holding hands: light skin tone, dark skin tone","👩🏻‍🤝‍👨🏿"),
	Emoji::new("woman and man holding hands: medium-light skin tone, light skin tone","👩🏼‍🤝‍👨🏻"),
	Emoji::new("woman and man holding hands: medium-light skin tone","👫🏼"),
	Emoji::new("woman and man holding hands: medium-light skin tone, medium skin tone","👩🏼‍🤝‍👨🏽"),
	Emoji::new("woman and man holding hands: medium-light skin tone, medium-dark skin tone","👩🏼‍🤝‍👨🏾"),
	Emoji::new("woman and man holding hands: medium-light skin tone, dark skin tone","👩🏼‍🤝‍👨🏿"),
	Emoji::new("woman and man holding hands: medium skin tone, light skin tone","👩🏽‍🤝‍👨🏻"),
	Emoji::new("woman and man holding hands: medium skin tone, medium-light skin tone","👩🏽‍🤝‍👨🏼"),
	Emoji::new("woman and man holding hands: medium skin tone","👫🏽"),
	Emoji::new("woman and man holding hands: medium skin tone, medium-dark skin tone","👩🏽‍🤝‍👨🏾"),
	Emoji::new("woman and man holding hands: medium skin tone, dark skin tone","👩🏽‍🤝‍👨🏿"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, light skin tone","👩🏾‍🤝‍👨🏻"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, medium-light skin tone","👩🏾‍🤝‍👨🏼"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, medium skin tone","👩🏾‍🤝‍👨🏽"),
	Emoji::new("woman and man holding hands: medium-dark skin tone","👫🏾"),
	Emoji::new("woman and man holding hands: medium-dark skin tone, dark skin tone","👩🏾‍🤝‍👨🏿"),
	Emoji::new("woman and man holding hands: dark skin tone, light skin tone","👩🏿‍🤝‍👨🏻"),
	Emoji::new("woman and man holding hands: dark skin tone, medium-light skin tone","👩🏿‍🤝‍👨🏼"),
	Emoji::new("woman and man holding hands: dark skin tone, medium skin tone","👩🏿‍🤝‍👨🏽"),
	Emoji::new("woman and man holding hands: dark skin tone, medium-dark skin tone","👩🏿‍🤝‍👨🏾"),
	Emoji::new("woman and man holding hands: dark skin tone","👫🏿"),
	]),
	With::new(Emoji::new("women holding hands","👭"), 
	&[
		Emoji::new("women holding hands: light skin tone","👭🏻"),
	Emoji::new("women holding hands: light skin tone, medium-light skin tone","👩🏻‍🤝‍👩🏼"),
	Emoji::new("women holding hands: light skin tone, medium skin tone","👩🏻‍🤝‍👩🏽"),
	Emoji::new("women holding hands: light skin tone, medium-dark skin tone","👩🏻‍🤝‍👩🏾"),
	Emoji::new("women holding hands: light skin tone, dark skin tone","👩🏻‍🤝‍👩🏿"),
	Emoji::new("women holding hands: medium-light skin tone, light skin tone","👩🏼‍🤝‍👩🏻"),
	Emoji::new("women holding hands: medium-light skin tone","👭🏼"),
	Emoji::new("women holding hands: medium-light skin tone, medium skin tone","👩🏼‍🤝‍👩🏽"),
	Emoji::new("women holding hands: medium-light skin tone, medium-dark skin tone","👩🏼‍🤝‍👩🏾"),
	Emoji::new("women holding hands: medium-light skin tone, dark skin tone","👩🏼‍🤝‍👩🏿"),
	Emoji::new("women holding hands: medium skin tone, light skin tone","👩🏽‍🤝‍👩🏻"),
	Emoji::new("women holding hands: medium skin tone, medium-light skin tone","👩🏽‍🤝‍👩🏼"),
	Emoji::new("women holding hands: medium skin tone","👭🏽"),
	Emoji::new("women holding hands: medium skin tone, medium-dark skin tone","👩🏽‍🤝‍👩🏾"),
	Emoji::new("women holding hands: medium skin tone, dark skin tone","👩🏽‍🤝‍👩🏿"),
	Emoji::new("women holding hands: medium-dark skin tone, light skin tone","👩🏾‍🤝‍👩🏻"),
	Emoji::new("women holding hands: medium-dark skin tone, medium-light skin tone","👩🏾‍🤝‍👩🏼"),
	Emoji::new("women holding hands: medium-dark skin tone, medium skin tone","👩🏾‍🤝‍👩🏽"),
	Emoji::new("women holding hands: medium-dark skin tone","👭🏾"),
	Emoji::new("women holding hands: medium-dark skin tone, dark skin tone","👩🏾‍🤝‍👩🏿"),
	Emoji::new("women holding hands: dark skin tone, light skin tone","👩🏿‍🤝‍👩🏻"),
	Emoji::new("women holding hands: dark skin tone, medium-light skin tone","👩🏿‍🤝‍👩🏼"),
	Emoji::new("women holding hands: dark skin tone, medium skin tone","👩🏿‍🤝‍👩🏽"),
	Emoji::new("women holding hands: dark skin tone, medium-dark skin tone","👩🏿‍🤝‍👩🏾"),
	Emoji::new("women holding hands: dark skin tone","👭🏿"),
	]),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&COUPLE_WITH_HEART.default.default, &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Males).default, &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).default, &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Females).default, &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &COUPLE_WITH_HEART.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), ],
&[&FAMILY.default, &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::One(Gender::Male) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::One(Gender::Female) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::Two(Pair::Males) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::Two(Pair::Mixed) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Male), children: OneOrTwo::Two(Pair::Females) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::One(Gender::Male) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::One(Gender::Female) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::Two(Pair::Males) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::Two(Pair::Mixed) }), &FAMILY.family(Family{parents: OneOrTwo::One(Gender::Female), children: OneOrTwo::Two(Pair::Females) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::One(Gender::Male) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::One(Gender::Female) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::Two(Pair::Males) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::Two(Pair::Mixed) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Males), children: OneOrTwo::Two(Pair::Females) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::One(Gender::Male) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::One(Gender::Female) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::Two(Pair::Males) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::Two(Pair::Mixed) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Mixed), children: OneOrTwo::Two(Pair::Females) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::One(Gender::Male) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::One(Gender::Female) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::Two(Pair::Males) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::Two(Pair::Mixed) }), &FAMILY.family(Family{parents: OneOrTwo::Two(Pair::Females), children: OneOrTwo::Two(Pair::Females) }), ],
&[&KISS.default.default, &KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &KISS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &KISS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &KISS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &KISS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &KISS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &KISS.pair(Pair::Males).default, &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &KISS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &KISS.pair(Pair::Mixed).default, &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &KISS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &KISS.pair(Pair::Females).default, &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &KISS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), ],
&[&PERSON_HOLDING_HANDS.default.default, &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.default.tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).default, &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Males).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).default, &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Mixed).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).default, &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Light, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumLight, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Medium, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::MediumDark, right: Tone::Dark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Light }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumLight }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Medium }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::MediumDark }), &PERSON_HOLDING_HANDS.pair(Pair::Females).tone_pair(TonePair{left: Tone::Dark, right: Tone::Dark }), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&COUPLE_WITH_HEART.default.default, &FAMILY.default, &KISS.default.default, &PERSON_HOLDING_HANDS.default.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::family

/// hand-fingers-closed 🤛👊✊
pub mod hand_fingers_closed { // people_and_body::hand_fingers_closed
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="left-facing fist 🤛"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_FACING_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_FACING_FIST); // 🤛 (`U+1F91B`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.to_string().as_str(), \"🤛\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::Light)); // 🤛🏻 (`U+1F91B U+1F3FB`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::Light).to_string().as_str(), \"🤛🏻\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::MediumLight)); // 🤛🏼 (`U+1F91B U+1F3FC`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::MediumLight).to_string().as_str(), \"🤛🏼\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::Medium)); // 🤛🏽 (`U+1F91B U+1F3FD`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::Medium).to_string().as_str(), \"🤛🏽\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::MediumDark)); // 🤛🏾 (`U+1F91B U+1F3FE`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::MediumDark).to_string().as_str(), \"🤛🏾\");"]#[doc="println!(\"{}\", LEFT_FACING_FIST.tone(Tone::Dark)); // 🤛🏿 (`U+1F91B U+1F3FF`)"] #[doc="# assert_eq!(LEFT_FACING_FIST.tone(Tone::Dark).to_string().as_str(), \"🤛🏿\");"]
#[doc="```"]
pub static LEFT_FACING_FIST: With<Tone,Emoji> = With::new(Emoji::new("left-facing fist","🤛"), 
	&[
		Emoji::new("left-facing fist: light skin tone","🤛🏻"),
	Emoji::new("left-facing fist: medium-light skin tone","🤛🏼"),
	Emoji::new("left-facing fist: medium skin tone","🤛🏽"),
	Emoji::new("left-facing fist: medium-dark skin tone","🤛🏾"),
	Emoji::new("left-facing fist: dark skin tone","🤛🏿"),
	]);

#[doc="oncoming fist 👊"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_FIST); // 👊 (`U+1F44A`)"] #[doc="# assert_eq!(ONCOMING_FIST.to_string().as_str(), \"👊\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::Light)); // 👊🏻 (`U+1F44A U+1F3FB`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::Light).to_string().as_str(), \"👊🏻\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::MediumLight)); // 👊🏼 (`U+1F44A U+1F3FC`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::MediumLight).to_string().as_str(), \"👊🏼\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::Medium)); // 👊🏽 (`U+1F44A U+1F3FD`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::Medium).to_string().as_str(), \"👊🏽\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::MediumDark)); // 👊🏾 (`U+1F44A U+1F3FE`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::MediumDark).to_string().as_str(), \"👊🏾\");"]#[doc="println!(\"{}\", ONCOMING_FIST.tone(Tone::Dark)); // 👊🏿 (`U+1F44A U+1F3FF`)"] #[doc="# assert_eq!(ONCOMING_FIST.tone(Tone::Dark).to_string().as_str(), \"👊🏿\");"]
#[doc="```"]
pub static ONCOMING_FIST: With<Tone,Emoji> = With::new(Emoji::new("oncoming fist","👊"), 
	&[
		Emoji::new("oncoming fist: light skin tone","👊🏻"),
	Emoji::new("oncoming fist: medium-light skin tone","👊🏼"),
	Emoji::new("oncoming fist: medium skin tone","👊🏽"),
	Emoji::new("oncoming fist: medium-dark skin tone","👊🏾"),
	Emoji::new("oncoming fist: dark skin tone","👊🏿"),
	]);

#[doc="raised fist ✊"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISED_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISED_FIST); // ✊ (`U+270A`)"] #[doc="# assert_eq!(RAISED_FIST.to_string().as_str(), \"✊\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::Light)); // ✊🏻 (`U+270A U+1F3FB`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::Light).to_string().as_str(), \"✊🏻\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::MediumLight)); // ✊🏼 (`U+270A U+1F3FC`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::MediumLight).to_string().as_str(), \"✊🏼\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::Medium)); // ✊🏽 (`U+270A U+1F3FD`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::Medium).to_string().as_str(), \"✊🏽\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::MediumDark)); // ✊🏾 (`U+270A U+1F3FE`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::MediumDark).to_string().as_str(), \"✊🏾\");"]#[doc="println!(\"{}\", RAISED_FIST.tone(Tone::Dark)); // ✊🏿 (`U+270A U+1F3FF`)"] #[doc="# assert_eq!(RAISED_FIST.tone(Tone::Dark).to_string().as_str(), \"✊🏿\");"]
#[doc="```"]
pub static RAISED_FIST: With<Tone,Emoji> = With::new(Emoji::new("raised fist","✊"), 
	&[
		Emoji::new("raised fist: light skin tone","✊🏻"),
	Emoji::new("raised fist: medium-light skin tone","✊🏼"),
	Emoji::new("raised fist: medium skin tone","✊🏽"),
	Emoji::new("raised fist: medium-dark skin tone","✊🏾"),
	Emoji::new("raised fist: dark skin tone","✊🏿"),
	]);

#[doc="right-facing fist 🤜"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_FACING_FIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_FACING_FIST); // 🤜 (`U+1F91C`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.to_string().as_str(), \"🤜\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::Light)); // 🤜🏻 (`U+1F91C U+1F3FB`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::Light).to_string().as_str(), \"🤜🏻\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::MediumLight)); // 🤜🏼 (`U+1F91C U+1F3FC`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::MediumLight).to_string().as_str(), \"🤜🏼\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::Medium)); // 🤜🏽 (`U+1F91C U+1F3FD`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::Medium).to_string().as_str(), \"🤜🏽\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::MediumDark)); // 🤜🏾 (`U+1F91C U+1F3FE`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::MediumDark).to_string().as_str(), \"🤜🏾\");"]#[doc="println!(\"{}\", RIGHT_FACING_FIST.tone(Tone::Dark)); // 🤜🏿 (`U+1F91C U+1F3FF`)"] #[doc="# assert_eq!(RIGHT_FACING_FIST.tone(Tone::Dark).to_string().as_str(), \"🤜🏿\");"]
#[doc="```"]
pub static RIGHT_FACING_FIST: With<Tone,Emoji> = With::new(Emoji::new("right-facing fist","🤜"), 
	&[
		Emoji::new("right-facing fist: light skin tone","🤜🏻"),
	Emoji::new("right-facing fist: medium-light skin tone","🤜🏼"),
	Emoji::new("right-facing fist: medium skin tone","🤜🏽"),
	Emoji::new("right-facing fist: medium-dark skin tone","🤜🏾"),
	Emoji::new("right-facing fist: dark skin tone","🤜🏿"),
	]);

#[doc="thumbs down 👎"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THUMBS_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THUMBS_DOWN); // 👎 (`U+1F44E`)"] #[doc="# assert_eq!(THUMBS_DOWN.to_string().as_str(), \"👎\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::Light)); // 👎🏻 (`U+1F44E U+1F3FB`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::Light).to_string().as_str(), \"👎🏻\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::MediumLight)); // 👎🏼 (`U+1F44E U+1F3FC`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::MediumLight).to_string().as_str(), \"👎🏼\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::Medium)); // 👎🏽 (`U+1F44E U+1F3FD`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::Medium).to_string().as_str(), \"👎🏽\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::MediumDark)); // 👎🏾 (`U+1F44E U+1F3FE`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::MediumDark).to_string().as_str(), \"👎🏾\");"]#[doc="println!(\"{}\", THUMBS_DOWN.tone(Tone::Dark)); // 👎🏿 (`U+1F44E U+1F3FF`)"] #[doc="# assert_eq!(THUMBS_DOWN.tone(Tone::Dark).to_string().as_str(), \"👎🏿\");"]
#[doc="```"]
pub static THUMBS_DOWN: With<Tone,Emoji> = With::new(Emoji::new("thumbs down","👎"), 
	&[
		Emoji::new("thumbs down: light skin tone","👎🏻"),
	Emoji::new("thumbs down: medium-light skin tone","👎🏼"),
	Emoji::new("thumbs down: medium skin tone","👎🏽"),
	Emoji::new("thumbs down: medium-dark skin tone","👎🏾"),
	Emoji::new("thumbs down: dark skin tone","👎🏿"),
	]);

#[doc="thumbs up 👍"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THUMBS_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THUMBS_UP); // 👍 (`U+1F44D`)"] #[doc="# assert_eq!(THUMBS_UP.to_string().as_str(), \"👍\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::Light)); // 👍🏻 (`U+1F44D U+1F3FB`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::Light).to_string().as_str(), \"👍🏻\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::MediumLight)); // 👍🏼 (`U+1F44D U+1F3FC`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::MediumLight).to_string().as_str(), \"👍🏼\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::Medium)); // 👍🏽 (`U+1F44D U+1F3FD`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::Medium).to_string().as_str(), \"👍🏽\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::MediumDark)); // 👍🏾 (`U+1F44D U+1F3FE`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::MediumDark).to_string().as_str(), \"👍🏾\");"]#[doc="println!(\"{}\", THUMBS_UP.tone(Tone::Dark)); // 👍🏿 (`U+1F44D U+1F3FF`)"] #[doc="# assert_eq!(THUMBS_UP.tone(Tone::Dark).to_string().as_str(), \"👍🏿\");"]
#[doc="```"]
pub static THUMBS_UP: With<Tone,Emoji> = With::new(Emoji::new("thumbs up","👍"), 
	&[
		Emoji::new("thumbs up: light skin tone","👍🏻"),
	Emoji::new("thumbs up: medium-light skin tone","👍🏼"),
	Emoji::new("thumbs up: medium skin tone","👍🏽"),
	Emoji::new("thumbs up: medium-dark skin tone","👍🏾"),
	Emoji::new("thumbs up: dark skin tone","👍🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&LEFT_FACING_FIST.default, &LEFT_FACING_FIST.tone(Tone::Light), &LEFT_FACING_FIST.tone(Tone::MediumLight), &LEFT_FACING_FIST.tone(Tone::Medium), &LEFT_FACING_FIST.tone(Tone::MediumDark), &LEFT_FACING_FIST.tone(Tone::Dark), ],
&[&ONCOMING_FIST.default, &ONCOMING_FIST.tone(Tone::Light), &ONCOMING_FIST.tone(Tone::MediumLight), &ONCOMING_FIST.tone(Tone::Medium), &ONCOMING_FIST.tone(Tone::MediumDark), &ONCOMING_FIST.tone(Tone::Dark), ],
&[&RAISED_FIST.default, &RAISED_FIST.tone(Tone::Light), &RAISED_FIST.tone(Tone::MediumLight), &RAISED_FIST.tone(Tone::Medium), &RAISED_FIST.tone(Tone::MediumDark), &RAISED_FIST.tone(Tone::Dark), ],
&[&RIGHT_FACING_FIST.default, &RIGHT_FACING_FIST.tone(Tone::Light), &RIGHT_FACING_FIST.tone(Tone::MediumLight), &RIGHT_FACING_FIST.tone(Tone::Medium), &RIGHT_FACING_FIST.tone(Tone::MediumDark), &RIGHT_FACING_FIST.tone(Tone::Dark), ],
&[&THUMBS_DOWN.default, &THUMBS_DOWN.tone(Tone::Light), &THUMBS_DOWN.tone(Tone::MediumLight), &THUMBS_DOWN.tone(Tone::Medium), &THUMBS_DOWN.tone(Tone::MediumDark), &THUMBS_DOWN.tone(Tone::Dark), ],
&[&THUMBS_UP.default, &THUMBS_UP.tone(Tone::Light), &THUMBS_UP.tone(Tone::MediumLight), &THUMBS_UP.tone(Tone::Medium), &THUMBS_UP.tone(Tone::MediumDark), &THUMBS_UP.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&LEFT_FACING_FIST.default, &ONCOMING_FIST.default, &RAISED_FIST.default, &RIGHT_FACING_FIST.default, &THUMBS_DOWN.default, &THUMBS_UP.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::hand_fingers_closed

/// hand-fingers-open 🖐️🤚✋
pub mod hand_fingers_open { // people_and_body::hand_fingers_open
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="hand with fingers splayed 🖐️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HAND_WITH_FINGERS_SPLAYED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED); // 🖐️ (`U+1F590 U+FE0F`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.to_string().as_str(), \"🖐️\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::Light)); // 🖐🏻 (`U+1F590 U+1F3FB`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::Light).to_string().as_str(), \"🖐🏻\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumLight)); // 🖐🏼 (`U+1F590 U+1F3FC`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumLight).to_string().as_str(), \"🖐🏼\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::Medium)); // 🖐🏽 (`U+1F590 U+1F3FD`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::Medium).to_string().as_str(), \"🖐🏽\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumDark)); // 🖐🏾 (`U+1F590 U+1F3FE`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumDark).to_string().as_str(), \"🖐🏾\");"]#[doc="println!(\"{}\", HAND_WITH_FINGERS_SPLAYED.tone(Tone::Dark)); // 🖐🏿 (`U+1F590 U+1F3FF`)"] #[doc="# assert_eq!(HAND_WITH_FINGERS_SPLAYED.tone(Tone::Dark).to_string().as_str(), \"🖐🏿\");"]
#[doc="```"]
pub static HAND_WITH_FINGERS_SPLAYED: With<Tone,Emoji> = With::new(Emoji::new("hand with fingers splayed","🖐️"), 
	&[
		Emoji::new("hand with fingers splayed: light skin tone","🖐🏻"),
	Emoji::new("hand with fingers splayed: medium-light skin tone","🖐🏼"),
	Emoji::new("hand with fingers splayed: medium skin tone","🖐🏽"),
	Emoji::new("hand with fingers splayed: medium-dark skin tone","🖐🏾"),
	Emoji::new("hand with fingers splayed: dark skin tone","🖐🏿"),
	]);

#[doc="raised back of hand 🤚"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISED_BACK_OF_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISED_BACK_OF_HAND); // 🤚 (`U+1F91A`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.to_string().as_str(), \"🤚\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::Light)); // 🤚🏻 (`U+1F91A U+1F3FB`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::Light).to_string().as_str(), \"🤚🏻\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::MediumLight)); // 🤚🏼 (`U+1F91A U+1F3FC`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::MediumLight).to_string().as_str(), \"🤚🏼\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::Medium)); // 🤚🏽 (`U+1F91A U+1F3FD`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::Medium).to_string().as_str(), \"🤚🏽\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::MediumDark)); // 🤚🏾 (`U+1F91A U+1F3FE`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::MediumDark).to_string().as_str(), \"🤚🏾\");"]#[doc="println!(\"{}\", RAISED_BACK_OF_HAND.tone(Tone::Dark)); // 🤚🏿 (`U+1F91A U+1F3FF`)"] #[doc="# assert_eq!(RAISED_BACK_OF_HAND.tone(Tone::Dark).to_string().as_str(), \"🤚🏿\");"]
#[doc="```"]
pub static RAISED_BACK_OF_HAND: With<Tone,Emoji> = With::new(Emoji::new("raised back of hand","🤚"), 
	&[
		Emoji::new("raised back of hand: light skin tone","🤚🏻"),
	Emoji::new("raised back of hand: medium-light skin tone","🤚🏼"),
	Emoji::new("raised back of hand: medium skin tone","🤚🏽"),
	Emoji::new("raised back of hand: medium-dark skin tone","🤚🏾"),
	Emoji::new("raised back of hand: dark skin tone","🤚🏿"),
	]);

#[doc="raised hand ✋"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISED_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISED_HAND); // ✋ (`U+270B`)"] #[doc="# assert_eq!(RAISED_HAND.to_string().as_str(), \"✋\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::Light)); // ✋🏻 (`U+270B U+1F3FB`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::Light).to_string().as_str(), \"✋🏻\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::MediumLight)); // ✋🏼 (`U+270B U+1F3FC`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::MediumLight).to_string().as_str(), \"✋🏼\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::Medium)); // ✋🏽 (`U+270B U+1F3FD`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::Medium).to_string().as_str(), \"✋🏽\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::MediumDark)); // ✋🏾 (`U+270B U+1F3FE`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::MediumDark).to_string().as_str(), \"✋🏾\");"]#[doc="println!(\"{}\", RAISED_HAND.tone(Tone::Dark)); // ✋🏿 (`U+270B U+1F3FF`)"] #[doc="# assert_eq!(RAISED_HAND.tone(Tone::Dark).to_string().as_str(), \"✋🏿\");"]
#[doc="```"]
pub static RAISED_HAND: With<Tone,Emoji> = With::new(Emoji::new("raised hand","✋"), 
	&[
		Emoji::new("raised hand: light skin tone","✋🏻"),
	Emoji::new("raised hand: medium-light skin tone","✋🏼"),
	Emoji::new("raised hand: medium skin tone","✋🏽"),
	Emoji::new("raised hand: medium-dark skin tone","✋🏾"),
	Emoji::new("raised hand: dark skin tone","✋🏿"),
	]);

#[doc="vulcan salute 🖖"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VULCAN_SALUTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VULCAN_SALUTE); // 🖖 (`U+1F596`)"] #[doc="# assert_eq!(VULCAN_SALUTE.to_string().as_str(), \"🖖\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::Light)); // 🖖🏻 (`U+1F596 U+1F3FB`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::Light).to_string().as_str(), \"🖖🏻\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::MediumLight)); // 🖖🏼 (`U+1F596 U+1F3FC`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::MediumLight).to_string().as_str(), \"🖖🏼\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::Medium)); // 🖖🏽 (`U+1F596 U+1F3FD`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::Medium).to_string().as_str(), \"🖖🏽\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::MediumDark)); // 🖖🏾 (`U+1F596 U+1F3FE`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::MediumDark).to_string().as_str(), \"🖖🏾\");"]#[doc="println!(\"{}\", VULCAN_SALUTE.tone(Tone::Dark)); // 🖖🏿 (`U+1F596 U+1F3FF`)"] #[doc="# assert_eq!(VULCAN_SALUTE.tone(Tone::Dark).to_string().as_str(), \"🖖🏿\");"]
#[doc="```"]
pub static VULCAN_SALUTE: With<Tone,Emoji> = With::new(Emoji::new("vulcan salute","🖖"), 
	&[
		Emoji::new("vulcan salute: light skin tone","🖖🏻"),
	Emoji::new("vulcan salute: medium-light skin tone","🖖🏼"),
	Emoji::new("vulcan salute: medium skin tone","🖖🏽"),
	Emoji::new("vulcan salute: medium-dark skin tone","🖖🏾"),
	Emoji::new("vulcan salute: dark skin tone","🖖🏿"),
	]);

#[doc="waving hand 👋"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAVING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAVING_HAND); // 👋 (`U+1F44B`)"] #[doc="# assert_eq!(WAVING_HAND.to_string().as_str(), \"👋\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::Light)); // 👋🏻 (`U+1F44B U+1F3FB`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::Light).to_string().as_str(), \"👋🏻\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::MediumLight)); // 👋🏼 (`U+1F44B U+1F3FC`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"👋🏼\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::Medium)); // 👋🏽 (`U+1F44B U+1F3FD`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::Medium).to_string().as_str(), \"👋🏽\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::MediumDark)); // 👋🏾 (`U+1F44B U+1F3FE`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"👋🏾\");"]#[doc="println!(\"{}\", WAVING_HAND.tone(Tone::Dark)); // 👋🏿 (`U+1F44B U+1F3FF`)"] #[doc="# assert_eq!(WAVING_HAND.tone(Tone::Dark).to_string().as_str(), \"👋🏿\");"]
#[doc="```"]
pub static WAVING_HAND: With<Tone,Emoji> = With::new(Emoji::new("waving hand","👋"), 
	&[
		Emoji::new("waving hand: light skin tone","👋🏻"),
	Emoji::new("waving hand: medium-light skin tone","👋🏼"),
	Emoji::new("waving hand: medium skin tone","👋🏽"),
	Emoji::new("waving hand: medium-dark skin tone","👋🏾"),
	Emoji::new("waving hand: dark skin tone","👋🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&HAND_WITH_FINGERS_SPLAYED.default, &HAND_WITH_FINGERS_SPLAYED.tone(Tone::Light), &HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumLight), &HAND_WITH_FINGERS_SPLAYED.tone(Tone::Medium), &HAND_WITH_FINGERS_SPLAYED.tone(Tone::MediumDark), &HAND_WITH_FINGERS_SPLAYED.tone(Tone::Dark), ],
&[&RAISED_BACK_OF_HAND.default, &RAISED_BACK_OF_HAND.tone(Tone::Light), &RAISED_BACK_OF_HAND.tone(Tone::MediumLight), &RAISED_BACK_OF_HAND.tone(Tone::Medium), &RAISED_BACK_OF_HAND.tone(Tone::MediumDark), &RAISED_BACK_OF_HAND.tone(Tone::Dark), ],
&[&RAISED_HAND.default, &RAISED_HAND.tone(Tone::Light), &RAISED_HAND.tone(Tone::MediumLight), &RAISED_HAND.tone(Tone::Medium), &RAISED_HAND.tone(Tone::MediumDark), &RAISED_HAND.tone(Tone::Dark), ],
&[&VULCAN_SALUTE.default, &VULCAN_SALUTE.tone(Tone::Light), &VULCAN_SALUTE.tone(Tone::MediumLight), &VULCAN_SALUTE.tone(Tone::Medium), &VULCAN_SALUTE.tone(Tone::MediumDark), &VULCAN_SALUTE.tone(Tone::Dark), ],
&[&WAVING_HAND.default, &WAVING_HAND.tone(Tone::Light), &WAVING_HAND.tone(Tone::MediumLight), &WAVING_HAND.tone(Tone::Medium), &WAVING_HAND.tone(Tone::MediumDark), &WAVING_HAND.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&HAND_WITH_FINGERS_SPLAYED.default, &RAISED_BACK_OF_HAND.default, &RAISED_HAND.default, &VULCAN_SALUTE.default, &WAVING_HAND.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::hand_fingers_open

/// hand-fingers-partial 🤙🤞🤟
pub mod hand_fingers_partial { // people_and_body::hand_fingers_partial
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="call me hand 🤙"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CALL_ME_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CALL_ME_HAND); // 🤙 (`U+1F919`)"] #[doc="# assert_eq!(CALL_ME_HAND.to_string().as_str(), \"🤙\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::Light)); // 🤙🏻 (`U+1F919 U+1F3FB`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::Light).to_string().as_str(), \"🤙🏻\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::MediumLight)); // 🤙🏼 (`U+1F919 U+1F3FC`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::MediumLight).to_string().as_str(), \"🤙🏼\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::Medium)); // 🤙🏽 (`U+1F919 U+1F3FD`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::Medium).to_string().as_str(), \"🤙🏽\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::MediumDark)); // 🤙🏾 (`U+1F919 U+1F3FE`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::MediumDark).to_string().as_str(), \"🤙🏾\");"]#[doc="println!(\"{}\", CALL_ME_HAND.tone(Tone::Dark)); // 🤙🏿 (`U+1F919 U+1F3FF`)"] #[doc="# assert_eq!(CALL_ME_HAND.tone(Tone::Dark).to_string().as_str(), \"🤙🏿\");"]
#[doc="```"]
pub static CALL_ME_HAND: With<Tone,Emoji> = With::new(Emoji::new("call me hand","🤙"), 
	&[
		Emoji::new("call me hand: light skin tone","🤙🏻"),
	Emoji::new("call me hand: medium-light skin tone","🤙🏼"),
	Emoji::new("call me hand: medium skin tone","🤙🏽"),
	Emoji::new("call me hand: medium-dark skin tone","🤙🏾"),
	Emoji::new("call me hand: dark skin tone","🤙🏿"),
	]);

#[doc="crossed fingers 🤞"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSSED_FINGERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSSED_FINGERS); // 🤞 (`U+1F91E`)"] #[doc="# assert_eq!(CROSSED_FINGERS.to_string().as_str(), \"🤞\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::Light)); // 🤞🏻 (`U+1F91E U+1F3FB`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::Light).to_string().as_str(), \"🤞🏻\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::MediumLight)); // 🤞🏼 (`U+1F91E U+1F3FC`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::MediumLight).to_string().as_str(), \"🤞🏼\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::Medium)); // 🤞🏽 (`U+1F91E U+1F3FD`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::Medium).to_string().as_str(), \"🤞🏽\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::MediumDark)); // 🤞🏾 (`U+1F91E U+1F3FE`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::MediumDark).to_string().as_str(), \"🤞🏾\");"]#[doc="println!(\"{}\", CROSSED_FINGERS.tone(Tone::Dark)); // 🤞🏿 (`U+1F91E U+1F3FF`)"] #[doc="# assert_eq!(CROSSED_FINGERS.tone(Tone::Dark).to_string().as_str(), \"🤞🏿\");"]
#[doc="```"]
pub static CROSSED_FINGERS: With<Tone,Emoji> = With::new(Emoji::new("crossed fingers","🤞"), 
	&[
		Emoji::new("crossed fingers: light skin tone","🤞🏻"),
	Emoji::new("crossed fingers: medium-light skin tone","🤞🏼"),
	Emoji::new("crossed fingers: medium skin tone","🤞🏽"),
	Emoji::new("crossed fingers: medium-dark skin tone","🤞🏾"),
	Emoji::new("crossed fingers: dark skin tone","🤞🏿"),
	]);

#[doc="love-you gesture 🤟"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOVE_YOU_GESTURE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOVE_YOU_GESTURE); // 🤟 (`U+1F91F`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.to_string().as_str(), \"🤟\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::Light)); // 🤟🏻 (`U+1F91F U+1F3FB`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::Light).to_string().as_str(), \"🤟🏻\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::MediumLight)); // 🤟🏼 (`U+1F91F U+1F3FC`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::MediumLight).to_string().as_str(), \"🤟🏼\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::Medium)); // 🤟🏽 (`U+1F91F U+1F3FD`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::Medium).to_string().as_str(), \"🤟🏽\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::MediumDark)); // 🤟🏾 (`U+1F91F U+1F3FE`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::MediumDark).to_string().as_str(), \"🤟🏾\");"]#[doc="println!(\"{}\", LOVE_YOU_GESTURE.tone(Tone::Dark)); // 🤟🏿 (`U+1F91F U+1F3FF`)"] #[doc="# assert_eq!(LOVE_YOU_GESTURE.tone(Tone::Dark).to_string().as_str(), \"🤟🏿\");"]
#[doc="```"]
pub static LOVE_YOU_GESTURE: With<Tone,Emoji> = With::new(Emoji::new("love-you gesture","🤟"), 
	&[
		Emoji::new("love-you gesture: light skin tone","🤟🏻"),
	Emoji::new("love-you gesture: medium-light skin tone","🤟🏼"),
	Emoji::new("love-you gesture: medium skin tone","🤟🏽"),
	Emoji::new("love-you gesture: medium-dark skin tone","🤟🏾"),
	Emoji::new("love-you gesture: dark skin tone","🤟🏿"),
	]);

#[doc="OK hand 👌"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OK_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OK_HAND); // 👌 (`U+1F44C`)"] #[doc="# assert_eq!(OK_HAND.to_string().as_str(), \"👌\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::Light)); // 👌🏻 (`U+1F44C U+1F3FB`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::Light).to_string().as_str(), \"👌🏻\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::MediumLight)); // 👌🏼 (`U+1F44C U+1F3FC`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::MediumLight).to_string().as_str(), \"👌🏼\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::Medium)); // 👌🏽 (`U+1F44C U+1F3FD`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::Medium).to_string().as_str(), \"👌🏽\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::MediumDark)); // 👌🏾 (`U+1F44C U+1F3FE`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::MediumDark).to_string().as_str(), \"👌🏾\");"]#[doc="println!(\"{}\", OK_HAND.tone(Tone::Dark)); // 👌🏿 (`U+1F44C U+1F3FF`)"] #[doc="# assert_eq!(OK_HAND.tone(Tone::Dark).to_string().as_str(), \"👌🏿\");"]
#[doc="```"]
pub static OK_HAND: With<Tone,Emoji> = With::new(Emoji::new("OK hand","👌"), 
	&[
		Emoji::new("OK hand: light skin tone","👌🏻"),
	Emoji::new("OK hand: medium-light skin tone","👌🏼"),
	Emoji::new("OK hand: medium skin tone","👌🏽"),
	Emoji::new("OK hand: medium-dark skin tone","👌🏾"),
	Emoji::new("OK hand: dark skin tone","👌🏿"),
	]);

#[doc="pinched fingers 🤌"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINCHED_FINGERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINCHED_FINGERS); // 🤌 (`U+1F90C`)"] #[doc="# assert_eq!(PINCHED_FINGERS.to_string().as_str(), \"🤌\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::Light)); // 🤌🏻 (`U+1F90C U+1F3FB`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::Light).to_string().as_str(), \"🤌🏻\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::MediumLight)); // 🤌🏼 (`U+1F90C U+1F3FC`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::MediumLight).to_string().as_str(), \"🤌🏼\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::Medium)); // 🤌🏽 (`U+1F90C U+1F3FD`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::Medium).to_string().as_str(), \"🤌🏽\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::MediumDark)); // 🤌🏾 (`U+1F90C U+1F3FE`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::MediumDark).to_string().as_str(), \"🤌🏾\");"]#[doc="println!(\"{}\", PINCHED_FINGERS.tone(Tone::Dark)); // 🤌🏿 (`U+1F90C U+1F3FF`)"] #[doc="# assert_eq!(PINCHED_FINGERS.tone(Tone::Dark).to_string().as_str(), \"🤌🏿\");"]
#[doc="```"]
pub static PINCHED_FINGERS: With<Tone,Emoji> = With::new(Emoji::new("pinched fingers","🤌"), 
	&[
		Emoji::new("pinched fingers: light skin tone","🤌🏻"),
	Emoji::new("pinched fingers: medium-light skin tone","🤌🏼"),
	Emoji::new("pinched fingers: medium skin tone","🤌🏽"),
	Emoji::new("pinched fingers: medium-dark skin tone","🤌🏾"),
	Emoji::new("pinched fingers: dark skin tone","🤌🏿"),
	]);

#[doc="pinching hand 🤏"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PINCHING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PINCHING_HAND); // 🤏 (`U+1F90F`)"] #[doc="# assert_eq!(PINCHING_HAND.to_string().as_str(), \"🤏\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::Light)); // 🤏🏻 (`U+1F90F U+1F3FB`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::Light).to_string().as_str(), \"🤏🏻\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::MediumLight)); // 🤏🏼 (`U+1F90F U+1F3FC`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"🤏🏼\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::Medium)); // 🤏🏽 (`U+1F90F U+1F3FD`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::Medium).to_string().as_str(), \"🤏🏽\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::MediumDark)); // 🤏🏾 (`U+1F90F U+1F3FE`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"🤏🏾\");"]#[doc="println!(\"{}\", PINCHING_HAND.tone(Tone::Dark)); // 🤏🏿 (`U+1F90F U+1F3FF`)"] #[doc="# assert_eq!(PINCHING_HAND.tone(Tone::Dark).to_string().as_str(), \"🤏🏿\");"]
#[doc="```"]
pub static PINCHING_HAND: With<Tone,Emoji> = With::new(Emoji::new("pinching hand","🤏"), 
	&[
		Emoji::new("pinching hand: light skin tone","🤏🏻"),
	Emoji::new("pinching hand: medium-light skin tone","🤏🏼"),
	Emoji::new("pinching hand: medium skin tone","🤏🏽"),
	Emoji::new("pinching hand: medium-dark skin tone","🤏🏾"),
	Emoji::new("pinching hand: dark skin tone","🤏🏿"),
	]);

#[doc="sign of the horns 🤘"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SIGN_OF_THE_HORNS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SIGN_OF_THE_HORNS); // 🤘 (`U+1F918`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.to_string().as_str(), \"🤘\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::Light)); // 🤘🏻 (`U+1F918 U+1F3FB`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::Light).to_string().as_str(), \"🤘🏻\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::MediumLight)); // 🤘🏼 (`U+1F918 U+1F3FC`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::MediumLight).to_string().as_str(), \"🤘🏼\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::Medium)); // 🤘🏽 (`U+1F918 U+1F3FD`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::Medium).to_string().as_str(), \"🤘🏽\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::MediumDark)); // 🤘🏾 (`U+1F918 U+1F3FE`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::MediumDark).to_string().as_str(), \"🤘🏾\");"]#[doc="println!(\"{}\", SIGN_OF_THE_HORNS.tone(Tone::Dark)); // 🤘🏿 (`U+1F918 U+1F3FF`)"] #[doc="# assert_eq!(SIGN_OF_THE_HORNS.tone(Tone::Dark).to_string().as_str(), \"🤘🏿\");"]
#[doc="```"]
pub static SIGN_OF_THE_HORNS: With<Tone,Emoji> = With::new(Emoji::new("sign of the horns","🤘"), 
	&[
		Emoji::new("sign of the horns: light skin tone","🤘🏻"),
	Emoji::new("sign of the horns: medium-light skin tone","🤘🏼"),
	Emoji::new("sign of the horns: medium skin tone","🤘🏽"),
	Emoji::new("sign of the horns: medium-dark skin tone","🤘🏾"),
	Emoji::new("sign of the horns: dark skin tone","🤘🏿"),
	]);

#[doc="victory hand ✌️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VICTORY_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VICTORY_HAND); // ✌️ (`U+270C U+FE0F`)"] #[doc="# assert_eq!(VICTORY_HAND.to_string().as_str(), \"✌️\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::Light)); // ✌🏻 (`U+270C U+1F3FB`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::Light).to_string().as_str(), \"✌🏻\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::MediumLight)); // ✌🏼 (`U+270C U+1F3FC`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::MediumLight).to_string().as_str(), \"✌🏼\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::Medium)); // ✌🏽 (`U+270C U+1F3FD`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::Medium).to_string().as_str(), \"✌🏽\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::MediumDark)); // ✌🏾 (`U+270C U+1F3FE`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::MediumDark).to_string().as_str(), \"✌🏾\");"]#[doc="println!(\"{}\", VICTORY_HAND.tone(Tone::Dark)); // ✌🏿 (`U+270C U+1F3FF`)"] #[doc="# assert_eq!(VICTORY_HAND.tone(Tone::Dark).to_string().as_str(), \"✌🏿\");"]
#[doc="```"]
pub static VICTORY_HAND: With<Tone,Emoji> = With::new(Emoji::new("victory hand","✌️"), 
	&[
		Emoji::new("victory hand: light skin tone","✌🏻"),
	Emoji::new("victory hand: medium-light skin tone","✌🏼"),
	Emoji::new("victory hand: medium skin tone","✌🏽"),
	Emoji::new("victory hand: medium-dark skin tone","✌🏾"),
	Emoji::new("victory hand: dark skin tone","✌🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CALL_ME_HAND.default, &CALL_ME_HAND.tone(Tone::Light), &CALL_ME_HAND.tone(Tone::MediumLight), &CALL_ME_HAND.tone(Tone::Medium), &CALL_ME_HAND.tone(Tone::MediumDark), &CALL_ME_HAND.tone(Tone::Dark), ],
&[&CROSSED_FINGERS.default, &CROSSED_FINGERS.tone(Tone::Light), &CROSSED_FINGERS.tone(Tone::MediumLight), &CROSSED_FINGERS.tone(Tone::Medium), &CROSSED_FINGERS.tone(Tone::MediumDark), &CROSSED_FINGERS.tone(Tone::Dark), ],
&[&LOVE_YOU_GESTURE.default, &LOVE_YOU_GESTURE.tone(Tone::Light), &LOVE_YOU_GESTURE.tone(Tone::MediumLight), &LOVE_YOU_GESTURE.tone(Tone::Medium), &LOVE_YOU_GESTURE.tone(Tone::MediumDark), &LOVE_YOU_GESTURE.tone(Tone::Dark), ],
&[&OK_HAND.default, &OK_HAND.tone(Tone::Light), &OK_HAND.tone(Tone::MediumLight), &OK_HAND.tone(Tone::Medium), &OK_HAND.tone(Tone::MediumDark), &OK_HAND.tone(Tone::Dark), ],
&[&PINCHED_FINGERS.default, &PINCHED_FINGERS.tone(Tone::Light), &PINCHED_FINGERS.tone(Tone::MediumLight), &PINCHED_FINGERS.tone(Tone::Medium), &PINCHED_FINGERS.tone(Tone::MediumDark), &PINCHED_FINGERS.tone(Tone::Dark), ],
&[&PINCHING_HAND.default, &PINCHING_HAND.tone(Tone::Light), &PINCHING_HAND.tone(Tone::MediumLight), &PINCHING_HAND.tone(Tone::Medium), &PINCHING_HAND.tone(Tone::MediumDark), &PINCHING_HAND.tone(Tone::Dark), ],
&[&SIGN_OF_THE_HORNS.default, &SIGN_OF_THE_HORNS.tone(Tone::Light), &SIGN_OF_THE_HORNS.tone(Tone::MediumLight), &SIGN_OF_THE_HORNS.tone(Tone::Medium), &SIGN_OF_THE_HORNS.tone(Tone::MediumDark), &SIGN_OF_THE_HORNS.tone(Tone::Dark), ],
&[&VICTORY_HAND.default, &VICTORY_HAND.tone(Tone::Light), &VICTORY_HAND.tone(Tone::MediumLight), &VICTORY_HAND.tone(Tone::Medium), &VICTORY_HAND.tone(Tone::MediumDark), &VICTORY_HAND.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CALL_ME_HAND.default, &CROSSED_FINGERS.default, &LOVE_YOU_GESTURE.default, &OK_HAND.default, &PINCHED_FINGERS.default, &PINCHING_HAND.default, &SIGN_OF_THE_HORNS.default, &VICTORY_HAND.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::hand_fingers_partial

/// hand-prop 💅🤳✍️
pub mod hand_prop { // people_and_body::hand_prop
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="nail polish 💅"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAIL_POLISH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAIL_POLISH); // 💅 (`U+1F485`)"] #[doc="# assert_eq!(NAIL_POLISH.to_string().as_str(), \"💅\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::Light)); // 💅🏻 (`U+1F485 U+1F3FB`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::Light).to_string().as_str(), \"💅🏻\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::MediumLight)); // 💅🏼 (`U+1F485 U+1F3FC`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::MediumLight).to_string().as_str(), \"💅🏼\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::Medium)); // 💅🏽 (`U+1F485 U+1F3FD`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::Medium).to_string().as_str(), \"💅🏽\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::MediumDark)); // 💅🏾 (`U+1F485 U+1F3FE`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::MediumDark).to_string().as_str(), \"💅🏾\");"]#[doc="println!(\"{}\", NAIL_POLISH.tone(Tone::Dark)); // 💅🏿 (`U+1F485 U+1F3FF`)"] #[doc="# assert_eq!(NAIL_POLISH.tone(Tone::Dark).to_string().as_str(), \"💅🏿\");"]
#[doc="```"]
pub static NAIL_POLISH: With<Tone,Emoji> = With::new(Emoji::new("nail polish","💅"), 
	&[
		Emoji::new("nail polish: light skin tone","💅🏻"),
	Emoji::new("nail polish: medium-light skin tone","💅🏼"),
	Emoji::new("nail polish: medium skin tone","💅🏽"),
	Emoji::new("nail polish: medium-dark skin tone","💅🏾"),
	Emoji::new("nail polish: dark skin tone","💅🏿"),
	]);

#[doc="selfie 🤳"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SELFIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SELFIE); // 🤳 (`U+1F933`)"] #[doc="# assert_eq!(SELFIE.to_string().as_str(), \"🤳\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::Light)); // 🤳🏻 (`U+1F933 U+1F3FB`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::Light).to_string().as_str(), \"🤳🏻\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::MediumLight)); // 🤳🏼 (`U+1F933 U+1F3FC`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::MediumLight).to_string().as_str(), \"🤳🏼\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::Medium)); // 🤳🏽 (`U+1F933 U+1F3FD`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::Medium).to_string().as_str(), \"🤳🏽\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::MediumDark)); // 🤳🏾 (`U+1F933 U+1F3FE`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::MediumDark).to_string().as_str(), \"🤳🏾\");"]#[doc="println!(\"{}\", SELFIE.tone(Tone::Dark)); // 🤳🏿 (`U+1F933 U+1F3FF`)"] #[doc="# assert_eq!(SELFIE.tone(Tone::Dark).to_string().as_str(), \"🤳🏿\");"]
#[doc="```"]
pub static SELFIE: With<Tone,Emoji> = With::new(Emoji::new("selfie","🤳"), 
	&[
		Emoji::new("selfie: light skin tone","🤳🏻"),
	Emoji::new("selfie: medium-light skin tone","🤳🏼"),
	Emoji::new("selfie: medium skin tone","🤳🏽"),
	Emoji::new("selfie: medium-dark skin tone","🤳🏾"),
	Emoji::new("selfie: dark skin tone","🤳🏿"),
	]);

#[doc="writing hand ✍️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WRITING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WRITING_HAND); // ✍️ (`U+270D U+FE0F`)"] #[doc="# assert_eq!(WRITING_HAND.to_string().as_str(), \"✍️\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::Light)); // ✍🏻 (`U+270D U+1F3FB`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::Light).to_string().as_str(), \"✍🏻\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::MediumLight)); // ✍🏼 (`U+270D U+1F3FC`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"✍🏼\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::Medium)); // ✍🏽 (`U+270D U+1F3FD`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::Medium).to_string().as_str(), \"✍🏽\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::MediumDark)); // ✍🏾 (`U+270D U+1F3FE`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"✍🏾\");"]#[doc="println!(\"{}\", WRITING_HAND.tone(Tone::Dark)); // ✍🏿 (`U+270D U+1F3FF`)"] #[doc="# assert_eq!(WRITING_HAND.tone(Tone::Dark).to_string().as_str(), \"✍🏿\");"]
#[doc="```"]
pub static WRITING_HAND: With<Tone,Emoji> = With::new(Emoji::new("writing hand","✍️"), 
	&[
		Emoji::new("writing hand: light skin tone","✍🏻"),
	Emoji::new("writing hand: medium-light skin tone","✍🏼"),
	Emoji::new("writing hand: medium skin tone","✍🏽"),
	Emoji::new("writing hand: medium-dark skin tone","✍🏾"),
	Emoji::new("writing hand: dark skin tone","✍🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&NAIL_POLISH.default, &NAIL_POLISH.tone(Tone::Light), &NAIL_POLISH.tone(Tone::MediumLight), &NAIL_POLISH.tone(Tone::Medium), &NAIL_POLISH.tone(Tone::MediumDark), &NAIL_POLISH.tone(Tone::Dark), ],
&[&SELFIE.default, &SELFIE.tone(Tone::Light), &SELFIE.tone(Tone::MediumLight), &SELFIE.tone(Tone::Medium), &SELFIE.tone(Tone::MediumDark), &SELFIE.tone(Tone::Dark), ],
&[&WRITING_HAND.default, &WRITING_HAND.tone(Tone::Light), &WRITING_HAND.tone(Tone::MediumLight), &WRITING_HAND.tone(Tone::Medium), &WRITING_HAND.tone(Tone::MediumDark), &WRITING_HAND.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&NAIL_POLISH.default, &SELFIE.default, &WRITING_HAND.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::hand_prop

/// hand-single-finger 👇👈👉
pub mod hand_single_finger { // people_and_body::hand_single_finger
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="backhand index pointing down 👇"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN); // 👇 (`U+1F447`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.to_string().as_str(), \"👇\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Light)); // 👇🏻 (`U+1F447 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Light).to_string().as_str(), \"👇🏻\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumLight)); // 👇🏼 (`U+1F447 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumLight).to_string().as_str(), \"👇🏼\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Medium)); // 👇🏽 (`U+1F447 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Medium).to_string().as_str(), \"👇🏽\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumDark)); // 👇🏾 (`U+1F447 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumDark).to_string().as_str(), \"👇🏾\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Dark)); // 👇🏿 (`U+1F447 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Dark).to_string().as_str(), \"👇🏿\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_DOWN: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing down","👇"), 
	&[
		Emoji::new("backhand index pointing down: light skin tone","👇🏻"),
	Emoji::new("backhand index pointing down: medium-light skin tone","👇🏼"),
	Emoji::new("backhand index pointing down: medium skin tone","👇🏽"),
	Emoji::new("backhand index pointing down: medium-dark skin tone","👇🏾"),
	Emoji::new("backhand index pointing down: dark skin tone","👇🏿"),
	]);

#[doc="backhand index pointing left 👈"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_LEFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT); // 👈 (`U+1F448`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.to_string().as_str(), \"👈\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Light)); // 👈🏻 (`U+1F448 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Light).to_string().as_str(), \"👈🏻\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumLight)); // 👈🏼 (`U+1F448 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumLight).to_string().as_str(), \"👈🏼\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Medium)); // 👈🏽 (`U+1F448 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Medium).to_string().as_str(), \"👈🏽\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumDark)); // 👈🏾 (`U+1F448 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumDark).to_string().as_str(), \"👈🏾\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Dark)); // 👈🏿 (`U+1F448 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Dark).to_string().as_str(), \"👈🏿\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_LEFT: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing left","👈"), 
	&[
		Emoji::new("backhand index pointing left: light skin tone","👈🏻"),
	Emoji::new("backhand index pointing left: medium-light skin tone","👈🏼"),
	Emoji::new("backhand index pointing left: medium skin tone","👈🏽"),
	Emoji::new("backhand index pointing left: medium-dark skin tone","👈🏾"),
	Emoji::new("backhand index pointing left: dark skin tone","👈🏿"),
	]);

#[doc="backhand index pointing right 👉"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_RIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT); // 👉 (`U+1F449`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.to_string().as_str(), \"👉\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Light)); // 👉🏻 (`U+1F449 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Light).to_string().as_str(), \"👉🏻\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumLight)); // 👉🏼 (`U+1F449 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumLight).to_string().as_str(), \"👉🏼\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Medium)); // 👉🏽 (`U+1F449 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Medium).to_string().as_str(), \"👉🏽\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumDark)); // 👉🏾 (`U+1F449 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumDark).to_string().as_str(), \"👉🏾\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Dark)); // 👉🏿 (`U+1F449 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Dark).to_string().as_str(), \"👉🏿\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_RIGHT: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing right","👉"), 
	&[
		Emoji::new("backhand index pointing right: light skin tone","👉🏻"),
	Emoji::new("backhand index pointing right: medium-light skin tone","👉🏼"),
	Emoji::new("backhand index pointing right: medium skin tone","👉🏽"),
	Emoji::new("backhand index pointing right: medium-dark skin tone","👉🏾"),
	Emoji::new("backhand index pointing right: dark skin tone","👉🏿"),
	]);

#[doc="backhand index pointing up 👆"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACKHAND_INDEX_POINTING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP); // 👆 (`U+1F446`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.to_string().as_str(), \"👆\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::Light)); // 👆🏻 (`U+1F446 U+1F3FB`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::Light).to_string().as_str(), \"👆🏻\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumLight)); // 👆🏼 (`U+1F446 U+1F3FC`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumLight).to_string().as_str(), \"👆🏼\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::Medium)); // 👆🏽 (`U+1F446 U+1F3FD`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::Medium).to_string().as_str(), \"👆🏽\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumDark)); // 👆🏾 (`U+1F446 U+1F3FE`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumDark).to_string().as_str(), \"👆🏾\");"]#[doc="println!(\"{}\", BACKHAND_INDEX_POINTING_UP.tone(Tone::Dark)); // 👆🏿 (`U+1F446 U+1F3FF`)"] #[doc="# assert_eq!(BACKHAND_INDEX_POINTING_UP.tone(Tone::Dark).to_string().as_str(), \"👆🏿\");"]
#[doc="```"]
pub static BACKHAND_INDEX_POINTING_UP: With<Tone,Emoji> = With::new(Emoji::new("backhand index pointing up","👆"), 
	&[
		Emoji::new("backhand index pointing up: light skin tone","👆🏻"),
	Emoji::new("backhand index pointing up: medium-light skin tone","👆🏼"),
	Emoji::new("backhand index pointing up: medium skin tone","👆🏽"),
	Emoji::new("backhand index pointing up: medium-dark skin tone","👆🏾"),
	Emoji::new("backhand index pointing up: dark skin tone","👆🏿"),
	]);

#[doc="index pointing up ☝️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INDEX_POINTING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INDEX_POINTING_UP); // ☝️ (`U+261D U+FE0F`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.to_string().as_str(), \"☝️\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::Light)); // ☝🏻 (`U+261D U+1F3FB`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::Light).to_string().as_str(), \"☝🏻\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::MediumLight)); // ☝🏼 (`U+261D U+1F3FC`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::MediumLight).to_string().as_str(), \"☝🏼\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::Medium)); // ☝🏽 (`U+261D U+1F3FD`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::Medium).to_string().as_str(), \"☝🏽\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::MediumDark)); // ☝🏾 (`U+261D U+1F3FE`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::MediumDark).to_string().as_str(), \"☝🏾\");"]#[doc="println!(\"{}\", INDEX_POINTING_UP.tone(Tone::Dark)); // ☝🏿 (`U+261D U+1F3FF`)"] #[doc="# assert_eq!(INDEX_POINTING_UP.tone(Tone::Dark).to_string().as_str(), \"☝🏿\");"]
#[doc="```"]
pub static INDEX_POINTING_UP: With<Tone,Emoji> = With::new(Emoji::new("index pointing up","☝️"), 
	&[
		Emoji::new("index pointing up: light skin tone","☝🏻"),
	Emoji::new("index pointing up: medium-light skin tone","☝🏼"),
	Emoji::new("index pointing up: medium skin tone","☝🏽"),
	Emoji::new("index pointing up: medium-dark skin tone","☝🏾"),
	Emoji::new("index pointing up: dark skin tone","☝🏿"),
	]);

#[doc="middle finger 🖕"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MIDDLE_FINGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MIDDLE_FINGER); // 🖕 (`U+1F595`)"] #[doc="# assert_eq!(MIDDLE_FINGER.to_string().as_str(), \"🖕\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::Light)); // 🖕🏻 (`U+1F595 U+1F3FB`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::Light).to_string().as_str(), \"🖕🏻\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::MediumLight)); // 🖕🏼 (`U+1F595 U+1F3FC`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::MediumLight).to_string().as_str(), \"🖕🏼\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::Medium)); // 🖕🏽 (`U+1F595 U+1F3FD`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::Medium).to_string().as_str(), \"🖕🏽\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::MediumDark)); // 🖕🏾 (`U+1F595 U+1F3FE`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::MediumDark).to_string().as_str(), \"🖕🏾\");"]#[doc="println!(\"{}\", MIDDLE_FINGER.tone(Tone::Dark)); // 🖕🏿 (`U+1F595 U+1F3FF`)"] #[doc="# assert_eq!(MIDDLE_FINGER.tone(Tone::Dark).to_string().as_str(), \"🖕🏿\");"]
#[doc="```"]
pub static MIDDLE_FINGER: With<Tone,Emoji> = With::new(Emoji::new("middle finger","🖕"), 
	&[
		Emoji::new("middle finger: light skin tone","🖕🏻"),
	Emoji::new("middle finger: medium-light skin tone","🖕🏼"),
	Emoji::new("middle finger: medium skin tone","🖕🏽"),
	Emoji::new("middle finger: medium-dark skin tone","🖕🏾"),
	Emoji::new("middle finger: dark skin tone","🖕🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BACKHAND_INDEX_POINTING_DOWN.default, &BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Light), &BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumLight), &BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Medium), &BACKHAND_INDEX_POINTING_DOWN.tone(Tone::MediumDark), &BACKHAND_INDEX_POINTING_DOWN.tone(Tone::Dark), ],
&[&BACKHAND_INDEX_POINTING_LEFT.default, &BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Light), &BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumLight), &BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Medium), &BACKHAND_INDEX_POINTING_LEFT.tone(Tone::MediumDark), &BACKHAND_INDEX_POINTING_LEFT.tone(Tone::Dark), ],
&[&BACKHAND_INDEX_POINTING_RIGHT.default, &BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Light), &BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumLight), &BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Medium), &BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::MediumDark), &BACKHAND_INDEX_POINTING_RIGHT.tone(Tone::Dark), ],
&[&BACKHAND_INDEX_POINTING_UP.default, &BACKHAND_INDEX_POINTING_UP.tone(Tone::Light), &BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumLight), &BACKHAND_INDEX_POINTING_UP.tone(Tone::Medium), &BACKHAND_INDEX_POINTING_UP.tone(Tone::MediumDark), &BACKHAND_INDEX_POINTING_UP.tone(Tone::Dark), ],
&[&INDEX_POINTING_UP.default, &INDEX_POINTING_UP.tone(Tone::Light), &INDEX_POINTING_UP.tone(Tone::MediumLight), &INDEX_POINTING_UP.tone(Tone::Medium), &INDEX_POINTING_UP.tone(Tone::MediumDark), &INDEX_POINTING_UP.tone(Tone::Dark), ],
&[&MIDDLE_FINGER.default, &MIDDLE_FINGER.tone(Tone::Light), &MIDDLE_FINGER.tone(Tone::MediumLight), &MIDDLE_FINGER.tone(Tone::Medium), &MIDDLE_FINGER.tone(Tone::MediumDark), &MIDDLE_FINGER.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BACKHAND_INDEX_POINTING_DOWN.default, &BACKHAND_INDEX_POINTING_LEFT.default, &BACKHAND_INDEX_POINTING_RIGHT.default, &BACKHAND_INDEX_POINTING_UP.default, &INDEX_POINTING_UP.default, &MIDDLE_FINGER.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::hand_single_finger

/// hands 👏🙏🤝
pub mod hands { // people_and_body::hands
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="clapping hands 👏"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLAPPING_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLAPPING_HANDS); // 👏 (`U+1F44F`)"] #[doc="# assert_eq!(CLAPPING_HANDS.to_string().as_str(), \"👏\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::Light)); // 👏🏻 (`U+1F44F U+1F3FB`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::Light).to_string().as_str(), \"👏🏻\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::MediumLight)); // 👏🏼 (`U+1F44F U+1F3FC`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"👏🏼\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::Medium)); // 👏🏽 (`U+1F44F U+1F3FD`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::Medium).to_string().as_str(), \"👏🏽\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::MediumDark)); // 👏🏾 (`U+1F44F U+1F3FE`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"👏🏾\");"]#[doc="println!(\"{}\", CLAPPING_HANDS.tone(Tone::Dark)); // 👏🏿 (`U+1F44F U+1F3FF`)"] #[doc="# assert_eq!(CLAPPING_HANDS.tone(Tone::Dark).to_string().as_str(), \"👏🏿\");"]
#[doc="```"]
pub static CLAPPING_HANDS: With<Tone,Emoji> = With::new(Emoji::new("clapping hands","👏"), 
	&[
		Emoji::new("clapping hands: light skin tone","👏🏻"),
	Emoji::new("clapping hands: medium-light skin tone","👏🏼"),
	Emoji::new("clapping hands: medium skin tone","👏🏽"),
	Emoji::new("clapping hands: medium-dark skin tone","👏🏾"),
	Emoji::new("clapping hands: dark skin tone","👏🏿"),
	]);

#[doc="folded hands 🙏"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOLDED_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOLDED_HANDS); // 🙏 (`U+1F64F`)"] #[doc="# assert_eq!(FOLDED_HANDS.to_string().as_str(), \"🙏\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::Light)); // 🙏🏻 (`U+1F64F U+1F3FB`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::Light).to_string().as_str(), \"🙏🏻\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::MediumLight)); // 🙏🏼 (`U+1F64F U+1F3FC`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"🙏🏼\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::Medium)); // 🙏🏽 (`U+1F64F U+1F3FD`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::Medium).to_string().as_str(), \"🙏🏽\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::MediumDark)); // 🙏🏾 (`U+1F64F U+1F3FE`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"🙏🏾\");"]#[doc="println!(\"{}\", FOLDED_HANDS.tone(Tone::Dark)); // 🙏🏿 (`U+1F64F U+1F3FF`)"] #[doc="# assert_eq!(FOLDED_HANDS.tone(Tone::Dark).to_string().as_str(), \"🙏🏿\");"]
#[doc="```"]
pub static FOLDED_HANDS: With<Tone,Emoji> = With::new(Emoji::new("folded hands","🙏"), 
	&[
		Emoji::new("folded hands: light skin tone","🙏🏻"),
	Emoji::new("folded hands: medium-light skin tone","🙏🏼"),
	Emoji::new("folded hands: medium skin tone","🙏🏽"),
	Emoji::new("folded hands: medium-dark skin tone","🙏🏾"),
	Emoji::new("folded hands: dark skin tone","🙏🏿"),
	]);

#[doc="handshake 🤝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HANDSHAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HANDSHAKE); // 🤝 (`U+1F91D`)"] #[doc="# assert_eq!(HANDSHAKE.to_string().as_str(), \"🤝\");"]
#[doc="```"]
pub static HANDSHAKE :  Emoji = Emoji::new("handshake", "🤝"); // handshake
#[doc="open hands 👐"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPEN_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPEN_HANDS); // 👐 (`U+1F450`)"] #[doc="# assert_eq!(OPEN_HANDS.to_string().as_str(), \"👐\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::Light)); // 👐🏻 (`U+1F450 U+1F3FB`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::Light).to_string().as_str(), \"👐🏻\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::MediumLight)); // 👐🏼 (`U+1F450 U+1F3FC`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"👐🏼\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::Medium)); // 👐🏽 (`U+1F450 U+1F3FD`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::Medium).to_string().as_str(), \"👐🏽\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::MediumDark)); // 👐🏾 (`U+1F450 U+1F3FE`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"👐🏾\");"]#[doc="println!(\"{}\", OPEN_HANDS.tone(Tone::Dark)); // 👐🏿 (`U+1F450 U+1F3FF`)"] #[doc="# assert_eq!(OPEN_HANDS.tone(Tone::Dark).to_string().as_str(), \"👐🏿\");"]
#[doc="```"]
pub static OPEN_HANDS: With<Tone,Emoji> = With::new(Emoji::new("open hands","👐"), 
	&[
		Emoji::new("open hands: light skin tone","👐🏻"),
	Emoji::new("open hands: medium-light skin tone","👐🏼"),
	Emoji::new("open hands: medium skin tone","👐🏽"),
	Emoji::new("open hands: medium-dark skin tone","👐🏾"),
	Emoji::new("open hands: dark skin tone","👐🏿"),
	]);

#[doc="palms up together 🤲"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PALMS_UP_TOGETHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PALMS_UP_TOGETHER); // 🤲 (`U+1F932`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.to_string().as_str(), \"🤲\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::Light)); // 🤲🏻 (`U+1F932 U+1F3FB`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::Light).to_string().as_str(), \"🤲🏻\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::MediumLight)); // 🤲🏼 (`U+1F932 U+1F3FC`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::MediumLight).to_string().as_str(), \"🤲🏼\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::Medium)); // 🤲🏽 (`U+1F932 U+1F3FD`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::Medium).to_string().as_str(), \"🤲🏽\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::MediumDark)); // 🤲🏾 (`U+1F932 U+1F3FE`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::MediumDark).to_string().as_str(), \"🤲🏾\");"]#[doc="println!(\"{}\", PALMS_UP_TOGETHER.tone(Tone::Dark)); // 🤲🏿 (`U+1F932 U+1F3FF`)"] #[doc="# assert_eq!(PALMS_UP_TOGETHER.tone(Tone::Dark).to_string().as_str(), \"🤲🏿\");"]
#[doc="```"]
pub static PALMS_UP_TOGETHER: With<Tone,Emoji> = With::new(Emoji::new("palms up together","🤲"), 
	&[
		Emoji::new("palms up together: light skin tone","🤲🏻"),
	Emoji::new("palms up together: medium-light skin tone","🤲🏼"),
	Emoji::new("palms up together: medium skin tone","🤲🏽"),
	Emoji::new("palms up together: medium-dark skin tone","🤲🏾"),
	Emoji::new("palms up together: dark skin tone","🤲🏿"),
	]);

#[doc="raising hands 🙌"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAISING_HANDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAISING_HANDS); // 🙌 (`U+1F64C`)"] #[doc="# assert_eq!(RAISING_HANDS.to_string().as_str(), \"🙌\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::Light)); // 🙌🏻 (`U+1F64C U+1F3FB`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::Light).to_string().as_str(), \"🙌🏻\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::MediumLight)); // 🙌🏼 (`U+1F64C U+1F3FC`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::MediumLight).to_string().as_str(), \"🙌🏼\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::Medium)); // 🙌🏽 (`U+1F64C U+1F3FD`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::Medium).to_string().as_str(), \"🙌🏽\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::MediumDark)); // 🙌🏾 (`U+1F64C U+1F3FE`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::MediumDark).to_string().as_str(), \"🙌🏾\");"]#[doc="println!(\"{}\", RAISING_HANDS.tone(Tone::Dark)); // 🙌🏿 (`U+1F64C U+1F3FF`)"] #[doc="# assert_eq!(RAISING_HANDS.tone(Tone::Dark).to_string().as_str(), \"🙌🏿\");"]
#[doc="```"]
pub static RAISING_HANDS: With<Tone,Emoji> = With::new(Emoji::new("raising hands","🙌"), 
	&[
		Emoji::new("raising hands: light skin tone","🙌🏻"),
	Emoji::new("raising hands: medium-light skin tone","🙌🏼"),
	Emoji::new("raising hands: medium skin tone","🙌🏽"),
	Emoji::new("raising hands: medium-dark skin tone","🙌🏾"),
	Emoji::new("raising hands: dark skin tone","🙌🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CLAPPING_HANDS.default, &CLAPPING_HANDS.tone(Tone::Light), &CLAPPING_HANDS.tone(Tone::MediumLight), &CLAPPING_HANDS.tone(Tone::Medium), &CLAPPING_HANDS.tone(Tone::MediumDark), &CLAPPING_HANDS.tone(Tone::Dark), ],
&[&FOLDED_HANDS.default, &FOLDED_HANDS.tone(Tone::Light), &FOLDED_HANDS.tone(Tone::MediumLight), &FOLDED_HANDS.tone(Tone::Medium), &FOLDED_HANDS.tone(Tone::MediumDark), &FOLDED_HANDS.tone(Tone::Dark), ],
&[&HANDSHAKE, ],
&[&OPEN_HANDS.default, &OPEN_HANDS.tone(Tone::Light), &OPEN_HANDS.tone(Tone::MediumLight), &OPEN_HANDS.tone(Tone::Medium), &OPEN_HANDS.tone(Tone::MediumDark), &OPEN_HANDS.tone(Tone::Dark), ],
&[&PALMS_UP_TOGETHER.default, &PALMS_UP_TOGETHER.tone(Tone::Light), &PALMS_UP_TOGETHER.tone(Tone::MediumLight), &PALMS_UP_TOGETHER.tone(Tone::Medium), &PALMS_UP_TOGETHER.tone(Tone::MediumDark), &PALMS_UP_TOGETHER.tone(Tone::Dark), ],
&[&RAISING_HANDS.default, &RAISING_HANDS.tone(Tone::Light), &RAISING_HANDS.tone(Tone::MediumLight), &RAISING_HANDS.tone(Tone::Medium), &RAISING_HANDS.tone(Tone::MediumDark), &RAISING_HANDS.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CLAPPING_HANDS.default, &FOLDED_HANDS.default, &HANDSHAKE, &OPEN_HANDS.default, &PALMS_UP_TOGETHER.default, &RAISING_HANDS.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::hands

/// person 👶👦🧒
pub mod person { // people_and_body::person
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="baby 👶"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY); // 👶 (`U+1F476`)"] #[doc="# assert_eq!(BABY.to_string().as_str(), \"👶\");"]#[doc="println!(\"{}\", BABY.tone(Tone::Light)); // 👶🏻 (`U+1F476 U+1F3FB`)"] #[doc="# assert_eq!(BABY.tone(Tone::Light).to_string().as_str(), \"👶🏻\");"]#[doc="println!(\"{}\", BABY.tone(Tone::MediumLight)); // 👶🏼 (`U+1F476 U+1F3FC`)"] #[doc="# assert_eq!(BABY.tone(Tone::MediumLight).to_string().as_str(), \"👶🏼\");"]#[doc="println!(\"{}\", BABY.tone(Tone::Medium)); // 👶🏽 (`U+1F476 U+1F3FD`)"] #[doc="# assert_eq!(BABY.tone(Tone::Medium).to_string().as_str(), \"👶🏽\");"]#[doc="println!(\"{}\", BABY.tone(Tone::MediumDark)); // 👶🏾 (`U+1F476 U+1F3FE`)"] #[doc="# assert_eq!(BABY.tone(Tone::MediumDark).to_string().as_str(), \"👶🏾\");"]#[doc="println!(\"{}\", BABY.tone(Tone::Dark)); // 👶🏿 (`U+1F476 U+1F3FF`)"] #[doc="# assert_eq!(BABY.tone(Tone::Dark).to_string().as_str(), \"👶🏿\");"]
#[doc="```"]
pub static BABY: With<Tone,Emoji> = With::new(Emoji::new("baby","👶"), 
	&[
		Emoji::new("baby: light skin tone","👶🏻"),
	Emoji::new("baby: medium-light skin tone","👶🏼"),
	Emoji::new("baby: medium skin tone","👶🏽"),
	Emoji::new("baby: medium-dark skin tone","👶🏾"),
	Emoji::new("baby: dark skin tone","👶🏿"),
	]);

#[doc="boy 👦"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOY); // 👦 (`U+1F466`)"] #[doc="# assert_eq!(BOY.to_string().as_str(), \"👦\");"]#[doc="println!(\"{}\", BOY.tone(Tone::Light)); // 👦🏻 (`U+1F466 U+1F3FB`)"] #[doc="# assert_eq!(BOY.tone(Tone::Light).to_string().as_str(), \"👦🏻\");"]#[doc="println!(\"{}\", BOY.tone(Tone::MediumLight)); // 👦🏼 (`U+1F466 U+1F3FC`)"] #[doc="# assert_eq!(BOY.tone(Tone::MediumLight).to_string().as_str(), \"👦🏼\");"]#[doc="println!(\"{}\", BOY.tone(Tone::Medium)); // 👦🏽 (`U+1F466 U+1F3FD`)"] #[doc="# assert_eq!(BOY.tone(Tone::Medium).to_string().as_str(), \"👦🏽\");"]#[doc="println!(\"{}\", BOY.tone(Tone::MediumDark)); // 👦🏾 (`U+1F466 U+1F3FE`)"] #[doc="# assert_eq!(BOY.tone(Tone::MediumDark).to_string().as_str(), \"👦🏾\");"]#[doc="println!(\"{}\", BOY.tone(Tone::Dark)); // 👦🏿 (`U+1F466 U+1F3FF`)"] #[doc="# assert_eq!(BOY.tone(Tone::Dark).to_string().as_str(), \"👦🏿\");"]
#[doc="```"]
pub static BOY: With<Tone,Emoji> = With::new(Emoji::new("boy","👦"), 
	&[
		Emoji::new("boy: light skin tone","👦🏻"),
	Emoji::new("boy: medium-light skin tone","👦🏼"),
	Emoji::new("boy: medium skin tone","👦🏽"),
	Emoji::new("boy: medium-dark skin tone","👦🏾"),
	Emoji::new("boy: dark skin tone","👦🏿"),
	]);

#[doc="child 🧒"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHILD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHILD); // 🧒 (`U+1F9D2`)"] #[doc="# assert_eq!(CHILD.to_string().as_str(), \"🧒\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::Light)); // 🧒🏻 (`U+1F9D2 U+1F3FB`)"] #[doc="# assert_eq!(CHILD.tone(Tone::Light).to_string().as_str(), \"🧒🏻\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::MediumLight)); // 🧒🏼 (`U+1F9D2 U+1F3FC`)"] #[doc="# assert_eq!(CHILD.tone(Tone::MediumLight).to_string().as_str(), \"🧒🏼\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::Medium)); // 🧒🏽 (`U+1F9D2 U+1F3FD`)"] #[doc="# assert_eq!(CHILD.tone(Tone::Medium).to_string().as_str(), \"🧒🏽\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::MediumDark)); // 🧒🏾 (`U+1F9D2 U+1F3FE`)"] #[doc="# assert_eq!(CHILD.tone(Tone::MediumDark).to_string().as_str(), \"🧒🏾\");"]#[doc="println!(\"{}\", CHILD.tone(Tone::Dark)); // 🧒🏿 (`U+1F9D2 U+1F3FF`)"] #[doc="# assert_eq!(CHILD.tone(Tone::Dark).to_string().as_str(), \"🧒🏿\");"]
#[doc="```"]
pub static CHILD: With<Tone,Emoji> = With::new(Emoji::new("child","🧒"), 
	&[
		Emoji::new("child: light skin tone","🧒🏻"),
	Emoji::new("child: medium-light skin tone","🧒🏼"),
	Emoji::new("child: medium skin tone","🧒🏽"),
	Emoji::new("child: medium-dark skin tone","🧒🏾"),
	Emoji::new("child: dark skin tone","🧒🏿"),
	]);

#[doc="girl 👧"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GIRL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GIRL); // 👧 (`U+1F467`)"] #[doc="# assert_eq!(GIRL.to_string().as_str(), \"👧\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::Light)); // 👧🏻 (`U+1F467 U+1F3FB`)"] #[doc="# assert_eq!(GIRL.tone(Tone::Light).to_string().as_str(), \"👧🏻\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::MediumLight)); // 👧🏼 (`U+1F467 U+1F3FC`)"] #[doc="# assert_eq!(GIRL.tone(Tone::MediumLight).to_string().as_str(), \"👧🏼\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::Medium)); // 👧🏽 (`U+1F467 U+1F3FD`)"] #[doc="# assert_eq!(GIRL.tone(Tone::Medium).to_string().as_str(), \"👧🏽\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::MediumDark)); // 👧🏾 (`U+1F467 U+1F3FE`)"] #[doc="# assert_eq!(GIRL.tone(Tone::MediumDark).to_string().as_str(), \"👧🏾\");"]#[doc="println!(\"{}\", GIRL.tone(Tone::Dark)); // 👧🏿 (`U+1F467 U+1F3FF`)"] #[doc="# assert_eq!(GIRL.tone(Tone::Dark).to_string().as_str(), \"👧🏿\");"]
#[doc="```"]
pub static GIRL: With<Tone,Emoji> = With::new(Emoji::new("girl","👧"), 
	&[
		Emoji::new("girl: light skin tone","👧🏻"),
	Emoji::new("girl: medium-light skin tone","👧🏼"),
	Emoji::new("girl: medium skin tone","👧🏽"),
	Emoji::new("girl: medium-dark skin tone","👧🏾"),
	Emoji::new("girl: dark skin tone","👧🏿"),
	]);

#[doc="older person 🧓"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLDER_PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLDER_PERSON); // 🧓 (`U+1F9D3`)"] #[doc="# assert_eq!(OLDER_PERSON.to_string().as_str(), \"🧓\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::Light)); // 🧓🏻 (`U+1F9D3 U+1F3FB`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::Light).to_string().as_str(), \"🧓🏻\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::MediumLight)); // 🧓🏼 (`U+1F9D3 U+1F3FC`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::MediumLight).to_string().as_str(), \"🧓🏼\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::Medium)); // 🧓🏽 (`U+1F9D3 U+1F3FD`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::Medium).to_string().as_str(), \"🧓🏽\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::MediumDark)); // 🧓🏾 (`U+1F9D3 U+1F3FE`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::MediumDark).to_string().as_str(), \"🧓🏾\");"]#[doc="println!(\"{}\", OLDER_PERSON.tone(Tone::Dark)); // 🧓🏿 (`U+1F9D3 U+1F3FF`)"] #[doc="# assert_eq!(OLDER_PERSON.tone(Tone::Dark).to_string().as_str(), \"🧓🏿\");"]
#[doc="```"]
pub static OLDER_PERSON: With<Tone,Emoji> = With::new(Emoji::new("older person","🧓"), 
	&[
		Emoji::new("older person: light skin tone","🧓🏻"),
	Emoji::new("older person: medium-light skin tone","🧓🏼"),
	Emoji::new("older person: medium skin tone","🧓🏽"),
	Emoji::new("older person: medium-dark skin tone","🧓🏾"),
	Emoji::new("older person: dark skin tone","🧓🏿"),
	]);

#[doc="old person 👵👴"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OLD_PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male)); // 👴 (`U+1F474`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).to_string().as_str(), \"👴\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::Light)); // 👴🏻 (`U+1F474 U+1F3FB`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👴🏻\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::MediumLight)); // 👴🏼 (`U+1F474 U+1F3FC`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👴🏼\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::Medium)); // 👴🏽 (`U+1F474 U+1F3FD`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👴🏽\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::MediumDark)); // 👴🏾 (`U+1F474 U+1F3FE`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👴🏾\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Male).tone(Tone::Dark)); // 👴🏿 (`U+1F474 U+1F3FF`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👴🏿\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female)); // 👵 (`U+1F475`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).to_string().as_str(), \"👵\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::Light)); // 👵🏻 (`U+1F475 U+1F3FB`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👵🏻\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::MediumLight)); // 👵🏼 (`U+1F475 U+1F3FC`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👵🏼\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::Medium)); // 👵🏽 (`U+1F475 U+1F3FD`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👵🏽\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::MediumDark)); // 👵🏾 (`U+1F475 U+1F3FE`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👵🏾\");"]#[doc="println!(\"{}\", OLD_PERSON.gender(Gender::Female).tone(Tone::Dark)); // 👵🏿 (`U+1F475 U+1F3FF`)"] #[doc="# assert_eq!(OLD_PERSON.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👵🏿\");"]
#[doc="```"]
pub static OLD_PERSON: WithNoDef<Gender,With<Tone,Emoji>> = WithNoDef::new(
	&[
		With::new(Emoji::new("old man","👴"), 
	&[
		Emoji::new("old man: light skin tone","👴🏻"),
	Emoji::new("old man: medium-light skin tone","👴🏼"),
	Emoji::new("old man: medium skin tone","👴🏽"),
	Emoji::new("old man: medium-dark skin tone","👴🏾"),
	Emoji::new("old man: dark skin tone","👴🏿"),
	]),
	With::new(Emoji::new("old woman","👵"), 
	&[
		Emoji::new("old woman: light skin tone","👵🏻"),
	Emoji::new("old woman: medium-light skin tone","👵🏼"),
	Emoji::new("old woman: medium skin tone","👵🏽"),
	Emoji::new("old woman: medium-dark skin tone","👵🏾"),
	Emoji::new("old woman: dark skin tone","👵🏿"),
	]),
	]);

#[doc="person 🧑"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON); // 🧑 (`U+1F9D1`)"] #[doc="# assert_eq!(PERSON.to_string().as_str(), \"🧑\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::Light)); // 🧑🏻 (`U+1F9D1 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.tone(Tone::Light).to_string().as_str(), \"🧑🏻\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::MediumLight)); // 🧑🏼 (`U+1F9D1 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::Medium)); // 🧑🏽 (`U+1F9D1 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.tone(Tone::Medium).to_string().as_str(), \"🧑🏽\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::MediumDark)); // 🧑🏾 (`U+1F9D1 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾\");"]#[doc="println!(\"{}\", PERSON.tone(Tone::Dark)); // 🧑🏿 (`U+1F9D1 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.tone(Tone::Dark).to_string().as_str(), \"🧑🏿\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male)); // 👨 (`U+1F468`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).to_string().as_str(), \"👨\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::Light)); // 👨🏻 (`U+1F468 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼 (`U+1F468 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽 (`U+1F468 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾 (`U+1F468 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿 (`U+1F468 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female)); // 👩 (`U+1F469`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).to_string().as_str(), \"👩\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::Light)); // 👩🏻 (`U+1F469 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼 (`U+1F469 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽 (`U+1F469 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾 (`U+1F469 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾\");"]#[doc="println!(\"{}\", PERSON.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿 (`U+1F469 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard)); // 🧔 (`U+1F9D4`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).to_string().as_str(), \"🧔\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::Light)); // 🧔🏻 (`U+1F9D4 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::Light).to_string().as_str(), \"🧔🏻\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::MediumLight)); // 🧔🏼 (`U+1F9D4 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::MediumLight).to_string().as_str(), \"🧔🏼\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::Medium)); // 🧔🏽 (`U+1F9D4 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::Medium).to_string().as_str(), \"🧔🏽\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::MediumDark)); // 🧔🏾 (`U+1F9D4 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::MediumDark).to_string().as_str(), \"🧔🏾\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).tone(Tone::Dark)); // 🧔🏿 (`U+1F9D4 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).tone(Tone::Dark).to_string().as_str(), \"🧔🏿\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male)); // 🧔‍♂️ (`U+1F9D4 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).to_string().as_str(), \"🧔‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Light)); // 🧔🏻‍♂️ (`U+1F9D4 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧔🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumLight)); // 🧔🏼‍♂️ (`U+1F9D4 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧔🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Medium)); // 🧔🏽‍♂️ (`U+1F9D4 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧔🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumDark)); // 🧔🏾‍♂️ (`U+1F9D4 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧔🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Dark)); // 🧔🏿‍♂️ (`U+1F9D4 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧔🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female)); // 🧔‍♀️ (`U+1F9D4 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).to_string().as_str(), \"🧔‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Light)); // 🧔🏻‍♀️ (`U+1F9D4 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧔🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumLight)); // 🧔🏼‍♀️ (`U+1F9D4 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧔🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Medium)); // 🧔🏽‍♀️ (`U+1F9D4 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧔🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumDark)); // 🧔🏾‍♀️ (`U+1F9D4 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧔🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Dark)); // 🧔🏿‍♀️ (`U+1F9D4 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧔🏿‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond)); // 👱 (`U+1F471`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).to_string().as_str(), \"👱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::Light)); // 👱🏻 (`U+1F471 U+1F3FB`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::Light).to_string().as_str(), \"👱🏻\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::MediumLight)); // 👱🏼 (`U+1F471 U+1F3FC`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::MediumLight).to_string().as_str(), \"👱🏼\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::Medium)); // 👱🏽 (`U+1F471 U+1F3FD`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::Medium).to_string().as_str(), \"👱🏽\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::MediumDark)); // 👱🏾 (`U+1F471 U+1F3FE`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::MediumDark).to_string().as_str(), \"👱🏾\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).tone(Tone::Dark)); // 👱🏿 (`U+1F471 U+1F3FF`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).tone(Tone::Dark).to_string().as_str(), \"👱🏿\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male)); // 👱‍♂️ (`U+1F471 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).to_string().as_str(), \"👱‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Light)); // 👱🏻‍♂️ (`U+1F471 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👱🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumLight)); // 👱🏼‍♂️ (`U+1F471 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👱🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Medium)); // 👱🏽‍♂️ (`U+1F471 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👱🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumDark)); // 👱🏾‍♂️ (`U+1F471 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👱🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Dark)); // 👱🏿‍♂️ (`U+1F471 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👱🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female)); // 👱‍♀️ (`U+1F471 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).to_string().as_str(), \"👱‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Light)); // 👱🏻‍♀️ (`U+1F471 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👱🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumLight)); // 👱🏼‍♀️ (`U+1F471 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👱🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Medium)); // 👱🏽‍♀️ (`U+1F471 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👱🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumDark)); // 👱🏾‍♀️ (`U+1F471 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👱🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Dark)); // 👱🏿‍♀️ (`U+1F471 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👱🏿‍♀️\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red)); // 🧑‍🦰 (`U+1F9D1 U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).to_string().as_str(), \"🧑‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::Light)); // 🧑🏻‍🦰 (`U+1F9D1 U+1F3FB U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::MediumLight)); // 🧑🏼‍🦰 (`U+1F9D1 U+1F3FC U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::Medium)); // 🧑🏽‍🦰 (`U+1F9D1 U+1F3FD U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::MediumDark)); // 🧑🏾‍🦰 (`U+1F9D1 U+1F3FE U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).tone(Tone::Dark)); // 🧑🏿‍🦰 (`U+1F9D1 U+1F3FF U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male)); // 👨‍🦰 (`U+1F468 U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).to_string().as_str(), \"👨‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦰 (`U+1F468 U+1F3FB U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦰 (`U+1F468 U+1F3FC U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦰 (`U+1F468 U+1F3FD U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦰 (`U+1F468 U+1F3FE U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦰 (`U+1F468 U+1F3FF U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female)); // 👩‍🦰 (`U+1F469 U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).to_string().as_str(), \"👩‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦰 (`U+1F469 U+1F3FB U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦰 (`U+1F469 U+1F3FC U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦰 (`U+1F469 U+1F3FD U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦰 (`U+1F469 U+1F3FE U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦰 (`U+1F469 U+1F3FF U+200D U+1F9B0`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦰\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly)); // 🧑‍🦱 (`U+1F9D1 U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).to_string().as_str(), \"🧑‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::Light)); // 🧑🏻‍🦱 (`U+1F9D1 U+1F3FB U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::MediumLight)); // 🧑🏼‍🦱 (`U+1F9D1 U+1F3FC U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::Medium)); // 🧑🏽‍🦱 (`U+1F9D1 U+1F3FD U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::MediumDark)); // 🧑🏾‍🦱 (`U+1F9D1 U+1F3FE U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).tone(Tone::Dark)); // 🧑🏿‍🦱 (`U+1F9D1 U+1F3FF U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male)); // 👨‍🦱 (`U+1F468 U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).to_string().as_str(), \"👨‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦱 (`U+1F468 U+1F3FB U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦱 (`U+1F468 U+1F3FC U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦱 (`U+1F468 U+1F3FD U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦱 (`U+1F468 U+1F3FE U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦱 (`U+1F468 U+1F3FF U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female)); // 👩‍🦱 (`U+1F469 U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).to_string().as_str(), \"👩‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦱 (`U+1F469 U+1F3FB U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦱 (`U+1F469 U+1F3FC U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦱 (`U+1F469 U+1F3FD U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦱 (`U+1F469 U+1F3FE U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦱 (`U+1F469 U+1F3FF U+200D U+1F9B1`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦱\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White)); // 🧑‍🦳 (`U+1F9D1 U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).to_string().as_str(), \"🧑‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::Light)); // 🧑🏻‍🦳 (`U+1F9D1 U+1F3FB U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::MediumLight)); // 🧑🏼‍🦳 (`U+1F9D1 U+1F3FC U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::Medium)); // 🧑🏽‍🦳 (`U+1F9D1 U+1F3FD U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::MediumDark)); // 🧑🏾‍🦳 (`U+1F9D1 U+1F3FE U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).tone(Tone::Dark)); // 🧑🏿‍🦳 (`U+1F9D1 U+1F3FF U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male)); // 👨‍🦳 (`U+1F468 U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).to_string().as_str(), \"👨‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦳 (`U+1F468 U+1F3FB U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦳 (`U+1F468 U+1F3FC U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦳 (`U+1F468 U+1F3FD U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦳 (`U+1F468 U+1F3FE U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦳 (`U+1F468 U+1F3FF U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female)); // 👩‍🦳 (`U+1F469 U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).to_string().as_str(), \"👩‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦳 (`U+1F469 U+1F3FB U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦳 (`U+1F469 U+1F3FC U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦳 (`U+1F469 U+1F3FD U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦳 (`U+1F469 U+1F3FE U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦳 (`U+1F469 U+1F3FF U+200D U+1F9B3`)"] #[doc="# assert_eq!(PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦳\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald)); // 🧑‍🦲 (`U+1F9D1 U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).to_string().as_str(), \"🧑‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::Light)); // 🧑🏻‍🦲 (`U+1F9D1 U+1F3FB U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::MediumLight)); // 🧑🏼‍🦲 (`U+1F9D1 U+1F3FC U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::Medium)); // 🧑🏽‍🦲 (`U+1F9D1 U+1F3FD U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::MediumDark)); // 🧑🏾‍🦲 (`U+1F9D1 U+1F3FE U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).tone(Tone::Dark)); // 🧑🏿‍🦲 (`U+1F9D1 U+1F3FF U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male)); // 👨‍🦲 (`U+1F468 U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).to_string().as_str(), \"👨‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦲 (`U+1F468 U+1F3FB U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦲 (`U+1F468 U+1F3FC U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦲 (`U+1F468 U+1F3FD U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦲 (`U+1F468 U+1F3FE U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦲 (`U+1F468 U+1F3FF U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female)); // 👩‍🦲 (`U+1F469 U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).to_string().as_str(), \"👩‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦲 (`U+1F469 U+1F3FB U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦲 (`U+1F469 U+1F3FC U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦲 (`U+1F469 U+1F3FD U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦲 (`U+1F469 U+1F3FE U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦲\");"]#[doc="println!(\"{}\", PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦲 (`U+1F469 U+1F3FF U+200D U+1F9B2`)"] #[doc="# assert_eq!(PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦲\");"]
#[doc="```"]
pub static PERSON: With<Hair,With<Gender,With<Tone,Emoji>>> = With::new(With::new(With::new(Emoji::new("person","🧑"), 
	&[
		Emoji::new("person: light skin tone","🧑🏻"),
	Emoji::new("person: medium-light skin tone","🧑🏼"),
	Emoji::new("person: medium skin tone","🧑🏽"),
	Emoji::new("person: medium-dark skin tone","🧑🏾"),
	Emoji::new("person: dark skin tone","🧑🏿"),
	]), 
	&[
		With::new(Emoji::new("man","👨"), 
	&[
		Emoji::new("man: light skin tone","👨🏻"),
	Emoji::new("man: medium-light skin tone","👨🏼"),
	Emoji::new("man: medium skin tone","👨🏽"),
	Emoji::new("man: medium-dark skin tone","👨🏾"),
	Emoji::new("man: dark skin tone","👨🏿"),
	]),
	With::new(Emoji::new("woman","👩"), 
	&[
		Emoji::new("woman: light skin tone","👩🏻"),
	Emoji::new("woman: medium-light skin tone","👩🏼"),
	Emoji::new("woman: medium skin tone","👩🏽"),
	Emoji::new("woman: medium-dark skin tone","👩🏾"),
	Emoji::new("woman: dark skin tone","👩🏿"),
	]),
	]), 
	&[
		With::new(With::new(Emoji::new("person: beard","🧔"), 
	&[
		Emoji::new("person: light skin tone, beard","🧔🏻"),
	Emoji::new("person: medium-light skin tone, beard","🧔🏼"),
	Emoji::new("person: medium skin tone, beard","🧔🏽"),
	Emoji::new("person: medium-dark skin tone, beard","🧔🏾"),
	Emoji::new("person: dark skin tone, beard","🧔🏿"),
	]), 
	&[
		With::new(Emoji::new("man: beard","🧔‍♂️"), 
	&[
		Emoji::new("man: light skin tone, beard","🧔🏻‍♂️"),
	Emoji::new("man: medium-light skin tone, beard","🧔🏼‍♂️"),
	Emoji::new("man: medium skin tone, beard","🧔🏽‍♂️"),
	Emoji::new("man: medium-dark skin tone, beard","🧔🏾‍♂️"),
	Emoji::new("man: dark skin tone, beard","🧔🏿‍♂️"),
	]),
	With::new(Emoji::new("woman: beard","🧔‍♀️"), 
	&[
		Emoji::new("woman: light skin tone, beard","🧔🏻‍♀️"),
	Emoji::new("woman: medium-light skin tone, beard","🧔🏼‍♀️"),
	Emoji::new("woman: medium skin tone, beard","🧔🏽‍♀️"),
	Emoji::new("woman: medium-dark skin tone, beard","🧔🏾‍♀️"),
	Emoji::new("woman: dark skin tone, beard","🧔🏿‍♀️"),
	]),
	]),
	With::new(With::new(Emoji::new("person: blond hair","👱"), 
	&[
		Emoji::new("person: light skin tone, blond hair","👱🏻"),
	Emoji::new("person: medium-light skin tone, blond hair","👱🏼"),
	Emoji::new("person: medium skin tone, blond hair","👱🏽"),
	Emoji::new("person: medium-dark skin tone, blond hair","👱🏾"),
	Emoji::new("person: dark skin tone, blond hair","👱🏿"),
	]), 
	&[
		With::new(Emoji::new("man: blond hair","👱‍♂️"), 
	&[
		Emoji::new("man: light skin tone, blond hair","👱🏻‍♂️"),
	Emoji::new("man: medium-light skin tone, blond hair","👱🏼‍♂️"),
	Emoji::new("man: medium skin tone, blond hair","👱🏽‍♂️"),
	Emoji::new("man: medium-dark skin tone, blond hair","👱🏾‍♂️"),
	Emoji::new("man: dark skin tone, blond hair","👱🏿‍♂️"),
	]),
	With::new(Emoji::new("woman: blond hair","👱‍♀️"), 
	&[
		Emoji::new("woman: light skin tone, blond hair","👱🏻‍♀️"),
	Emoji::new("woman: medium-light skin tone, blond hair","👱🏼‍♀️"),
	Emoji::new("woman: medium skin tone, blond hair","👱🏽‍♀️"),
	Emoji::new("woman: medium-dark skin tone, blond hair","👱🏾‍♀️"),
	Emoji::new("woman: dark skin tone, blond hair","👱🏿‍♀️"),
	]),
	]),
	With::new(With::new(Emoji::new("person: red hair","🧑‍🦰"), 
	&[
		Emoji::new("person: light skin tone, red hair","🧑🏻‍🦰"),
	Emoji::new("person: medium-light skin tone, red hair","🧑🏼‍🦰"),
	Emoji::new("person: medium skin tone, red hair","🧑🏽‍🦰"),
	Emoji::new("person: medium-dark skin tone, red hair","🧑🏾‍🦰"),
	Emoji::new("person: dark skin tone, red hair","🧑🏿‍🦰"),
	]), 
	&[
		With::new(Emoji::new("man: red hair","👨‍🦰"), 
	&[
		Emoji::new("man: light skin tone, red hair","👨🏻‍🦰"),
	Emoji::new("man: medium-light skin tone, red hair","👨🏼‍🦰"),
	Emoji::new("man: medium skin tone, red hair","👨🏽‍🦰"),
	Emoji::new("man: medium-dark skin tone, red hair","👨🏾‍🦰"),
	Emoji::new("man: dark skin tone, red hair","👨🏿‍🦰"),
	]),
	With::new(Emoji::new("woman: red hair","👩‍🦰"), 
	&[
		Emoji::new("woman: light skin tone, red hair","👩🏻‍🦰"),
	Emoji::new("woman: medium-light skin tone, red hair","👩🏼‍🦰"),
	Emoji::new("woman: medium skin tone, red hair","👩🏽‍🦰"),
	Emoji::new("woman: medium-dark skin tone, red hair","👩🏾‍🦰"),
	Emoji::new("woman: dark skin tone, red hair","👩🏿‍🦰"),
	]),
	]),
	With::new(With::new(Emoji::new("person: curly hair","🧑‍🦱"), 
	&[
		Emoji::new("person: light skin tone, curly hair","🧑🏻‍🦱"),
	Emoji::new("person: medium-light skin tone, curly hair","🧑🏼‍🦱"),
	Emoji::new("person: medium skin tone, curly hair","🧑🏽‍🦱"),
	Emoji::new("person: medium-dark skin tone, curly hair","🧑🏾‍🦱"),
	Emoji::new("person: dark skin tone, curly hair","🧑🏿‍🦱"),
	]), 
	&[
		With::new(Emoji::new("man: curly hair","👨‍🦱"), 
	&[
		Emoji::new("man: light skin tone, curly hair","👨🏻‍🦱"),
	Emoji::new("man: medium-light skin tone, curly hair","👨🏼‍🦱"),
	Emoji::new("man: medium skin tone, curly hair","👨🏽‍🦱"),
	Emoji::new("man: medium-dark skin tone, curly hair","👨🏾‍🦱"),
	Emoji::new("man: dark skin tone, curly hair","👨🏿‍🦱"),
	]),
	With::new(Emoji::new("woman: curly hair","👩‍🦱"), 
	&[
		Emoji::new("woman: light skin tone, curly hair","👩🏻‍🦱"),
	Emoji::new("woman: medium-light skin tone, curly hair","👩🏼‍🦱"),
	Emoji::new("woman: medium skin tone, curly hair","👩🏽‍🦱"),
	Emoji::new("woman: medium-dark skin tone, curly hair","👩🏾‍🦱"),
	Emoji::new("woman: dark skin tone, curly hair","👩🏿‍🦱"),
	]),
	]),
	With::new(With::new(Emoji::new("person: white hair","🧑‍🦳"), 
	&[
		Emoji::new("person: light skin tone, white hair","🧑🏻‍🦳"),
	Emoji::new("person: medium-light skin tone, white hair","🧑🏼‍🦳"),
	Emoji::new("person: medium skin tone, white hair","🧑🏽‍🦳"),
	Emoji::new("person: medium-dark skin tone, white hair","🧑🏾‍🦳"),
	Emoji::new("person: dark skin tone, white hair","🧑🏿‍🦳"),
	]), 
	&[
		With::new(Emoji::new("man: white hair","👨‍🦳"), 
	&[
		Emoji::new("man: light skin tone, white hair","👨🏻‍🦳"),
	Emoji::new("man: medium-light skin tone, white hair","👨🏼‍🦳"),
	Emoji::new("man: medium skin tone, white hair","👨🏽‍🦳"),
	Emoji::new("man: medium-dark skin tone, white hair","👨🏾‍🦳"),
	Emoji::new("man: dark skin tone, white hair","👨🏿‍🦳"),
	]),
	With::new(Emoji::new("woman: white hair","👩‍🦳"), 
	&[
		Emoji::new("woman: light skin tone, white hair","👩🏻‍🦳"),
	Emoji::new("woman: medium-light skin tone, white hair","👩🏼‍🦳"),
	Emoji::new("woman: medium skin tone, white hair","👩🏽‍🦳"),
	Emoji::new("woman: medium-dark skin tone, white hair","👩🏾‍🦳"),
	Emoji::new("woman: dark skin tone, white hair","👩🏿‍🦳"),
	]),
	]),
	With::new(With::new(Emoji::new("person: bald","🧑‍🦲"), 
	&[
		Emoji::new("person: light skin tone, bald","🧑🏻‍🦲"),
	Emoji::new("person: medium-light skin tone, bald","🧑🏼‍🦲"),
	Emoji::new("person: medium skin tone, bald","🧑🏽‍🦲"),
	Emoji::new("person: medium-dark skin tone, bald","🧑🏾‍🦲"),
	Emoji::new("person: dark skin tone, bald","🧑🏿‍🦲"),
	]), 
	&[
		With::new(Emoji::new("man: bald","👨‍🦲"), 
	&[
		Emoji::new("man: light skin tone, bald","👨🏻‍🦲"),
	Emoji::new("man: medium-light skin tone, bald","👨🏼‍🦲"),
	Emoji::new("man: medium skin tone, bald","👨🏽‍🦲"),
	Emoji::new("man: medium-dark skin tone, bald","👨🏾‍🦲"),
	Emoji::new("man: dark skin tone, bald","👨🏿‍🦲"),
	]),
	With::new(Emoji::new("woman: bald","👩‍🦲"), 
	&[
		Emoji::new("woman: light skin tone, bald","👩🏻‍🦲"),
	Emoji::new("woman: medium-light skin tone, bald","👩🏼‍🦲"),
	Emoji::new("woman: medium skin tone, bald","👩🏽‍🦲"),
	Emoji::new("woman: medium-dark skin tone, bald","👩🏾‍🦲"),
	Emoji::new("woman: dark skin tone, bald","👩🏿‍🦲"),
	]),
	]),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BABY.default, &BABY.tone(Tone::Light), &BABY.tone(Tone::MediumLight), &BABY.tone(Tone::Medium), &BABY.tone(Tone::MediumDark), &BABY.tone(Tone::Dark), ],
&[&BOY.default, &BOY.tone(Tone::Light), &BOY.tone(Tone::MediumLight), &BOY.tone(Tone::Medium), &BOY.tone(Tone::MediumDark), &BOY.tone(Tone::Dark), ],
&[&CHILD.default, &CHILD.tone(Tone::Light), &CHILD.tone(Tone::MediumLight), &CHILD.tone(Tone::Medium), &CHILD.tone(Tone::MediumDark), &CHILD.tone(Tone::Dark), ],
&[&GIRL.default, &GIRL.tone(Tone::Light), &GIRL.tone(Tone::MediumLight), &GIRL.tone(Tone::Medium), &GIRL.tone(Tone::MediumDark), &GIRL.tone(Tone::Dark), ],
&[&OLDER_PERSON.default, &OLDER_PERSON.tone(Tone::Light), &OLDER_PERSON.tone(Tone::MediumLight), &OLDER_PERSON.tone(Tone::Medium), &OLDER_PERSON.tone(Tone::MediumDark), &OLDER_PERSON.tone(Tone::Dark), ],
&[&OLD_PERSON.gender(Gender::Male).default, &OLD_PERSON.gender(Gender::Male).tone(Tone::Light), &OLD_PERSON.gender(Gender::Male).tone(Tone::MediumLight), &OLD_PERSON.gender(Gender::Male).tone(Tone::Medium), &OLD_PERSON.gender(Gender::Male).tone(Tone::MediumDark), &OLD_PERSON.gender(Gender::Male).tone(Tone::Dark), &OLD_PERSON.gender(Gender::Female).default, &OLD_PERSON.gender(Gender::Female).tone(Tone::Light), &OLD_PERSON.gender(Gender::Female).tone(Tone::MediumLight), &OLD_PERSON.gender(Gender::Female).tone(Tone::Medium), &OLD_PERSON.gender(Gender::Female).tone(Tone::MediumDark), &OLD_PERSON.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON.default.default.default, &PERSON.default.default.tone(Tone::Light), &PERSON.default.default.tone(Tone::MediumLight), &PERSON.default.default.tone(Tone::Medium), &PERSON.default.default.tone(Tone::MediumDark), &PERSON.default.default.tone(Tone::Dark), &PERSON.default.gender(Gender::Male).default, &PERSON.default.gender(Gender::Male).tone(Tone::Light), &PERSON.default.gender(Gender::Male).tone(Tone::MediumLight), &PERSON.default.gender(Gender::Male).tone(Tone::Medium), &PERSON.default.gender(Gender::Male).tone(Tone::MediumDark), &PERSON.default.gender(Gender::Male).tone(Tone::Dark), &PERSON.default.gender(Gender::Female).default, &PERSON.default.gender(Gender::Female).tone(Tone::Light), &PERSON.default.gender(Gender::Female).tone(Tone::MediumLight), &PERSON.default.gender(Gender::Female).tone(Tone::Medium), &PERSON.default.gender(Gender::Female).tone(Tone::MediumDark), &PERSON.default.gender(Gender::Female).tone(Tone::Dark), &PERSON.hair(Hair::Beard).default.default, &PERSON.hair(Hair::Beard).default.tone(Tone::Light), &PERSON.hair(Hair::Beard).default.tone(Tone::MediumLight), &PERSON.hair(Hair::Beard).default.tone(Tone::Medium), &PERSON.hair(Hair::Beard).default.tone(Tone::MediumDark), &PERSON.hair(Hair::Beard).default.tone(Tone::Dark), &PERSON.hair(Hair::Beard).gender(Gender::Male).default, &PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Light), &PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumLight), &PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Medium), &PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::MediumDark), &PERSON.hair(Hair::Beard).gender(Gender::Male).tone(Tone::Dark), &PERSON.hair(Hair::Beard).gender(Gender::Female).default, &PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Light), &PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumLight), &PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Medium), &PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::MediumDark), &PERSON.hair(Hair::Beard).gender(Gender::Female).tone(Tone::Dark), &PERSON.hair(Hair::Blond).default.default, &PERSON.hair(Hair::Blond).default.tone(Tone::Light), &PERSON.hair(Hair::Blond).default.tone(Tone::MediumLight), &PERSON.hair(Hair::Blond).default.tone(Tone::Medium), &PERSON.hair(Hair::Blond).default.tone(Tone::MediumDark), &PERSON.hair(Hair::Blond).default.tone(Tone::Dark), &PERSON.hair(Hair::Blond).gender(Gender::Male).default, &PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Light), &PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumLight), &PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Medium), &PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::MediumDark), &PERSON.hair(Hair::Blond).gender(Gender::Male).tone(Tone::Dark), &PERSON.hair(Hair::Blond).gender(Gender::Female).default, &PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Light), &PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumLight), &PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Medium), &PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::MediumDark), &PERSON.hair(Hair::Blond).gender(Gender::Female).tone(Tone::Dark), &PERSON.hair(Hair::Red).default.default, &PERSON.hair(Hair::Red).default.tone(Tone::Light), &PERSON.hair(Hair::Red).default.tone(Tone::MediumLight), &PERSON.hair(Hair::Red).default.tone(Tone::Medium), &PERSON.hair(Hair::Red).default.tone(Tone::MediumDark), &PERSON.hair(Hair::Red).default.tone(Tone::Dark), &PERSON.hair(Hair::Red).gender(Gender::Male).default, &PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Light), &PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumLight), &PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Medium), &PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::MediumDark), &PERSON.hair(Hair::Red).gender(Gender::Male).tone(Tone::Dark), &PERSON.hair(Hair::Red).gender(Gender::Female).default, &PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Light), &PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumLight), &PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Medium), &PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::MediumDark), &PERSON.hair(Hair::Red).gender(Gender::Female).tone(Tone::Dark), &PERSON.hair(Hair::Curly).default.default, &PERSON.hair(Hair::Curly).default.tone(Tone::Light), &PERSON.hair(Hair::Curly).default.tone(Tone::MediumLight), &PERSON.hair(Hair::Curly).default.tone(Tone::Medium), &PERSON.hair(Hair::Curly).default.tone(Tone::MediumDark), &PERSON.hair(Hair::Curly).default.tone(Tone::Dark), &PERSON.hair(Hair::Curly).gender(Gender::Male).default, &PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Light), &PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumLight), &PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Medium), &PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::MediumDark), &PERSON.hair(Hair::Curly).gender(Gender::Male).tone(Tone::Dark), &PERSON.hair(Hair::Curly).gender(Gender::Female).default, &PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Light), &PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumLight), &PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Medium), &PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::MediumDark), &PERSON.hair(Hair::Curly).gender(Gender::Female).tone(Tone::Dark), &PERSON.hair(Hair::White).default.default, &PERSON.hair(Hair::White).default.tone(Tone::Light), &PERSON.hair(Hair::White).default.tone(Tone::MediumLight), &PERSON.hair(Hair::White).default.tone(Tone::Medium), &PERSON.hair(Hair::White).default.tone(Tone::MediumDark), &PERSON.hair(Hair::White).default.tone(Tone::Dark), &PERSON.hair(Hair::White).gender(Gender::Male).default, &PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Light), &PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumLight), &PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Medium), &PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::MediumDark), &PERSON.hair(Hair::White).gender(Gender::Male).tone(Tone::Dark), &PERSON.hair(Hair::White).gender(Gender::Female).default, &PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Light), &PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumLight), &PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Medium), &PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::MediumDark), &PERSON.hair(Hair::White).gender(Gender::Female).tone(Tone::Dark), &PERSON.hair(Hair::Bald).default.default, &PERSON.hair(Hair::Bald).default.tone(Tone::Light), &PERSON.hair(Hair::Bald).default.tone(Tone::MediumLight), &PERSON.hair(Hair::Bald).default.tone(Tone::Medium), &PERSON.hair(Hair::Bald).default.tone(Tone::MediumDark), &PERSON.hair(Hair::Bald).default.tone(Tone::Dark), &PERSON.hair(Hair::Bald).gender(Gender::Male).default, &PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Light), &PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumLight), &PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Medium), &PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::MediumDark), &PERSON.hair(Hair::Bald).gender(Gender::Male).tone(Tone::Dark), &PERSON.hair(Hair::Bald).gender(Gender::Female).default, &PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Light), &PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumLight), &PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Medium), &PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::MediumDark), &PERSON.hair(Hair::Bald).gender(Gender::Female).tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BABY.default, &BOY.default, &CHILD.default, &GIRL.default, &OLDER_PERSON.default, &OLD_PERSON.gender(Gender::Female).default, &OLD_PERSON.gender(Gender::Male).default, &PERSON.default.default.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person

/// person-activity 🧗💇💆
pub mod person_activity { // people_and_body::person_activity
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="person climbing 🧗"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_CLIMBING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_CLIMBING); // 🧗 (`U+1F9D7`)"] #[doc="# assert_eq!(PERSON_CLIMBING.to_string().as_str(), \"🧗\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::Light)); // 🧗🏻 (`U+1F9D7 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::Light).to_string().as_str(), \"🧗🏻\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::MediumLight)); // 🧗🏼 (`U+1F9D7 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::MediumLight).to_string().as_str(), \"🧗🏼\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::Medium)); // 🧗🏽 (`U+1F9D7 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::Medium).to_string().as_str(), \"🧗🏽\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::MediumDark)); // 🧗🏾 (`U+1F9D7 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::MediumDark).to_string().as_str(), \"🧗🏾\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.tone(Tone::Dark)); // 🧗🏿 (`U+1F9D7 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_CLIMBING.tone(Tone::Dark).to_string().as_str(), \"🧗🏿\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male)); // 🧗‍♂️ (`U+1F9D7 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).to_string().as_str(), \"🧗‍♂️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Light)); // 🧗🏻‍♂️ (`U+1F9D7 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧗🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumLight)); // 🧗🏼‍♂️ (`U+1F9D7 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧗🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Medium)); // 🧗🏽‍♂️ (`U+1F9D7 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧗🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumDark)); // 🧗🏾‍♂️ (`U+1F9D7 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧗🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Dark)); // 🧗🏿‍♂️ (`U+1F9D7 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧗🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female)); // 🧗‍♀️ (`U+1F9D7 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).to_string().as_str(), \"🧗‍♀️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Light)); // 🧗🏻‍♀️ (`U+1F9D7 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧗🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumLight)); // 🧗🏼‍♀️ (`U+1F9D7 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧗🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Medium)); // 🧗🏽‍♀️ (`U+1F9D7 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧗🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumDark)); // 🧗🏾‍♀️ (`U+1F9D7 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧗🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Dark)); // 🧗🏿‍♀️ (`U+1F9D7 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧗🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_CLIMBING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person climbing","🧗"), 
	&[
		Emoji::new("person climbing: light skin tone","🧗🏻"),
	Emoji::new("person climbing: medium-light skin tone","🧗🏼"),
	Emoji::new("person climbing: medium skin tone","🧗🏽"),
	Emoji::new("person climbing: medium-dark skin tone","🧗🏾"),
	Emoji::new("person climbing: dark skin tone","🧗🏿"),
	]), 
	&[
		With::new(Emoji::new("man climbing","🧗‍♂️"), 
	&[
		Emoji::new("man climbing: light skin tone","🧗🏻‍♂️"),
	Emoji::new("man climbing: medium-light skin tone","🧗🏼‍♂️"),
	Emoji::new("man climbing: medium skin tone","🧗🏽‍♂️"),
	Emoji::new("man climbing: medium-dark skin tone","🧗🏾‍♂️"),
	Emoji::new("man climbing: dark skin tone","🧗🏿‍♂️"),
	]),
	With::new(Emoji::new("woman climbing","🧗‍♀️"), 
	&[
		Emoji::new("woman climbing: light skin tone","🧗🏻‍♀️"),
	Emoji::new("woman climbing: medium-light skin tone","🧗🏼‍♀️"),
	Emoji::new("woman climbing: medium skin tone","🧗🏽‍♀️"),
	Emoji::new("woman climbing: medium-dark skin tone","🧗🏾‍♀️"),
	Emoji::new("woman climbing: dark skin tone","🧗🏿‍♀️"),
	]),
	]);

#[doc="person dancing 💃🕺"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_DANCING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male)); // 🕺 (`U+1F57A`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).to_string().as_str(), \"🕺\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::Light)); // 🕺🏻 (`U+1F57A U+1F3FB`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🕺🏻\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumLight)); // 🕺🏼 (`U+1F57A U+1F3FC`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🕺🏼\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::Medium)); // 🕺🏽 (`U+1F57A U+1F3FD`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🕺🏽\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumDark)); // 🕺🏾 (`U+1F57A U+1F3FE`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🕺🏾\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Male).tone(Tone::Dark)); // 🕺🏿 (`U+1F57A U+1F3FF`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🕺🏿\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female)); // 💃 (`U+1F483`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).to_string().as_str(), \"💃\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::Light)); // 💃🏻 (`U+1F483 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"💃🏻\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumLight)); // 💃🏼 (`U+1F483 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"💃🏼\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::Medium)); // 💃🏽 (`U+1F483 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"💃🏽\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumDark)); // 💃🏾 (`U+1F483 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"💃🏾\");"]#[doc="println!(\"{}\", PERSON_DANCING.gender(Gender::Female).tone(Tone::Dark)); // 💃🏿 (`U+1F483 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_DANCING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"💃🏿\");"]
#[doc="```"]
pub static PERSON_DANCING: WithNoDef<Gender,With<Tone,Emoji>> = WithNoDef::new(
	&[
		With::new(Emoji::new("man dancing","🕺"), 
	&[
		Emoji::new("man dancing: light skin tone","🕺🏻"),
	Emoji::new("man dancing: medium-light skin tone","🕺🏼"),
	Emoji::new("man dancing: medium skin tone","🕺🏽"),
	Emoji::new("man dancing: medium-dark skin tone","🕺🏾"),
	Emoji::new("man dancing: dark skin tone","🕺🏿"),
	]),
	With::new(Emoji::new("woman dancing","💃"), 
	&[
		Emoji::new("woman dancing: light skin tone","💃🏻"),
	Emoji::new("woman dancing: medium-light skin tone","💃🏼"),
	Emoji::new("woman dancing: medium skin tone","💃🏽"),
	Emoji::new("woman dancing: medium-dark skin tone","💃🏾"),
	Emoji::new("woman dancing: dark skin tone","💃🏿"),
	]),
	]);

#[doc="person getting haircut 💇"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GETTING_HAIRCUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT); // 💇 (`U+1F487`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.to_string().as_str(), \"💇\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::Light)); // 💇🏻 (`U+1F487 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::Light).to_string().as_str(), \"💇🏻\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::MediumLight)); // 💇🏼 (`U+1F487 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::MediumLight).to_string().as_str(), \"💇🏼\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::Medium)); // 💇🏽 (`U+1F487 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::Medium).to_string().as_str(), \"💇🏽\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::MediumDark)); // 💇🏾 (`U+1F487 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::MediumDark).to_string().as_str(), \"💇🏾\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.tone(Tone::Dark)); // 💇🏿 (`U+1F487 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.tone(Tone::Dark).to_string().as_str(), \"💇🏿\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male)); // 💇‍♂️ (`U+1F487 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).to_string().as_str(), \"💇‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Light)); // 💇🏻‍♂️ (`U+1F487 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"💇🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumLight)); // 💇🏼‍♂️ (`U+1F487 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"💇🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Medium)); // 💇🏽‍♂️ (`U+1F487 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"💇🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumDark)); // 💇🏾‍♂️ (`U+1F487 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"💇🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Dark)); // 💇🏿‍♂️ (`U+1F487 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"💇🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female)); // 💇‍♀️ (`U+1F487 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).to_string().as_str(), \"💇‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Light)); // 💇🏻‍♀️ (`U+1F487 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"💇🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumLight)); // 💇🏼‍♀️ (`U+1F487 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"💇🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Medium)); // 💇🏽‍♀️ (`U+1F487 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"💇🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumDark)); // 💇🏾‍♀️ (`U+1F487 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"💇🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Dark)); // 💇🏿‍♀️ (`U+1F487 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"💇🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_GETTING_HAIRCUT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person getting haircut","💇"), 
	&[
		Emoji::new("person getting haircut: light skin tone","💇🏻"),
	Emoji::new("person getting haircut: medium-light skin tone","💇🏼"),
	Emoji::new("person getting haircut: medium skin tone","💇🏽"),
	Emoji::new("person getting haircut: medium-dark skin tone","💇🏾"),
	Emoji::new("person getting haircut: dark skin tone","💇🏿"),
	]), 
	&[
		With::new(Emoji::new("man getting haircut","💇‍♂️"), 
	&[
		Emoji::new("man getting haircut: light skin tone","💇🏻‍♂️"),
	Emoji::new("man getting haircut: medium-light skin tone","💇🏼‍♂️"),
	Emoji::new("man getting haircut: medium skin tone","💇🏽‍♂️"),
	Emoji::new("man getting haircut: medium-dark skin tone","💇🏾‍♂️"),
	Emoji::new("man getting haircut: dark skin tone","💇🏿‍♂️"),
	]),
	With::new(Emoji::new("woman getting haircut","💇‍♀️"), 
	&[
		Emoji::new("woman getting haircut: light skin tone","💇🏻‍♀️"),
	Emoji::new("woman getting haircut: medium-light skin tone","💇🏼‍♀️"),
	Emoji::new("woman getting haircut: medium skin tone","💇🏽‍♀️"),
	Emoji::new("woman getting haircut: medium-dark skin tone","💇🏾‍♀️"),
	Emoji::new("woman getting haircut: dark skin tone","💇🏿‍♀️"),
	]),
	]);

#[doc="person getting massage 💆"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GETTING_MASSAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE); // 💆 (`U+1F486`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.to_string().as_str(), \"💆\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::Light)); // 💆🏻 (`U+1F486 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::Light).to_string().as_str(), \"💆🏻\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::MediumLight)); // 💆🏼 (`U+1F486 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::MediumLight).to_string().as_str(), \"💆🏼\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::Medium)); // 💆🏽 (`U+1F486 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::Medium).to_string().as_str(), \"💆🏽\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::MediumDark)); // 💆🏾 (`U+1F486 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::MediumDark).to_string().as_str(), \"💆🏾\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.tone(Tone::Dark)); // 💆🏿 (`U+1F486 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.tone(Tone::Dark).to_string().as_str(), \"💆🏿\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male)); // 💆‍♂️ (`U+1F486 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).to_string().as_str(), \"💆‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Light)); // 💆🏻‍♂️ (`U+1F486 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"💆🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumLight)); // 💆🏼‍♂️ (`U+1F486 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"💆🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Medium)); // 💆🏽‍♂️ (`U+1F486 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"💆🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumDark)); // 💆🏾‍♂️ (`U+1F486 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"💆🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Dark)); // 💆🏿‍♂️ (`U+1F486 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"💆🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female)); // 💆‍♀️ (`U+1F486 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).to_string().as_str(), \"💆‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Light)); // 💆🏻‍♀️ (`U+1F486 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"💆🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumLight)); // 💆🏼‍♀️ (`U+1F486 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"💆🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Medium)); // 💆🏽‍♀️ (`U+1F486 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"💆🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumDark)); // 💆🏾‍♀️ (`U+1F486 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"💆🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Dark)); // 💆🏿‍♀️ (`U+1F486 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"💆🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_GETTING_MASSAGE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person getting massage","💆"), 
	&[
		Emoji::new("person getting massage: light skin tone","💆🏻"),
	Emoji::new("person getting massage: medium-light skin tone","💆🏼"),
	Emoji::new("person getting massage: medium skin tone","💆🏽"),
	Emoji::new("person getting massage: medium-dark skin tone","💆🏾"),
	Emoji::new("person getting massage: dark skin tone","💆🏿"),
	]), 
	&[
		With::new(Emoji::new("man getting massage","💆‍♂️"), 
	&[
		Emoji::new("man getting massage: light skin tone","💆🏻‍♂️"),
	Emoji::new("man getting massage: medium-light skin tone","💆🏼‍♂️"),
	Emoji::new("man getting massage: medium skin tone","💆🏽‍♂️"),
	Emoji::new("man getting massage: medium-dark skin tone","💆🏾‍♂️"),
	Emoji::new("man getting massage: dark skin tone","💆🏿‍♂️"),
	]),
	With::new(Emoji::new("woman getting massage","💆‍♀️"), 
	&[
		Emoji::new("woman getting massage: light skin tone","💆🏻‍♀️"),
	Emoji::new("woman getting massage: medium-light skin tone","💆🏼‍♀️"),
	Emoji::new("woman getting massage: medium skin tone","💆🏽‍♀️"),
	Emoji::new("woman getting massage: medium-dark skin tone","💆🏾‍♀️"),
	Emoji::new("woman getting massage: dark skin tone","💆🏿‍♀️"),
	]),
	]);

#[doc="person in manual wheelchair 🧑‍🦽"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_MANUAL_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR); // 🧑‍🦽 (`U+1F9D1 U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.to_string().as_str(), \"🧑‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Light)); // 🧑🏻‍🦽 (`U+1F9D1 U+1F3FB U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumLight)); // 🧑🏼‍🦽 (`U+1F9D1 U+1F3FC U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Medium)); // 🧑🏽‍🦽 (`U+1F9D1 U+1F3FD U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumDark)); // 🧑🏾‍🦽 (`U+1F9D1 U+1F3FE U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Dark)); // 🧑🏿‍🦽 (`U+1F9D1 U+1F3FF U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male)); // 👨‍🦽 (`U+1F468 U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).to_string().as_str(), \"👨‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦽 (`U+1F468 U+1F3FB U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦽 (`U+1F468 U+1F3FC U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦽 (`U+1F468 U+1F3FD U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦽 (`U+1F468 U+1F3FE U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦽 (`U+1F468 U+1F3FF U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female)); // 👩‍🦽 (`U+1F469 U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).to_string().as_str(), \"👩‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦽 (`U+1F469 U+1F3FB U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦽 (`U+1F469 U+1F3FC U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦽 (`U+1F469 U+1F3FD U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦽 (`U+1F469 U+1F3FE U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦽\");"]#[doc="println!(\"{}\", PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦽 (`U+1F469 U+1F3FF U+200D U+1F9BD`)"] #[doc="# assert_eq!(PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦽\");"]
#[doc="```"]
pub static PERSON_IN_MANUAL_WHEELCHAIR: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in manual wheelchair","🧑‍🦽"), 
	&[
		Emoji::new("person in manual wheelchair: light skin tone","🧑🏻‍🦽"),
	Emoji::new("person in manual wheelchair: medium-light skin tone","🧑🏼‍🦽"),
	Emoji::new("person in manual wheelchair: medium skin tone","🧑🏽‍🦽"),
	Emoji::new("person in manual wheelchair: medium-dark skin tone","🧑🏾‍🦽"),
	Emoji::new("person in manual wheelchair: dark skin tone","🧑🏿‍🦽"),
	]), 
	&[
		With::new(Emoji::new("man in manual wheelchair","👨‍🦽"), 
	&[
		Emoji::new("man in manual wheelchair: light skin tone","👨🏻‍🦽"),
	Emoji::new("man in manual wheelchair: medium-light skin tone","👨🏼‍🦽"),
	Emoji::new("man in manual wheelchair: medium skin tone","👨🏽‍🦽"),
	Emoji::new("man in manual wheelchair: medium-dark skin tone","👨🏾‍🦽"),
	Emoji::new("man in manual wheelchair: dark skin tone","👨🏿‍🦽"),
	]),
	With::new(Emoji::new("woman in manual wheelchair","👩‍🦽"), 
	&[
		Emoji::new("woman in manual wheelchair: light skin tone","👩🏻‍🦽"),
	Emoji::new("woman in manual wheelchair: medium-light skin tone","👩🏼‍🦽"),
	Emoji::new("woman in manual wheelchair: medium skin tone","👩🏽‍🦽"),
	Emoji::new("woman in manual wheelchair: medium-dark skin tone","👩🏾‍🦽"),
	Emoji::new("woman in manual wheelchair: dark skin tone","👩🏿‍🦽"),
	]),
	]);

#[doc="person in motorized wheelchair 🧑‍🦼"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_MOTORIZED_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR); // 🧑‍🦼 (`U+1F9D1 U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.to_string().as_str(), \"🧑‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Light)); // 🧑🏻‍🦼 (`U+1F9D1 U+1F3FB U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumLight)); // 🧑🏼‍🦼 (`U+1F9D1 U+1F3FC U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Medium)); // 🧑🏽‍🦼 (`U+1F9D1 U+1F3FD U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumDark)); // 🧑🏾‍🦼 (`U+1F9D1 U+1F3FE U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Dark)); // 🧑🏿‍🦼 (`U+1F9D1 U+1F3FF U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male)); // 👨‍🦼 (`U+1F468 U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).to_string().as_str(), \"👨‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦼 (`U+1F468 U+1F3FB U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦼 (`U+1F468 U+1F3FC U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦼 (`U+1F468 U+1F3FD U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦼 (`U+1F468 U+1F3FE U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦼 (`U+1F468 U+1F3FF U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female)); // 👩‍🦼 (`U+1F469 U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).to_string().as_str(), \"👩‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦼 (`U+1F469 U+1F3FB U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦼 (`U+1F469 U+1F3FC U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦼 (`U+1F469 U+1F3FD U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦼 (`U+1F469 U+1F3FE U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦼\");"]#[doc="println!(\"{}\", PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦼 (`U+1F469 U+1F3FF U+200D U+1F9BC`)"] #[doc="# assert_eq!(PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦼\");"]
#[doc="```"]
pub static PERSON_IN_MOTORIZED_WHEELCHAIR: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in motorized wheelchair","🧑‍🦼"), 
	&[
		Emoji::new("person in motorized wheelchair: light skin tone","🧑🏻‍🦼"),
	Emoji::new("person in motorized wheelchair: medium-light skin tone","🧑🏼‍🦼"),
	Emoji::new("person in motorized wheelchair: medium skin tone","🧑🏽‍🦼"),
	Emoji::new("person in motorized wheelchair: medium-dark skin tone","🧑🏾‍🦼"),
	Emoji::new("person in motorized wheelchair: dark skin tone","🧑🏿‍🦼"),
	]), 
	&[
		With::new(Emoji::new("man in motorized wheelchair","👨‍🦼"), 
	&[
		Emoji::new("man in motorized wheelchair: light skin tone","👨🏻‍🦼"),
	Emoji::new("man in motorized wheelchair: medium-light skin tone","👨🏼‍🦼"),
	Emoji::new("man in motorized wheelchair: medium skin tone","👨🏽‍🦼"),
	Emoji::new("man in motorized wheelchair: medium-dark skin tone","👨🏾‍🦼"),
	Emoji::new("man in motorized wheelchair: dark skin tone","👨🏿‍🦼"),
	]),
	With::new(Emoji::new("woman in motorized wheelchair","👩‍🦼"), 
	&[
		Emoji::new("woman in motorized wheelchair: light skin tone","👩🏻‍🦼"),
	Emoji::new("woman in motorized wheelchair: medium-light skin tone","👩🏼‍🦼"),
	Emoji::new("woman in motorized wheelchair: medium skin tone","👩🏽‍🦼"),
	Emoji::new("woman in motorized wheelchair: medium-dark skin tone","👩🏾‍🦼"),
	Emoji::new("woman in motorized wheelchair: dark skin tone","👩🏿‍🦼"),
	]),
	]);

#[doc="person in steamy room 🧖"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_STEAMY_ROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM); // 🧖 (`U+1F9D6`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.to_string().as_str(), \"🧖\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::Light)); // 🧖🏻 (`U+1F9D6 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::Light).to_string().as_str(), \"🧖🏻\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::MediumLight)); // 🧖🏼 (`U+1F9D6 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::MediumLight).to_string().as_str(), \"🧖🏼\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::Medium)); // 🧖🏽 (`U+1F9D6 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::Medium).to_string().as_str(), \"🧖🏽\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::MediumDark)); // 🧖🏾 (`U+1F9D6 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::MediumDark).to_string().as_str(), \"🧖🏾\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.tone(Tone::Dark)); // 🧖🏿 (`U+1F9D6 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.tone(Tone::Dark).to_string().as_str(), \"🧖🏿\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male)); // 🧖‍♂️ (`U+1F9D6 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).to_string().as_str(), \"🧖‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Light)); // 🧖🏻‍♂️ (`U+1F9D6 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧖🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumLight)); // 🧖🏼‍♂️ (`U+1F9D6 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧖🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Medium)); // 🧖🏽‍♂️ (`U+1F9D6 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧖🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumDark)); // 🧖🏾‍♂️ (`U+1F9D6 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧖🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Dark)); // 🧖🏿‍♂️ (`U+1F9D6 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧖🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female)); // 🧖‍♀️ (`U+1F9D6 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).to_string().as_str(), \"🧖‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Light)); // 🧖🏻‍♀️ (`U+1F9D6 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧖🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumLight)); // 🧖🏼‍♀️ (`U+1F9D6 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧖🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Medium)); // 🧖🏽‍♀️ (`U+1F9D6 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧖🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumDark)); // 🧖🏾‍♀️ (`U+1F9D6 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧖🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Dark)); // 🧖🏿‍♀️ (`U+1F9D6 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧖🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_IN_STEAMY_ROOM: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in steamy room","🧖"), 
	&[
		Emoji::new("person in steamy room: light skin tone","🧖🏻"),
	Emoji::new("person in steamy room: medium-light skin tone","🧖🏼"),
	Emoji::new("person in steamy room: medium skin tone","🧖🏽"),
	Emoji::new("person in steamy room: medium-dark skin tone","🧖🏾"),
	Emoji::new("person in steamy room: dark skin tone","🧖🏿"),
	]), 
	&[
		With::new(Emoji::new("man in steamy room","🧖‍♂️"), 
	&[
		Emoji::new("man in steamy room: light skin tone","🧖🏻‍♂️"),
	Emoji::new("man in steamy room: medium-light skin tone","🧖🏼‍♂️"),
	Emoji::new("man in steamy room: medium skin tone","🧖🏽‍♂️"),
	Emoji::new("man in steamy room: medium-dark skin tone","🧖🏾‍♂️"),
	Emoji::new("man in steamy room: dark skin tone","🧖🏿‍♂️"),
	]),
	With::new(Emoji::new("woman in steamy room","🧖‍♀️"), 
	&[
		Emoji::new("woman in steamy room: light skin tone","🧖🏻‍♀️"),
	Emoji::new("woman in steamy room: medium-light skin tone","🧖🏼‍♀️"),
	Emoji::new("woman in steamy room: medium skin tone","🧖🏽‍♀️"),
	Emoji::new("woman in steamy room: medium-dark skin tone","🧖🏾‍♀️"),
	Emoji::new("woman in steamy room: dark skin tone","🧖🏿‍♀️"),
	]),
	]);

#[doc="person in suit levitating 🕴️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_SUIT_LEVITATING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING); // 🕴️ (`U+1F574 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.to_string().as_str(), \"🕴️\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::Light)); // 🕴🏻 (`U+1F574 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::Light).to_string().as_str(), \"🕴🏻\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumLight)); // 🕴🏼 (`U+1F574 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumLight).to_string().as_str(), \"🕴🏼\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::Medium)); // 🕴🏽 (`U+1F574 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::Medium).to_string().as_str(), \"🕴🏽\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumDark)); // 🕴🏾 (`U+1F574 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumDark).to_string().as_str(), \"🕴🏾\");"]#[doc="println!(\"{}\", PERSON_IN_SUIT_LEVITATING.tone(Tone::Dark)); // 🕴🏿 (`U+1F574 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_SUIT_LEVITATING.tone(Tone::Dark).to_string().as_str(), \"🕴🏿\");"]
#[doc="```"]
pub static PERSON_IN_SUIT_LEVITATING: With<Tone,Emoji> = With::new(Emoji::new("person in suit levitating","🕴️"), 
	&[
		Emoji::new("person in suit levitating: light skin tone","🕴🏻"),
	Emoji::new("person in suit levitating: medium-light skin tone","🕴🏼"),
	Emoji::new("person in suit levitating: medium skin tone","🕴🏽"),
	Emoji::new("person in suit levitating: medium-dark skin tone","🕴🏾"),
	Emoji::new("person in suit levitating: dark skin tone","🕴🏿"),
	]);

#[doc="person kneeling 🧎"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_KNEELING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_KNEELING); // 🧎 (`U+1F9CE`)"] #[doc="# assert_eq!(PERSON_KNEELING.to_string().as_str(), \"🧎\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::Light)); // 🧎🏻 (`U+1F9CE U+1F3FB`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::Light).to_string().as_str(), \"🧎🏻\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::MediumLight)); // 🧎🏼 (`U+1F9CE U+1F3FC`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::MediumLight).to_string().as_str(), \"🧎🏼\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::Medium)); // 🧎🏽 (`U+1F9CE U+1F3FD`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::Medium).to_string().as_str(), \"🧎🏽\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::MediumDark)); // 🧎🏾 (`U+1F9CE U+1F3FE`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::MediumDark).to_string().as_str(), \"🧎🏾\");"]#[doc="println!(\"{}\", PERSON_KNEELING.tone(Tone::Dark)); // 🧎🏿 (`U+1F9CE U+1F3FF`)"] #[doc="# assert_eq!(PERSON_KNEELING.tone(Tone::Dark).to_string().as_str(), \"🧎🏿\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male)); // 🧎‍♂️ (`U+1F9CE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).to_string().as_str(), \"🧎‍♂️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::Light)); // 🧎🏻‍♂️ (`U+1F9CE U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧎🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumLight)); // 🧎🏼‍♂️ (`U+1F9CE U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧎🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::Medium)); // 🧎🏽‍♂️ (`U+1F9CE U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧎🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumDark)); // 🧎🏾‍♂️ (`U+1F9CE U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧎🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Male).tone(Tone::Dark)); // 🧎🏿‍♂️ (`U+1F9CE U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧎🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female)); // 🧎‍♀️ (`U+1F9CE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).to_string().as_str(), \"🧎‍♀️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::Light)); // 🧎🏻‍♀️ (`U+1F9CE U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧎🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumLight)); // 🧎🏼‍♀️ (`U+1F9CE U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧎🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::Medium)); // 🧎🏽‍♀️ (`U+1F9CE U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧎🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumDark)); // 🧎🏾‍♀️ (`U+1F9CE U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧎🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_KNEELING.gender(Gender::Female).tone(Tone::Dark)); // 🧎🏿‍♀️ (`U+1F9CE U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_KNEELING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧎🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_KNEELING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person kneeling","🧎"), 
	&[
		Emoji::new("person kneeling: light skin tone","🧎🏻"),
	Emoji::new("person kneeling: medium-light skin tone","🧎🏼"),
	Emoji::new("person kneeling: medium skin tone","🧎🏽"),
	Emoji::new("person kneeling: medium-dark skin tone","🧎🏾"),
	Emoji::new("person kneeling: dark skin tone","🧎🏿"),
	]), 
	&[
		With::new(Emoji::new("man kneeling","🧎‍♂️"), 
	&[
		Emoji::new("man kneeling: light skin tone","🧎🏻‍♂️"),
	Emoji::new("man kneeling: medium-light skin tone","🧎🏼‍♂️"),
	Emoji::new("man kneeling: medium skin tone","🧎🏽‍♂️"),
	Emoji::new("man kneeling: medium-dark skin tone","🧎🏾‍♂️"),
	Emoji::new("man kneeling: dark skin tone","🧎🏿‍♂️"),
	]),
	With::new(Emoji::new("woman kneeling","🧎‍♀️"), 
	&[
		Emoji::new("woman kneeling: light skin tone","🧎🏻‍♀️"),
	Emoji::new("woman kneeling: medium-light skin tone","🧎🏼‍♀️"),
	Emoji::new("woman kneeling: medium skin tone","🧎🏽‍♀️"),
	Emoji::new("woman kneeling: medium-dark skin tone","🧎🏾‍♀️"),
	Emoji::new("woman kneeling: dark skin tone","🧎🏿‍♀️"),
	]),
	]);

#[doc="person running 🏃"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_RUNNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_RUNNING); // 🏃 (`U+1F3C3`)"] #[doc="# assert_eq!(PERSON_RUNNING.to_string().as_str(), \"🏃\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::Light)); // 🏃🏻 (`U+1F3C3 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::Light).to_string().as_str(), \"🏃🏻\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::MediumLight)); // 🏃🏼 (`U+1F3C3 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::MediumLight).to_string().as_str(), \"🏃🏼\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::Medium)); // 🏃🏽 (`U+1F3C3 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::Medium).to_string().as_str(), \"🏃🏽\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::MediumDark)); // 🏃🏾 (`U+1F3C3 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::MediumDark).to_string().as_str(), \"🏃🏾\");"]#[doc="println!(\"{}\", PERSON_RUNNING.tone(Tone::Dark)); // 🏃🏿 (`U+1F3C3 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_RUNNING.tone(Tone::Dark).to_string().as_str(), \"🏃🏿\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male)); // 🏃‍♂️ (`U+1F3C3 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).to_string().as_str(), \"🏃‍♂️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::Light)); // 🏃🏻‍♂️ (`U+1F3C3 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🏃🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumLight)); // 🏃🏼‍♂️ (`U+1F3C3 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🏃🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::Medium)); // 🏃🏽‍♂️ (`U+1F3C3 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🏃🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumDark)); // 🏃🏾‍♂️ (`U+1F3C3 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🏃🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Male).tone(Tone::Dark)); // 🏃🏿‍♂️ (`U+1F3C3 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🏃🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female)); // 🏃‍♀️ (`U+1F3C3 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).to_string().as_str(), \"🏃‍♀️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::Light)); // 🏃🏻‍♀️ (`U+1F3C3 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🏃🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumLight)); // 🏃🏼‍♀️ (`U+1F3C3 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🏃🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::Medium)); // 🏃🏽‍♀️ (`U+1F3C3 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🏃🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumDark)); // 🏃🏾‍♀️ (`U+1F3C3 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🏃🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_RUNNING.gender(Gender::Female).tone(Tone::Dark)); // 🏃🏿‍♀️ (`U+1F3C3 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RUNNING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🏃🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_RUNNING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person running","🏃"), 
	&[
		Emoji::new("person running: light skin tone","🏃🏻"),
	Emoji::new("person running: medium-light skin tone","🏃🏼"),
	Emoji::new("person running: medium skin tone","🏃🏽"),
	Emoji::new("person running: medium-dark skin tone","🏃🏾"),
	Emoji::new("person running: dark skin tone","🏃🏿"),
	]), 
	&[
		With::new(Emoji::new("man running","🏃‍♂️"), 
	&[
		Emoji::new("man running: light skin tone","🏃🏻‍♂️"),
	Emoji::new("man running: medium-light skin tone","🏃🏼‍♂️"),
	Emoji::new("man running: medium skin tone","🏃🏽‍♂️"),
	Emoji::new("man running: medium-dark skin tone","🏃🏾‍♂️"),
	Emoji::new("man running: dark skin tone","🏃🏿‍♂️"),
	]),
	With::new(Emoji::new("woman running","🏃‍♀️"), 
	&[
		Emoji::new("woman running: light skin tone","🏃🏻‍♀️"),
	Emoji::new("woman running: medium-light skin tone","🏃🏼‍♀️"),
	Emoji::new("woman running: medium skin tone","🏃🏽‍♀️"),
	Emoji::new("woman running: medium-dark skin tone","🏃🏾‍♀️"),
	Emoji::new("woman running: dark skin tone","🏃🏿‍♀️"),
	]),
	]);

#[doc="person standing 🧍"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_STANDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_STANDING); // 🧍 (`U+1F9CD`)"] #[doc="# assert_eq!(PERSON_STANDING.to_string().as_str(), \"🧍\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::Light)); // 🧍🏻 (`U+1F9CD U+1F3FB`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::Light).to_string().as_str(), \"🧍🏻\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::MediumLight)); // 🧍🏼 (`U+1F9CD U+1F3FC`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::MediumLight).to_string().as_str(), \"🧍🏼\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::Medium)); // 🧍🏽 (`U+1F9CD U+1F3FD`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::Medium).to_string().as_str(), \"🧍🏽\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::MediumDark)); // 🧍🏾 (`U+1F9CD U+1F3FE`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::MediumDark).to_string().as_str(), \"🧍🏾\");"]#[doc="println!(\"{}\", PERSON_STANDING.tone(Tone::Dark)); // 🧍🏿 (`U+1F9CD U+1F3FF`)"] #[doc="# assert_eq!(PERSON_STANDING.tone(Tone::Dark).to_string().as_str(), \"🧍🏿\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male)); // 🧍‍♂️ (`U+1F9CD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).to_string().as_str(), \"🧍‍♂️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::Light)); // 🧍🏻‍♂️ (`U+1F9CD U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧍🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumLight)); // 🧍🏼‍♂️ (`U+1F9CD U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧍🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::Medium)); // 🧍🏽‍♂️ (`U+1F9CD U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧍🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumDark)); // 🧍🏾‍♂️ (`U+1F9CD U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧍🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Male).tone(Tone::Dark)); // 🧍🏿‍♂️ (`U+1F9CD U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧍🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female)); // 🧍‍♀️ (`U+1F9CD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).to_string().as_str(), \"🧍‍♀️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::Light)); // 🧍🏻‍♀️ (`U+1F9CD U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧍🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumLight)); // 🧍🏼‍♀️ (`U+1F9CD U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧍🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::Medium)); // 🧍🏽‍♀️ (`U+1F9CD U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧍🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumDark)); // 🧍🏾‍♀️ (`U+1F9CD U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧍🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_STANDING.gender(Gender::Female).tone(Tone::Dark)); // 🧍🏿‍♀️ (`U+1F9CD U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_STANDING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧍🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_STANDING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person standing","🧍"), 
	&[
		Emoji::new("person standing: light skin tone","🧍🏻"),
	Emoji::new("person standing: medium-light skin tone","🧍🏼"),
	Emoji::new("person standing: medium skin tone","🧍🏽"),
	Emoji::new("person standing: medium-dark skin tone","🧍🏾"),
	Emoji::new("person standing: dark skin tone","🧍🏿"),
	]), 
	&[
		With::new(Emoji::new("man standing","🧍‍♂️"), 
	&[
		Emoji::new("man standing: light skin tone","🧍🏻‍♂️"),
	Emoji::new("man standing: medium-light skin tone","🧍🏼‍♂️"),
	Emoji::new("man standing: medium skin tone","🧍🏽‍♂️"),
	Emoji::new("man standing: medium-dark skin tone","🧍🏾‍♂️"),
	Emoji::new("man standing: dark skin tone","🧍🏿‍♂️"),
	]),
	With::new(Emoji::new("woman standing","🧍‍♀️"), 
	&[
		Emoji::new("woman standing: light skin tone","🧍🏻‍♀️"),
	Emoji::new("woman standing: medium-light skin tone","🧍🏼‍♀️"),
	Emoji::new("woman standing: medium skin tone","🧍🏽‍♀️"),
	Emoji::new("woman standing: medium-dark skin tone","🧍🏾‍♀️"),
	Emoji::new("woman standing: dark skin tone","🧍🏿‍♀️"),
	]),
	]);

#[doc="person walking 🚶"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WALKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WALKING); // 🚶 (`U+1F6B6`)"] #[doc="# assert_eq!(PERSON_WALKING.to_string().as_str(), \"🚶\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::Light)); // 🚶🏻 (`U+1F6B6 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::Light).to_string().as_str(), \"🚶🏻\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::MediumLight)); // 🚶🏼 (`U+1F6B6 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::MediumLight).to_string().as_str(), \"🚶🏼\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::Medium)); // 🚶🏽 (`U+1F6B6 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::Medium).to_string().as_str(), \"🚶🏽\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::MediumDark)); // 🚶🏾 (`U+1F6B6 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::MediumDark).to_string().as_str(), \"🚶🏾\");"]#[doc="println!(\"{}\", PERSON_WALKING.tone(Tone::Dark)); // 🚶🏿 (`U+1F6B6 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WALKING.tone(Tone::Dark).to_string().as_str(), \"🚶🏿\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male)); // 🚶‍♂️ (`U+1F6B6 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).to_string().as_str(), \"🚶‍♂️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::Light)); // 🚶🏻‍♂️ (`U+1F6B6 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🚶🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumLight)); // 🚶🏼‍♂️ (`U+1F6B6 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🚶🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::Medium)); // 🚶🏽‍♂️ (`U+1F6B6 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🚶🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumDark)); // 🚶🏾‍♂️ (`U+1F6B6 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🚶🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Male).tone(Tone::Dark)); // 🚶🏿‍♂️ (`U+1F6B6 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🚶🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female)); // 🚶‍♀️ (`U+1F6B6 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).to_string().as_str(), \"🚶‍♀️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::Light)); // 🚶🏻‍♀️ (`U+1F6B6 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🚶🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumLight)); // 🚶🏼‍♀️ (`U+1F6B6 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🚶🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::Medium)); // 🚶🏽‍♀️ (`U+1F6B6 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🚶🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumDark)); // 🚶🏾‍♀️ (`U+1F6B6 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🚶🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_WALKING.gender(Gender::Female).tone(Tone::Dark)); // 🚶🏿‍♀️ (`U+1F6B6 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WALKING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🚶🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_WALKING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person walking","🚶"), 
	&[
		Emoji::new("person walking: light skin tone","🚶🏻"),
	Emoji::new("person walking: medium-light skin tone","🚶🏼"),
	Emoji::new("person walking: medium skin tone","🚶🏽"),
	Emoji::new("person walking: medium-dark skin tone","🚶🏾"),
	Emoji::new("person walking: dark skin tone","🚶🏿"),
	]), 
	&[
		With::new(Emoji::new("man walking","🚶‍♂️"), 
	&[
		Emoji::new("man walking: light skin tone","🚶🏻‍♂️"),
	Emoji::new("man walking: medium-light skin tone","🚶🏼‍♂️"),
	Emoji::new("man walking: medium skin tone","🚶🏽‍♂️"),
	Emoji::new("man walking: medium-dark skin tone","🚶🏾‍♂️"),
	Emoji::new("man walking: dark skin tone","🚶🏿‍♂️"),
	]),
	With::new(Emoji::new("woman walking","🚶‍♀️"), 
	&[
		Emoji::new("woman walking: light skin tone","🚶🏻‍♀️"),
	Emoji::new("woman walking: medium-light skin tone","🚶🏼‍♀️"),
	Emoji::new("woman walking: medium skin tone","🚶🏽‍♀️"),
	Emoji::new("woman walking: medium-dark skin tone","🚶🏾‍♀️"),
	Emoji::new("woman walking: dark skin tone","🚶🏿‍♀️"),
	]),
	]);

#[doc="person with bunny ears 👯"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_BUNNY_EARS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_BUNNY_EARS); // 👯 (`U+1F46F`)"] #[doc="# assert_eq!(PERSON_WITH_BUNNY_EARS.to_string().as_str(), \"👯\");"]#[doc="println!(\"{}\", PERSON_WITH_BUNNY_EARS.gender(Gender::Male)); // 👯‍♂️ (`U+1F46F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_BUNNY_EARS.gender(Gender::Male).to_string().as_str(), \"👯‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_BUNNY_EARS.gender(Gender::Female)); // 👯‍♀️ (`U+1F46F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_BUNNY_EARS.gender(Gender::Female).to_string().as_str(), \"👯‍♀️\");"]
#[doc="```"]
pub static PERSON_WITH_BUNNY_EARS: With<Gender,Emoji> = With::new(Emoji::new("people with bunny ears","👯"), 
	&[
		Emoji::new("men with bunny ears","👯‍♂️"),
	Emoji::new("women with bunny ears","👯‍♀️"),
	]);

#[doc="person with white cane 🧑‍🦯"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_WHITE_CANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE); // 🧑‍🦯 (`U+1F9D1 U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.to_string().as_str(), \"🧑‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::Light)); // 🧑🏻‍🦯 (`U+1F9D1 U+1F3FB U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::MediumLight)); // 🧑🏼‍🦯 (`U+1F9D1 U+1F3FC U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::Medium)); // 🧑🏽‍🦯 (`U+1F9D1 U+1F3FD U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::MediumDark)); // 🧑🏾‍🦯 (`U+1F9D1 U+1F3FE U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.tone(Tone::Dark)); // 🧑🏿‍🦯 (`U+1F9D1 U+1F3FF U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male)); // 👨‍🦯 (`U+1F468 U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).to_string().as_str(), \"👨‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🦯 (`U+1F468 U+1F3FB U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🦯 (`U+1F468 U+1F3FC U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🦯 (`U+1F468 U+1F3FD U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🦯 (`U+1F468 U+1F3FE U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🦯 (`U+1F468 U+1F3FF U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female)); // 👩‍🦯 (`U+1F469 U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).to_string().as_str(), \"👩‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🦯 (`U+1F469 U+1F3FB U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🦯 (`U+1F469 U+1F3FC U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🦯 (`U+1F469 U+1F3FD U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🦯 (`U+1F469 U+1F3FE U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🦯\");"]#[doc="println!(\"{}\", PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🦯 (`U+1F469 U+1F3FF U+200D U+1F9AF`)"] #[doc="# assert_eq!(PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🦯\");"]
#[doc="```"]
pub static PERSON_WITH_WHITE_CANE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person with white cane","🧑‍🦯"), 
	&[
		Emoji::new("person with white cane: light skin tone","🧑🏻‍🦯"),
	Emoji::new("person with white cane: medium-light skin tone","🧑🏼‍🦯"),
	Emoji::new("person with white cane: medium skin tone","🧑🏽‍🦯"),
	Emoji::new("person with white cane: medium-dark skin tone","🧑🏾‍🦯"),
	Emoji::new("person with white cane: dark skin tone","🧑🏿‍🦯"),
	]), 
	&[
		With::new(Emoji::new("man with white cane","👨‍🦯"), 
	&[
		Emoji::new("man with white cane: light skin tone","👨🏻‍🦯"),
	Emoji::new("man with white cane: medium-light skin tone","👨🏼‍🦯"),
	Emoji::new("man with white cane: medium skin tone","👨🏽‍🦯"),
	Emoji::new("man with white cane: medium-dark skin tone","👨🏾‍🦯"),
	Emoji::new("man with white cane: dark skin tone","👨🏿‍🦯"),
	]),
	With::new(Emoji::new("woman with white cane","👩‍🦯"), 
	&[
		Emoji::new("woman with white cane: light skin tone","👩🏻‍🦯"),
	Emoji::new("woman with white cane: medium-light skin tone","👩🏼‍🦯"),
	Emoji::new("woman with white cane: medium skin tone","👩🏽‍🦯"),
	Emoji::new("woman with white cane: medium-dark skin tone","👩🏾‍🦯"),
	Emoji::new("woman with white cane: dark skin tone","👩🏿‍🦯"),
	]),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&PERSON_CLIMBING.default.default, &PERSON_CLIMBING.default.tone(Tone::Light), &PERSON_CLIMBING.default.tone(Tone::MediumLight), &PERSON_CLIMBING.default.tone(Tone::Medium), &PERSON_CLIMBING.default.tone(Tone::MediumDark), &PERSON_CLIMBING.default.tone(Tone::Dark), &PERSON_CLIMBING.gender(Gender::Male).default, &PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Light), &PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Medium), &PERSON_CLIMBING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_CLIMBING.gender(Gender::Male).tone(Tone::Dark), &PERSON_CLIMBING.gender(Gender::Female).default, &PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Light), &PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Medium), &PERSON_CLIMBING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_CLIMBING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_DANCING.gender(Gender::Male).default, &PERSON_DANCING.gender(Gender::Male).tone(Tone::Light), &PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_DANCING.gender(Gender::Male).tone(Tone::Medium), &PERSON_DANCING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_DANCING.gender(Gender::Male).tone(Tone::Dark), &PERSON_DANCING.gender(Gender::Female).default, &PERSON_DANCING.gender(Gender::Female).tone(Tone::Light), &PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_DANCING.gender(Gender::Female).tone(Tone::Medium), &PERSON_DANCING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_DANCING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_GETTING_HAIRCUT.default.default, &PERSON_GETTING_HAIRCUT.default.tone(Tone::Light), &PERSON_GETTING_HAIRCUT.default.tone(Tone::MediumLight), &PERSON_GETTING_HAIRCUT.default.tone(Tone::Medium), &PERSON_GETTING_HAIRCUT.default.tone(Tone::MediumDark), &PERSON_GETTING_HAIRCUT.default.tone(Tone::Dark), &PERSON_GETTING_HAIRCUT.gender(Gender::Male).default, &PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Light), &PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Medium), &PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_GETTING_HAIRCUT.gender(Gender::Male).tone(Tone::Dark), &PERSON_GETTING_HAIRCUT.gender(Gender::Female).default, &PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Light), &PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Medium), &PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_GETTING_HAIRCUT.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_GETTING_MASSAGE.default.default, &PERSON_GETTING_MASSAGE.default.tone(Tone::Light), &PERSON_GETTING_MASSAGE.default.tone(Tone::MediumLight), &PERSON_GETTING_MASSAGE.default.tone(Tone::Medium), &PERSON_GETTING_MASSAGE.default.tone(Tone::MediumDark), &PERSON_GETTING_MASSAGE.default.tone(Tone::Dark), &PERSON_GETTING_MASSAGE.gender(Gender::Male).default, &PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Light), &PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Medium), &PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_GETTING_MASSAGE.gender(Gender::Male).tone(Tone::Dark), &PERSON_GETTING_MASSAGE.gender(Gender::Female).default, &PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Light), &PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Medium), &PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_GETTING_MASSAGE.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_IN_MANUAL_WHEELCHAIR.default.default, &PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::Light), &PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::MediumLight), &PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::Medium), &PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::MediumDark), &PERSON_IN_MANUAL_WHEELCHAIR.default.tone(Tone::Dark), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).default, &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).default, &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_IN_MANUAL_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_IN_MOTORIZED_WHEELCHAIR.default.default, &PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::Light), &PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::MediumLight), &PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::Medium), &PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::MediumDark), &PERSON_IN_MOTORIZED_WHEELCHAIR.default.tone(Tone::Dark), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).default, &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Light), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Medium), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Male).tone(Tone::Dark), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).default, &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Light), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Medium), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_IN_MOTORIZED_WHEELCHAIR.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_IN_STEAMY_ROOM.default.default, &PERSON_IN_STEAMY_ROOM.default.tone(Tone::Light), &PERSON_IN_STEAMY_ROOM.default.tone(Tone::MediumLight), &PERSON_IN_STEAMY_ROOM.default.tone(Tone::Medium), &PERSON_IN_STEAMY_ROOM.default.tone(Tone::MediumDark), &PERSON_IN_STEAMY_ROOM.default.tone(Tone::Dark), &PERSON_IN_STEAMY_ROOM.gender(Gender::Male).default, &PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Light), &PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Medium), &PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_IN_STEAMY_ROOM.gender(Gender::Male).tone(Tone::Dark), &PERSON_IN_STEAMY_ROOM.gender(Gender::Female).default, &PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Light), &PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Medium), &PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_IN_STEAMY_ROOM.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_IN_SUIT_LEVITATING.default, &PERSON_IN_SUIT_LEVITATING.tone(Tone::Light), &PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumLight), &PERSON_IN_SUIT_LEVITATING.tone(Tone::Medium), &PERSON_IN_SUIT_LEVITATING.tone(Tone::MediumDark), &PERSON_IN_SUIT_LEVITATING.tone(Tone::Dark), ],
&[&PERSON_KNEELING.default.default, &PERSON_KNEELING.default.tone(Tone::Light), &PERSON_KNEELING.default.tone(Tone::MediumLight), &PERSON_KNEELING.default.tone(Tone::Medium), &PERSON_KNEELING.default.tone(Tone::MediumDark), &PERSON_KNEELING.default.tone(Tone::Dark), &PERSON_KNEELING.gender(Gender::Male).default, &PERSON_KNEELING.gender(Gender::Male).tone(Tone::Light), &PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_KNEELING.gender(Gender::Male).tone(Tone::Medium), &PERSON_KNEELING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_KNEELING.gender(Gender::Male).tone(Tone::Dark), &PERSON_KNEELING.gender(Gender::Female).default, &PERSON_KNEELING.gender(Gender::Female).tone(Tone::Light), &PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_KNEELING.gender(Gender::Female).tone(Tone::Medium), &PERSON_KNEELING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_KNEELING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_RUNNING.default.default, &PERSON_RUNNING.default.tone(Tone::Light), &PERSON_RUNNING.default.tone(Tone::MediumLight), &PERSON_RUNNING.default.tone(Tone::Medium), &PERSON_RUNNING.default.tone(Tone::MediumDark), &PERSON_RUNNING.default.tone(Tone::Dark), &PERSON_RUNNING.gender(Gender::Male).default, &PERSON_RUNNING.gender(Gender::Male).tone(Tone::Light), &PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_RUNNING.gender(Gender::Male).tone(Tone::Medium), &PERSON_RUNNING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_RUNNING.gender(Gender::Male).tone(Tone::Dark), &PERSON_RUNNING.gender(Gender::Female).default, &PERSON_RUNNING.gender(Gender::Female).tone(Tone::Light), &PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_RUNNING.gender(Gender::Female).tone(Tone::Medium), &PERSON_RUNNING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_RUNNING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_STANDING.default.default, &PERSON_STANDING.default.tone(Tone::Light), &PERSON_STANDING.default.tone(Tone::MediumLight), &PERSON_STANDING.default.tone(Tone::Medium), &PERSON_STANDING.default.tone(Tone::MediumDark), &PERSON_STANDING.default.tone(Tone::Dark), &PERSON_STANDING.gender(Gender::Male).default, &PERSON_STANDING.gender(Gender::Male).tone(Tone::Light), &PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_STANDING.gender(Gender::Male).tone(Tone::Medium), &PERSON_STANDING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_STANDING.gender(Gender::Male).tone(Tone::Dark), &PERSON_STANDING.gender(Gender::Female).default, &PERSON_STANDING.gender(Gender::Female).tone(Tone::Light), &PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_STANDING.gender(Gender::Female).tone(Tone::Medium), &PERSON_STANDING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_STANDING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_WALKING.default.default, &PERSON_WALKING.default.tone(Tone::Light), &PERSON_WALKING.default.tone(Tone::MediumLight), &PERSON_WALKING.default.tone(Tone::Medium), &PERSON_WALKING.default.tone(Tone::MediumDark), &PERSON_WALKING.default.tone(Tone::Dark), &PERSON_WALKING.gender(Gender::Male).default, &PERSON_WALKING.gender(Gender::Male).tone(Tone::Light), &PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_WALKING.gender(Gender::Male).tone(Tone::Medium), &PERSON_WALKING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_WALKING.gender(Gender::Male).tone(Tone::Dark), &PERSON_WALKING.gender(Gender::Female).default, &PERSON_WALKING.gender(Gender::Female).tone(Tone::Light), &PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_WALKING.gender(Gender::Female).tone(Tone::Medium), &PERSON_WALKING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_WALKING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_WITH_BUNNY_EARS.default, &PERSON_WITH_BUNNY_EARS.gender(Gender::Male), &PERSON_WITH_BUNNY_EARS.gender(Gender::Female), ],
&[&PERSON_WITH_WHITE_CANE.default.default, &PERSON_WITH_WHITE_CANE.default.tone(Tone::Light), &PERSON_WITH_WHITE_CANE.default.tone(Tone::MediumLight), &PERSON_WITH_WHITE_CANE.default.tone(Tone::Medium), &PERSON_WITH_WHITE_CANE.default.tone(Tone::MediumDark), &PERSON_WITH_WHITE_CANE.default.tone(Tone::Dark), &PERSON_WITH_WHITE_CANE.gender(Gender::Male).default, &PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Light), &PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Medium), &PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_WITH_WHITE_CANE.gender(Gender::Male).tone(Tone::Dark), &PERSON_WITH_WHITE_CANE.gender(Gender::Female).default, &PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Light), &PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Medium), &PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_WITH_WHITE_CANE.gender(Gender::Female).tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&PERSON_CLIMBING.default.default, &PERSON_DANCING.gender(Gender::Female).default, &PERSON_DANCING.gender(Gender::Male).default, &PERSON_GETTING_HAIRCUT.default.default, &PERSON_GETTING_MASSAGE.default.default, &PERSON_IN_MANUAL_WHEELCHAIR.default.default, &PERSON_IN_MOTORIZED_WHEELCHAIR.default.default, &PERSON_IN_STEAMY_ROOM.default.default, &PERSON_IN_SUIT_LEVITATING.default, &PERSON_KNEELING.default.default, &PERSON_RUNNING.default.default, &PERSON_STANDING.default.default, &PERSON_WALKING.default.default, &PERSON_WITH_BUNNY_EARS.default, &PERSON_WITH_WHITE_CANE.default.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_activity

/// person-fantasy 👼🧝🧚
pub mod person_fantasy { // people_and_body::person_fantasy
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="baby angel 👼"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_ANGEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_ANGEL); // 👼 (`U+1F47C`)"] #[doc="# assert_eq!(BABY_ANGEL.to_string().as_str(), \"👼\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::Light)); // 👼🏻 (`U+1F47C U+1F3FB`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::Light).to_string().as_str(), \"👼🏻\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::MediumLight)); // 👼🏼 (`U+1F47C U+1F3FC`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::MediumLight).to_string().as_str(), \"👼🏼\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::Medium)); // 👼🏽 (`U+1F47C U+1F3FD`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::Medium).to_string().as_str(), \"👼🏽\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::MediumDark)); // 👼🏾 (`U+1F47C U+1F3FE`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::MediumDark).to_string().as_str(), \"👼🏾\");"]#[doc="println!(\"{}\", BABY_ANGEL.tone(Tone::Dark)); // 👼🏿 (`U+1F47C U+1F3FF`)"] #[doc="# assert_eq!(BABY_ANGEL.tone(Tone::Dark).to_string().as_str(), \"👼🏿\");"]
#[doc="```"]
pub static BABY_ANGEL: With<Tone,Emoji> = With::new(Emoji::new("baby angel","👼"), 
	&[
		Emoji::new("baby angel: light skin tone","👼🏻"),
	Emoji::new("baby angel: medium-light skin tone","👼🏼"),
	Emoji::new("baby angel: medium skin tone","👼🏽"),
	Emoji::new("baby angel: medium-dark skin tone","👼🏾"),
	Emoji::new("baby angel: dark skin tone","👼🏿"),
	]);

#[doc="elf 🧝"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELF); // 🧝 (`U+1F9DD`)"] #[doc="# assert_eq!(ELF.to_string().as_str(), \"🧝\");"]#[doc="println!(\"{}\", ELF.tone(Tone::Light)); // 🧝🏻 (`U+1F9DD U+1F3FB`)"] #[doc="# assert_eq!(ELF.tone(Tone::Light).to_string().as_str(), \"🧝🏻\");"]#[doc="println!(\"{}\", ELF.tone(Tone::MediumLight)); // 🧝🏼 (`U+1F9DD U+1F3FC`)"] #[doc="# assert_eq!(ELF.tone(Tone::MediumLight).to_string().as_str(), \"🧝🏼\");"]#[doc="println!(\"{}\", ELF.tone(Tone::Medium)); // 🧝🏽 (`U+1F9DD U+1F3FD`)"] #[doc="# assert_eq!(ELF.tone(Tone::Medium).to_string().as_str(), \"🧝🏽\");"]#[doc="println!(\"{}\", ELF.tone(Tone::MediumDark)); // 🧝🏾 (`U+1F9DD U+1F3FE`)"] #[doc="# assert_eq!(ELF.tone(Tone::MediumDark).to_string().as_str(), \"🧝🏾\");"]#[doc="println!(\"{}\", ELF.tone(Tone::Dark)); // 🧝🏿 (`U+1F9DD U+1F3FF`)"] #[doc="# assert_eq!(ELF.tone(Tone::Dark).to_string().as_str(), \"🧝🏿\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male)); // 🧝‍♂️ (`U+1F9DD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).to_string().as_str(), \"🧝‍♂️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::Light)); // 🧝🏻‍♂️ (`U+1F9DD U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧝🏻‍♂️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::MediumLight)); // 🧝🏼‍♂️ (`U+1F9DD U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧝🏼‍♂️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::Medium)); // 🧝🏽‍♂️ (`U+1F9DD U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧝🏽‍♂️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::MediumDark)); // 🧝🏾‍♂️ (`U+1F9DD U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧝🏾‍♂️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Male).tone(Tone::Dark)); // 🧝🏿‍♂️ (`U+1F9DD U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧝🏿‍♂️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female)); // 🧝‍♀️ (`U+1F9DD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).to_string().as_str(), \"🧝‍♀️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::Light)); // 🧝🏻‍♀️ (`U+1F9DD U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧝🏻‍♀️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::MediumLight)); // 🧝🏼‍♀️ (`U+1F9DD U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧝🏼‍♀️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::Medium)); // 🧝🏽‍♀️ (`U+1F9DD U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧝🏽‍♀️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::MediumDark)); // 🧝🏾‍♀️ (`U+1F9DD U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧝🏾‍♀️\");"]#[doc="println!(\"{}\", ELF.gender(Gender::Female).tone(Tone::Dark)); // 🧝🏿‍♀️ (`U+1F9DD U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ELF.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧝🏿‍♀️\");"]
#[doc="```"]
pub static ELF: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("elf","🧝"), 
	&[
		Emoji::new("elf: light skin tone","🧝🏻"),
	Emoji::new("elf: medium-light skin tone","🧝🏼"),
	Emoji::new("elf: medium skin tone","🧝🏽"),
	Emoji::new("elf: medium-dark skin tone","🧝🏾"),
	Emoji::new("elf: dark skin tone","🧝🏿"),
	]), 
	&[
		With::new(Emoji::new("man elf","🧝‍♂️"), 
	&[
		Emoji::new("man elf: light skin tone","🧝🏻‍♂️"),
	Emoji::new("man elf: medium-light skin tone","🧝🏼‍♂️"),
	Emoji::new("man elf: medium skin tone","🧝🏽‍♂️"),
	Emoji::new("man elf: medium-dark skin tone","🧝🏾‍♂️"),
	Emoji::new("man elf: dark skin tone","🧝🏿‍♂️"),
	]),
	With::new(Emoji::new("woman elf","🧝‍♀️"), 
	&[
		Emoji::new("woman elf: light skin tone","🧝🏻‍♀️"),
	Emoji::new("woman elf: medium-light skin tone","🧝🏼‍♀️"),
	Emoji::new("woman elf: medium skin tone","🧝🏽‍♀️"),
	Emoji::new("woman elf: medium-dark skin tone","🧝🏾‍♀️"),
	Emoji::new("woman elf: dark skin tone","🧝🏿‍♀️"),
	]),
	]);

#[doc="fairy 🧚"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAIRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAIRY); // 🧚 (`U+1F9DA`)"] #[doc="# assert_eq!(FAIRY.to_string().as_str(), \"🧚\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::Light)); // 🧚🏻 (`U+1F9DA U+1F3FB`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::Light).to_string().as_str(), \"🧚🏻\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::MediumLight)); // 🧚🏼 (`U+1F9DA U+1F3FC`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::MediumLight).to_string().as_str(), \"🧚🏼\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::Medium)); // 🧚🏽 (`U+1F9DA U+1F3FD`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::Medium).to_string().as_str(), \"🧚🏽\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::MediumDark)); // 🧚🏾 (`U+1F9DA U+1F3FE`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::MediumDark).to_string().as_str(), \"🧚🏾\");"]#[doc="println!(\"{}\", FAIRY.tone(Tone::Dark)); // 🧚🏿 (`U+1F9DA U+1F3FF`)"] #[doc="# assert_eq!(FAIRY.tone(Tone::Dark).to_string().as_str(), \"🧚🏿\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male)); // 🧚‍♂️ (`U+1F9DA U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).to_string().as_str(), \"🧚‍♂️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::Light)); // 🧚🏻‍♂️ (`U+1F9DA U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧚🏻‍♂️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::MediumLight)); // 🧚🏼‍♂️ (`U+1F9DA U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧚🏼‍♂️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::Medium)); // 🧚🏽‍♂️ (`U+1F9DA U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧚🏽‍♂️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::MediumDark)); // 🧚🏾‍♂️ (`U+1F9DA U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧚🏾‍♂️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Male).tone(Tone::Dark)); // 🧚🏿‍♂️ (`U+1F9DA U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧚🏿‍♂️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female)); // 🧚‍♀️ (`U+1F9DA U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).to_string().as_str(), \"🧚‍♀️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::Light)); // 🧚🏻‍♀️ (`U+1F9DA U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧚🏻‍♀️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::MediumLight)); // 🧚🏼‍♀️ (`U+1F9DA U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧚🏼‍♀️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::Medium)); // 🧚🏽‍♀️ (`U+1F9DA U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧚🏽‍♀️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::MediumDark)); // 🧚🏾‍♀️ (`U+1F9DA U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧚🏾‍♀️\");"]#[doc="println!(\"{}\", FAIRY.gender(Gender::Female).tone(Tone::Dark)); // 🧚🏿‍♀️ (`U+1F9DA U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(FAIRY.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧚🏿‍♀️\");"]
#[doc="```"]
pub static FAIRY: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("fairy","🧚"), 
	&[
		Emoji::new("fairy: light skin tone","🧚🏻"),
	Emoji::new("fairy: medium-light skin tone","🧚🏼"),
	Emoji::new("fairy: medium skin tone","🧚🏽"),
	Emoji::new("fairy: medium-dark skin tone","🧚🏾"),
	Emoji::new("fairy: dark skin tone","🧚🏿"),
	]), 
	&[
		With::new(Emoji::new("man fairy","🧚‍♂️"), 
	&[
		Emoji::new("man fairy: light skin tone","🧚🏻‍♂️"),
	Emoji::new("man fairy: medium-light skin tone","🧚🏼‍♂️"),
	Emoji::new("man fairy: medium skin tone","🧚🏽‍♂️"),
	Emoji::new("man fairy: medium-dark skin tone","🧚🏾‍♂️"),
	Emoji::new("man fairy: dark skin tone","🧚🏿‍♂️"),
	]),
	With::new(Emoji::new("woman fairy","🧚‍♀️"), 
	&[
		Emoji::new("woman fairy: light skin tone","🧚🏻‍♀️"),
	Emoji::new("woman fairy: medium-light skin tone","🧚🏼‍♀️"),
	Emoji::new("woman fairy: medium skin tone","🧚🏽‍♀️"),
	Emoji::new("woman fairy: medium-dark skin tone","🧚🏾‍♀️"),
	Emoji::new("woman fairy: dark skin tone","🧚🏿‍♀️"),
	]),
	]);

#[doc="person genie 🧞"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GENIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GENIE); // 🧞 (`U+1F9DE`)"] #[doc="# assert_eq!(GENIE.to_string().as_str(), \"🧞\");"]#[doc="println!(\"{}\", GENIE.gender(Gender::Male)); // 🧞‍♂️ (`U+1F9DE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GENIE.gender(Gender::Male).to_string().as_str(), \"🧞‍♂️\");"]#[doc="println!(\"{}\", GENIE.gender(Gender::Female)); // 🧞‍♀️ (`U+1F9DE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GENIE.gender(Gender::Female).to_string().as_str(), \"🧞‍♀️\");"]
#[doc="```"]
pub static GENIE: With<Gender,Emoji> = With::new(Emoji::new("genie","🧞"), 
	&[
		Emoji::new("man genie","🧞‍♂️"),
	Emoji::new("woman genie","🧞‍♀️"),
	]);

#[doc="mage 🧙"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAGE); // 🧙 (`U+1F9D9`)"] #[doc="# assert_eq!(MAGE.to_string().as_str(), \"🧙\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::Light)); // 🧙🏻 (`U+1F9D9 U+1F3FB`)"] #[doc="# assert_eq!(MAGE.tone(Tone::Light).to_string().as_str(), \"🧙🏻\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::MediumLight)); // 🧙🏼 (`U+1F9D9 U+1F3FC`)"] #[doc="# assert_eq!(MAGE.tone(Tone::MediumLight).to_string().as_str(), \"🧙🏼\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::Medium)); // 🧙🏽 (`U+1F9D9 U+1F3FD`)"] #[doc="# assert_eq!(MAGE.tone(Tone::Medium).to_string().as_str(), \"🧙🏽\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::MediumDark)); // 🧙🏾 (`U+1F9D9 U+1F3FE`)"] #[doc="# assert_eq!(MAGE.tone(Tone::MediumDark).to_string().as_str(), \"🧙🏾\");"]#[doc="println!(\"{}\", MAGE.tone(Tone::Dark)); // 🧙🏿 (`U+1F9D9 U+1F3FF`)"] #[doc="# assert_eq!(MAGE.tone(Tone::Dark).to_string().as_str(), \"🧙🏿\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male)); // 🧙‍♂️ (`U+1F9D9 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).to_string().as_str(), \"🧙‍♂️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::Light)); // 🧙🏻‍♂️ (`U+1F9D9 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧙🏻‍♂️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::MediumLight)); // 🧙🏼‍♂️ (`U+1F9D9 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧙🏼‍♂️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::Medium)); // 🧙🏽‍♂️ (`U+1F9D9 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧙🏽‍♂️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::MediumDark)); // 🧙🏾‍♂️ (`U+1F9D9 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧙🏾‍♂️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Male).tone(Tone::Dark)); // 🧙🏿‍♂️ (`U+1F9D9 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧙🏿‍♂️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female)); // 🧙‍♀️ (`U+1F9D9 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).to_string().as_str(), \"🧙‍♀️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::Light)); // 🧙🏻‍♀️ (`U+1F9D9 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧙🏻‍♀️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::MediumLight)); // 🧙🏼‍♀️ (`U+1F9D9 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧙🏼‍♀️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::Medium)); // 🧙🏽‍♀️ (`U+1F9D9 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧙🏽‍♀️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::MediumDark)); // 🧙🏾‍♀️ (`U+1F9D9 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧙🏾‍♀️\");"]#[doc="println!(\"{}\", MAGE.gender(Gender::Female).tone(Tone::Dark)); // 🧙🏿‍♀️ (`U+1F9D9 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MAGE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧙🏿‍♀️\");"]
#[doc="```"]
pub static MAGE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("mage","🧙"), 
	&[
		Emoji::new("mage: light skin tone","🧙🏻"),
	Emoji::new("mage: medium-light skin tone","🧙🏼"),
	Emoji::new("mage: medium skin tone","🧙🏽"),
	Emoji::new("mage: medium-dark skin tone","🧙🏾"),
	Emoji::new("mage: dark skin tone","🧙🏿"),
	]), 
	&[
		With::new(Emoji::new("man mage","🧙‍♂️"), 
	&[
		Emoji::new("man mage: light skin tone","🧙🏻‍♂️"),
	Emoji::new("man mage: medium-light skin tone","🧙🏼‍♂️"),
	Emoji::new("man mage: medium skin tone","🧙🏽‍♂️"),
	Emoji::new("man mage: medium-dark skin tone","🧙🏾‍♂️"),
	Emoji::new("man mage: dark skin tone","🧙🏿‍♂️"),
	]),
	With::new(Emoji::new("woman mage","🧙‍♀️"), 
	&[
		Emoji::new("woman mage: light skin tone","🧙🏻‍♀️"),
	Emoji::new("woman mage: medium-light skin tone","🧙🏼‍♀️"),
	Emoji::new("woman mage: medium skin tone","🧙🏽‍♀️"),
	Emoji::new("woman mage: medium-dark skin tone","🧙🏾‍♀️"),
	Emoji::new("woman mage: dark skin tone","🧙🏿‍♀️"),
	]),
	]);

#[doc="mermaid 🧜‍♀️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MERMAID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MERMAID); // 🧜‍♀️ (`U+1F9DC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.to_string().as_str(), \"🧜‍♀️\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::Light)); // 🧜🏻‍♀️ (`U+1F9DC U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::Light).to_string().as_str(), \"🧜🏻‍♀️\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::MediumLight)); // 🧜🏼‍♀️ (`U+1F9DC U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::MediumLight).to_string().as_str(), \"🧜🏼‍♀️\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::Medium)); // 🧜🏽‍♀️ (`U+1F9DC U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::Medium).to_string().as_str(), \"🧜🏽‍♀️\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::MediumDark)); // 🧜🏾‍♀️ (`U+1F9DC U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::MediumDark).to_string().as_str(), \"🧜🏾‍♀️\");"]#[doc="println!(\"{}\", MERMAID.tone(Tone::Dark)); // 🧜🏿‍♀️ (`U+1F9DC U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(MERMAID.tone(Tone::Dark).to_string().as_str(), \"🧜🏿‍♀️\");"]
#[doc="```"]
pub static MERMAID: With<Tone,Emoji> = With::new(Emoji::new("mermaid","🧜‍♀️"), 
	&[
		Emoji::new("mermaid: light skin tone","🧜🏻‍♀️"),
	Emoji::new("mermaid: medium-light skin tone","🧜🏼‍♀️"),
	Emoji::new("mermaid: medium skin tone","🧜🏽‍♀️"),
	Emoji::new("mermaid: medium-dark skin tone","🧜🏾‍♀️"),
	Emoji::new("mermaid: dark skin tone","🧜🏿‍♀️"),
	]);

#[doc="merman 🧜‍♂️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MERMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MERMAN); // 🧜‍♂️ (`U+1F9DC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.to_string().as_str(), \"🧜‍♂️\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::Light)); // 🧜🏻‍♂️ (`U+1F9DC U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::Light).to_string().as_str(), \"🧜🏻‍♂️\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::MediumLight)); // 🧜🏼‍♂️ (`U+1F9DC U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::MediumLight).to_string().as_str(), \"🧜🏼‍♂️\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::Medium)); // 🧜🏽‍♂️ (`U+1F9DC U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::Medium).to_string().as_str(), \"🧜🏽‍♂️\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::MediumDark)); // 🧜🏾‍♂️ (`U+1F9DC U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::MediumDark).to_string().as_str(), \"🧜🏾‍♂️\");"]#[doc="println!(\"{}\", MERMAN.tone(Tone::Dark)); // 🧜🏿‍♂️ (`U+1F9DC U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(MERMAN.tone(Tone::Dark).to_string().as_str(), \"🧜🏿‍♂️\");"]
#[doc="```"]
pub static MERMAN: With<Tone,Emoji> = With::new(Emoji::new("merman","🧜‍♂️"), 
	&[
		Emoji::new("merman: light skin tone","🧜🏻‍♂️"),
	Emoji::new("merman: medium-light skin tone","🧜🏼‍♂️"),
	Emoji::new("merman: medium skin tone","🧜🏽‍♂️"),
	Emoji::new("merman: medium-dark skin tone","🧜🏾‍♂️"),
	Emoji::new("merman: dark skin tone","🧜🏿‍♂️"),
	]);

#[doc="merperson 🧜"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MERPERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MERPERSON); // 🧜 (`U+1F9DC`)"] #[doc="# assert_eq!(MERPERSON.to_string().as_str(), \"🧜\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::Light)); // 🧜🏻 (`U+1F9DC U+1F3FB`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::Light).to_string().as_str(), \"🧜🏻\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::MediumLight)); // 🧜🏼 (`U+1F9DC U+1F3FC`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::MediumLight).to_string().as_str(), \"🧜🏼\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::Medium)); // 🧜🏽 (`U+1F9DC U+1F3FD`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::Medium).to_string().as_str(), \"🧜🏽\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::MediumDark)); // 🧜🏾 (`U+1F9DC U+1F3FE`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::MediumDark).to_string().as_str(), \"🧜🏾\");"]#[doc="println!(\"{}\", MERPERSON.tone(Tone::Dark)); // 🧜🏿 (`U+1F9DC U+1F3FF`)"] #[doc="# assert_eq!(MERPERSON.tone(Tone::Dark).to_string().as_str(), \"🧜🏿\");"]
#[doc="```"]
pub static MERPERSON: With<Tone,Emoji> = With::new(Emoji::new("merperson","🧜"), 
	&[
		Emoji::new("merperson: light skin tone","🧜🏻"),
	Emoji::new("merperson: medium-light skin tone","🧜🏼"),
	Emoji::new("merperson: medium skin tone","🧜🏽"),
	Emoji::new("merperson: medium-dark skin tone","🧜🏾"),
	Emoji::new("merperson: dark skin tone","🧜🏿"),
	]);

#[doc="Mrs. Claus 🤶"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MRS_CLAUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MRS_CLAUS); // 🤶 (`U+1F936`)"] #[doc="# assert_eq!(MRS_CLAUS.to_string().as_str(), \"🤶\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::Light)); // 🤶🏻 (`U+1F936 U+1F3FB`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::Light).to_string().as_str(), \"🤶🏻\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::MediumLight)); // 🤶🏼 (`U+1F936 U+1F3FC`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::MediumLight).to_string().as_str(), \"🤶🏼\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::Medium)); // 🤶🏽 (`U+1F936 U+1F3FD`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::Medium).to_string().as_str(), \"🤶🏽\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::MediumDark)); // 🤶🏾 (`U+1F936 U+1F3FE`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::MediumDark).to_string().as_str(), \"🤶🏾\");"]#[doc="println!(\"{}\", MRS_CLAUS.tone(Tone::Dark)); // 🤶🏿 (`U+1F936 U+1F3FF`)"] #[doc="# assert_eq!(MRS_CLAUS.tone(Tone::Dark).to_string().as_str(), \"🤶🏿\");"]
#[doc="```"]
pub static MRS_CLAUS: With<Tone,Emoji> = With::new(Emoji::new("Mrs. Claus","🤶"), 
	&[
		Emoji::new("Mrs. Claus: light skin tone","🤶🏻"),
	Emoji::new("Mrs. Claus: medium-light skin tone","🤶🏼"),
	Emoji::new("Mrs. Claus: medium skin tone","🤶🏽"),
	Emoji::new("Mrs. Claus: medium-dark skin tone","🤶🏾"),
	Emoji::new("Mrs. Claus: dark skin tone","🤶🏿"),
	]);

#[doc="mx claus 🧑‍🎄"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MX_CLAUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MX_CLAUS); // 🧑‍🎄 (`U+1F9D1 U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.to_string().as_str(), \"🧑‍🎄\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::Light)); // 🧑🏻‍🎄 (`U+1F9D1 U+1F3FB U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🎄\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::MediumLight)); // 🧑🏼‍🎄 (`U+1F9D1 U+1F3FC U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🎄\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::Medium)); // 🧑🏽‍🎄 (`U+1F9D1 U+1F3FD U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🎄\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::MediumDark)); // 🧑🏾‍🎄 (`U+1F9D1 U+1F3FE U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🎄\");"]#[doc="println!(\"{}\", MX_CLAUS.tone(Tone::Dark)); // 🧑🏿‍🎄 (`U+1F9D1 U+1F3FF U+200D U+1F384`)"] #[doc="# assert_eq!(MX_CLAUS.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🎄\");"]
#[doc="```"]
pub static MX_CLAUS: With<Tone,Emoji> = With::new(Emoji::new("mx claus","🧑‍🎄"), 
	&[
		Emoji::new("mx claus: light skin tone","🧑🏻‍🎄"),
	Emoji::new("mx claus: medium-light skin tone","🧑🏼‍🎄"),
	Emoji::new("mx claus: medium skin tone","🧑🏽‍🎄"),
	Emoji::new("mx claus: medium-dark skin tone","🧑🏾‍🎄"),
	Emoji::new("mx claus: dark skin tone","🧑🏿‍🎄"),
	]);

#[doc="Santa Claus 🎅"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SANTA_CLAUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SANTA_CLAUS); // 🎅 (`U+1F385`)"] #[doc="# assert_eq!(SANTA_CLAUS.to_string().as_str(), \"🎅\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::Light)); // 🎅🏻 (`U+1F385 U+1F3FB`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::Light).to_string().as_str(), \"🎅🏻\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::MediumLight)); // 🎅🏼 (`U+1F385 U+1F3FC`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::MediumLight).to_string().as_str(), \"🎅🏼\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::Medium)); // 🎅🏽 (`U+1F385 U+1F3FD`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::Medium).to_string().as_str(), \"🎅🏽\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::MediumDark)); // 🎅🏾 (`U+1F385 U+1F3FE`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::MediumDark).to_string().as_str(), \"🎅🏾\");"]#[doc="println!(\"{}\", SANTA_CLAUS.tone(Tone::Dark)); // 🎅🏿 (`U+1F385 U+1F3FF`)"] #[doc="# assert_eq!(SANTA_CLAUS.tone(Tone::Dark).to_string().as_str(), \"🎅🏿\");"]
#[doc="```"]
pub static SANTA_CLAUS: With<Tone,Emoji> = With::new(Emoji::new("Santa Claus","🎅"), 
	&[
		Emoji::new("Santa Claus: light skin tone","🎅🏻"),
	Emoji::new("Santa Claus: medium-light skin tone","🎅🏼"),
	Emoji::new("Santa Claus: medium skin tone","🎅🏽"),
	Emoji::new("Santa Claus: medium-dark skin tone","🎅🏾"),
	Emoji::new("Santa Claus: dark skin tone","🎅🏿"),
	]);

#[doc="superhero 🦸"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUPERHERO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUPERHERO); // 🦸 (`U+1F9B8`)"] #[doc="# assert_eq!(SUPERHERO.to_string().as_str(), \"🦸\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::Light)); // 🦸🏻 (`U+1F9B8 U+1F3FB`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::Light).to_string().as_str(), \"🦸🏻\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::MediumLight)); // 🦸🏼 (`U+1F9B8 U+1F3FC`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::MediumLight).to_string().as_str(), \"🦸🏼\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::Medium)); // 🦸🏽 (`U+1F9B8 U+1F3FD`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::Medium).to_string().as_str(), \"🦸🏽\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::MediumDark)); // 🦸🏾 (`U+1F9B8 U+1F3FE`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::MediumDark).to_string().as_str(), \"🦸🏾\");"]#[doc="println!(\"{}\", SUPERHERO.tone(Tone::Dark)); // 🦸🏿 (`U+1F9B8 U+1F3FF`)"] #[doc="# assert_eq!(SUPERHERO.tone(Tone::Dark).to_string().as_str(), \"🦸🏿\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male)); // 🦸‍♂️ (`U+1F9B8 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).to_string().as_str(), \"🦸‍♂️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::Light)); // 🦸🏻‍♂️ (`U+1F9B8 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🦸🏻‍♂️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::MediumLight)); // 🦸🏼‍♂️ (`U+1F9B8 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🦸🏼‍♂️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::Medium)); // 🦸🏽‍♂️ (`U+1F9B8 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🦸🏽‍♂️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::MediumDark)); // 🦸🏾‍♂️ (`U+1F9B8 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🦸🏾‍♂️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Male).tone(Tone::Dark)); // 🦸🏿‍♂️ (`U+1F9B8 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🦸🏿‍♂️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female)); // 🦸‍♀️ (`U+1F9B8 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).to_string().as_str(), \"🦸‍♀️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::Light)); // 🦸🏻‍♀️ (`U+1F9B8 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🦸🏻‍♀️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::MediumLight)); // 🦸🏼‍♀️ (`U+1F9B8 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🦸🏼‍♀️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::Medium)); // 🦸🏽‍♀️ (`U+1F9B8 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🦸🏽‍♀️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::MediumDark)); // 🦸🏾‍♀️ (`U+1F9B8 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🦸🏾‍♀️\");"]#[doc="println!(\"{}\", SUPERHERO.gender(Gender::Female).tone(Tone::Dark)); // 🦸🏿‍♀️ (`U+1F9B8 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERHERO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🦸🏿‍♀️\");"]
#[doc="```"]
pub static SUPERHERO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("superhero","🦸"), 
	&[
		Emoji::new("superhero: light skin tone","🦸🏻"),
	Emoji::new("superhero: medium-light skin tone","🦸🏼"),
	Emoji::new("superhero: medium skin tone","🦸🏽"),
	Emoji::new("superhero: medium-dark skin tone","🦸🏾"),
	Emoji::new("superhero: dark skin tone","🦸🏿"),
	]), 
	&[
		With::new(Emoji::new("man superhero","🦸‍♂️"), 
	&[
		Emoji::new("man superhero: light skin tone","🦸🏻‍♂️"),
	Emoji::new("man superhero: medium-light skin tone","🦸🏼‍♂️"),
	Emoji::new("man superhero: medium skin tone","🦸🏽‍♂️"),
	Emoji::new("man superhero: medium-dark skin tone","🦸🏾‍♂️"),
	Emoji::new("man superhero: dark skin tone","🦸🏿‍♂️"),
	]),
	With::new(Emoji::new("woman superhero","🦸‍♀️"), 
	&[
		Emoji::new("woman superhero: light skin tone","🦸🏻‍♀️"),
	Emoji::new("woman superhero: medium-light skin tone","🦸🏼‍♀️"),
	Emoji::new("woman superhero: medium skin tone","🦸🏽‍♀️"),
	Emoji::new("woman superhero: medium-dark skin tone","🦸🏾‍♀️"),
	Emoji::new("woman superhero: dark skin tone","🦸🏿‍♀️"),
	]),
	]);

#[doc="supervillain 🦹"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUPERVILLAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUPERVILLAIN); // 🦹 (`U+1F9B9`)"] #[doc="# assert_eq!(SUPERVILLAIN.to_string().as_str(), \"🦹\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::Light)); // 🦹🏻 (`U+1F9B9 U+1F3FB`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::Light).to_string().as_str(), \"🦹🏻\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::MediumLight)); // 🦹🏼 (`U+1F9B9 U+1F3FC`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::MediumLight).to_string().as_str(), \"🦹🏼\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::Medium)); // 🦹🏽 (`U+1F9B9 U+1F3FD`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::Medium).to_string().as_str(), \"🦹🏽\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::MediumDark)); // 🦹🏾 (`U+1F9B9 U+1F3FE`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::MediumDark).to_string().as_str(), \"🦹🏾\");"]#[doc="println!(\"{}\", SUPERVILLAIN.tone(Tone::Dark)); // 🦹🏿 (`U+1F9B9 U+1F3FF`)"] #[doc="# assert_eq!(SUPERVILLAIN.tone(Tone::Dark).to_string().as_str(), \"🦹🏿\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male)); // 🦹‍♂️ (`U+1F9B9 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).to_string().as_str(), \"🦹‍♂️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::Light)); // 🦹🏻‍♂️ (`U+1F9B9 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🦹🏻‍♂️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumLight)); // 🦹🏼‍♂️ (`U+1F9B9 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🦹🏼‍♂️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::Medium)); // 🦹🏽‍♂️ (`U+1F9B9 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🦹🏽‍♂️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumDark)); // 🦹🏾‍♂️ (`U+1F9B9 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🦹🏾‍♂️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Male).tone(Tone::Dark)); // 🦹🏿‍♂️ (`U+1F9B9 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🦹🏿‍♂️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female)); // 🦹‍♀️ (`U+1F9B9 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).to_string().as_str(), \"🦹‍♀️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::Light)); // 🦹🏻‍♀️ (`U+1F9B9 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🦹🏻‍♀️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumLight)); // 🦹🏼‍♀️ (`U+1F9B9 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🦹🏼‍♀️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::Medium)); // 🦹🏽‍♀️ (`U+1F9B9 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🦹🏽‍♀️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumDark)); // 🦹🏾‍♀️ (`U+1F9B9 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🦹🏾‍♀️\");"]#[doc="println!(\"{}\", SUPERVILLAIN.gender(Gender::Female).tone(Tone::Dark)); // 🦹🏿‍♀️ (`U+1F9B9 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(SUPERVILLAIN.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🦹🏿‍♀️\");"]
#[doc="```"]
pub static SUPERVILLAIN: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("supervillain","🦹"), 
	&[
		Emoji::new("supervillain: light skin tone","🦹🏻"),
	Emoji::new("supervillain: medium-light skin tone","🦹🏼"),
	Emoji::new("supervillain: medium skin tone","🦹🏽"),
	Emoji::new("supervillain: medium-dark skin tone","🦹🏾"),
	Emoji::new("supervillain: dark skin tone","🦹🏿"),
	]), 
	&[
		With::new(Emoji::new("man supervillain","🦹‍♂️"), 
	&[
		Emoji::new("man supervillain: light skin tone","🦹🏻‍♂️"),
	Emoji::new("man supervillain: medium-light skin tone","🦹🏼‍♂️"),
	Emoji::new("man supervillain: medium skin tone","🦹🏽‍♂️"),
	Emoji::new("man supervillain: medium-dark skin tone","🦹🏾‍♂️"),
	Emoji::new("man supervillain: dark skin tone","🦹🏿‍♂️"),
	]),
	With::new(Emoji::new("woman supervillain","🦹‍♀️"), 
	&[
		Emoji::new("woman supervillain: light skin tone","🦹🏻‍♀️"),
	Emoji::new("woman supervillain: medium-light skin tone","🦹🏼‍♀️"),
	Emoji::new("woman supervillain: medium skin tone","🦹🏽‍♀️"),
	Emoji::new("woman supervillain: medium-dark skin tone","🦹🏾‍♀️"),
	Emoji::new("woman supervillain: dark skin tone","🦹🏿‍♀️"),
	]),
	]);

#[doc="vampire 🧛"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VAMPIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VAMPIRE); // 🧛 (`U+1F9DB`)"] #[doc="# assert_eq!(VAMPIRE.to_string().as_str(), \"🧛\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::Light)); // 🧛🏻 (`U+1F9DB U+1F3FB`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::Light).to_string().as_str(), \"🧛🏻\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::MediumLight)); // 🧛🏼 (`U+1F9DB U+1F3FC`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::MediumLight).to_string().as_str(), \"🧛🏼\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::Medium)); // 🧛🏽 (`U+1F9DB U+1F3FD`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::Medium).to_string().as_str(), \"🧛🏽\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::MediumDark)); // 🧛🏾 (`U+1F9DB U+1F3FE`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::MediumDark).to_string().as_str(), \"🧛🏾\");"]#[doc="println!(\"{}\", VAMPIRE.tone(Tone::Dark)); // 🧛🏿 (`U+1F9DB U+1F3FF`)"] #[doc="# assert_eq!(VAMPIRE.tone(Tone::Dark).to_string().as_str(), \"🧛🏿\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male)); // 🧛‍♂️ (`U+1F9DB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).to_string().as_str(), \"🧛‍♂️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::Light)); // 🧛🏻‍♂️ (`U+1F9DB U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧛🏻‍♂️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::MediumLight)); // 🧛🏼‍♂️ (`U+1F9DB U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧛🏼‍♂️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::Medium)); // 🧛🏽‍♂️ (`U+1F9DB U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧛🏽‍♂️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::MediumDark)); // 🧛🏾‍♂️ (`U+1F9DB U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧛🏾‍♂️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Male).tone(Tone::Dark)); // 🧛🏿‍♂️ (`U+1F9DB U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧛🏿‍♂️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female)); // 🧛‍♀️ (`U+1F9DB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).to_string().as_str(), \"🧛‍♀️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::Light)); // 🧛🏻‍♀️ (`U+1F9DB U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧛🏻‍♀️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::MediumLight)); // 🧛🏼‍♀️ (`U+1F9DB U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧛🏼‍♀️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::Medium)); // 🧛🏽‍♀️ (`U+1F9DB U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧛🏽‍♀️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::MediumDark)); // 🧛🏾‍♀️ (`U+1F9DB U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧛🏾‍♀️\");"]#[doc="println!(\"{}\", VAMPIRE.gender(Gender::Female).tone(Tone::Dark)); // 🧛🏿‍♀️ (`U+1F9DB U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(VAMPIRE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧛🏿‍♀️\");"]
#[doc="```"]
pub static VAMPIRE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("vampire","🧛"), 
	&[
		Emoji::new("vampire: light skin tone","🧛🏻"),
	Emoji::new("vampire: medium-light skin tone","🧛🏼"),
	Emoji::new("vampire: medium skin tone","🧛🏽"),
	Emoji::new("vampire: medium-dark skin tone","🧛🏾"),
	Emoji::new("vampire: dark skin tone","🧛🏿"),
	]), 
	&[
		With::new(Emoji::new("man vampire","🧛‍♂️"), 
	&[
		Emoji::new("man vampire: light skin tone","🧛🏻‍♂️"),
	Emoji::new("man vampire: medium-light skin tone","🧛🏼‍♂️"),
	Emoji::new("man vampire: medium skin tone","🧛🏽‍♂️"),
	Emoji::new("man vampire: medium-dark skin tone","🧛🏾‍♂️"),
	Emoji::new("man vampire: dark skin tone","🧛🏿‍♂️"),
	]),
	With::new(Emoji::new("woman vampire","🧛‍♀️"), 
	&[
		Emoji::new("woman vampire: light skin tone","🧛🏻‍♀️"),
	Emoji::new("woman vampire: medium-light skin tone","🧛🏼‍♀️"),
	Emoji::new("woman vampire: medium skin tone","🧛🏽‍♀️"),
	Emoji::new("woman vampire: medium-dark skin tone","🧛🏾‍♀️"),
	Emoji::new("woman vampire: dark skin tone","🧛🏿‍♀️"),
	]),
	]);

#[doc="person zombie 🧟"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZOMBIE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZOMBIE); // 🧟 (`U+1F9DF`)"] #[doc="# assert_eq!(ZOMBIE.to_string().as_str(), \"🧟\");"]#[doc="println!(\"{}\", ZOMBIE.gender(Gender::Male)); // 🧟‍♂️ (`U+1F9DF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(ZOMBIE.gender(Gender::Male).to_string().as_str(), \"🧟‍♂️\");"]#[doc="println!(\"{}\", ZOMBIE.gender(Gender::Female)); // 🧟‍♀️ (`U+1F9DF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(ZOMBIE.gender(Gender::Female).to_string().as_str(), \"🧟‍♀️\");"]
#[doc="```"]
pub static ZOMBIE: With<Gender,Emoji> = With::new(Emoji::new("zombie","🧟"), 
	&[
		Emoji::new("man zombie","🧟‍♂️"),
	Emoji::new("woman zombie","🧟‍♀️"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BABY_ANGEL.default, &BABY_ANGEL.tone(Tone::Light), &BABY_ANGEL.tone(Tone::MediumLight), &BABY_ANGEL.tone(Tone::Medium), &BABY_ANGEL.tone(Tone::MediumDark), &BABY_ANGEL.tone(Tone::Dark), ],
&[&ELF.default.default, &ELF.default.tone(Tone::Light), &ELF.default.tone(Tone::MediumLight), &ELF.default.tone(Tone::Medium), &ELF.default.tone(Tone::MediumDark), &ELF.default.tone(Tone::Dark), &ELF.gender(Gender::Male).default, &ELF.gender(Gender::Male).tone(Tone::Light), &ELF.gender(Gender::Male).tone(Tone::MediumLight), &ELF.gender(Gender::Male).tone(Tone::Medium), &ELF.gender(Gender::Male).tone(Tone::MediumDark), &ELF.gender(Gender::Male).tone(Tone::Dark), &ELF.gender(Gender::Female).default, &ELF.gender(Gender::Female).tone(Tone::Light), &ELF.gender(Gender::Female).tone(Tone::MediumLight), &ELF.gender(Gender::Female).tone(Tone::Medium), &ELF.gender(Gender::Female).tone(Tone::MediumDark), &ELF.gender(Gender::Female).tone(Tone::Dark), ],
&[&FAIRY.default.default, &FAIRY.default.tone(Tone::Light), &FAIRY.default.tone(Tone::MediumLight), &FAIRY.default.tone(Tone::Medium), &FAIRY.default.tone(Tone::MediumDark), &FAIRY.default.tone(Tone::Dark), &FAIRY.gender(Gender::Male).default, &FAIRY.gender(Gender::Male).tone(Tone::Light), &FAIRY.gender(Gender::Male).tone(Tone::MediumLight), &FAIRY.gender(Gender::Male).tone(Tone::Medium), &FAIRY.gender(Gender::Male).tone(Tone::MediumDark), &FAIRY.gender(Gender::Male).tone(Tone::Dark), &FAIRY.gender(Gender::Female).default, &FAIRY.gender(Gender::Female).tone(Tone::Light), &FAIRY.gender(Gender::Female).tone(Tone::MediumLight), &FAIRY.gender(Gender::Female).tone(Tone::Medium), &FAIRY.gender(Gender::Female).tone(Tone::MediumDark), &FAIRY.gender(Gender::Female).tone(Tone::Dark), ],
&[&GENIE.default, &GENIE.gender(Gender::Male), &GENIE.gender(Gender::Female), ],
&[&MAGE.default.default, &MAGE.default.tone(Tone::Light), &MAGE.default.tone(Tone::MediumLight), &MAGE.default.tone(Tone::Medium), &MAGE.default.tone(Tone::MediumDark), &MAGE.default.tone(Tone::Dark), &MAGE.gender(Gender::Male).default, &MAGE.gender(Gender::Male).tone(Tone::Light), &MAGE.gender(Gender::Male).tone(Tone::MediumLight), &MAGE.gender(Gender::Male).tone(Tone::Medium), &MAGE.gender(Gender::Male).tone(Tone::MediumDark), &MAGE.gender(Gender::Male).tone(Tone::Dark), &MAGE.gender(Gender::Female).default, &MAGE.gender(Gender::Female).tone(Tone::Light), &MAGE.gender(Gender::Female).tone(Tone::MediumLight), &MAGE.gender(Gender::Female).tone(Tone::Medium), &MAGE.gender(Gender::Female).tone(Tone::MediumDark), &MAGE.gender(Gender::Female).tone(Tone::Dark), ],
&[&MERMAID.default, &MERMAID.tone(Tone::Light), &MERMAID.tone(Tone::MediumLight), &MERMAID.tone(Tone::Medium), &MERMAID.tone(Tone::MediumDark), &MERMAID.tone(Tone::Dark), ],
&[&MERMAN.default, &MERMAN.tone(Tone::Light), &MERMAN.tone(Tone::MediumLight), &MERMAN.tone(Tone::Medium), &MERMAN.tone(Tone::MediumDark), &MERMAN.tone(Tone::Dark), ],
&[&MERPERSON.default, &MERPERSON.tone(Tone::Light), &MERPERSON.tone(Tone::MediumLight), &MERPERSON.tone(Tone::Medium), &MERPERSON.tone(Tone::MediumDark), &MERPERSON.tone(Tone::Dark), ],
&[&MRS_CLAUS.default, &MRS_CLAUS.tone(Tone::Light), &MRS_CLAUS.tone(Tone::MediumLight), &MRS_CLAUS.tone(Tone::Medium), &MRS_CLAUS.tone(Tone::MediumDark), &MRS_CLAUS.tone(Tone::Dark), ],
&[&MX_CLAUS.default, &MX_CLAUS.tone(Tone::Light), &MX_CLAUS.tone(Tone::MediumLight), &MX_CLAUS.tone(Tone::Medium), &MX_CLAUS.tone(Tone::MediumDark), &MX_CLAUS.tone(Tone::Dark), ],
&[&SANTA_CLAUS.default, &SANTA_CLAUS.tone(Tone::Light), &SANTA_CLAUS.tone(Tone::MediumLight), &SANTA_CLAUS.tone(Tone::Medium), &SANTA_CLAUS.tone(Tone::MediumDark), &SANTA_CLAUS.tone(Tone::Dark), ],
&[&SUPERHERO.default.default, &SUPERHERO.default.tone(Tone::Light), &SUPERHERO.default.tone(Tone::MediumLight), &SUPERHERO.default.tone(Tone::Medium), &SUPERHERO.default.tone(Tone::MediumDark), &SUPERHERO.default.tone(Tone::Dark), &SUPERHERO.gender(Gender::Male).default, &SUPERHERO.gender(Gender::Male).tone(Tone::Light), &SUPERHERO.gender(Gender::Male).tone(Tone::MediumLight), &SUPERHERO.gender(Gender::Male).tone(Tone::Medium), &SUPERHERO.gender(Gender::Male).tone(Tone::MediumDark), &SUPERHERO.gender(Gender::Male).tone(Tone::Dark), &SUPERHERO.gender(Gender::Female).default, &SUPERHERO.gender(Gender::Female).tone(Tone::Light), &SUPERHERO.gender(Gender::Female).tone(Tone::MediumLight), &SUPERHERO.gender(Gender::Female).tone(Tone::Medium), &SUPERHERO.gender(Gender::Female).tone(Tone::MediumDark), &SUPERHERO.gender(Gender::Female).tone(Tone::Dark), ],
&[&SUPERVILLAIN.default.default, &SUPERVILLAIN.default.tone(Tone::Light), &SUPERVILLAIN.default.tone(Tone::MediumLight), &SUPERVILLAIN.default.tone(Tone::Medium), &SUPERVILLAIN.default.tone(Tone::MediumDark), &SUPERVILLAIN.default.tone(Tone::Dark), &SUPERVILLAIN.gender(Gender::Male).default, &SUPERVILLAIN.gender(Gender::Male).tone(Tone::Light), &SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumLight), &SUPERVILLAIN.gender(Gender::Male).tone(Tone::Medium), &SUPERVILLAIN.gender(Gender::Male).tone(Tone::MediumDark), &SUPERVILLAIN.gender(Gender::Male).tone(Tone::Dark), &SUPERVILLAIN.gender(Gender::Female).default, &SUPERVILLAIN.gender(Gender::Female).tone(Tone::Light), &SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumLight), &SUPERVILLAIN.gender(Gender::Female).tone(Tone::Medium), &SUPERVILLAIN.gender(Gender::Female).tone(Tone::MediumDark), &SUPERVILLAIN.gender(Gender::Female).tone(Tone::Dark), ],
&[&VAMPIRE.default.default, &VAMPIRE.default.tone(Tone::Light), &VAMPIRE.default.tone(Tone::MediumLight), &VAMPIRE.default.tone(Tone::Medium), &VAMPIRE.default.tone(Tone::MediumDark), &VAMPIRE.default.tone(Tone::Dark), &VAMPIRE.gender(Gender::Male).default, &VAMPIRE.gender(Gender::Male).tone(Tone::Light), &VAMPIRE.gender(Gender::Male).tone(Tone::MediumLight), &VAMPIRE.gender(Gender::Male).tone(Tone::Medium), &VAMPIRE.gender(Gender::Male).tone(Tone::MediumDark), &VAMPIRE.gender(Gender::Male).tone(Tone::Dark), &VAMPIRE.gender(Gender::Female).default, &VAMPIRE.gender(Gender::Female).tone(Tone::Light), &VAMPIRE.gender(Gender::Female).tone(Tone::MediumLight), &VAMPIRE.gender(Gender::Female).tone(Tone::Medium), &VAMPIRE.gender(Gender::Female).tone(Tone::MediumDark), &VAMPIRE.gender(Gender::Female).tone(Tone::Dark), ],
&[&ZOMBIE.default, &ZOMBIE.gender(Gender::Male), &ZOMBIE.gender(Gender::Female), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BABY_ANGEL.default, &ELF.default.default, &FAIRY.default.default, &GENIE.default, &MAGE.default.default, &MERMAID.default, &MERMAN.default, &MERPERSON.default, &MRS_CLAUS.default, &MX_CLAUS.default, &SANTA_CLAUS.default, &SUPERHERO.default.default, &SUPERVILLAIN.default.default, &VAMPIRE.default.default, &ZOMBIE.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_fantasy

/// person-gesture 🧏🙇🤦
pub mod person_gesture { // people_and_body::person_gesture
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="deaf person 🧏"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DEAF_PERSON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DEAF_PERSON); // 🧏 (`U+1F9CF`)"] #[doc="# assert_eq!(DEAF_PERSON.to_string().as_str(), \"🧏\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::Light)); // 🧏🏻 (`U+1F9CF U+1F3FB`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::Light).to_string().as_str(), \"🧏🏻\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::MediumLight)); // 🧏🏼 (`U+1F9CF U+1F3FC`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::MediumLight).to_string().as_str(), \"🧏🏼\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::Medium)); // 🧏🏽 (`U+1F9CF U+1F3FD`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::Medium).to_string().as_str(), \"🧏🏽\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::MediumDark)); // 🧏🏾 (`U+1F9CF U+1F3FE`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::MediumDark).to_string().as_str(), \"🧏🏾\");"]#[doc="println!(\"{}\", DEAF_PERSON.tone(Tone::Dark)); // 🧏🏿 (`U+1F9CF U+1F3FF`)"] #[doc="# assert_eq!(DEAF_PERSON.tone(Tone::Dark).to_string().as_str(), \"🧏🏿\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male)); // 🧏‍♂️ (`U+1F9CF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).to_string().as_str(), \"🧏‍♂️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::Light)); // 🧏🏻‍♂️ (`U+1F9CF U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧏🏻‍♂️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumLight)); // 🧏🏼‍♂️ (`U+1F9CF U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧏🏼‍♂️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::Medium)); // 🧏🏽‍♂️ (`U+1F9CF U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧏🏽‍♂️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumDark)); // 🧏🏾‍♂️ (`U+1F9CF U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧏🏾‍♂️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Male).tone(Tone::Dark)); // 🧏🏿‍♂️ (`U+1F9CF U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧏🏿‍♂️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female)); // 🧏‍♀️ (`U+1F9CF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).to_string().as_str(), \"🧏‍♀️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::Light)); // 🧏🏻‍♀️ (`U+1F9CF U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧏🏻‍♀️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumLight)); // 🧏🏼‍♀️ (`U+1F9CF U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧏🏼‍♀️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::Medium)); // 🧏🏽‍♀️ (`U+1F9CF U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧏🏽‍♀️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumDark)); // 🧏🏾‍♀️ (`U+1F9CF U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧏🏾‍♀️\");"]#[doc="println!(\"{}\", DEAF_PERSON.gender(Gender::Female).tone(Tone::Dark)); // 🧏🏿‍♀️ (`U+1F9CF U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DEAF_PERSON.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧏🏿‍♀️\");"]
#[doc="```"]
pub static DEAF_PERSON: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("deaf person","🧏"), 
	&[
		Emoji::new("deaf person: light skin tone","🧏🏻"),
	Emoji::new("deaf person: medium-light skin tone","🧏🏼"),
	Emoji::new("deaf person: medium skin tone","🧏🏽"),
	Emoji::new("deaf person: medium-dark skin tone","🧏🏾"),
	Emoji::new("deaf person: dark skin tone","🧏🏿"),
	]), 
	&[
		With::new(Emoji::new("deaf man","🧏‍♂️"), 
	&[
		Emoji::new("deaf man: light skin tone","🧏🏻‍♂️"),
	Emoji::new("deaf man: medium-light skin tone","🧏🏼‍♂️"),
	Emoji::new("deaf man: medium skin tone","🧏🏽‍♂️"),
	Emoji::new("deaf man: medium-dark skin tone","🧏🏾‍♂️"),
	Emoji::new("deaf man: dark skin tone","🧏🏿‍♂️"),
	]),
	With::new(Emoji::new("deaf woman","🧏‍♀️"), 
	&[
		Emoji::new("deaf woman: light skin tone","🧏🏻‍♀️"),
	Emoji::new("deaf woman: medium-light skin tone","🧏🏼‍♀️"),
	Emoji::new("deaf woman: medium skin tone","🧏🏽‍♀️"),
	Emoji::new("deaf woman: medium-dark skin tone","🧏🏾‍♀️"),
	Emoji::new("deaf woman: dark skin tone","🧏🏿‍♀️"),
	]),
	]);

#[doc="person bowing 🙇"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_BOWING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_BOWING); // 🙇 (`U+1F647`)"] #[doc="# assert_eq!(PERSON_BOWING.to_string().as_str(), \"🙇\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::Light)); // 🙇🏻 (`U+1F647 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::Light).to_string().as_str(), \"🙇🏻\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::MediumLight)); // 🙇🏼 (`U+1F647 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::MediumLight).to_string().as_str(), \"🙇🏼\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::Medium)); // 🙇🏽 (`U+1F647 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::Medium).to_string().as_str(), \"🙇🏽\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::MediumDark)); // 🙇🏾 (`U+1F647 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::MediumDark).to_string().as_str(), \"🙇🏾\");"]#[doc="println!(\"{}\", PERSON_BOWING.tone(Tone::Dark)); // 🙇🏿 (`U+1F647 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_BOWING.tone(Tone::Dark).to_string().as_str(), \"🙇🏿\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male)); // 🙇‍♂️ (`U+1F647 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).to_string().as_str(), \"🙇‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::Light)); // 🙇🏻‍♂️ (`U+1F647 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🙇🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumLight)); // 🙇🏼‍♂️ (`U+1F647 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🙇🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::Medium)); // 🙇🏽‍♂️ (`U+1F647 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🙇🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumDark)); // 🙇🏾‍♂️ (`U+1F647 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🙇🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Male).tone(Tone::Dark)); // 🙇🏿‍♂️ (`U+1F647 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🙇🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female)); // 🙇‍♀️ (`U+1F647 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).to_string().as_str(), \"🙇‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::Light)); // 🙇🏻‍♀️ (`U+1F647 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🙇🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumLight)); // 🙇🏼‍♀️ (`U+1F647 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🙇🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::Medium)); // 🙇🏽‍♀️ (`U+1F647 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🙇🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumDark)); // 🙇🏾‍♀️ (`U+1F647 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🙇🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOWING.gender(Gender::Female).tone(Tone::Dark)); // 🙇🏿‍♀️ (`U+1F647 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOWING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🙇🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_BOWING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person bowing","🙇"), 
	&[
		Emoji::new("person bowing: light skin tone","🙇🏻"),
	Emoji::new("person bowing: medium-light skin tone","🙇🏼"),
	Emoji::new("person bowing: medium skin tone","🙇🏽"),
	Emoji::new("person bowing: medium-dark skin tone","🙇🏾"),
	Emoji::new("person bowing: dark skin tone","🙇🏿"),
	]), 
	&[
		With::new(Emoji::new("man bowing","🙇‍♂️"), 
	&[
		Emoji::new("man bowing: light skin tone","🙇🏻‍♂️"),
	Emoji::new("man bowing: medium-light skin tone","🙇🏼‍♂️"),
	Emoji::new("man bowing: medium skin tone","🙇🏽‍♂️"),
	Emoji::new("man bowing: medium-dark skin tone","🙇🏾‍♂️"),
	Emoji::new("man bowing: dark skin tone","🙇🏿‍♂️"),
	]),
	With::new(Emoji::new("woman bowing","🙇‍♀️"), 
	&[
		Emoji::new("woman bowing: light skin tone","🙇🏻‍♀️"),
	Emoji::new("woman bowing: medium-light skin tone","🙇🏼‍♀️"),
	Emoji::new("woman bowing: medium skin tone","🙇🏽‍♀️"),
	Emoji::new("woman bowing: medium-dark skin tone","🙇🏾‍♀️"),
	Emoji::new("woman bowing: dark skin tone","🙇🏿‍♀️"),
	]),
	]);

#[doc="person facepalming 🤦"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FACEPALMING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FACEPALMING); // 🤦 (`U+1F926`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.to_string().as_str(), \"🤦\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::Light)); // 🤦🏻 (`U+1F926 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::Light).to_string().as_str(), \"🤦🏻\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::MediumLight)); // 🤦🏼 (`U+1F926 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::MediumLight).to_string().as_str(), \"🤦🏼\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::Medium)); // 🤦🏽 (`U+1F926 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::Medium).to_string().as_str(), \"🤦🏽\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::MediumDark)); // 🤦🏾 (`U+1F926 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::MediumDark).to_string().as_str(), \"🤦🏾\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.tone(Tone::Dark)); // 🤦🏿 (`U+1F926 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.tone(Tone::Dark).to_string().as_str(), \"🤦🏿\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male)); // 🤦‍♂️ (`U+1F926 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).to_string().as_str(), \"🤦‍♂️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Light)); // 🤦🏻‍♂️ (`U+1F926 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤦🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumLight)); // 🤦🏼‍♂️ (`U+1F926 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤦🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Medium)); // 🤦🏽‍♂️ (`U+1F926 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤦🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumDark)); // 🤦🏾‍♂️ (`U+1F926 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤦🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Dark)); // 🤦🏿‍♂️ (`U+1F926 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤦🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female)); // 🤦‍♀️ (`U+1F926 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).to_string().as_str(), \"🤦‍♀️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Light)); // 🤦🏻‍♀️ (`U+1F926 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤦🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumLight)); // 🤦🏼‍♀️ (`U+1F926 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤦🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Medium)); // 🤦🏽‍♀️ (`U+1F926 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤦🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumDark)); // 🤦🏾‍♀️ (`U+1F926 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤦🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Dark)); // 🤦🏿‍♀️ (`U+1F926 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤦🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_FACEPALMING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person facepalming","🤦"), 
	&[
		Emoji::new("person facepalming: light skin tone","🤦🏻"),
	Emoji::new("person facepalming: medium-light skin tone","🤦🏼"),
	Emoji::new("person facepalming: medium skin tone","🤦🏽"),
	Emoji::new("person facepalming: medium-dark skin tone","🤦🏾"),
	Emoji::new("person facepalming: dark skin tone","🤦🏿"),
	]), 
	&[
		With::new(Emoji::new("man facepalming","🤦‍♂️"), 
	&[
		Emoji::new("man facepalming: light skin tone","🤦🏻‍♂️"),
	Emoji::new("man facepalming: medium-light skin tone","🤦🏼‍♂️"),
	Emoji::new("man facepalming: medium skin tone","🤦🏽‍♂️"),
	Emoji::new("man facepalming: medium-dark skin tone","🤦🏾‍♂️"),
	Emoji::new("man facepalming: dark skin tone","🤦🏿‍♂️"),
	]),
	With::new(Emoji::new("woman facepalming","🤦‍♀️"), 
	&[
		Emoji::new("woman facepalming: light skin tone","🤦🏻‍♀️"),
	Emoji::new("woman facepalming: medium-light skin tone","🤦🏼‍♀️"),
	Emoji::new("woman facepalming: medium skin tone","🤦🏽‍♀️"),
	Emoji::new("woman facepalming: medium-dark skin tone","🤦🏾‍♀️"),
	Emoji::new("woman facepalming: dark skin tone","🤦🏿‍♀️"),
	]),
	]);

#[doc="person frowning 🙍"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FROWNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FROWNING); // 🙍 (`U+1F64D`)"] #[doc="# assert_eq!(PERSON_FROWNING.to_string().as_str(), \"🙍\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::Light)); // 🙍🏻 (`U+1F64D U+1F3FB`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::Light).to_string().as_str(), \"🙍🏻\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::MediumLight)); // 🙍🏼 (`U+1F64D U+1F3FC`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::MediumLight).to_string().as_str(), \"🙍🏼\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::Medium)); // 🙍🏽 (`U+1F64D U+1F3FD`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::Medium).to_string().as_str(), \"🙍🏽\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::MediumDark)); // 🙍🏾 (`U+1F64D U+1F3FE`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::MediumDark).to_string().as_str(), \"🙍🏾\");"]#[doc="println!(\"{}\", PERSON_FROWNING.tone(Tone::Dark)); // 🙍🏿 (`U+1F64D U+1F3FF`)"] #[doc="# assert_eq!(PERSON_FROWNING.tone(Tone::Dark).to_string().as_str(), \"🙍🏿\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male)); // 🙍‍♂️ (`U+1F64D U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).to_string().as_str(), \"🙍‍♂️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::Light)); // 🙍🏻‍♂️ (`U+1F64D U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🙍🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumLight)); // 🙍🏼‍♂️ (`U+1F64D U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🙍🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::Medium)); // 🙍🏽‍♂️ (`U+1F64D U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🙍🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumDark)); // 🙍🏾‍♂️ (`U+1F64D U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🙍🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Male).tone(Tone::Dark)); // 🙍🏿‍♂️ (`U+1F64D U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🙍🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female)); // 🙍‍♀️ (`U+1F64D U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).to_string().as_str(), \"🙍‍♀️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::Light)); // 🙍🏻‍♀️ (`U+1F64D U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🙍🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumLight)); // 🙍🏼‍♀️ (`U+1F64D U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🙍🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::Medium)); // 🙍🏽‍♀️ (`U+1F64D U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🙍🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumDark)); // 🙍🏾‍♀️ (`U+1F64D U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🙍🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_FROWNING.gender(Gender::Female).tone(Tone::Dark)); // 🙍🏿‍♀️ (`U+1F64D U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_FROWNING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🙍🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_FROWNING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person frowning","🙍"), 
	&[
		Emoji::new("person frowning: light skin tone","🙍🏻"),
	Emoji::new("person frowning: medium-light skin tone","🙍🏼"),
	Emoji::new("person frowning: medium skin tone","🙍🏽"),
	Emoji::new("person frowning: medium-dark skin tone","🙍🏾"),
	Emoji::new("person frowning: dark skin tone","🙍🏿"),
	]), 
	&[
		With::new(Emoji::new("man frowning","🙍‍♂️"), 
	&[
		Emoji::new("man frowning: light skin tone","🙍🏻‍♂️"),
	Emoji::new("man frowning: medium-light skin tone","🙍🏼‍♂️"),
	Emoji::new("man frowning: medium skin tone","🙍🏽‍♂️"),
	Emoji::new("man frowning: medium-dark skin tone","🙍🏾‍♂️"),
	Emoji::new("man frowning: dark skin tone","🙍🏿‍♂️"),
	]),
	With::new(Emoji::new("woman frowning","🙍‍♀️"), 
	&[
		Emoji::new("woman frowning: light skin tone","🙍🏻‍♀️"),
	Emoji::new("woman frowning: medium-light skin tone","🙍🏼‍♀️"),
	Emoji::new("woman frowning: medium skin tone","🙍🏽‍♀️"),
	Emoji::new("woman frowning: medium-dark skin tone","🙍🏾‍♀️"),
	Emoji::new("woman frowning: dark skin tone","🙍🏿‍♀️"),
	]),
	]);

#[doc="person gesturing NO 🙅"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GESTURING_NO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GESTURING_NO); // 🙅 (`U+1F645`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.to_string().as_str(), \"🙅\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::Light)); // 🙅🏻 (`U+1F645 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::Light).to_string().as_str(), \"🙅🏻\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::MediumLight)); // 🙅🏼 (`U+1F645 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::MediumLight).to_string().as_str(), \"🙅🏼\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::Medium)); // 🙅🏽 (`U+1F645 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::Medium).to_string().as_str(), \"🙅🏽\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::MediumDark)); // 🙅🏾 (`U+1F645 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::MediumDark).to_string().as_str(), \"🙅🏾\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.tone(Tone::Dark)); // 🙅🏿 (`U+1F645 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.tone(Tone::Dark).to_string().as_str(), \"🙅🏿\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male)); // 🙅‍♂️ (`U+1F645 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).to_string().as_str(), \"🙅‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Light)); // 🙅🏻‍♂️ (`U+1F645 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🙅🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumLight)); // 🙅🏼‍♂️ (`U+1F645 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🙅🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Medium)); // 🙅🏽‍♂️ (`U+1F645 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🙅🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumDark)); // 🙅🏾‍♂️ (`U+1F645 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🙅🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Dark)); // 🙅🏿‍♂️ (`U+1F645 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🙅🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female)); // 🙅‍♀️ (`U+1F645 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).to_string().as_str(), \"🙅‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Light)); // 🙅🏻‍♀️ (`U+1F645 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🙅🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumLight)); // 🙅🏼‍♀️ (`U+1F645 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🙅🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Medium)); // 🙅🏽‍♀️ (`U+1F645 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🙅🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumDark)); // 🙅🏾‍♀️ (`U+1F645 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🙅🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Dark)); // 🙅🏿‍♀️ (`U+1F645 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🙅🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_GESTURING_NO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person gesturing NO","🙅"), 
	&[
		Emoji::new("person gesturing NO: light skin tone","🙅🏻"),
	Emoji::new("person gesturing NO: medium-light skin tone","🙅🏼"),
	Emoji::new("person gesturing NO: medium skin tone","🙅🏽"),
	Emoji::new("person gesturing NO: medium-dark skin tone","🙅🏾"),
	Emoji::new("person gesturing NO: dark skin tone","🙅🏿"),
	]), 
	&[
		With::new(Emoji::new("man gesturing NO","🙅‍♂️"), 
	&[
		Emoji::new("man gesturing NO: light skin tone","🙅🏻‍♂️"),
	Emoji::new("man gesturing NO: medium-light skin tone","🙅🏼‍♂️"),
	Emoji::new("man gesturing NO: medium skin tone","🙅🏽‍♂️"),
	Emoji::new("man gesturing NO: medium-dark skin tone","🙅🏾‍♂️"),
	Emoji::new("man gesturing NO: dark skin tone","🙅🏿‍♂️"),
	]),
	With::new(Emoji::new("woman gesturing NO","🙅‍♀️"), 
	&[
		Emoji::new("woman gesturing NO: light skin tone","🙅🏻‍♀️"),
	Emoji::new("woman gesturing NO: medium-light skin tone","🙅🏼‍♀️"),
	Emoji::new("woman gesturing NO: medium skin tone","🙅🏽‍♀️"),
	Emoji::new("woman gesturing NO: medium-dark skin tone","🙅🏾‍♀️"),
	Emoji::new("woman gesturing NO: dark skin tone","🙅🏿‍♀️"),
	]),
	]);

#[doc="person gesturing OK 🙆"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GESTURING_OK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GESTURING_OK); // 🙆 (`U+1F646`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.to_string().as_str(), \"🙆\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::Light)); // 🙆🏻 (`U+1F646 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::Light).to_string().as_str(), \"🙆🏻\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::MediumLight)); // 🙆🏼 (`U+1F646 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::MediumLight).to_string().as_str(), \"🙆🏼\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::Medium)); // 🙆🏽 (`U+1F646 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::Medium).to_string().as_str(), \"🙆🏽\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::MediumDark)); // 🙆🏾 (`U+1F646 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::MediumDark).to_string().as_str(), \"🙆🏾\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.tone(Tone::Dark)); // 🙆🏿 (`U+1F646 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.tone(Tone::Dark).to_string().as_str(), \"🙆🏿\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male)); // 🙆‍♂️ (`U+1F646 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).to_string().as_str(), \"🙆‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Light)); // 🙆🏻‍♂️ (`U+1F646 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🙆🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumLight)); // 🙆🏼‍♂️ (`U+1F646 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🙆🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Medium)); // 🙆🏽‍♂️ (`U+1F646 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🙆🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumDark)); // 🙆🏾‍♂️ (`U+1F646 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🙆🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Dark)); // 🙆🏿‍♂️ (`U+1F646 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🙆🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female)); // 🙆‍♀️ (`U+1F646 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).to_string().as_str(), \"🙆‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Light)); // 🙆🏻‍♀️ (`U+1F646 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🙆🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumLight)); // 🙆🏼‍♀️ (`U+1F646 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🙆🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Medium)); // 🙆🏽‍♀️ (`U+1F646 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🙆🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumDark)); // 🙆🏾‍♀️ (`U+1F646 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🙆🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Dark)); // 🙆🏿‍♀️ (`U+1F646 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🙆🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_GESTURING_OK: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person gesturing OK","🙆"), 
	&[
		Emoji::new("person gesturing OK: light skin tone","🙆🏻"),
	Emoji::new("person gesturing OK: medium-light skin tone","🙆🏼"),
	Emoji::new("person gesturing OK: medium skin tone","🙆🏽"),
	Emoji::new("person gesturing OK: medium-dark skin tone","🙆🏾"),
	Emoji::new("person gesturing OK: dark skin tone","🙆🏿"),
	]), 
	&[
		With::new(Emoji::new("man gesturing OK","🙆‍♂️"), 
	&[
		Emoji::new("man gesturing OK: light skin tone","🙆🏻‍♂️"),
	Emoji::new("man gesturing OK: medium-light skin tone","🙆🏼‍♂️"),
	Emoji::new("man gesturing OK: medium skin tone","🙆🏽‍♂️"),
	Emoji::new("man gesturing OK: medium-dark skin tone","🙆🏾‍♂️"),
	Emoji::new("man gesturing OK: dark skin tone","🙆🏿‍♂️"),
	]),
	With::new(Emoji::new("woman gesturing OK","🙆‍♀️"), 
	&[
		Emoji::new("woman gesturing OK: light skin tone","🙆🏻‍♀️"),
	Emoji::new("woman gesturing OK: medium-light skin tone","🙆🏼‍♀️"),
	Emoji::new("woman gesturing OK: medium skin tone","🙆🏽‍♀️"),
	Emoji::new("woman gesturing OK: medium-dark skin tone","🙆🏾‍♀️"),
	Emoji::new("woman gesturing OK: dark skin tone","🙆🏿‍♀️"),
	]),
	]);

#[doc="person pouting 🙎"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_POUTING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_POUTING); // 🙎 (`U+1F64E`)"] #[doc="# assert_eq!(PERSON_POUTING.to_string().as_str(), \"🙎\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::Light)); // 🙎🏻 (`U+1F64E U+1F3FB`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::Light).to_string().as_str(), \"🙎🏻\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::MediumLight)); // 🙎🏼 (`U+1F64E U+1F3FC`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::MediumLight).to_string().as_str(), \"🙎🏼\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::Medium)); // 🙎🏽 (`U+1F64E U+1F3FD`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::Medium).to_string().as_str(), \"🙎🏽\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::MediumDark)); // 🙎🏾 (`U+1F64E U+1F3FE`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::MediumDark).to_string().as_str(), \"🙎🏾\");"]#[doc="println!(\"{}\", PERSON_POUTING.tone(Tone::Dark)); // 🙎🏿 (`U+1F64E U+1F3FF`)"] #[doc="# assert_eq!(PERSON_POUTING.tone(Tone::Dark).to_string().as_str(), \"🙎🏿\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male)); // 🙎‍♂️ (`U+1F64E U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).to_string().as_str(), \"🙎‍♂️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::Light)); // 🙎🏻‍♂️ (`U+1F64E U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🙎🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumLight)); // 🙎🏼‍♂️ (`U+1F64E U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🙎🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::Medium)); // 🙎🏽‍♂️ (`U+1F64E U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🙎🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumDark)); // 🙎🏾‍♂️ (`U+1F64E U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🙎🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Male).tone(Tone::Dark)); // 🙎🏿‍♂️ (`U+1F64E U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🙎🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female)); // 🙎‍♀️ (`U+1F64E U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).to_string().as_str(), \"🙎‍♀️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::Light)); // 🙎🏻‍♀️ (`U+1F64E U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🙎🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumLight)); // 🙎🏼‍♀️ (`U+1F64E U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🙎🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::Medium)); // 🙎🏽‍♀️ (`U+1F64E U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🙎🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumDark)); // 🙎🏾‍♀️ (`U+1F64E U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🙎🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_POUTING.gender(Gender::Female).tone(Tone::Dark)); // 🙎🏿‍♀️ (`U+1F64E U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_POUTING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🙎🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_POUTING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person pouting","🙎"), 
	&[
		Emoji::new("person pouting: light skin tone","🙎🏻"),
	Emoji::new("person pouting: medium-light skin tone","🙎🏼"),
	Emoji::new("person pouting: medium skin tone","🙎🏽"),
	Emoji::new("person pouting: medium-dark skin tone","🙎🏾"),
	Emoji::new("person pouting: dark skin tone","🙎🏿"),
	]), 
	&[
		With::new(Emoji::new("man pouting","🙎‍♂️"), 
	&[
		Emoji::new("man pouting: light skin tone","🙎🏻‍♂️"),
	Emoji::new("man pouting: medium-light skin tone","🙎🏼‍♂️"),
	Emoji::new("man pouting: medium skin tone","🙎🏽‍♂️"),
	Emoji::new("man pouting: medium-dark skin tone","🙎🏾‍♂️"),
	Emoji::new("man pouting: dark skin tone","🙎🏿‍♂️"),
	]),
	With::new(Emoji::new("woman pouting","🙎‍♀️"), 
	&[
		Emoji::new("woman pouting: light skin tone","🙎🏻‍♀️"),
	Emoji::new("woman pouting: medium-light skin tone","🙎🏼‍♀️"),
	Emoji::new("woman pouting: medium skin tone","🙎🏽‍♀️"),
	Emoji::new("woman pouting: medium-dark skin tone","🙎🏾‍♀️"),
	Emoji::new("woman pouting: dark skin tone","🙎🏿‍♀️"),
	]),
	]);

#[doc="person raising hand 🙋"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_RAISING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_RAISING_HAND); // 🙋 (`U+1F64B`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.to_string().as_str(), \"🙋\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::Light)); // 🙋🏻 (`U+1F64B U+1F3FB`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::Light).to_string().as_str(), \"🙋🏻\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::MediumLight)); // 🙋🏼 (`U+1F64B U+1F3FC`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"🙋🏼\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::Medium)); // 🙋🏽 (`U+1F64B U+1F3FD`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::Medium).to_string().as_str(), \"🙋🏽\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::MediumDark)); // 🙋🏾 (`U+1F64B U+1F3FE`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"🙋🏾\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.tone(Tone::Dark)); // 🙋🏿 (`U+1F64B U+1F3FF`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.tone(Tone::Dark).to_string().as_str(), \"🙋🏿\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male)); // 🙋‍♂️ (`U+1F64B U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).to_string().as_str(), \"🙋‍♂️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Light)); // 🙋🏻‍♂️ (`U+1F64B U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🙋🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumLight)); // 🙋🏼‍♂️ (`U+1F64B U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🙋🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Medium)); // 🙋🏽‍♂️ (`U+1F64B U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🙋🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumDark)); // 🙋🏾‍♂️ (`U+1F64B U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🙋🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Dark)); // 🙋🏿‍♂️ (`U+1F64B U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🙋🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female)); // 🙋‍♀️ (`U+1F64B U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).to_string().as_str(), \"🙋‍♀️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Light)); // 🙋🏻‍♀️ (`U+1F64B U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🙋🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumLight)); // 🙋🏼‍♀️ (`U+1F64B U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🙋🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Medium)); // 🙋🏽‍♀️ (`U+1F64B U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🙋🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumDark)); // 🙋🏾‍♀️ (`U+1F64B U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🙋🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Dark)); // 🙋🏿‍♀️ (`U+1F64B U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🙋🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_RAISING_HAND: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person raising hand","🙋"), 
	&[
		Emoji::new("person raising hand: light skin tone","🙋🏻"),
	Emoji::new("person raising hand: medium-light skin tone","🙋🏼"),
	Emoji::new("person raising hand: medium skin tone","🙋🏽"),
	Emoji::new("person raising hand: medium-dark skin tone","🙋🏾"),
	Emoji::new("person raising hand: dark skin tone","🙋🏿"),
	]), 
	&[
		With::new(Emoji::new("man raising hand","🙋‍♂️"), 
	&[
		Emoji::new("man raising hand: light skin tone","🙋🏻‍♂️"),
	Emoji::new("man raising hand: medium-light skin tone","🙋🏼‍♂️"),
	Emoji::new("man raising hand: medium skin tone","🙋🏽‍♂️"),
	Emoji::new("man raising hand: medium-dark skin tone","🙋🏾‍♂️"),
	Emoji::new("man raising hand: dark skin tone","🙋🏿‍♂️"),
	]),
	With::new(Emoji::new("woman raising hand","🙋‍♀️"), 
	&[
		Emoji::new("woman raising hand: light skin tone","🙋🏻‍♀️"),
	Emoji::new("woman raising hand: medium-light skin tone","🙋🏼‍♀️"),
	Emoji::new("woman raising hand: medium skin tone","🙋🏽‍♀️"),
	Emoji::new("woman raising hand: medium-dark skin tone","🙋🏾‍♀️"),
	Emoji::new("woman raising hand: dark skin tone","🙋🏿‍♀️"),
	]),
	]);

#[doc="person shrugging 🤷"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_SHRUGGING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_SHRUGGING); // 🤷 (`U+1F937`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.to_string().as_str(), \"🤷\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::Light)); // 🤷🏻 (`U+1F937 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::Light).to_string().as_str(), \"🤷🏻\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::MediumLight)); // 🤷🏼 (`U+1F937 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::MediumLight).to_string().as_str(), \"🤷🏼\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::Medium)); // 🤷🏽 (`U+1F937 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::Medium).to_string().as_str(), \"🤷🏽\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::MediumDark)); // 🤷🏾 (`U+1F937 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::MediumDark).to_string().as_str(), \"🤷🏾\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.tone(Tone::Dark)); // 🤷🏿 (`U+1F937 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.tone(Tone::Dark).to_string().as_str(), \"🤷🏿\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male)); // 🤷‍♂️ (`U+1F937 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).to_string().as_str(), \"🤷‍♂️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Light)); // 🤷🏻‍♂️ (`U+1F937 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤷🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumLight)); // 🤷🏼‍♂️ (`U+1F937 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤷🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Medium)); // 🤷🏽‍♂️ (`U+1F937 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤷🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumDark)); // 🤷🏾‍♂️ (`U+1F937 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤷🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Dark)); // 🤷🏿‍♂️ (`U+1F937 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤷🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female)); // 🤷‍♀️ (`U+1F937 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).to_string().as_str(), \"🤷‍♀️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Light)); // 🤷🏻‍♀️ (`U+1F937 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤷🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumLight)); // 🤷🏼‍♀️ (`U+1F937 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤷🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Medium)); // 🤷🏽‍♀️ (`U+1F937 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤷🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumDark)); // 🤷🏾‍♀️ (`U+1F937 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤷🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Dark)); // 🤷🏿‍♀️ (`U+1F937 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤷🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_SHRUGGING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person shrugging","🤷"), 
	&[
		Emoji::new("person shrugging: light skin tone","🤷🏻"),
	Emoji::new("person shrugging: medium-light skin tone","🤷🏼"),
	Emoji::new("person shrugging: medium skin tone","🤷🏽"),
	Emoji::new("person shrugging: medium-dark skin tone","🤷🏾"),
	Emoji::new("person shrugging: dark skin tone","🤷🏿"),
	]), 
	&[
		With::new(Emoji::new("man shrugging","🤷‍♂️"), 
	&[
		Emoji::new("man shrugging: light skin tone","🤷🏻‍♂️"),
	Emoji::new("man shrugging: medium-light skin tone","🤷🏼‍♂️"),
	Emoji::new("man shrugging: medium skin tone","🤷🏽‍♂️"),
	Emoji::new("man shrugging: medium-dark skin tone","🤷🏾‍♂️"),
	Emoji::new("man shrugging: dark skin tone","🤷🏿‍♂️"),
	]),
	With::new(Emoji::new("woman shrugging","🤷‍♀️"), 
	&[
		Emoji::new("woman shrugging: light skin tone","🤷🏻‍♀️"),
	Emoji::new("woman shrugging: medium-light skin tone","🤷🏼‍♀️"),
	Emoji::new("woman shrugging: medium skin tone","🤷🏽‍♀️"),
	Emoji::new("woman shrugging: medium-dark skin tone","🤷🏾‍♀️"),
	Emoji::new("woman shrugging: dark skin tone","🤷🏿‍♀️"),
	]),
	]);

#[doc="person tipping hand 💁"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_TIPPING_HAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_TIPPING_HAND); // 💁 (`U+1F481`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.to_string().as_str(), \"💁\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::Light)); // 💁🏻 (`U+1F481 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::Light).to_string().as_str(), \"💁🏻\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::MediumLight)); // 💁🏼 (`U+1F481 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::MediumLight).to_string().as_str(), \"💁🏼\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::Medium)); // 💁🏽 (`U+1F481 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::Medium).to_string().as_str(), \"💁🏽\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::MediumDark)); // 💁🏾 (`U+1F481 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::MediumDark).to_string().as_str(), \"💁🏾\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.tone(Tone::Dark)); // 💁🏿 (`U+1F481 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.tone(Tone::Dark).to_string().as_str(), \"💁🏿\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male)); // 💁‍♂️ (`U+1F481 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).to_string().as_str(), \"💁‍♂️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Light)); // 💁🏻‍♂️ (`U+1F481 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"💁🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumLight)); // 💁🏼‍♂️ (`U+1F481 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"💁🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Medium)); // 💁🏽‍♂️ (`U+1F481 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"💁🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumDark)); // 💁🏾‍♂️ (`U+1F481 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"💁🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Dark)); // 💁🏿‍♂️ (`U+1F481 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"💁🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female)); // 💁‍♀️ (`U+1F481 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).to_string().as_str(), \"💁‍♀️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Light)); // 💁🏻‍♀️ (`U+1F481 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"💁🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumLight)); // 💁🏼‍♀️ (`U+1F481 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"💁🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Medium)); // 💁🏽‍♀️ (`U+1F481 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"💁🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumDark)); // 💁🏾‍♀️ (`U+1F481 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"💁🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Dark)); // 💁🏿‍♀️ (`U+1F481 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"💁🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_TIPPING_HAND: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person tipping hand","💁"), 
	&[
		Emoji::new("person tipping hand: light skin tone","💁🏻"),
	Emoji::new("person tipping hand: medium-light skin tone","💁🏼"),
	Emoji::new("person tipping hand: medium skin tone","💁🏽"),
	Emoji::new("person tipping hand: medium-dark skin tone","💁🏾"),
	Emoji::new("person tipping hand: dark skin tone","💁🏿"),
	]), 
	&[
		With::new(Emoji::new("man tipping hand","💁‍♂️"), 
	&[
		Emoji::new("man tipping hand: light skin tone","💁🏻‍♂️"),
	Emoji::new("man tipping hand: medium-light skin tone","💁🏼‍♂️"),
	Emoji::new("man tipping hand: medium skin tone","💁🏽‍♂️"),
	Emoji::new("man tipping hand: medium-dark skin tone","💁🏾‍♂️"),
	Emoji::new("man tipping hand: dark skin tone","💁🏿‍♂️"),
	]),
	With::new(Emoji::new("woman tipping hand","💁‍♀️"), 
	&[
		Emoji::new("woman tipping hand: light skin tone","💁🏻‍♀️"),
	Emoji::new("woman tipping hand: medium-light skin tone","💁🏼‍♀️"),
	Emoji::new("woman tipping hand: medium skin tone","💁🏽‍♀️"),
	Emoji::new("woman tipping hand: medium-dark skin tone","💁🏾‍♀️"),
	Emoji::new("woman tipping hand: dark skin tone","💁🏿‍♀️"),
	]),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&DEAF_PERSON.default.default, &DEAF_PERSON.default.tone(Tone::Light), &DEAF_PERSON.default.tone(Tone::MediumLight), &DEAF_PERSON.default.tone(Tone::Medium), &DEAF_PERSON.default.tone(Tone::MediumDark), &DEAF_PERSON.default.tone(Tone::Dark), &DEAF_PERSON.gender(Gender::Male).default, &DEAF_PERSON.gender(Gender::Male).tone(Tone::Light), &DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumLight), &DEAF_PERSON.gender(Gender::Male).tone(Tone::Medium), &DEAF_PERSON.gender(Gender::Male).tone(Tone::MediumDark), &DEAF_PERSON.gender(Gender::Male).tone(Tone::Dark), &DEAF_PERSON.gender(Gender::Female).default, &DEAF_PERSON.gender(Gender::Female).tone(Tone::Light), &DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumLight), &DEAF_PERSON.gender(Gender::Female).tone(Tone::Medium), &DEAF_PERSON.gender(Gender::Female).tone(Tone::MediumDark), &DEAF_PERSON.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_BOWING.default.default, &PERSON_BOWING.default.tone(Tone::Light), &PERSON_BOWING.default.tone(Tone::MediumLight), &PERSON_BOWING.default.tone(Tone::Medium), &PERSON_BOWING.default.tone(Tone::MediumDark), &PERSON_BOWING.default.tone(Tone::Dark), &PERSON_BOWING.gender(Gender::Male).default, &PERSON_BOWING.gender(Gender::Male).tone(Tone::Light), &PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_BOWING.gender(Gender::Male).tone(Tone::Medium), &PERSON_BOWING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_BOWING.gender(Gender::Male).tone(Tone::Dark), &PERSON_BOWING.gender(Gender::Female).default, &PERSON_BOWING.gender(Gender::Female).tone(Tone::Light), &PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_BOWING.gender(Gender::Female).tone(Tone::Medium), &PERSON_BOWING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_BOWING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_FACEPALMING.default.default, &PERSON_FACEPALMING.default.tone(Tone::Light), &PERSON_FACEPALMING.default.tone(Tone::MediumLight), &PERSON_FACEPALMING.default.tone(Tone::Medium), &PERSON_FACEPALMING.default.tone(Tone::MediumDark), &PERSON_FACEPALMING.default.tone(Tone::Dark), &PERSON_FACEPALMING.gender(Gender::Male).default, &PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Light), &PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Medium), &PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_FACEPALMING.gender(Gender::Male).tone(Tone::Dark), &PERSON_FACEPALMING.gender(Gender::Female).default, &PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Light), &PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Medium), &PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_FACEPALMING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_FROWNING.default.default, &PERSON_FROWNING.default.tone(Tone::Light), &PERSON_FROWNING.default.tone(Tone::MediumLight), &PERSON_FROWNING.default.tone(Tone::Medium), &PERSON_FROWNING.default.tone(Tone::MediumDark), &PERSON_FROWNING.default.tone(Tone::Dark), &PERSON_FROWNING.gender(Gender::Male).default, &PERSON_FROWNING.gender(Gender::Male).tone(Tone::Light), &PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_FROWNING.gender(Gender::Male).tone(Tone::Medium), &PERSON_FROWNING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_FROWNING.gender(Gender::Male).tone(Tone::Dark), &PERSON_FROWNING.gender(Gender::Female).default, &PERSON_FROWNING.gender(Gender::Female).tone(Tone::Light), &PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_FROWNING.gender(Gender::Female).tone(Tone::Medium), &PERSON_FROWNING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_FROWNING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_GESTURING_NO.default.default, &PERSON_GESTURING_NO.default.tone(Tone::Light), &PERSON_GESTURING_NO.default.tone(Tone::MediumLight), &PERSON_GESTURING_NO.default.tone(Tone::Medium), &PERSON_GESTURING_NO.default.tone(Tone::MediumDark), &PERSON_GESTURING_NO.default.tone(Tone::Dark), &PERSON_GESTURING_NO.gender(Gender::Male).default, &PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Light), &PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Medium), &PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_GESTURING_NO.gender(Gender::Male).tone(Tone::Dark), &PERSON_GESTURING_NO.gender(Gender::Female).default, &PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Light), &PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Medium), &PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_GESTURING_NO.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_GESTURING_OK.default.default, &PERSON_GESTURING_OK.default.tone(Tone::Light), &PERSON_GESTURING_OK.default.tone(Tone::MediumLight), &PERSON_GESTURING_OK.default.tone(Tone::Medium), &PERSON_GESTURING_OK.default.tone(Tone::MediumDark), &PERSON_GESTURING_OK.default.tone(Tone::Dark), &PERSON_GESTURING_OK.gender(Gender::Male).default, &PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Light), &PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Medium), &PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_GESTURING_OK.gender(Gender::Male).tone(Tone::Dark), &PERSON_GESTURING_OK.gender(Gender::Female).default, &PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Light), &PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Medium), &PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_GESTURING_OK.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_POUTING.default.default, &PERSON_POUTING.default.tone(Tone::Light), &PERSON_POUTING.default.tone(Tone::MediumLight), &PERSON_POUTING.default.tone(Tone::Medium), &PERSON_POUTING.default.tone(Tone::MediumDark), &PERSON_POUTING.default.tone(Tone::Dark), &PERSON_POUTING.gender(Gender::Male).default, &PERSON_POUTING.gender(Gender::Male).tone(Tone::Light), &PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_POUTING.gender(Gender::Male).tone(Tone::Medium), &PERSON_POUTING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_POUTING.gender(Gender::Male).tone(Tone::Dark), &PERSON_POUTING.gender(Gender::Female).default, &PERSON_POUTING.gender(Gender::Female).tone(Tone::Light), &PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_POUTING.gender(Gender::Female).tone(Tone::Medium), &PERSON_POUTING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_POUTING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_RAISING_HAND.default.default, &PERSON_RAISING_HAND.default.tone(Tone::Light), &PERSON_RAISING_HAND.default.tone(Tone::MediumLight), &PERSON_RAISING_HAND.default.tone(Tone::Medium), &PERSON_RAISING_HAND.default.tone(Tone::MediumDark), &PERSON_RAISING_HAND.default.tone(Tone::Dark), &PERSON_RAISING_HAND.gender(Gender::Male).default, &PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Light), &PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Medium), &PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_RAISING_HAND.gender(Gender::Male).tone(Tone::Dark), &PERSON_RAISING_HAND.gender(Gender::Female).default, &PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Light), &PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Medium), &PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_RAISING_HAND.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_SHRUGGING.default.default, &PERSON_SHRUGGING.default.tone(Tone::Light), &PERSON_SHRUGGING.default.tone(Tone::MediumLight), &PERSON_SHRUGGING.default.tone(Tone::Medium), &PERSON_SHRUGGING.default.tone(Tone::MediumDark), &PERSON_SHRUGGING.default.tone(Tone::Dark), &PERSON_SHRUGGING.gender(Gender::Male).default, &PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Light), &PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Medium), &PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_SHRUGGING.gender(Gender::Male).tone(Tone::Dark), &PERSON_SHRUGGING.gender(Gender::Female).default, &PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Light), &PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Medium), &PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_SHRUGGING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_TIPPING_HAND.default.default, &PERSON_TIPPING_HAND.default.tone(Tone::Light), &PERSON_TIPPING_HAND.default.tone(Tone::MediumLight), &PERSON_TIPPING_HAND.default.tone(Tone::Medium), &PERSON_TIPPING_HAND.default.tone(Tone::MediumDark), &PERSON_TIPPING_HAND.default.tone(Tone::Dark), &PERSON_TIPPING_HAND.gender(Gender::Male).default, &PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Light), &PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Medium), &PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_TIPPING_HAND.gender(Gender::Male).tone(Tone::Dark), &PERSON_TIPPING_HAND.gender(Gender::Female).default, &PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Light), &PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Medium), &PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_TIPPING_HAND.gender(Gender::Female).tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&DEAF_PERSON.default.default, &PERSON_BOWING.default.default, &PERSON_FACEPALMING.default.default, &PERSON_FROWNING.default.default, &PERSON_GESTURING_NO.default.default, &PERSON_GESTURING_OK.default.default, &PERSON_POUTING.default.default, &PERSON_RAISING_HAND.default.default, &PERSON_SHRUGGING.default.default, &PERSON_TIPPING_HAND.default.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_gesture

/// person-resting 🛌🧘🛀
pub mod person_resting { // people_and_body::person_resting
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="person in bed 🛌"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_BED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_BED); // 🛌 (`U+1F6CC`)"] #[doc="# assert_eq!(PERSON_IN_BED.to_string().as_str(), \"🛌\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::Light)); // 🛌🏻 (`U+1F6CC U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::Light).to_string().as_str(), \"🛌🏻\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::MediumLight)); // 🛌🏼 (`U+1F6CC U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::MediumLight).to_string().as_str(), \"🛌🏼\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::Medium)); // 🛌🏽 (`U+1F6CC U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::Medium).to_string().as_str(), \"🛌🏽\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::MediumDark)); // 🛌🏾 (`U+1F6CC U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::MediumDark).to_string().as_str(), \"🛌🏾\");"]#[doc="println!(\"{}\", PERSON_IN_BED.tone(Tone::Dark)); // 🛌🏿 (`U+1F6CC U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_BED.tone(Tone::Dark).to_string().as_str(), \"🛌🏿\");"]
#[doc="```"]
pub static PERSON_IN_BED: With<Tone,Emoji> = With::new(Emoji::new("person in bed","🛌"), 
	&[
		Emoji::new("person in bed: light skin tone","🛌🏻"),
	Emoji::new("person in bed: medium-light skin tone","🛌🏼"),
	Emoji::new("person in bed: medium skin tone","🛌🏽"),
	Emoji::new("person in bed: medium-dark skin tone","🛌🏾"),
	Emoji::new("person in bed: dark skin tone","🛌🏿"),
	]);

#[doc="person in lotus position 🧘"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_LOTUS_POSITION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION); // 🧘 (`U+1F9D8`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.to_string().as_str(), \"🧘\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::Light)); // 🧘🏻 (`U+1F9D8 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::Light).to_string().as_str(), \"🧘🏻\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::MediumLight)); // 🧘🏼 (`U+1F9D8 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::MediumLight).to_string().as_str(), \"🧘🏼\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::Medium)); // 🧘🏽 (`U+1F9D8 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::Medium).to_string().as_str(), \"🧘🏽\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::MediumDark)); // 🧘🏾 (`U+1F9D8 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::MediumDark).to_string().as_str(), \"🧘🏾\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.tone(Tone::Dark)); // 🧘🏿 (`U+1F9D8 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.tone(Tone::Dark).to_string().as_str(), \"🧘🏿\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male)); // 🧘‍♂️ (`U+1F9D8 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).to_string().as_str(), \"🧘‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Light)); // 🧘🏻‍♂️ (`U+1F9D8 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🧘🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumLight)); // 🧘🏼‍♂️ (`U+1F9D8 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🧘🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Medium)); // 🧘🏽‍♂️ (`U+1F9D8 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🧘🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumDark)); // 🧘🏾‍♂️ (`U+1F9D8 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🧘🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Dark)); // 🧘🏿‍♂️ (`U+1F9D8 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🧘🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female)); // 🧘‍♀️ (`U+1F9D8 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).to_string().as_str(), \"🧘‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Light)); // 🧘🏻‍♀️ (`U+1F9D8 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🧘🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumLight)); // 🧘🏼‍♀️ (`U+1F9D8 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🧘🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Medium)); // 🧘🏽‍♀️ (`U+1F9D8 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🧘🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumDark)); // 🧘🏾‍♀️ (`U+1F9D8 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🧘🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Dark)); // 🧘🏿‍♀️ (`U+1F9D8 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🧘🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_IN_LOTUS_POSITION: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in lotus position","🧘"), 
	&[
		Emoji::new("person in lotus position: light skin tone","🧘🏻"),
	Emoji::new("person in lotus position: medium-light skin tone","🧘🏼"),
	Emoji::new("person in lotus position: medium skin tone","🧘🏽"),
	Emoji::new("person in lotus position: medium-dark skin tone","🧘🏾"),
	Emoji::new("person in lotus position: dark skin tone","🧘🏿"),
	]), 
	&[
		With::new(Emoji::new("man in lotus position","🧘‍♂️"), 
	&[
		Emoji::new("man in lotus position: light skin tone","🧘🏻‍♂️"),
	Emoji::new("man in lotus position: medium-light skin tone","🧘🏼‍♂️"),
	Emoji::new("man in lotus position: medium skin tone","🧘🏽‍♂️"),
	Emoji::new("man in lotus position: medium-dark skin tone","🧘🏾‍♂️"),
	Emoji::new("man in lotus position: dark skin tone","🧘🏿‍♂️"),
	]),
	With::new(Emoji::new("woman in lotus position","🧘‍♀️"), 
	&[
		Emoji::new("woman in lotus position: light skin tone","🧘🏻‍♀️"),
	Emoji::new("woman in lotus position: medium-light skin tone","🧘🏼‍♀️"),
	Emoji::new("woman in lotus position: medium skin tone","🧘🏽‍♀️"),
	Emoji::new("woman in lotus position: medium-dark skin tone","🧘🏾‍♀️"),
	Emoji::new("woman in lotus position: dark skin tone","🧘🏿‍♀️"),
	]),
	]);

#[doc="person taking bath 🛀"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_TAKING_BATH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_TAKING_BATH); // 🛀 (`U+1F6C0`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.to_string().as_str(), \"🛀\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::Light)); // 🛀🏻 (`U+1F6C0 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::Light).to_string().as_str(), \"🛀🏻\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::MediumLight)); // 🛀🏼 (`U+1F6C0 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::MediumLight).to_string().as_str(), \"🛀🏼\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::Medium)); // 🛀🏽 (`U+1F6C0 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::Medium).to_string().as_str(), \"🛀🏽\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::MediumDark)); // 🛀🏾 (`U+1F6C0 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::MediumDark).to_string().as_str(), \"🛀🏾\");"]#[doc="println!(\"{}\", PERSON_TAKING_BATH.tone(Tone::Dark)); // 🛀🏿 (`U+1F6C0 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_TAKING_BATH.tone(Tone::Dark).to_string().as_str(), \"🛀🏿\");"]
#[doc="```"]
pub static PERSON_TAKING_BATH: With<Tone,Emoji> = With::new(Emoji::new("person taking bath","🛀"), 
	&[
		Emoji::new("person taking bath: light skin tone","🛀🏻"),
	Emoji::new("person taking bath: medium-light skin tone","🛀🏼"),
	Emoji::new("person taking bath: medium skin tone","🛀🏽"),
	Emoji::new("person taking bath: medium-dark skin tone","🛀🏾"),
	Emoji::new("person taking bath: dark skin tone","🛀🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&PERSON_IN_BED.default, &PERSON_IN_BED.tone(Tone::Light), &PERSON_IN_BED.tone(Tone::MediumLight), &PERSON_IN_BED.tone(Tone::Medium), &PERSON_IN_BED.tone(Tone::MediumDark), &PERSON_IN_BED.tone(Tone::Dark), ],
&[&PERSON_IN_LOTUS_POSITION.default.default, &PERSON_IN_LOTUS_POSITION.default.tone(Tone::Light), &PERSON_IN_LOTUS_POSITION.default.tone(Tone::MediumLight), &PERSON_IN_LOTUS_POSITION.default.tone(Tone::Medium), &PERSON_IN_LOTUS_POSITION.default.tone(Tone::MediumDark), &PERSON_IN_LOTUS_POSITION.default.tone(Tone::Dark), &PERSON_IN_LOTUS_POSITION.gender(Gender::Male).default, &PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Light), &PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Medium), &PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_IN_LOTUS_POSITION.gender(Gender::Male).tone(Tone::Dark), &PERSON_IN_LOTUS_POSITION.gender(Gender::Female).default, &PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Light), &PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Medium), &PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_IN_LOTUS_POSITION.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_TAKING_BATH.default, &PERSON_TAKING_BATH.tone(Tone::Light), &PERSON_TAKING_BATH.tone(Tone::MediumLight), &PERSON_TAKING_BATH.tone(Tone::Medium), &PERSON_TAKING_BATH.tone(Tone::MediumDark), &PERSON_TAKING_BATH.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&PERSON_IN_BED.default, &PERSON_IN_LOTUS_POSITION.default.default, &PERSON_TAKING_BATH.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_resting

/// person-role 🧑‍🎨🧑‍🚀🤱
pub mod person_role { // people_and_body::person_role
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="artist 🧑‍🎨"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARTIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARTIST); // 🧑‍🎨 (`U+1F9D1 U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.to_string().as_str(), \"🧑‍🎨\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::Light)); // 🧑🏻‍🎨 (`U+1F9D1 U+1F3FB U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🎨\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::MediumLight)); // 🧑🏼‍🎨 (`U+1F9D1 U+1F3FC U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🎨\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::Medium)); // 🧑🏽‍🎨 (`U+1F9D1 U+1F3FD U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🎨\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::MediumDark)); // 🧑🏾‍🎨 (`U+1F9D1 U+1F3FE U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🎨\");"]#[doc="println!(\"{}\", ARTIST.tone(Tone::Dark)); // 🧑🏿‍🎨 (`U+1F9D1 U+1F3FF U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male)); // 👨‍🎨 (`U+1F468 U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).to_string().as_str(), \"👨‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🎨 (`U+1F468 U+1F3FB U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🎨 (`U+1F468 U+1F3FC U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🎨 (`U+1F468 U+1F3FD U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🎨 (`U+1F468 U+1F3FE U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🎨 (`U+1F468 U+1F3FF U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female)); // 👩‍🎨 (`U+1F469 U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).to_string().as_str(), \"👩‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🎨 (`U+1F469 U+1F3FB U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🎨 (`U+1F469 U+1F3FC U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🎨 (`U+1F469 U+1F3FD U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🎨 (`U+1F469 U+1F3FE U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🎨\");"]#[doc="println!(\"{}\", ARTIST.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🎨 (`U+1F469 U+1F3FF U+200D U+1F3A8`)"] #[doc="# assert_eq!(ARTIST.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🎨\");"]
#[doc="```"]
pub static ARTIST: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("artist","🧑‍🎨"), 
	&[
		Emoji::new("artist: light skin tone","🧑🏻‍🎨"),
	Emoji::new("artist: medium-light skin tone","🧑🏼‍🎨"),
	Emoji::new("artist: medium skin tone","🧑🏽‍🎨"),
	Emoji::new("artist: medium-dark skin tone","🧑🏾‍🎨"),
	Emoji::new("artist: dark skin tone","🧑🏿‍🎨"),
	]), 
	&[
		With::new(Emoji::new("man artist","👨‍🎨"), 
	&[
		Emoji::new("man artist: light skin tone","👨🏻‍🎨"),
	Emoji::new("man artist: medium-light skin tone","👨🏼‍🎨"),
	Emoji::new("man artist: medium skin tone","👨🏽‍🎨"),
	Emoji::new("man artist: medium-dark skin tone","👨🏾‍🎨"),
	Emoji::new("man artist: dark skin tone","👨🏿‍🎨"),
	]),
	With::new(Emoji::new("woman artist","👩‍🎨"), 
	&[
		Emoji::new("woman artist: light skin tone","👩🏻‍🎨"),
	Emoji::new("woman artist: medium-light skin tone","👩🏼‍🎨"),
	Emoji::new("woman artist: medium skin tone","👩🏽‍🎨"),
	Emoji::new("woman artist: medium-dark skin tone","👩🏾‍🎨"),
	Emoji::new("woman artist: dark skin tone","👩🏿‍🎨"),
	]),
	]);

#[doc="astronaut 🧑‍🚀"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ASTRONAUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ASTRONAUT); // 🧑‍🚀 (`U+1F9D1 U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.to_string().as_str(), \"🧑‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::Light)); // 🧑🏻‍🚀 (`U+1F9D1 U+1F3FB U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::MediumLight)); // 🧑🏼‍🚀 (`U+1F9D1 U+1F3FC U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::Medium)); // 🧑🏽‍🚀 (`U+1F9D1 U+1F3FD U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::MediumDark)); // 🧑🏾‍🚀 (`U+1F9D1 U+1F3FE U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.tone(Tone::Dark)); // 🧑🏿‍🚀 (`U+1F9D1 U+1F3FF U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male)); // 👨‍🚀 (`U+1F468 U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).to_string().as_str(), \"👨‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🚀 (`U+1F468 U+1F3FB U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🚀 (`U+1F468 U+1F3FC U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🚀 (`U+1F468 U+1F3FD U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🚀 (`U+1F468 U+1F3FE U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🚀 (`U+1F468 U+1F3FF U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female)); // 👩‍🚀 (`U+1F469 U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).to_string().as_str(), \"👩‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🚀 (`U+1F469 U+1F3FB U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🚀 (`U+1F469 U+1F3FC U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🚀 (`U+1F469 U+1F3FD U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🚀 (`U+1F469 U+1F3FE U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🚀\");"]#[doc="println!(\"{}\", ASTRONAUT.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🚀 (`U+1F469 U+1F3FF U+200D U+1F680`)"] #[doc="# assert_eq!(ASTRONAUT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🚀\");"]
#[doc="```"]
pub static ASTRONAUT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("astronaut","🧑‍🚀"), 
	&[
		Emoji::new("astronaut: light skin tone","🧑🏻‍🚀"),
	Emoji::new("astronaut: medium-light skin tone","🧑🏼‍🚀"),
	Emoji::new("astronaut: medium skin tone","🧑🏽‍🚀"),
	Emoji::new("astronaut: medium-dark skin tone","🧑🏾‍🚀"),
	Emoji::new("astronaut: dark skin tone","🧑🏿‍🚀"),
	]), 
	&[
		With::new(Emoji::new("man astronaut","👨‍🚀"), 
	&[
		Emoji::new("man astronaut: light skin tone","👨🏻‍🚀"),
	Emoji::new("man astronaut: medium-light skin tone","👨🏼‍🚀"),
	Emoji::new("man astronaut: medium skin tone","👨🏽‍🚀"),
	Emoji::new("man astronaut: medium-dark skin tone","👨🏾‍🚀"),
	Emoji::new("man astronaut: dark skin tone","👨🏿‍🚀"),
	]),
	With::new(Emoji::new("woman astronaut","👩‍🚀"), 
	&[
		Emoji::new("woman astronaut: light skin tone","👩🏻‍🚀"),
	Emoji::new("woman astronaut: medium-light skin tone","👩🏼‍🚀"),
	Emoji::new("woman astronaut: medium skin tone","👩🏽‍🚀"),
	Emoji::new("woman astronaut: medium-dark skin tone","👩🏾‍🚀"),
	Emoji::new("woman astronaut: dark skin tone","👩🏿‍🚀"),
	]),
	]);

#[doc="breast-feeding 🤱"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BREAST_FEEDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BREAST_FEEDING); // 🤱 (`U+1F931`)"] #[doc="# assert_eq!(BREAST_FEEDING.to_string().as_str(), \"🤱\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::Light)); // 🤱🏻 (`U+1F931 U+1F3FB`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::Light).to_string().as_str(), \"🤱🏻\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::MediumLight)); // 🤱🏼 (`U+1F931 U+1F3FC`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::MediumLight).to_string().as_str(), \"🤱🏼\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::Medium)); // 🤱🏽 (`U+1F931 U+1F3FD`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::Medium).to_string().as_str(), \"🤱🏽\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::MediumDark)); // 🤱🏾 (`U+1F931 U+1F3FE`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::MediumDark).to_string().as_str(), \"🤱🏾\");"]#[doc="println!(\"{}\", BREAST_FEEDING.tone(Tone::Dark)); // 🤱🏿 (`U+1F931 U+1F3FF`)"] #[doc="# assert_eq!(BREAST_FEEDING.tone(Tone::Dark).to_string().as_str(), \"🤱🏿\");"]
#[doc="```"]
pub static BREAST_FEEDING: With<Tone,Emoji> = With::new(Emoji::new("breast-feeding","🤱"), 
	&[
		Emoji::new("breast-feeding: light skin tone","🤱🏻"),
	Emoji::new("breast-feeding: medium-light skin tone","🤱🏼"),
	Emoji::new("breast-feeding: medium skin tone","🤱🏽"),
	Emoji::new("breast-feeding: medium-dark skin tone","🤱🏾"),
	Emoji::new("breast-feeding: dark skin tone","🤱🏿"),
	]);

#[doc="construction worker 👷"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONSTRUCTION_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONSTRUCTION_WORKER); // 👷 (`U+1F477`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.to_string().as_str(), \"👷\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::Light)); // 👷🏻 (`U+1F477 U+1F3FB`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::Light).to_string().as_str(), \"👷🏻\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::MediumLight)); // 👷🏼 (`U+1F477 U+1F3FC`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"👷🏼\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::Medium)); // 👷🏽 (`U+1F477 U+1F3FD`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::Medium).to_string().as_str(), \"👷🏽\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::MediumDark)); // 👷🏾 (`U+1F477 U+1F3FE`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"👷🏾\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.tone(Tone::Dark)); // 👷🏿 (`U+1F477 U+1F3FF`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.tone(Tone::Dark).to_string().as_str(), \"👷🏿\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male)); // 👷‍♂️ (`U+1F477 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).to_string().as_str(), \"👷‍♂️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Light)); // 👷🏻‍♂️ (`U+1F477 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👷🏻‍♂️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // 👷🏼‍♂️ (`U+1F477 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👷🏼‍♂️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Medium)); // 👷🏽‍♂️ (`U+1F477 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👷🏽‍♂️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // 👷🏾‍♂️ (`U+1F477 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👷🏾‍♂️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Dark)); // 👷🏿‍♂️ (`U+1F477 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👷🏿‍♂️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female)); // 👷‍♀️ (`U+1F477 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).to_string().as_str(), \"👷‍♀️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Light)); // 👷🏻‍♀️ (`U+1F477 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👷🏻‍♀️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // 👷🏼‍♀️ (`U+1F477 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👷🏼‍♀️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Medium)); // 👷🏽‍♀️ (`U+1F477 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👷🏽‍♀️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // 👷🏾‍♀️ (`U+1F477 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👷🏾‍♀️\");"]#[doc="println!(\"{}\", CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Dark)); // 👷🏿‍♀️ (`U+1F477 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👷🏿‍♀️\");"]
#[doc="```"]
pub static CONSTRUCTION_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("construction worker","👷"), 
	&[
		Emoji::new("construction worker: light skin tone","👷🏻"),
	Emoji::new("construction worker: medium-light skin tone","👷🏼"),
	Emoji::new("construction worker: medium skin tone","👷🏽"),
	Emoji::new("construction worker: medium-dark skin tone","👷🏾"),
	Emoji::new("construction worker: dark skin tone","👷🏿"),
	]), 
	&[
		With::new(Emoji::new("man construction worker","👷‍♂️"), 
	&[
		Emoji::new("man construction worker: light skin tone","👷🏻‍♂️"),
	Emoji::new("man construction worker: medium-light skin tone","👷🏼‍♂️"),
	Emoji::new("man construction worker: medium skin tone","👷🏽‍♂️"),
	Emoji::new("man construction worker: medium-dark skin tone","👷🏾‍♂️"),
	Emoji::new("man construction worker: dark skin tone","👷🏿‍♂️"),
	]),
	With::new(Emoji::new("woman construction worker","👷‍♀️"), 
	&[
		Emoji::new("woman construction worker: light skin tone","👷🏻‍♀️"),
	Emoji::new("woman construction worker: medium-light skin tone","👷🏼‍♀️"),
	Emoji::new("woman construction worker: medium skin tone","👷🏽‍♀️"),
	Emoji::new("woman construction worker: medium-dark skin tone","👷🏾‍♀️"),
	Emoji::new("woman construction worker: dark skin tone","👷🏿‍♀️"),
	]),
	]);

#[doc="cook 🧑‍🍳"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOK); // 🧑‍🍳 (`U+1F9D1 U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.to_string().as_str(), \"🧑‍🍳\");"]#[doc="println!(\"{}\", COOK.tone(Tone::Light)); // 🧑🏻‍🍳 (`U+1F9D1 U+1F3FB U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🍳\");"]#[doc="println!(\"{}\", COOK.tone(Tone::MediumLight)); // 🧑🏼‍🍳 (`U+1F9D1 U+1F3FC U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🍳\");"]#[doc="println!(\"{}\", COOK.tone(Tone::Medium)); // 🧑🏽‍🍳 (`U+1F9D1 U+1F3FD U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🍳\");"]#[doc="println!(\"{}\", COOK.tone(Tone::MediumDark)); // 🧑🏾‍🍳 (`U+1F9D1 U+1F3FE U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🍳\");"]#[doc="println!(\"{}\", COOK.tone(Tone::Dark)); // 🧑🏿‍🍳 (`U+1F9D1 U+1F3FF U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male)); // 👨‍🍳 (`U+1F468 U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).to_string().as_str(), \"👨‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🍳 (`U+1F468 U+1F3FB U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🍳 (`U+1F468 U+1F3FC U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🍳 (`U+1F468 U+1F3FD U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🍳 (`U+1F468 U+1F3FE U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🍳 (`U+1F468 U+1F3FF U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female)); // 👩‍🍳 (`U+1F469 U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).to_string().as_str(), \"👩‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🍳 (`U+1F469 U+1F3FB U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🍳 (`U+1F469 U+1F3FC U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🍳 (`U+1F469 U+1F3FD U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🍳 (`U+1F469 U+1F3FE U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🍳\");"]#[doc="println!(\"{}\", COOK.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🍳 (`U+1F469 U+1F3FF U+200D U+1F373`)"] #[doc="# assert_eq!(COOK.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🍳\");"]
#[doc="```"]
pub static COOK: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("cook","🧑‍🍳"), 
	&[
		Emoji::new("cook: light skin tone","🧑🏻‍🍳"),
	Emoji::new("cook: medium-light skin tone","🧑🏼‍🍳"),
	Emoji::new("cook: medium skin tone","🧑🏽‍🍳"),
	Emoji::new("cook: medium-dark skin tone","🧑🏾‍🍳"),
	Emoji::new("cook: dark skin tone","🧑🏿‍🍳"),
	]), 
	&[
		With::new(Emoji::new("man cook","👨‍🍳"), 
	&[
		Emoji::new("man cook: light skin tone","👨🏻‍🍳"),
	Emoji::new("man cook: medium-light skin tone","👨🏼‍🍳"),
	Emoji::new("man cook: medium skin tone","👨🏽‍🍳"),
	Emoji::new("man cook: medium-dark skin tone","👨🏾‍🍳"),
	Emoji::new("man cook: dark skin tone","👨🏿‍🍳"),
	]),
	With::new(Emoji::new("woman cook","👩‍🍳"), 
	&[
		Emoji::new("woman cook: light skin tone","👩🏻‍🍳"),
	Emoji::new("woman cook: medium-light skin tone","👩🏼‍🍳"),
	Emoji::new("woman cook: medium skin tone","👩🏽‍🍳"),
	Emoji::new("woman cook: medium-dark skin tone","👩🏾‍🍳"),
	Emoji::new("woman cook: dark skin tone","👩🏿‍🍳"),
	]),
	]);

#[doc="detective 🕵️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DETECTIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DETECTIVE); // 🕵️ (`U+1F575 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.to_string().as_str(), \"🕵️\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::Light)); // 🕵🏻 (`U+1F575 U+1F3FB`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::Light).to_string().as_str(), \"🕵🏻\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::MediumLight)); // 🕵🏼 (`U+1F575 U+1F3FC`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::MediumLight).to_string().as_str(), \"🕵🏼\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::Medium)); // 🕵🏽 (`U+1F575 U+1F3FD`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::Medium).to_string().as_str(), \"🕵🏽\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::MediumDark)); // 🕵🏾 (`U+1F575 U+1F3FE`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::MediumDark).to_string().as_str(), \"🕵🏾\");"]#[doc="println!(\"{}\", DETECTIVE.tone(Tone::Dark)); // 🕵🏿 (`U+1F575 U+1F3FF`)"] #[doc="# assert_eq!(DETECTIVE.tone(Tone::Dark).to_string().as_str(), \"🕵🏿\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male)); // 🕵️‍♂️ (`U+1F575 U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).to_string().as_str(), \"🕵️‍♂️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::Light)); // 🕵🏻‍♂️ (`U+1F575 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🕵🏻‍♂️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::MediumLight)); // 🕵🏼‍♂️ (`U+1F575 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🕵🏼‍♂️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::Medium)); // 🕵🏽‍♂️ (`U+1F575 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🕵🏽‍♂️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::MediumDark)); // 🕵🏾‍♂️ (`U+1F575 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🕵🏾‍♂️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Male).tone(Tone::Dark)); // 🕵🏿‍♂️ (`U+1F575 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🕵🏿‍♂️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female)); // 🕵️‍♀️ (`U+1F575 U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).to_string().as_str(), \"🕵️‍♀️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::Light)); // 🕵🏻‍♀️ (`U+1F575 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🕵🏻‍♀️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::MediumLight)); // 🕵🏼‍♀️ (`U+1F575 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🕵🏼‍♀️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::Medium)); // 🕵🏽‍♀️ (`U+1F575 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🕵🏽‍♀️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::MediumDark)); // 🕵🏾‍♀️ (`U+1F575 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🕵🏾‍♀️\");"]#[doc="println!(\"{}\", DETECTIVE.gender(Gender::Female).tone(Tone::Dark)); // 🕵🏿‍♀️ (`U+1F575 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(DETECTIVE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🕵🏿‍♀️\");"]
#[doc="```"]
pub static DETECTIVE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("detective","🕵️"), 
	&[
		Emoji::new("detective: light skin tone","🕵🏻"),
	Emoji::new("detective: medium-light skin tone","🕵🏼"),
	Emoji::new("detective: medium skin tone","🕵🏽"),
	Emoji::new("detective: medium-dark skin tone","🕵🏾"),
	Emoji::new("detective: dark skin tone","🕵🏿"),
	]), 
	&[
		With::new(Emoji::new("man detective","🕵️‍♂️"), 
	&[
		Emoji::new("man detective: light skin tone","🕵🏻‍♂️"),
	Emoji::new("man detective: medium-light skin tone","🕵🏼‍♂️"),
	Emoji::new("man detective: medium skin tone","🕵🏽‍♂️"),
	Emoji::new("man detective: medium-dark skin tone","🕵🏾‍♂️"),
	Emoji::new("man detective: dark skin tone","🕵🏿‍♂️"),
	]),
	With::new(Emoji::new("woman detective","🕵️‍♀️"), 
	&[
		Emoji::new("woman detective: light skin tone","🕵🏻‍♀️"),
	Emoji::new("woman detective: medium-light skin tone","🕵🏼‍♀️"),
	Emoji::new("woman detective: medium skin tone","🕵🏽‍♀️"),
	Emoji::new("woman detective: medium-dark skin tone","🕵🏾‍♀️"),
	Emoji::new("woman detective: dark skin tone","🕵🏿‍♀️"),
	]),
	]);

#[doc="factory worker 🧑‍🏭"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACTORY_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACTORY_WORKER); // 🧑‍🏭 (`U+1F9D1 U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.to_string().as_str(), \"🧑‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::Light)); // 🧑🏻‍🏭 (`U+1F9D1 U+1F3FB U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::MediumLight)); // 🧑🏼‍🏭 (`U+1F9D1 U+1F3FC U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::Medium)); // 🧑🏽‍🏭 (`U+1F9D1 U+1F3FD U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::MediumDark)); // 🧑🏾‍🏭 (`U+1F9D1 U+1F3FE U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.tone(Tone::Dark)); // 🧑🏿‍🏭 (`U+1F9D1 U+1F3FF U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male)); // 👨‍🏭 (`U+1F468 U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).to_string().as_str(), \"👨‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🏭 (`U+1F468 U+1F3FB U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🏭 (`U+1F468 U+1F3FC U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🏭 (`U+1F468 U+1F3FD U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🏭 (`U+1F468 U+1F3FE U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🏭 (`U+1F468 U+1F3FF U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female)); // 👩‍🏭 (`U+1F469 U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).to_string().as_str(), \"👩‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🏭 (`U+1F469 U+1F3FB U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🏭 (`U+1F469 U+1F3FC U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🏭 (`U+1F469 U+1F3FD U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🏭 (`U+1F469 U+1F3FE U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🏭\");"]#[doc="println!(\"{}\", FACTORY_WORKER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🏭 (`U+1F469 U+1F3FF U+200D U+1F3ED`)"] #[doc="# assert_eq!(FACTORY_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🏭\");"]
#[doc="```"]
pub static FACTORY_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("factory worker","🧑‍🏭"), 
	&[
		Emoji::new("factory worker: light skin tone","🧑🏻‍🏭"),
	Emoji::new("factory worker: medium-light skin tone","🧑🏼‍🏭"),
	Emoji::new("factory worker: medium skin tone","🧑🏽‍🏭"),
	Emoji::new("factory worker: medium-dark skin tone","🧑🏾‍🏭"),
	Emoji::new("factory worker: dark skin tone","🧑🏿‍🏭"),
	]), 
	&[
		With::new(Emoji::new("man factory worker","👨‍🏭"), 
	&[
		Emoji::new("man factory worker: light skin tone","👨🏻‍🏭"),
	Emoji::new("man factory worker: medium-light skin tone","👨🏼‍🏭"),
	Emoji::new("man factory worker: medium skin tone","👨🏽‍🏭"),
	Emoji::new("man factory worker: medium-dark skin tone","👨🏾‍🏭"),
	Emoji::new("man factory worker: dark skin tone","👨🏿‍🏭"),
	]),
	With::new(Emoji::new("woman factory worker","👩‍🏭"), 
	&[
		Emoji::new("woman factory worker: light skin tone","👩🏻‍🏭"),
	Emoji::new("woman factory worker: medium-light skin tone","👩🏼‍🏭"),
	Emoji::new("woman factory worker: medium skin tone","👩🏽‍🏭"),
	Emoji::new("woman factory worker: medium-dark skin tone","👩🏾‍🏭"),
	Emoji::new("woman factory worker: dark skin tone","👩🏿‍🏭"),
	]),
	]);

#[doc="farmer 🧑‍🌾"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FARMER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FARMER); // 🧑‍🌾 (`U+1F9D1 U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.to_string().as_str(), \"🧑‍🌾\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::Light)); // 🧑🏻‍🌾 (`U+1F9D1 U+1F3FB U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🌾\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::MediumLight)); // 🧑🏼‍🌾 (`U+1F9D1 U+1F3FC U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🌾\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::Medium)); // 🧑🏽‍🌾 (`U+1F9D1 U+1F3FD U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🌾\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::MediumDark)); // 🧑🏾‍🌾 (`U+1F9D1 U+1F3FE U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🌾\");"]#[doc="println!(\"{}\", FARMER.tone(Tone::Dark)); // 🧑🏿‍🌾 (`U+1F9D1 U+1F3FF U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male)); // 👨‍🌾 (`U+1F468 U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).to_string().as_str(), \"👨‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🌾 (`U+1F468 U+1F3FB U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🌾 (`U+1F468 U+1F3FC U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🌾 (`U+1F468 U+1F3FD U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🌾 (`U+1F468 U+1F3FE U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🌾 (`U+1F468 U+1F3FF U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female)); // 👩‍🌾 (`U+1F469 U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).to_string().as_str(), \"👩‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🌾 (`U+1F469 U+1F3FB U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🌾 (`U+1F469 U+1F3FC U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🌾 (`U+1F469 U+1F3FD U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🌾 (`U+1F469 U+1F3FE U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🌾\");"]#[doc="println!(\"{}\", FARMER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🌾 (`U+1F469 U+1F3FF U+200D U+1F33E`)"] #[doc="# assert_eq!(FARMER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🌾\");"]
#[doc="```"]
pub static FARMER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("farmer","🧑‍🌾"), 
	&[
		Emoji::new("farmer: light skin tone","🧑🏻‍🌾"),
	Emoji::new("farmer: medium-light skin tone","🧑🏼‍🌾"),
	Emoji::new("farmer: medium skin tone","🧑🏽‍🌾"),
	Emoji::new("farmer: medium-dark skin tone","🧑🏾‍🌾"),
	Emoji::new("farmer: dark skin tone","🧑🏿‍🌾"),
	]), 
	&[
		With::new(Emoji::new("man farmer","👨‍🌾"), 
	&[
		Emoji::new("man farmer: light skin tone","👨🏻‍🌾"),
	Emoji::new("man farmer: medium-light skin tone","👨🏼‍🌾"),
	Emoji::new("man farmer: medium skin tone","👨🏽‍🌾"),
	Emoji::new("man farmer: medium-dark skin tone","👨🏾‍🌾"),
	Emoji::new("man farmer: dark skin tone","👨🏿‍🌾"),
	]),
	With::new(Emoji::new("woman farmer","👩‍🌾"), 
	&[
		Emoji::new("woman farmer: light skin tone","👩🏻‍🌾"),
	Emoji::new("woman farmer: medium-light skin tone","👩🏼‍🌾"),
	Emoji::new("woman farmer: medium skin tone","👩🏽‍🌾"),
	Emoji::new("woman farmer: medium-dark skin tone","👩🏾‍🌾"),
	Emoji::new("woman farmer: dark skin tone","👩🏿‍🌾"),
	]),
	]);

#[doc="firefighter 🧑‍🚒"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIREFIGHTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIREFIGHTER); // 🧑‍🚒 (`U+1F9D1 U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.to_string().as_str(), \"🧑‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::Light)); // 🧑🏻‍🚒 (`U+1F9D1 U+1F3FB U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::MediumLight)); // 🧑🏼‍🚒 (`U+1F9D1 U+1F3FC U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::Medium)); // 🧑🏽‍🚒 (`U+1F9D1 U+1F3FD U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::MediumDark)); // 🧑🏾‍🚒 (`U+1F9D1 U+1F3FE U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.tone(Tone::Dark)); // 🧑🏿‍🚒 (`U+1F9D1 U+1F3FF U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male)); // 👨‍🚒 (`U+1F468 U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).to_string().as_str(), \"👨‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🚒 (`U+1F468 U+1F3FB U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🚒 (`U+1F468 U+1F3FC U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🚒 (`U+1F468 U+1F3FD U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🚒 (`U+1F468 U+1F3FE U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🚒 (`U+1F468 U+1F3FF U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female)); // 👩‍🚒 (`U+1F469 U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).to_string().as_str(), \"👩‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🚒 (`U+1F469 U+1F3FB U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🚒 (`U+1F469 U+1F3FC U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🚒 (`U+1F469 U+1F3FD U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🚒 (`U+1F469 U+1F3FE U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🚒\");"]#[doc="println!(\"{}\", FIREFIGHTER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🚒 (`U+1F469 U+1F3FF U+200D U+1F692`)"] #[doc="# assert_eq!(FIREFIGHTER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🚒\");"]
#[doc="```"]
pub static FIREFIGHTER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("firefighter","🧑‍🚒"), 
	&[
		Emoji::new("firefighter: light skin tone","🧑🏻‍🚒"),
	Emoji::new("firefighter: medium-light skin tone","🧑🏼‍🚒"),
	Emoji::new("firefighter: medium skin tone","🧑🏽‍🚒"),
	Emoji::new("firefighter: medium-dark skin tone","🧑🏾‍🚒"),
	Emoji::new("firefighter: dark skin tone","🧑🏿‍🚒"),
	]), 
	&[
		With::new(Emoji::new("man firefighter","👨‍🚒"), 
	&[
		Emoji::new("man firefighter: light skin tone","👨🏻‍🚒"),
	Emoji::new("man firefighter: medium-light skin tone","👨🏼‍🚒"),
	Emoji::new("man firefighter: medium skin tone","👨🏽‍🚒"),
	Emoji::new("man firefighter: medium-dark skin tone","👨🏾‍🚒"),
	Emoji::new("man firefighter: dark skin tone","👨🏿‍🚒"),
	]),
	With::new(Emoji::new("woman firefighter","👩‍🚒"), 
	&[
		Emoji::new("woman firefighter: light skin tone","👩🏻‍🚒"),
	Emoji::new("woman firefighter: medium-light skin tone","👩🏼‍🚒"),
	Emoji::new("woman firefighter: medium skin tone","👩🏽‍🚒"),
	Emoji::new("woman firefighter: medium-dark skin tone","👩🏾‍🚒"),
	Emoji::new("woman firefighter: dark skin tone","👩🏿‍🚒"),
	]),
	]);

#[doc="guard 💂"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GUARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GUARD); // 💂 (`U+1F482`)"] #[doc="# assert_eq!(GUARD.to_string().as_str(), \"💂\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::Light)); // 💂🏻 (`U+1F482 U+1F3FB`)"] #[doc="# assert_eq!(GUARD.tone(Tone::Light).to_string().as_str(), \"💂🏻\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::MediumLight)); // 💂🏼 (`U+1F482 U+1F3FC`)"] #[doc="# assert_eq!(GUARD.tone(Tone::MediumLight).to_string().as_str(), \"💂🏼\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::Medium)); // 💂🏽 (`U+1F482 U+1F3FD`)"] #[doc="# assert_eq!(GUARD.tone(Tone::Medium).to_string().as_str(), \"💂🏽\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::MediumDark)); // 💂🏾 (`U+1F482 U+1F3FE`)"] #[doc="# assert_eq!(GUARD.tone(Tone::MediumDark).to_string().as_str(), \"💂🏾\");"]#[doc="println!(\"{}\", GUARD.tone(Tone::Dark)); // 💂🏿 (`U+1F482 U+1F3FF`)"] #[doc="# assert_eq!(GUARD.tone(Tone::Dark).to_string().as_str(), \"💂🏿\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male)); // 💂‍♂️ (`U+1F482 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).to_string().as_str(), \"💂‍♂️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::Light)); // 💂🏻‍♂️ (`U+1F482 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"💂🏻‍♂️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::MediumLight)); // 💂🏼‍♂️ (`U+1F482 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"💂🏼‍♂️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::Medium)); // 💂🏽‍♂️ (`U+1F482 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"💂🏽‍♂️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::MediumDark)); // 💂🏾‍♂️ (`U+1F482 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"💂🏾‍♂️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Male).tone(Tone::Dark)); // 💂🏿‍♂️ (`U+1F482 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"💂🏿‍♂️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female)); // 💂‍♀️ (`U+1F482 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).to_string().as_str(), \"💂‍♀️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::Light)); // 💂🏻‍♀️ (`U+1F482 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"💂🏻‍♀️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::MediumLight)); // 💂🏼‍♀️ (`U+1F482 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"💂🏼‍♀️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::Medium)); // 💂🏽‍♀️ (`U+1F482 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"💂🏽‍♀️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::MediumDark)); // 💂🏾‍♀️ (`U+1F482 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"💂🏾‍♀️\");"]#[doc="println!(\"{}\", GUARD.gender(Gender::Female).tone(Tone::Dark)); // 💂🏿‍♀️ (`U+1F482 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(GUARD.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"💂🏿‍♀️\");"]
#[doc="```"]
pub static GUARD: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("guard","💂"), 
	&[
		Emoji::new("guard: light skin tone","💂🏻"),
	Emoji::new("guard: medium-light skin tone","💂🏼"),
	Emoji::new("guard: medium skin tone","💂🏽"),
	Emoji::new("guard: medium-dark skin tone","💂🏾"),
	Emoji::new("guard: dark skin tone","💂🏿"),
	]), 
	&[
		With::new(Emoji::new("man guard","💂‍♂️"), 
	&[
		Emoji::new("man guard: light skin tone","💂🏻‍♂️"),
	Emoji::new("man guard: medium-light skin tone","💂🏼‍♂️"),
	Emoji::new("man guard: medium skin tone","💂🏽‍♂️"),
	Emoji::new("man guard: medium-dark skin tone","💂🏾‍♂️"),
	Emoji::new("man guard: dark skin tone","💂🏿‍♂️"),
	]),
	With::new(Emoji::new("woman guard","💂‍♀️"), 
	&[
		Emoji::new("woman guard: light skin tone","💂🏻‍♀️"),
	Emoji::new("woman guard: medium-light skin tone","💂🏼‍♀️"),
	Emoji::new("woman guard: medium skin tone","💂🏽‍♀️"),
	Emoji::new("woman guard: medium-dark skin tone","💂🏾‍♀️"),
	Emoji::new("woman guard: dark skin tone","💂🏿‍♀️"),
	]),
	]);

#[doc="health worker 🧑‍⚕️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEALTH_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEALTH_WORKER); // 🧑‍⚕️ (`U+1F9D1 U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.to_string().as_str(), \"🧑‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::Light)); // 🧑🏻‍⚕️ (`U+1F9D1 U+1F3FB U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::MediumLight)); // 🧑🏼‍⚕️ (`U+1F9D1 U+1F3FC U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::Medium)); // 🧑🏽‍⚕️ (`U+1F9D1 U+1F3FD U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::MediumDark)); // 🧑🏾‍⚕️ (`U+1F9D1 U+1F3FE U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.tone(Tone::Dark)); // 🧑🏿‍⚕️ (`U+1F9D1 U+1F3FF U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male)); // 👨‍⚕️ (`U+1F468 U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).to_string().as_str(), \"👨‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍⚕️ (`U+1F468 U+1F3FB U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍⚕️ (`U+1F468 U+1F3FC U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍⚕️ (`U+1F468 U+1F3FD U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍⚕️ (`U+1F468 U+1F3FE U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍⚕️ (`U+1F468 U+1F3FF U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female)); // 👩‍⚕️ (`U+1F469 U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).to_string().as_str(), \"👩‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍⚕️ (`U+1F469 U+1F3FB U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍⚕️ (`U+1F469 U+1F3FC U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍⚕️ (`U+1F469 U+1F3FD U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍⚕️ (`U+1F469 U+1F3FE U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍⚕️\");"]#[doc="println!(\"{}\", HEALTH_WORKER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍⚕️ (`U+1F469 U+1F3FF U+200D U+2695 U+FE0F`)"] #[doc="# assert_eq!(HEALTH_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍⚕️\");"]
#[doc="```"]
pub static HEALTH_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("health worker","🧑‍⚕️"), 
	&[
		Emoji::new("health worker: light skin tone","🧑🏻‍⚕️"),
	Emoji::new("health worker: medium-light skin tone","🧑🏼‍⚕️"),
	Emoji::new("health worker: medium skin tone","🧑🏽‍⚕️"),
	Emoji::new("health worker: medium-dark skin tone","🧑🏾‍⚕️"),
	Emoji::new("health worker: dark skin tone","🧑🏿‍⚕️"),
	]), 
	&[
		With::new(Emoji::new("man health worker","👨‍⚕️"), 
	&[
		Emoji::new("man health worker: light skin tone","👨🏻‍⚕️"),
	Emoji::new("man health worker: medium-light skin tone","👨🏼‍⚕️"),
	Emoji::new("man health worker: medium skin tone","👨🏽‍⚕️"),
	Emoji::new("man health worker: medium-dark skin tone","👨🏾‍⚕️"),
	Emoji::new("man health worker: dark skin tone","👨🏿‍⚕️"),
	]),
	With::new(Emoji::new("woman health worker","👩‍⚕️"), 
	&[
		Emoji::new("woman health worker: light skin tone","👩🏻‍⚕️"),
	Emoji::new("woman health worker: medium-light skin tone","👩🏼‍⚕️"),
	Emoji::new("woman health worker: medium skin tone","👩🏽‍⚕️"),
	Emoji::new("woman health worker: medium-dark skin tone","👩🏾‍⚕️"),
	Emoji::new("woman health worker: dark skin tone","👩🏿‍⚕️"),
	]),
	]);

#[doc="judge 🧑‍⚖️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JUDGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JUDGE); // 🧑‍⚖️ (`U+1F9D1 U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.to_string().as_str(), \"🧑‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::Light)); // 🧑🏻‍⚖️ (`U+1F9D1 U+1F3FB U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::MediumLight)); // 🧑🏼‍⚖️ (`U+1F9D1 U+1F3FC U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::Medium)); // 🧑🏽‍⚖️ (`U+1F9D1 U+1F3FD U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::MediumDark)); // 🧑🏾‍⚖️ (`U+1F9D1 U+1F3FE U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.tone(Tone::Dark)); // 🧑🏿‍⚖️ (`U+1F9D1 U+1F3FF U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male)); // 👨‍⚖️ (`U+1F468 U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).to_string().as_str(), \"👨‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍⚖️ (`U+1F468 U+1F3FB U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍⚖️ (`U+1F468 U+1F3FC U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍⚖️ (`U+1F468 U+1F3FD U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍⚖️ (`U+1F468 U+1F3FE U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍⚖️ (`U+1F468 U+1F3FF U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female)); // 👩‍⚖️ (`U+1F469 U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).to_string().as_str(), \"👩‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍⚖️ (`U+1F469 U+1F3FB U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍⚖️ (`U+1F469 U+1F3FC U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍⚖️ (`U+1F469 U+1F3FD U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍⚖️ (`U+1F469 U+1F3FE U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍⚖️\");"]#[doc="println!(\"{}\", JUDGE.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍⚖️ (`U+1F469 U+1F3FF U+200D U+2696 U+FE0F`)"] #[doc="# assert_eq!(JUDGE.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍⚖️\");"]
#[doc="```"]
pub static JUDGE: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("judge","🧑‍⚖️"), 
	&[
		Emoji::new("judge: light skin tone","🧑🏻‍⚖️"),
	Emoji::new("judge: medium-light skin tone","🧑🏼‍⚖️"),
	Emoji::new("judge: medium skin tone","🧑🏽‍⚖️"),
	Emoji::new("judge: medium-dark skin tone","🧑🏾‍⚖️"),
	Emoji::new("judge: dark skin tone","🧑🏿‍⚖️"),
	]), 
	&[
		With::new(Emoji::new("man judge","👨‍⚖️"), 
	&[
		Emoji::new("man judge: light skin tone","👨🏻‍⚖️"),
	Emoji::new("man judge: medium-light skin tone","👨🏼‍⚖️"),
	Emoji::new("man judge: medium skin tone","👨🏽‍⚖️"),
	Emoji::new("man judge: medium-dark skin tone","👨🏾‍⚖️"),
	Emoji::new("man judge: dark skin tone","👨🏿‍⚖️"),
	]),
	With::new(Emoji::new("woman judge","👩‍⚖️"), 
	&[
		Emoji::new("woman judge: light skin tone","👩🏻‍⚖️"),
	Emoji::new("woman judge: medium-light skin tone","👩🏼‍⚖️"),
	Emoji::new("woman judge: medium skin tone","👩🏽‍⚖️"),
	Emoji::new("woman judge: medium-dark skin tone","👩🏾‍⚖️"),
	Emoji::new("woman judge: dark skin tone","👩🏿‍⚖️"),
	]),
	]);

#[doc="mechanic 🧑‍🔧"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MECHANIC;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MECHANIC); // 🧑‍🔧 (`U+1F9D1 U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.to_string().as_str(), \"🧑‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::Light)); // 🧑🏻‍🔧 (`U+1F9D1 U+1F3FB U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::MediumLight)); // 🧑🏼‍🔧 (`U+1F9D1 U+1F3FC U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::Medium)); // 🧑🏽‍🔧 (`U+1F9D1 U+1F3FD U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::MediumDark)); // 🧑🏾‍🔧 (`U+1F9D1 U+1F3FE U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.tone(Tone::Dark)); // 🧑🏿‍🔧 (`U+1F9D1 U+1F3FF U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male)); // 👨‍🔧 (`U+1F468 U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).to_string().as_str(), \"👨‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🔧 (`U+1F468 U+1F3FB U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🔧 (`U+1F468 U+1F3FC U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🔧 (`U+1F468 U+1F3FD U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🔧 (`U+1F468 U+1F3FE U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🔧 (`U+1F468 U+1F3FF U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female)); // 👩‍🔧 (`U+1F469 U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).to_string().as_str(), \"👩‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🔧 (`U+1F469 U+1F3FB U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🔧 (`U+1F469 U+1F3FC U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🔧 (`U+1F469 U+1F3FD U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🔧 (`U+1F469 U+1F3FE U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🔧\");"]#[doc="println!(\"{}\", MECHANIC.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🔧 (`U+1F469 U+1F3FF U+200D U+1F527`)"] #[doc="# assert_eq!(MECHANIC.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🔧\");"]
#[doc="```"]
pub static MECHANIC: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("mechanic","🧑‍🔧"), 
	&[
		Emoji::new("mechanic: light skin tone","🧑🏻‍🔧"),
	Emoji::new("mechanic: medium-light skin tone","🧑🏼‍🔧"),
	Emoji::new("mechanic: medium skin tone","🧑🏽‍🔧"),
	Emoji::new("mechanic: medium-dark skin tone","🧑🏾‍🔧"),
	Emoji::new("mechanic: dark skin tone","🧑🏿‍🔧"),
	]), 
	&[
		With::new(Emoji::new("man mechanic","👨‍🔧"), 
	&[
		Emoji::new("man mechanic: light skin tone","👨🏻‍🔧"),
	Emoji::new("man mechanic: medium-light skin tone","👨🏼‍🔧"),
	Emoji::new("man mechanic: medium skin tone","👨🏽‍🔧"),
	Emoji::new("man mechanic: medium-dark skin tone","👨🏾‍🔧"),
	Emoji::new("man mechanic: dark skin tone","👨🏿‍🔧"),
	]),
	With::new(Emoji::new("woman mechanic","👩‍🔧"), 
	&[
		Emoji::new("woman mechanic: light skin tone","👩🏻‍🔧"),
	Emoji::new("woman mechanic: medium-light skin tone","👩🏼‍🔧"),
	Emoji::new("woman mechanic: medium skin tone","👩🏽‍🔧"),
	Emoji::new("woman mechanic: medium-dark skin tone","👩🏾‍🔧"),
	Emoji::new("woman mechanic: dark skin tone","👩🏿‍🔧"),
	]),
	]);

#[doc="ninja 🥷"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NINJA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NINJA); // 🥷 (`U+1F977`)"] #[doc="# assert_eq!(NINJA.to_string().as_str(), \"🥷\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::Light)); // 🥷🏻 (`U+1F977 U+1F3FB`)"] #[doc="# assert_eq!(NINJA.tone(Tone::Light).to_string().as_str(), \"🥷🏻\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::MediumLight)); // 🥷🏼 (`U+1F977 U+1F3FC`)"] #[doc="# assert_eq!(NINJA.tone(Tone::MediumLight).to_string().as_str(), \"🥷🏼\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::Medium)); // 🥷🏽 (`U+1F977 U+1F3FD`)"] #[doc="# assert_eq!(NINJA.tone(Tone::Medium).to_string().as_str(), \"🥷🏽\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::MediumDark)); // 🥷🏾 (`U+1F977 U+1F3FE`)"] #[doc="# assert_eq!(NINJA.tone(Tone::MediumDark).to_string().as_str(), \"🥷🏾\");"]#[doc="println!(\"{}\", NINJA.tone(Tone::Dark)); // 🥷🏿 (`U+1F977 U+1F3FF`)"] #[doc="# assert_eq!(NINJA.tone(Tone::Dark).to_string().as_str(), \"🥷🏿\");"]
#[doc="```"]
pub static NINJA: With<Tone,Emoji> = With::new(Emoji::new("ninja","🥷"), 
	&[
		Emoji::new("ninja: light skin tone","🥷🏻"),
	Emoji::new("ninja: medium-light skin tone","🥷🏼"),
	Emoji::new("ninja: medium skin tone","🥷🏽"),
	Emoji::new("ninja: medium-dark skin tone","🥷🏾"),
	Emoji::new("ninja: dark skin tone","🥷🏿"),
	]);

#[doc="office worker 🧑‍💼"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OFFICE_WORKER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OFFICE_WORKER); // 🧑‍💼 (`U+1F9D1 U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.to_string().as_str(), \"🧑‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::Light)); // 🧑🏻‍💼 (`U+1F9D1 U+1F3FB U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::MediumLight)); // 🧑🏼‍💼 (`U+1F9D1 U+1F3FC U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::Medium)); // 🧑🏽‍💼 (`U+1F9D1 U+1F3FD U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::MediumDark)); // 🧑🏾‍💼 (`U+1F9D1 U+1F3FE U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.tone(Tone::Dark)); // 🧑🏿‍💼 (`U+1F9D1 U+1F3FF U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male)); // 👨‍💼 (`U+1F468 U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).to_string().as_str(), \"👨‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍💼 (`U+1F468 U+1F3FB U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍💼 (`U+1F468 U+1F3FC U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍💼 (`U+1F468 U+1F3FD U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍💼 (`U+1F468 U+1F3FE U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍💼 (`U+1F468 U+1F3FF U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female)); // 👩‍💼 (`U+1F469 U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).to_string().as_str(), \"👩‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍💼 (`U+1F469 U+1F3FB U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍💼 (`U+1F469 U+1F3FC U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍💼 (`U+1F469 U+1F3FD U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍💼 (`U+1F469 U+1F3FE U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍💼\");"]#[doc="println!(\"{}\", OFFICE_WORKER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍💼 (`U+1F469 U+1F3FF U+200D U+1F4BC`)"] #[doc="# assert_eq!(OFFICE_WORKER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍💼\");"]
#[doc="```"]
pub static OFFICE_WORKER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("office worker","🧑‍💼"), 
	&[
		Emoji::new("office worker: light skin tone","🧑🏻‍💼"),
	Emoji::new("office worker: medium-light skin tone","🧑🏼‍💼"),
	Emoji::new("office worker: medium skin tone","🧑🏽‍💼"),
	Emoji::new("office worker: medium-dark skin tone","🧑🏾‍💼"),
	Emoji::new("office worker: dark skin tone","🧑🏿‍💼"),
	]), 
	&[
		With::new(Emoji::new("man office worker","👨‍💼"), 
	&[
		Emoji::new("man office worker: light skin tone","👨🏻‍💼"),
	Emoji::new("man office worker: medium-light skin tone","👨🏼‍💼"),
	Emoji::new("man office worker: medium skin tone","👨🏽‍💼"),
	Emoji::new("man office worker: medium-dark skin tone","👨🏾‍💼"),
	Emoji::new("man office worker: dark skin tone","👨🏿‍💼"),
	]),
	With::new(Emoji::new("woman office worker","👩‍💼"), 
	&[
		Emoji::new("woman office worker: light skin tone","👩🏻‍💼"),
	Emoji::new("woman office worker: medium-light skin tone","👩🏼‍💼"),
	Emoji::new("woman office worker: medium skin tone","👩🏽‍💼"),
	Emoji::new("woman office worker: medium-dark skin tone","👩🏾‍💼"),
	Emoji::new("woman office worker: dark skin tone","👩🏿‍💼"),
	]),
	]);

#[doc="person feeding baby 🧑‍🍼"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FEEDING_BABY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FEEDING_BABY); // 🧑‍🍼 (`U+1F9D1 U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.to_string().as_str(), \"🧑‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::Light)); // 🧑🏻‍🍼 (`U+1F9D1 U+1F3FB U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::MediumLight)); // 🧑🏼‍🍼 (`U+1F9D1 U+1F3FC U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::Medium)); // 🧑🏽‍🍼 (`U+1F9D1 U+1F3FD U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::MediumDark)); // 🧑🏾‍🍼 (`U+1F9D1 U+1F3FE U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.tone(Tone::Dark)); // 🧑🏿‍🍼 (`U+1F9D1 U+1F3FF U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male)); // 👨‍🍼 (`U+1F468 U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).to_string().as_str(), \"👨‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🍼 (`U+1F468 U+1F3FB U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🍼 (`U+1F468 U+1F3FC U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🍼 (`U+1F468 U+1F3FD U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🍼 (`U+1F468 U+1F3FE U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🍼 (`U+1F468 U+1F3FF U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female)); // 👩‍🍼 (`U+1F469 U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).to_string().as_str(), \"👩‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🍼 (`U+1F469 U+1F3FB U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🍼 (`U+1F469 U+1F3FC U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🍼 (`U+1F469 U+1F3FD U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🍼 (`U+1F469 U+1F3FE U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🍼\");"]#[doc="println!(\"{}\", PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🍼 (`U+1F469 U+1F3FF U+200D U+1F37C`)"] #[doc="# assert_eq!(PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🍼\");"]
#[doc="```"]
pub static PERSON_FEEDING_BABY: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person feeding baby","🧑‍🍼"), 
	&[
		Emoji::new("person feeding baby: light skin tone","🧑🏻‍🍼"),
	Emoji::new("person feeding baby: medium-light skin tone","🧑🏼‍🍼"),
	Emoji::new("person feeding baby: medium skin tone","🧑🏽‍🍼"),
	Emoji::new("person feeding baby: medium-dark skin tone","🧑🏾‍🍼"),
	Emoji::new("person feeding baby: dark skin tone","🧑🏿‍🍼"),
	]), 
	&[
		With::new(Emoji::new("man feeding baby","👨‍🍼"), 
	&[
		Emoji::new("man feeding baby: light skin tone","👨🏻‍🍼"),
	Emoji::new("man feeding baby: medium-light skin tone","👨🏼‍🍼"),
	Emoji::new("man feeding baby: medium skin tone","👨🏽‍🍼"),
	Emoji::new("man feeding baby: medium-dark skin tone","👨🏾‍🍼"),
	Emoji::new("man feeding baby: dark skin tone","👨🏿‍🍼"),
	]),
	With::new(Emoji::new("woman feeding baby","👩‍🍼"), 
	&[
		Emoji::new("woman feeding baby: light skin tone","👩🏻‍🍼"),
	Emoji::new("woman feeding baby: medium-light skin tone","👩🏼‍🍼"),
	Emoji::new("woman feeding baby: medium skin tone","👩🏽‍🍼"),
	Emoji::new("woman feeding baby: medium-dark skin tone","👩🏾‍🍼"),
	Emoji::new("woman feeding baby: dark skin tone","👩🏿‍🍼"),
	]),
	]);

#[doc="person in tuxedo 🤵"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_IN_TUXEDO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_IN_TUXEDO); // 🤵 (`U+1F935`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.to_string().as_str(), \"🤵\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::Light)); // 🤵🏻 (`U+1F935 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::Light).to_string().as_str(), \"🤵🏻\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::MediumLight)); // 🤵🏼 (`U+1F935 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::MediumLight).to_string().as_str(), \"🤵🏼\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::Medium)); // 🤵🏽 (`U+1F935 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::Medium).to_string().as_str(), \"🤵🏽\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::MediumDark)); // 🤵🏾 (`U+1F935 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::MediumDark).to_string().as_str(), \"🤵🏾\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.tone(Tone::Dark)); // 🤵🏿 (`U+1F935 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.tone(Tone::Dark).to_string().as_str(), \"🤵🏿\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male)); // 🤵‍♂️ (`U+1F935 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).to_string().as_str(), \"🤵‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Light)); // 🤵🏻‍♂️ (`U+1F935 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤵🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumLight)); // 🤵🏼‍♂️ (`U+1F935 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤵🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Medium)); // 🤵🏽‍♂️ (`U+1F935 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤵🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumDark)); // 🤵🏾‍♂️ (`U+1F935 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤵🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Dark)); // 🤵🏿‍♂️ (`U+1F935 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤵🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female)); // 🤵‍♀️ (`U+1F935 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).to_string().as_str(), \"🤵‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Light)); // 🤵🏻‍♀️ (`U+1F935 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤵🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumLight)); // 🤵🏼‍♀️ (`U+1F935 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤵🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Medium)); // 🤵🏽‍♀️ (`U+1F935 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤵🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumDark)); // 🤵🏾‍♀️ (`U+1F935 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤵🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Dark)); // 🤵🏿‍♀️ (`U+1F935 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤵🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_IN_TUXEDO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person in tuxedo","🤵"), 
	&[
		Emoji::new("person in tuxedo: light skin tone","🤵🏻"),
	Emoji::new("person in tuxedo: medium-light skin tone","🤵🏼"),
	Emoji::new("person in tuxedo: medium skin tone","🤵🏽"),
	Emoji::new("person in tuxedo: medium-dark skin tone","🤵🏾"),
	Emoji::new("person in tuxedo: dark skin tone","🤵🏿"),
	]), 
	&[
		With::new(Emoji::new("man in tuxedo","🤵‍♂️"), 
	&[
		Emoji::new("man in tuxedo: light skin tone","🤵🏻‍♂️"),
	Emoji::new("man in tuxedo: medium-light skin tone","🤵🏼‍♂️"),
	Emoji::new("man in tuxedo: medium skin tone","🤵🏽‍♂️"),
	Emoji::new("man in tuxedo: medium-dark skin tone","🤵🏾‍♂️"),
	Emoji::new("man in tuxedo: dark skin tone","🤵🏿‍♂️"),
	]),
	With::new(Emoji::new("woman in tuxedo","🤵‍♀️"), 
	&[
		Emoji::new("woman in tuxedo: light skin tone","🤵🏻‍♀️"),
	Emoji::new("woman in tuxedo: medium-light skin tone","🤵🏼‍♀️"),
	Emoji::new("woman in tuxedo: medium skin tone","🤵🏽‍♀️"),
	Emoji::new("woman in tuxedo: medium-dark skin tone","🤵🏾‍♀️"),
	Emoji::new("woman in tuxedo: dark skin tone","🤵🏿‍♀️"),
	]),
	]);

#[doc="person wearing turban 👳"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WEARING_TURBAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WEARING_TURBAN); // 👳 (`U+1F473`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.to_string().as_str(), \"👳\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::Light)); // 👳🏻 (`U+1F473 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::Light).to_string().as_str(), \"👳🏻\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::MediumLight)); // 👳🏼 (`U+1F473 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::MediumLight).to_string().as_str(), \"👳🏼\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::Medium)); // 👳🏽 (`U+1F473 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::Medium).to_string().as_str(), \"👳🏽\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::MediumDark)); // 👳🏾 (`U+1F473 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::MediumDark).to_string().as_str(), \"👳🏾\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.tone(Tone::Dark)); // 👳🏿 (`U+1F473 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.tone(Tone::Dark).to_string().as_str(), \"👳🏿\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male)); // 👳‍♂️ (`U+1F473 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).to_string().as_str(), \"👳‍♂️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Light)); // 👳🏻‍♂️ (`U+1F473 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👳🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumLight)); // 👳🏼‍♂️ (`U+1F473 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👳🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Medium)); // 👳🏽‍♂️ (`U+1F473 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👳🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumDark)); // 👳🏾‍♂️ (`U+1F473 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👳🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Dark)); // 👳🏿‍♂️ (`U+1F473 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👳🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female)); // 👳‍♀️ (`U+1F473 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).to_string().as_str(), \"👳‍♀️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Light)); // 👳🏻‍♀️ (`U+1F473 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👳🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumLight)); // 👳🏼‍♀️ (`U+1F473 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👳🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Medium)); // 👳🏽‍♀️ (`U+1F473 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👳🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumDark)); // 👳🏾‍♀️ (`U+1F473 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👳🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Dark)); // 👳🏿‍♀️ (`U+1F473 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👳🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_WEARING_TURBAN: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person wearing turban","👳"), 
	&[
		Emoji::new("person wearing turban: light skin tone","👳🏻"),
	Emoji::new("person wearing turban: medium-light skin tone","👳🏼"),
	Emoji::new("person wearing turban: medium skin tone","👳🏽"),
	Emoji::new("person wearing turban: medium-dark skin tone","👳🏾"),
	Emoji::new("person wearing turban: dark skin tone","👳🏿"),
	]), 
	&[
		With::new(Emoji::new("man wearing turban","👳‍♂️"), 
	&[
		Emoji::new("man wearing turban: light skin tone","👳🏻‍♂️"),
	Emoji::new("man wearing turban: medium-light skin tone","👳🏼‍♂️"),
	Emoji::new("man wearing turban: medium skin tone","👳🏽‍♂️"),
	Emoji::new("man wearing turban: medium-dark skin tone","👳🏾‍♂️"),
	Emoji::new("man wearing turban: dark skin tone","👳🏿‍♂️"),
	]),
	With::new(Emoji::new("woman wearing turban","👳‍♀️"), 
	&[
		Emoji::new("woman wearing turban: light skin tone","👳🏻‍♀️"),
	Emoji::new("woman wearing turban: medium-light skin tone","👳🏼‍♀️"),
	Emoji::new("woman wearing turban: medium skin tone","👳🏽‍♀️"),
	Emoji::new("woman wearing turban: medium-dark skin tone","👳🏾‍♀️"),
	Emoji::new("woman wearing turban: dark skin tone","👳🏿‍♀️"),
	]),
	]);

#[doc="person with skullcap 👲"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_SKULLCAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP); // 👲 (`U+1F472`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.to_string().as_str(), \"👲\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::Light)); // 👲🏻 (`U+1F472 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::Light).to_string().as_str(), \"👲🏻\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::MediumLight)); // 👲🏼 (`U+1F472 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::MediumLight).to_string().as_str(), \"👲🏼\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::Medium)); // 👲🏽 (`U+1F472 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::Medium).to_string().as_str(), \"👲🏽\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::MediumDark)); // 👲🏾 (`U+1F472 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::MediumDark).to_string().as_str(), \"👲🏾\");"]#[doc="println!(\"{}\", PERSON_WITH_SKULLCAP.tone(Tone::Dark)); // 👲🏿 (`U+1F472 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WITH_SKULLCAP.tone(Tone::Dark).to_string().as_str(), \"👲🏿\");"]
#[doc="```"]
pub static PERSON_WITH_SKULLCAP: With<Tone,Emoji> = With::new(Emoji::new("person with skullcap","👲"), 
	&[
		Emoji::new("person with skullcap: light skin tone","👲🏻"),
	Emoji::new("person with skullcap: medium-light skin tone","👲🏼"),
	Emoji::new("person with skullcap: medium skin tone","👲🏽"),
	Emoji::new("person with skullcap: medium-dark skin tone","👲🏾"),
	Emoji::new("person with skullcap: dark skin tone","👲🏿"),
	]);

#[doc="person with veil 👰"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WITH_VEIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WITH_VEIL); // 👰 (`U+1F470`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.to_string().as_str(), \"👰\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::Light)); // 👰🏻 (`U+1F470 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::Light).to_string().as_str(), \"👰🏻\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::MediumLight)); // 👰🏼 (`U+1F470 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::MediumLight).to_string().as_str(), \"👰🏼\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::Medium)); // 👰🏽 (`U+1F470 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::Medium).to_string().as_str(), \"👰🏽\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::MediumDark)); // 👰🏾 (`U+1F470 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::MediumDark).to_string().as_str(), \"👰🏾\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.tone(Tone::Dark)); // 👰🏿 (`U+1F470 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.tone(Tone::Dark).to_string().as_str(), \"👰🏿\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male)); // 👰‍♂️ (`U+1F470 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).to_string().as_str(), \"👰‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Light)); // 👰🏻‍♂️ (`U+1F470 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👰🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumLight)); // 👰🏼‍♂️ (`U+1F470 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👰🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Medium)); // 👰🏽‍♂️ (`U+1F470 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👰🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumDark)); // 👰🏾‍♂️ (`U+1F470 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👰🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Dark)); // 👰🏿‍♂️ (`U+1F470 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👰🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female)); // 👰‍♀️ (`U+1F470 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).to_string().as_str(), \"👰‍♀️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Light)); // 👰🏻‍♀️ (`U+1F470 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👰🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumLight)); // 👰🏼‍♀️ (`U+1F470 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👰🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Medium)); // 👰🏽‍♀️ (`U+1F470 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👰🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumDark)); // 👰🏾‍♀️ (`U+1F470 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👰🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Dark)); // 👰🏿‍♀️ (`U+1F470 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👰🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_WITH_VEIL: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person with veil","👰"), 
	&[
		Emoji::new("person with veil: light skin tone","👰🏻"),
	Emoji::new("person with veil: medium-light skin tone","👰🏼"),
	Emoji::new("person with veil: medium skin tone","👰🏽"),
	Emoji::new("person with veil: medium-dark skin tone","👰🏾"),
	Emoji::new("person with veil: dark skin tone","👰🏿"),
	]), 
	&[
		With::new(Emoji::new("man with veil","👰‍♂️"), 
	&[
		Emoji::new("man with veil: light skin tone","👰🏻‍♂️"),
	Emoji::new("man with veil: medium-light skin tone","👰🏼‍♂️"),
	Emoji::new("man with veil: medium skin tone","👰🏽‍♂️"),
	Emoji::new("man with veil: medium-dark skin tone","👰🏾‍♂️"),
	Emoji::new("man with veil: dark skin tone","👰🏿‍♂️"),
	]),
	With::new(Emoji::new("woman with veil","👰‍♀️"), 
	&[
		Emoji::new("woman with veil: light skin tone","👰🏻‍♀️"),
	Emoji::new("woman with veil: medium-light skin tone","👰🏼‍♀️"),
	Emoji::new("woman with veil: medium skin tone","👰🏽‍♀️"),
	Emoji::new("woman with veil: medium-dark skin tone","👰🏾‍♀️"),
	Emoji::new("woman with veil: dark skin tone","👰🏿‍♀️"),
	]),
	]);

#[doc="pilot 🧑‍✈️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PILOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PILOT); // 🧑‍✈️ (`U+1F9D1 U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.to_string().as_str(), \"🧑‍✈️\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::Light)); // 🧑🏻‍✈️ (`U+1F9D1 U+1F3FB U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍✈️\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::MediumLight)); // 🧑🏼‍✈️ (`U+1F9D1 U+1F3FC U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍✈️\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::Medium)); // 🧑🏽‍✈️ (`U+1F9D1 U+1F3FD U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍✈️\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::MediumDark)); // 🧑🏾‍✈️ (`U+1F9D1 U+1F3FE U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍✈️\");"]#[doc="println!(\"{}\", PILOT.tone(Tone::Dark)); // 🧑🏿‍✈️ (`U+1F9D1 U+1F3FF U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male)); // 👨‍✈️ (`U+1F468 U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).to_string().as_str(), \"👨‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍✈️ (`U+1F468 U+1F3FB U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍✈️ (`U+1F468 U+1F3FC U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍✈️ (`U+1F468 U+1F3FD U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍✈️ (`U+1F468 U+1F3FE U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍✈️ (`U+1F468 U+1F3FF U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female)); // 👩‍✈️ (`U+1F469 U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).to_string().as_str(), \"👩‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍✈️ (`U+1F469 U+1F3FB U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍✈️ (`U+1F469 U+1F3FC U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍✈️ (`U+1F469 U+1F3FD U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍✈️ (`U+1F469 U+1F3FE U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍✈️\");"]#[doc="println!(\"{}\", PILOT.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍✈️ (`U+1F469 U+1F3FF U+200D U+2708 U+FE0F`)"] #[doc="# assert_eq!(PILOT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍✈️\");"]
#[doc="```"]
pub static PILOT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("pilot","🧑‍✈️"), 
	&[
		Emoji::new("pilot: light skin tone","🧑🏻‍✈️"),
	Emoji::new("pilot: medium-light skin tone","🧑🏼‍✈️"),
	Emoji::new("pilot: medium skin tone","🧑🏽‍✈️"),
	Emoji::new("pilot: medium-dark skin tone","🧑🏾‍✈️"),
	Emoji::new("pilot: dark skin tone","🧑🏿‍✈️"),
	]), 
	&[
		With::new(Emoji::new("man pilot","👨‍✈️"), 
	&[
		Emoji::new("man pilot: light skin tone","👨🏻‍✈️"),
	Emoji::new("man pilot: medium-light skin tone","👨🏼‍✈️"),
	Emoji::new("man pilot: medium skin tone","👨🏽‍✈️"),
	Emoji::new("man pilot: medium-dark skin tone","👨🏾‍✈️"),
	Emoji::new("man pilot: dark skin tone","👨🏿‍✈️"),
	]),
	With::new(Emoji::new("woman pilot","👩‍✈️"), 
	&[
		Emoji::new("woman pilot: light skin tone","👩🏻‍✈️"),
	Emoji::new("woman pilot: medium-light skin tone","👩🏼‍✈️"),
	Emoji::new("woman pilot: medium skin tone","👩🏽‍✈️"),
	Emoji::new("woman pilot: medium-dark skin tone","👩🏾‍✈️"),
	Emoji::new("woman pilot: dark skin tone","👩🏿‍✈️"),
	]),
	]);

#[doc="police officer 👮"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLICE_OFFICER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLICE_OFFICER); // 👮 (`U+1F46E`)"] #[doc="# assert_eq!(POLICE_OFFICER.to_string().as_str(), \"👮\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::Light)); // 👮🏻 (`U+1F46E U+1F3FB`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::Light).to_string().as_str(), \"👮🏻\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::MediumLight)); // 👮🏼 (`U+1F46E U+1F3FC`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::MediumLight).to_string().as_str(), \"👮🏼\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::Medium)); // 👮🏽 (`U+1F46E U+1F3FD`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::Medium).to_string().as_str(), \"👮🏽\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::MediumDark)); // 👮🏾 (`U+1F46E U+1F3FE`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::MediumDark).to_string().as_str(), \"👮🏾\");"]#[doc="println!(\"{}\", POLICE_OFFICER.tone(Tone::Dark)); // 👮🏿 (`U+1F46E U+1F3FF`)"] #[doc="# assert_eq!(POLICE_OFFICER.tone(Tone::Dark).to_string().as_str(), \"👮🏿\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male)); // 👮‍♂️ (`U+1F46E U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).to_string().as_str(), \"👮‍♂️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::Light)); // 👮🏻‍♂️ (`U+1F46E U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👮🏻‍♂️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumLight)); // 👮🏼‍♂️ (`U+1F46E U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👮🏼‍♂️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::Medium)); // 👮🏽‍♂️ (`U+1F46E U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👮🏽‍♂️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumDark)); // 👮🏾‍♂️ (`U+1F46E U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👮🏾‍♂️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Male).tone(Tone::Dark)); // 👮🏿‍♂️ (`U+1F46E U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👮🏿‍♂️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female)); // 👮‍♀️ (`U+1F46E U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).to_string().as_str(), \"👮‍♀️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::Light)); // 👮🏻‍♀️ (`U+1F46E U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👮🏻‍♀️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumLight)); // 👮🏼‍♀️ (`U+1F46E U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👮🏼‍♀️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::Medium)); // 👮🏽‍♀️ (`U+1F46E U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👮🏽‍♀️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumDark)); // 👮🏾‍♀️ (`U+1F46E U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👮🏾‍♀️\");"]#[doc="println!(\"{}\", POLICE_OFFICER.gender(Gender::Female).tone(Tone::Dark)); // 👮🏿‍♀️ (`U+1F46E U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(POLICE_OFFICER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👮🏿‍♀️\");"]
#[doc="```"]
pub static POLICE_OFFICER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("police officer","👮"), 
	&[
		Emoji::new("police officer: light skin tone","👮🏻"),
	Emoji::new("police officer: medium-light skin tone","👮🏼"),
	Emoji::new("police officer: medium skin tone","👮🏽"),
	Emoji::new("police officer: medium-dark skin tone","👮🏾"),
	Emoji::new("police officer: dark skin tone","👮🏿"),
	]), 
	&[
		With::new(Emoji::new("man police officer","👮‍♂️"), 
	&[
		Emoji::new("man police officer: light skin tone","👮🏻‍♂️"),
	Emoji::new("man police officer: medium-light skin tone","👮🏼‍♂️"),
	Emoji::new("man police officer: medium skin tone","👮🏽‍♂️"),
	Emoji::new("man police officer: medium-dark skin tone","👮🏾‍♂️"),
	Emoji::new("man police officer: dark skin tone","👮🏿‍♂️"),
	]),
	With::new(Emoji::new("woman police officer","👮‍♀️"), 
	&[
		Emoji::new("woman police officer: light skin tone","👮🏻‍♀️"),
	Emoji::new("woman police officer: medium-light skin tone","👮🏼‍♀️"),
	Emoji::new("woman police officer: medium skin tone","👮🏽‍♀️"),
	Emoji::new("woman police officer: medium-dark skin tone","👮🏾‍♀️"),
	Emoji::new("woman police officer: dark skin tone","👮🏿‍♀️"),
	]),
	]);

#[doc="pregnant person 🤰"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PREGNANT_WOMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PREGNANT_WOMAN); // 🤰 (`U+1F930`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.to_string().as_str(), \"🤰\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::Light)); // 🤰🏻 (`U+1F930 U+1F3FB`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::Light).to_string().as_str(), \"🤰🏻\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::MediumLight)); // 🤰🏼 (`U+1F930 U+1F3FC`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::MediumLight).to_string().as_str(), \"🤰🏼\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::Medium)); // 🤰🏽 (`U+1F930 U+1F3FD`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::Medium).to_string().as_str(), \"🤰🏽\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::MediumDark)); // 🤰🏾 (`U+1F930 U+1F3FE`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::MediumDark).to_string().as_str(), \"🤰🏾\");"]#[doc="println!(\"{}\", PREGNANT_WOMAN.tone(Tone::Dark)); // 🤰🏿 (`U+1F930 U+1F3FF`)"] #[doc="# assert_eq!(PREGNANT_WOMAN.tone(Tone::Dark).to_string().as_str(), \"🤰🏿\");"]
#[doc="```"]
pub static PREGNANT_WOMAN: With<Tone,Emoji> = With::new(Emoji::new("pregnant woman","🤰"), 
	&[
		Emoji::new("pregnant woman: light skin tone","🤰🏻"),
	Emoji::new("pregnant woman: medium-light skin tone","🤰🏼"),
	Emoji::new("pregnant woman: medium skin tone","🤰🏽"),
	Emoji::new("pregnant woman: medium-dark skin tone","🤰🏾"),
	Emoji::new("pregnant woman: dark skin tone","🤰🏿"),
	]);

#[doc="prince 🤴"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRINCE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRINCE); // 🤴 (`U+1F934`)"] #[doc="# assert_eq!(PRINCE.to_string().as_str(), \"🤴\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::Light)); // 🤴🏻 (`U+1F934 U+1F3FB`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::Light).to_string().as_str(), \"🤴🏻\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::MediumLight)); // 🤴🏼 (`U+1F934 U+1F3FC`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::MediumLight).to_string().as_str(), \"🤴🏼\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::Medium)); // 🤴🏽 (`U+1F934 U+1F3FD`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::Medium).to_string().as_str(), \"🤴🏽\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::MediumDark)); // 🤴🏾 (`U+1F934 U+1F3FE`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::MediumDark).to_string().as_str(), \"🤴🏾\");"]#[doc="println!(\"{}\", PRINCE.tone(Tone::Dark)); // 🤴🏿 (`U+1F934 U+1F3FF`)"] #[doc="# assert_eq!(PRINCE.tone(Tone::Dark).to_string().as_str(), \"🤴🏿\");"]
#[doc="```"]
pub static PRINCE: With<Tone,Emoji> = With::new(Emoji::new("prince","🤴"), 
	&[
		Emoji::new("prince: light skin tone","🤴🏻"),
	Emoji::new("prince: medium-light skin tone","🤴🏼"),
	Emoji::new("prince: medium skin tone","🤴🏽"),
	Emoji::new("prince: medium-dark skin tone","🤴🏾"),
	Emoji::new("prince: dark skin tone","🤴🏿"),
	]);

#[doc="princess 👸"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PRINCESS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PRINCESS); // 👸 (`U+1F478`)"] #[doc="# assert_eq!(PRINCESS.to_string().as_str(), \"👸\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::Light)); // 👸🏻 (`U+1F478 U+1F3FB`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::Light).to_string().as_str(), \"👸🏻\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::MediumLight)); // 👸🏼 (`U+1F478 U+1F3FC`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::MediumLight).to_string().as_str(), \"👸🏼\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::Medium)); // 👸🏽 (`U+1F478 U+1F3FD`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::Medium).to_string().as_str(), \"👸🏽\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::MediumDark)); // 👸🏾 (`U+1F478 U+1F3FE`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::MediumDark).to_string().as_str(), \"👸🏾\");"]#[doc="println!(\"{}\", PRINCESS.tone(Tone::Dark)); // 👸🏿 (`U+1F478 U+1F3FF`)"] #[doc="# assert_eq!(PRINCESS.tone(Tone::Dark).to_string().as_str(), \"👸🏿\");"]
#[doc="```"]
pub static PRINCESS: With<Tone,Emoji> = With::new(Emoji::new("princess","👸"), 
	&[
		Emoji::new("princess: light skin tone","👸🏻"),
	Emoji::new("princess: medium-light skin tone","👸🏼"),
	Emoji::new("princess: medium skin tone","👸🏽"),
	Emoji::new("princess: medium-dark skin tone","👸🏾"),
	Emoji::new("princess: dark skin tone","👸🏿"),
	]);

#[doc="scientist 🧑‍🔬"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCIENTIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCIENTIST); // 🧑‍🔬 (`U+1F9D1 U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.to_string().as_str(), \"🧑‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::Light)); // 🧑🏻‍🔬 (`U+1F9D1 U+1F3FB U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::MediumLight)); // 🧑🏼‍🔬 (`U+1F9D1 U+1F3FC U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::Medium)); // 🧑🏽‍🔬 (`U+1F9D1 U+1F3FD U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::MediumDark)); // 🧑🏾‍🔬 (`U+1F9D1 U+1F3FE U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.tone(Tone::Dark)); // 🧑🏿‍🔬 (`U+1F9D1 U+1F3FF U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male)); // 👨‍🔬 (`U+1F468 U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).to_string().as_str(), \"👨‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🔬 (`U+1F468 U+1F3FB U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🔬 (`U+1F468 U+1F3FC U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🔬 (`U+1F468 U+1F3FD U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🔬 (`U+1F468 U+1F3FE U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🔬 (`U+1F468 U+1F3FF U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female)); // 👩‍🔬 (`U+1F469 U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).to_string().as_str(), \"👩‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🔬 (`U+1F469 U+1F3FB U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🔬 (`U+1F469 U+1F3FC U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🔬 (`U+1F469 U+1F3FD U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🔬 (`U+1F469 U+1F3FE U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🔬\");"]#[doc="println!(\"{}\", SCIENTIST.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🔬 (`U+1F469 U+1F3FF U+200D U+1F52C`)"] #[doc="# assert_eq!(SCIENTIST.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🔬\");"]
#[doc="```"]
pub static SCIENTIST: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("scientist","🧑‍🔬"), 
	&[
		Emoji::new("scientist: light skin tone","🧑🏻‍🔬"),
	Emoji::new("scientist: medium-light skin tone","🧑🏼‍🔬"),
	Emoji::new("scientist: medium skin tone","🧑🏽‍🔬"),
	Emoji::new("scientist: medium-dark skin tone","🧑🏾‍🔬"),
	Emoji::new("scientist: dark skin tone","🧑🏿‍🔬"),
	]), 
	&[
		With::new(Emoji::new("man scientist","👨‍🔬"), 
	&[
		Emoji::new("man scientist: light skin tone","👨🏻‍🔬"),
	Emoji::new("man scientist: medium-light skin tone","👨🏼‍🔬"),
	Emoji::new("man scientist: medium skin tone","👨🏽‍🔬"),
	Emoji::new("man scientist: medium-dark skin tone","👨🏾‍🔬"),
	Emoji::new("man scientist: dark skin tone","👨🏿‍🔬"),
	]),
	With::new(Emoji::new("woman scientist","👩‍🔬"), 
	&[
		Emoji::new("woman scientist: light skin tone","👩🏻‍🔬"),
	Emoji::new("woman scientist: medium-light skin tone","👩🏼‍🔬"),
	Emoji::new("woman scientist: medium skin tone","👩🏽‍🔬"),
	Emoji::new("woman scientist: medium-dark skin tone","👩🏾‍🔬"),
	Emoji::new("woman scientist: dark skin tone","👩🏿‍🔬"),
	]),
	]);

#[doc="singer 🧑‍🎤"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SINGER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SINGER); // 🧑‍🎤 (`U+1F9D1 U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.to_string().as_str(), \"🧑‍🎤\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::Light)); // 🧑🏻‍🎤 (`U+1F9D1 U+1F3FB U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🎤\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::MediumLight)); // 🧑🏼‍🎤 (`U+1F9D1 U+1F3FC U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🎤\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::Medium)); // 🧑🏽‍🎤 (`U+1F9D1 U+1F3FD U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🎤\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::MediumDark)); // 🧑🏾‍🎤 (`U+1F9D1 U+1F3FE U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🎤\");"]#[doc="println!(\"{}\", SINGER.tone(Tone::Dark)); // 🧑🏿‍🎤 (`U+1F9D1 U+1F3FF U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male)); // 👨‍🎤 (`U+1F468 U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).to_string().as_str(), \"👨‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🎤 (`U+1F468 U+1F3FB U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🎤 (`U+1F468 U+1F3FC U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🎤 (`U+1F468 U+1F3FD U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🎤 (`U+1F468 U+1F3FE U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🎤 (`U+1F468 U+1F3FF U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female)); // 👩‍🎤 (`U+1F469 U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).to_string().as_str(), \"👩‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🎤 (`U+1F469 U+1F3FB U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🎤 (`U+1F469 U+1F3FC U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🎤 (`U+1F469 U+1F3FD U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🎤 (`U+1F469 U+1F3FE U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🎤\");"]#[doc="println!(\"{}\", SINGER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🎤 (`U+1F469 U+1F3FF U+200D U+1F3A4`)"] #[doc="# assert_eq!(SINGER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🎤\");"]
#[doc="```"]
pub static SINGER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("singer","🧑‍🎤"), 
	&[
		Emoji::new("singer: light skin tone","🧑🏻‍🎤"),
	Emoji::new("singer: medium-light skin tone","🧑🏼‍🎤"),
	Emoji::new("singer: medium skin tone","🧑🏽‍🎤"),
	Emoji::new("singer: medium-dark skin tone","🧑🏾‍🎤"),
	Emoji::new("singer: dark skin tone","🧑🏿‍🎤"),
	]), 
	&[
		With::new(Emoji::new("man singer","👨‍🎤"), 
	&[
		Emoji::new("man singer: light skin tone","👨🏻‍🎤"),
	Emoji::new("man singer: medium-light skin tone","👨🏼‍🎤"),
	Emoji::new("man singer: medium skin tone","👨🏽‍🎤"),
	Emoji::new("man singer: medium-dark skin tone","👨🏾‍🎤"),
	Emoji::new("man singer: dark skin tone","👨🏿‍🎤"),
	]),
	With::new(Emoji::new("woman singer","👩‍🎤"), 
	&[
		Emoji::new("woman singer: light skin tone","👩🏻‍🎤"),
	Emoji::new("woman singer: medium-light skin tone","👩🏼‍🎤"),
	Emoji::new("woman singer: medium skin tone","👩🏽‍🎤"),
	Emoji::new("woman singer: medium-dark skin tone","👩🏾‍🎤"),
	Emoji::new("woman singer: dark skin tone","👩🏿‍🎤"),
	]),
	]);

#[doc="student 🧑‍🎓"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STUDENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STUDENT); // 🧑‍🎓 (`U+1F9D1 U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.to_string().as_str(), \"🧑‍🎓\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::Light)); // 🧑🏻‍🎓 (`U+1F9D1 U+1F3FB U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🎓\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::MediumLight)); // 🧑🏼‍🎓 (`U+1F9D1 U+1F3FC U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🎓\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::Medium)); // 🧑🏽‍🎓 (`U+1F9D1 U+1F3FD U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🎓\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::MediumDark)); // 🧑🏾‍🎓 (`U+1F9D1 U+1F3FE U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🎓\");"]#[doc="println!(\"{}\", STUDENT.tone(Tone::Dark)); // 🧑🏿‍🎓 (`U+1F9D1 U+1F3FF U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male)); // 👨‍🎓 (`U+1F468 U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).to_string().as_str(), \"👨‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🎓 (`U+1F468 U+1F3FB U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🎓 (`U+1F468 U+1F3FC U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🎓 (`U+1F468 U+1F3FD U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🎓 (`U+1F468 U+1F3FE U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🎓 (`U+1F468 U+1F3FF U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female)); // 👩‍🎓 (`U+1F469 U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).to_string().as_str(), \"👩‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🎓 (`U+1F469 U+1F3FB U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🎓 (`U+1F469 U+1F3FC U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🎓 (`U+1F469 U+1F3FD U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🎓 (`U+1F469 U+1F3FE U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🎓\");"]#[doc="println!(\"{}\", STUDENT.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🎓 (`U+1F469 U+1F3FF U+200D U+1F393`)"] #[doc="# assert_eq!(STUDENT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🎓\");"]
#[doc="```"]
pub static STUDENT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("student","🧑‍🎓"), 
	&[
		Emoji::new("student: light skin tone","🧑🏻‍🎓"),
	Emoji::new("student: medium-light skin tone","🧑🏼‍🎓"),
	Emoji::new("student: medium skin tone","🧑🏽‍🎓"),
	Emoji::new("student: medium-dark skin tone","🧑🏾‍🎓"),
	Emoji::new("student: dark skin tone","🧑🏿‍🎓"),
	]), 
	&[
		With::new(Emoji::new("man student","👨‍🎓"), 
	&[
		Emoji::new("man student: light skin tone","👨🏻‍🎓"),
	Emoji::new("man student: medium-light skin tone","👨🏼‍🎓"),
	Emoji::new("man student: medium skin tone","👨🏽‍🎓"),
	Emoji::new("man student: medium-dark skin tone","👨🏾‍🎓"),
	Emoji::new("man student: dark skin tone","👨🏿‍🎓"),
	]),
	With::new(Emoji::new("woman student","👩‍🎓"), 
	&[
		Emoji::new("woman student: light skin tone","👩🏻‍🎓"),
	Emoji::new("woman student: medium-light skin tone","👩🏼‍🎓"),
	Emoji::new("woman student: medium skin tone","👩🏽‍🎓"),
	Emoji::new("woman student: medium-dark skin tone","👩🏾‍🎓"),
	Emoji::new("woman student: dark skin tone","👩🏿‍🎓"),
	]),
	]);

#[doc="teacher 🧑‍🏫"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEACHER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEACHER); // 🧑‍🏫 (`U+1F9D1 U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.to_string().as_str(), \"🧑‍🏫\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::Light)); // 🧑🏻‍🏫 (`U+1F9D1 U+1F3FB U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍🏫\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::MediumLight)); // 🧑🏼‍🏫 (`U+1F9D1 U+1F3FC U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍🏫\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::Medium)); // 🧑🏽‍🏫 (`U+1F9D1 U+1F3FD U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍🏫\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::MediumDark)); // 🧑🏾‍🏫 (`U+1F9D1 U+1F3FE U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍🏫\");"]#[doc="println!(\"{}\", TEACHER.tone(Tone::Dark)); // 🧑🏿‍🏫 (`U+1F9D1 U+1F3FF U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male)); // 👨‍🏫 (`U+1F468 U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).to_string().as_str(), \"👨‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍🏫 (`U+1F468 U+1F3FB U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍🏫 (`U+1F468 U+1F3FC U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍🏫 (`U+1F468 U+1F3FD U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍🏫 (`U+1F468 U+1F3FE U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍🏫 (`U+1F468 U+1F3FF U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female)); // 👩‍🏫 (`U+1F469 U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).to_string().as_str(), \"👩‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍🏫 (`U+1F469 U+1F3FB U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍🏫 (`U+1F469 U+1F3FC U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍🏫 (`U+1F469 U+1F3FD U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍🏫 (`U+1F469 U+1F3FE U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍🏫\");"]#[doc="println!(\"{}\", TEACHER.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍🏫 (`U+1F469 U+1F3FF U+200D U+1F3EB`)"] #[doc="# assert_eq!(TEACHER.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍🏫\");"]
#[doc="```"]
pub static TEACHER: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("teacher","🧑‍🏫"), 
	&[
		Emoji::new("teacher: light skin tone","🧑🏻‍🏫"),
	Emoji::new("teacher: medium-light skin tone","🧑🏼‍🏫"),
	Emoji::new("teacher: medium skin tone","🧑🏽‍🏫"),
	Emoji::new("teacher: medium-dark skin tone","🧑🏾‍🏫"),
	Emoji::new("teacher: dark skin tone","🧑🏿‍🏫"),
	]), 
	&[
		With::new(Emoji::new("man teacher","👨‍🏫"), 
	&[
		Emoji::new("man teacher: light skin tone","👨🏻‍🏫"),
	Emoji::new("man teacher: medium-light skin tone","👨🏼‍🏫"),
	Emoji::new("man teacher: medium skin tone","👨🏽‍🏫"),
	Emoji::new("man teacher: medium-dark skin tone","👨🏾‍🏫"),
	Emoji::new("man teacher: dark skin tone","👨🏿‍🏫"),
	]),
	With::new(Emoji::new("woman teacher","👩‍🏫"), 
	&[
		Emoji::new("woman teacher: light skin tone","👩🏻‍🏫"),
	Emoji::new("woman teacher: medium-light skin tone","👩🏼‍🏫"),
	Emoji::new("woman teacher: medium skin tone","👩🏽‍🏫"),
	Emoji::new("woman teacher: medium-dark skin tone","👩🏾‍🏫"),
	Emoji::new("woman teacher: dark skin tone","👩🏿‍🏫"),
	]),
	]);

#[doc="technologist 🧑‍💻"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TECHNOLOGIST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TECHNOLOGIST); // 🧑‍💻 (`U+1F9D1 U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.to_string().as_str(), \"🧑‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::Light)); // 🧑🏻‍💻 (`U+1F9D1 U+1F3FB U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::Light).to_string().as_str(), \"🧑🏻‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::MediumLight)); // 🧑🏼‍💻 (`U+1F9D1 U+1F3FC U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::MediumLight).to_string().as_str(), \"🧑🏼‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::Medium)); // 🧑🏽‍💻 (`U+1F9D1 U+1F3FD U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::Medium).to_string().as_str(), \"🧑🏽‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::MediumDark)); // 🧑🏾‍💻 (`U+1F9D1 U+1F3FE U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::MediumDark).to_string().as_str(), \"🧑🏾‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.tone(Tone::Dark)); // 🧑🏿‍💻 (`U+1F9D1 U+1F3FF U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.tone(Tone::Dark).to_string().as_str(), \"🧑🏿‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male)); // 👨‍💻 (`U+1F468 U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).to_string().as_str(), \"👨‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::Light)); // 👨🏻‍💻 (`U+1F468 U+1F3FB U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"👨🏻‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumLight)); // 👨🏼‍💻 (`U+1F468 U+1F3FC U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"👨🏼‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::Medium)); // 👨🏽‍💻 (`U+1F468 U+1F3FD U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"👨🏽‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumDark)); // 👨🏾‍💻 (`U+1F468 U+1F3FE U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"👨🏾‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Male).tone(Tone::Dark)); // 👨🏿‍💻 (`U+1F468 U+1F3FF U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"👨🏿‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female)); // 👩‍💻 (`U+1F469 U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).to_string().as_str(), \"👩‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::Light)); // 👩🏻‍💻 (`U+1F469 U+1F3FB U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"👩🏻‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumLight)); // 👩🏼‍💻 (`U+1F469 U+1F3FC U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"👩🏼‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::Medium)); // 👩🏽‍💻 (`U+1F469 U+1F3FD U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"👩🏽‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumDark)); // 👩🏾‍💻 (`U+1F469 U+1F3FE U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"👩🏾‍💻\");"]#[doc="println!(\"{}\", TECHNOLOGIST.gender(Gender::Female).tone(Tone::Dark)); // 👩🏿‍💻 (`U+1F469 U+1F3FF U+200D U+1F4BB`)"] #[doc="# assert_eq!(TECHNOLOGIST.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"👩🏿‍💻\");"]
#[doc="```"]
pub static TECHNOLOGIST: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("technologist","🧑‍💻"), 
	&[
		Emoji::new("technologist: light skin tone","🧑🏻‍💻"),
	Emoji::new("technologist: medium-light skin tone","🧑🏼‍💻"),
	Emoji::new("technologist: medium skin tone","🧑🏽‍💻"),
	Emoji::new("technologist: medium-dark skin tone","🧑🏾‍💻"),
	Emoji::new("technologist: dark skin tone","🧑🏿‍💻"),
	]), 
	&[
		With::new(Emoji::new("man technologist","👨‍💻"), 
	&[
		Emoji::new("man technologist: light skin tone","👨🏻‍💻"),
	Emoji::new("man technologist: medium-light skin tone","👨🏼‍💻"),
	Emoji::new("man technologist: medium skin tone","👨🏽‍💻"),
	Emoji::new("man technologist: medium-dark skin tone","👨🏾‍💻"),
	Emoji::new("man technologist: dark skin tone","👨🏿‍💻"),
	]),
	With::new(Emoji::new("woman technologist","👩‍💻"), 
	&[
		Emoji::new("woman technologist: light skin tone","👩🏻‍💻"),
	Emoji::new("woman technologist: medium-light skin tone","👩🏼‍💻"),
	Emoji::new("woman technologist: medium skin tone","👩🏽‍💻"),
	Emoji::new("woman technologist: medium-dark skin tone","👩🏾‍💻"),
	Emoji::new("woman technologist: dark skin tone","👩🏿‍💻"),
	]),
	]);

#[doc="person with headscarf 🧕"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMAN_WITH_HEADSCARF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF); // 🧕 (`U+1F9D5`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.to_string().as_str(), \"🧕\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::Light)); // 🧕🏻 (`U+1F9D5 U+1F3FB`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::Light).to_string().as_str(), \"🧕🏻\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::MediumLight)); // 🧕🏼 (`U+1F9D5 U+1F3FC`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::MediumLight).to_string().as_str(), \"🧕🏼\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::Medium)); // 🧕🏽 (`U+1F9D5 U+1F3FD`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::Medium).to_string().as_str(), \"🧕🏽\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::MediumDark)); // 🧕🏾 (`U+1F9D5 U+1F3FE`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::MediumDark).to_string().as_str(), \"🧕🏾\");"]#[doc="println!(\"{}\", WOMAN_WITH_HEADSCARF.tone(Tone::Dark)); // 🧕🏿 (`U+1F9D5 U+1F3FF`)"] #[doc="# assert_eq!(WOMAN_WITH_HEADSCARF.tone(Tone::Dark).to_string().as_str(), \"🧕🏿\");"]
#[doc="```"]
pub static WOMAN_WITH_HEADSCARF: With<Tone,Emoji> = With::new(Emoji::new("woman with headscarf","🧕"), 
	&[
		Emoji::new("woman with headscarf: light skin tone","🧕🏻"),
	Emoji::new("woman with headscarf: medium-light skin tone","🧕🏼"),
	Emoji::new("woman with headscarf: medium skin tone","🧕🏽"),
	Emoji::new("woman with headscarf: medium-dark skin tone","🧕🏾"),
	Emoji::new("woman with headscarf: dark skin tone","🧕🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ARTIST.default.default, &ARTIST.default.tone(Tone::Light), &ARTIST.default.tone(Tone::MediumLight), &ARTIST.default.tone(Tone::Medium), &ARTIST.default.tone(Tone::MediumDark), &ARTIST.default.tone(Tone::Dark), &ARTIST.gender(Gender::Male).default, &ARTIST.gender(Gender::Male).tone(Tone::Light), &ARTIST.gender(Gender::Male).tone(Tone::MediumLight), &ARTIST.gender(Gender::Male).tone(Tone::Medium), &ARTIST.gender(Gender::Male).tone(Tone::MediumDark), &ARTIST.gender(Gender::Male).tone(Tone::Dark), &ARTIST.gender(Gender::Female).default, &ARTIST.gender(Gender::Female).tone(Tone::Light), &ARTIST.gender(Gender::Female).tone(Tone::MediumLight), &ARTIST.gender(Gender::Female).tone(Tone::Medium), &ARTIST.gender(Gender::Female).tone(Tone::MediumDark), &ARTIST.gender(Gender::Female).tone(Tone::Dark), ],
&[&ASTRONAUT.default.default, &ASTRONAUT.default.tone(Tone::Light), &ASTRONAUT.default.tone(Tone::MediumLight), &ASTRONAUT.default.tone(Tone::Medium), &ASTRONAUT.default.tone(Tone::MediumDark), &ASTRONAUT.default.tone(Tone::Dark), &ASTRONAUT.gender(Gender::Male).default, &ASTRONAUT.gender(Gender::Male).tone(Tone::Light), &ASTRONAUT.gender(Gender::Male).tone(Tone::MediumLight), &ASTRONAUT.gender(Gender::Male).tone(Tone::Medium), &ASTRONAUT.gender(Gender::Male).tone(Tone::MediumDark), &ASTRONAUT.gender(Gender::Male).tone(Tone::Dark), &ASTRONAUT.gender(Gender::Female).default, &ASTRONAUT.gender(Gender::Female).tone(Tone::Light), &ASTRONAUT.gender(Gender::Female).tone(Tone::MediumLight), &ASTRONAUT.gender(Gender::Female).tone(Tone::Medium), &ASTRONAUT.gender(Gender::Female).tone(Tone::MediumDark), &ASTRONAUT.gender(Gender::Female).tone(Tone::Dark), ],
&[&BREAST_FEEDING.default, &BREAST_FEEDING.tone(Tone::Light), &BREAST_FEEDING.tone(Tone::MediumLight), &BREAST_FEEDING.tone(Tone::Medium), &BREAST_FEEDING.tone(Tone::MediumDark), &BREAST_FEEDING.tone(Tone::Dark), ],
&[&CONSTRUCTION_WORKER.default.default, &CONSTRUCTION_WORKER.default.tone(Tone::Light), &CONSTRUCTION_WORKER.default.tone(Tone::MediumLight), &CONSTRUCTION_WORKER.default.tone(Tone::Medium), &CONSTRUCTION_WORKER.default.tone(Tone::MediumDark), &CONSTRUCTION_WORKER.default.tone(Tone::Dark), &CONSTRUCTION_WORKER.gender(Gender::Male).default, &CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Light), &CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumLight), &CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Medium), &CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::MediumDark), &CONSTRUCTION_WORKER.gender(Gender::Male).tone(Tone::Dark), &CONSTRUCTION_WORKER.gender(Gender::Female).default, &CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Light), &CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumLight), &CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Medium), &CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::MediumDark), &CONSTRUCTION_WORKER.gender(Gender::Female).tone(Tone::Dark), ],
&[&COOK.default.default, &COOK.default.tone(Tone::Light), &COOK.default.tone(Tone::MediumLight), &COOK.default.tone(Tone::Medium), &COOK.default.tone(Tone::MediumDark), &COOK.default.tone(Tone::Dark), &COOK.gender(Gender::Male).default, &COOK.gender(Gender::Male).tone(Tone::Light), &COOK.gender(Gender::Male).tone(Tone::MediumLight), &COOK.gender(Gender::Male).tone(Tone::Medium), &COOK.gender(Gender::Male).tone(Tone::MediumDark), &COOK.gender(Gender::Male).tone(Tone::Dark), &COOK.gender(Gender::Female).default, &COOK.gender(Gender::Female).tone(Tone::Light), &COOK.gender(Gender::Female).tone(Tone::MediumLight), &COOK.gender(Gender::Female).tone(Tone::Medium), &COOK.gender(Gender::Female).tone(Tone::MediumDark), &COOK.gender(Gender::Female).tone(Tone::Dark), ],
&[&DETECTIVE.default.default, &DETECTIVE.default.tone(Tone::Light), &DETECTIVE.default.tone(Tone::MediumLight), &DETECTIVE.default.tone(Tone::Medium), &DETECTIVE.default.tone(Tone::MediumDark), &DETECTIVE.default.tone(Tone::Dark), &DETECTIVE.gender(Gender::Male).default, &DETECTIVE.gender(Gender::Male).tone(Tone::Light), &DETECTIVE.gender(Gender::Male).tone(Tone::MediumLight), &DETECTIVE.gender(Gender::Male).tone(Tone::Medium), &DETECTIVE.gender(Gender::Male).tone(Tone::MediumDark), &DETECTIVE.gender(Gender::Male).tone(Tone::Dark), &DETECTIVE.gender(Gender::Female).default, &DETECTIVE.gender(Gender::Female).tone(Tone::Light), &DETECTIVE.gender(Gender::Female).tone(Tone::MediumLight), &DETECTIVE.gender(Gender::Female).tone(Tone::Medium), &DETECTIVE.gender(Gender::Female).tone(Tone::MediumDark), &DETECTIVE.gender(Gender::Female).tone(Tone::Dark), ],
&[&FACTORY_WORKER.default.default, &FACTORY_WORKER.default.tone(Tone::Light), &FACTORY_WORKER.default.tone(Tone::MediumLight), &FACTORY_WORKER.default.tone(Tone::Medium), &FACTORY_WORKER.default.tone(Tone::MediumDark), &FACTORY_WORKER.default.tone(Tone::Dark), &FACTORY_WORKER.gender(Gender::Male).default, &FACTORY_WORKER.gender(Gender::Male).tone(Tone::Light), &FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumLight), &FACTORY_WORKER.gender(Gender::Male).tone(Tone::Medium), &FACTORY_WORKER.gender(Gender::Male).tone(Tone::MediumDark), &FACTORY_WORKER.gender(Gender::Male).tone(Tone::Dark), &FACTORY_WORKER.gender(Gender::Female).default, &FACTORY_WORKER.gender(Gender::Female).tone(Tone::Light), &FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumLight), &FACTORY_WORKER.gender(Gender::Female).tone(Tone::Medium), &FACTORY_WORKER.gender(Gender::Female).tone(Tone::MediumDark), &FACTORY_WORKER.gender(Gender::Female).tone(Tone::Dark), ],
&[&FARMER.default.default, &FARMER.default.tone(Tone::Light), &FARMER.default.tone(Tone::MediumLight), &FARMER.default.tone(Tone::Medium), &FARMER.default.tone(Tone::MediumDark), &FARMER.default.tone(Tone::Dark), &FARMER.gender(Gender::Male).default, &FARMER.gender(Gender::Male).tone(Tone::Light), &FARMER.gender(Gender::Male).tone(Tone::MediumLight), &FARMER.gender(Gender::Male).tone(Tone::Medium), &FARMER.gender(Gender::Male).tone(Tone::MediumDark), &FARMER.gender(Gender::Male).tone(Tone::Dark), &FARMER.gender(Gender::Female).default, &FARMER.gender(Gender::Female).tone(Tone::Light), &FARMER.gender(Gender::Female).tone(Tone::MediumLight), &FARMER.gender(Gender::Female).tone(Tone::Medium), &FARMER.gender(Gender::Female).tone(Tone::MediumDark), &FARMER.gender(Gender::Female).tone(Tone::Dark), ],
&[&FIREFIGHTER.default.default, &FIREFIGHTER.default.tone(Tone::Light), &FIREFIGHTER.default.tone(Tone::MediumLight), &FIREFIGHTER.default.tone(Tone::Medium), &FIREFIGHTER.default.tone(Tone::MediumDark), &FIREFIGHTER.default.tone(Tone::Dark), &FIREFIGHTER.gender(Gender::Male).default, &FIREFIGHTER.gender(Gender::Male).tone(Tone::Light), &FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumLight), &FIREFIGHTER.gender(Gender::Male).tone(Tone::Medium), &FIREFIGHTER.gender(Gender::Male).tone(Tone::MediumDark), &FIREFIGHTER.gender(Gender::Male).tone(Tone::Dark), &FIREFIGHTER.gender(Gender::Female).default, &FIREFIGHTER.gender(Gender::Female).tone(Tone::Light), &FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumLight), &FIREFIGHTER.gender(Gender::Female).tone(Tone::Medium), &FIREFIGHTER.gender(Gender::Female).tone(Tone::MediumDark), &FIREFIGHTER.gender(Gender::Female).tone(Tone::Dark), ],
&[&GUARD.default.default, &GUARD.default.tone(Tone::Light), &GUARD.default.tone(Tone::MediumLight), &GUARD.default.tone(Tone::Medium), &GUARD.default.tone(Tone::MediumDark), &GUARD.default.tone(Tone::Dark), &GUARD.gender(Gender::Male).default, &GUARD.gender(Gender::Male).tone(Tone::Light), &GUARD.gender(Gender::Male).tone(Tone::MediumLight), &GUARD.gender(Gender::Male).tone(Tone::Medium), &GUARD.gender(Gender::Male).tone(Tone::MediumDark), &GUARD.gender(Gender::Male).tone(Tone::Dark), &GUARD.gender(Gender::Female).default, &GUARD.gender(Gender::Female).tone(Tone::Light), &GUARD.gender(Gender::Female).tone(Tone::MediumLight), &GUARD.gender(Gender::Female).tone(Tone::Medium), &GUARD.gender(Gender::Female).tone(Tone::MediumDark), &GUARD.gender(Gender::Female).tone(Tone::Dark), ],
&[&HEALTH_WORKER.default.default, &HEALTH_WORKER.default.tone(Tone::Light), &HEALTH_WORKER.default.tone(Tone::MediumLight), &HEALTH_WORKER.default.tone(Tone::Medium), &HEALTH_WORKER.default.tone(Tone::MediumDark), &HEALTH_WORKER.default.tone(Tone::Dark), &HEALTH_WORKER.gender(Gender::Male).default, &HEALTH_WORKER.gender(Gender::Male).tone(Tone::Light), &HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumLight), &HEALTH_WORKER.gender(Gender::Male).tone(Tone::Medium), &HEALTH_WORKER.gender(Gender::Male).tone(Tone::MediumDark), &HEALTH_WORKER.gender(Gender::Male).tone(Tone::Dark), &HEALTH_WORKER.gender(Gender::Female).default, &HEALTH_WORKER.gender(Gender::Female).tone(Tone::Light), &HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumLight), &HEALTH_WORKER.gender(Gender::Female).tone(Tone::Medium), &HEALTH_WORKER.gender(Gender::Female).tone(Tone::MediumDark), &HEALTH_WORKER.gender(Gender::Female).tone(Tone::Dark), ],
&[&JUDGE.default.default, &JUDGE.default.tone(Tone::Light), &JUDGE.default.tone(Tone::MediumLight), &JUDGE.default.tone(Tone::Medium), &JUDGE.default.tone(Tone::MediumDark), &JUDGE.default.tone(Tone::Dark), &JUDGE.gender(Gender::Male).default, &JUDGE.gender(Gender::Male).tone(Tone::Light), &JUDGE.gender(Gender::Male).tone(Tone::MediumLight), &JUDGE.gender(Gender::Male).tone(Tone::Medium), &JUDGE.gender(Gender::Male).tone(Tone::MediumDark), &JUDGE.gender(Gender::Male).tone(Tone::Dark), &JUDGE.gender(Gender::Female).default, &JUDGE.gender(Gender::Female).tone(Tone::Light), &JUDGE.gender(Gender::Female).tone(Tone::MediumLight), &JUDGE.gender(Gender::Female).tone(Tone::Medium), &JUDGE.gender(Gender::Female).tone(Tone::MediumDark), &JUDGE.gender(Gender::Female).tone(Tone::Dark), ],
&[&MECHANIC.default.default, &MECHANIC.default.tone(Tone::Light), &MECHANIC.default.tone(Tone::MediumLight), &MECHANIC.default.tone(Tone::Medium), &MECHANIC.default.tone(Tone::MediumDark), &MECHANIC.default.tone(Tone::Dark), &MECHANIC.gender(Gender::Male).default, &MECHANIC.gender(Gender::Male).tone(Tone::Light), &MECHANIC.gender(Gender::Male).tone(Tone::MediumLight), &MECHANIC.gender(Gender::Male).tone(Tone::Medium), &MECHANIC.gender(Gender::Male).tone(Tone::MediumDark), &MECHANIC.gender(Gender::Male).tone(Tone::Dark), &MECHANIC.gender(Gender::Female).default, &MECHANIC.gender(Gender::Female).tone(Tone::Light), &MECHANIC.gender(Gender::Female).tone(Tone::MediumLight), &MECHANIC.gender(Gender::Female).tone(Tone::Medium), &MECHANIC.gender(Gender::Female).tone(Tone::MediumDark), &MECHANIC.gender(Gender::Female).tone(Tone::Dark), ],
&[&NINJA.default, &NINJA.tone(Tone::Light), &NINJA.tone(Tone::MediumLight), &NINJA.tone(Tone::Medium), &NINJA.tone(Tone::MediumDark), &NINJA.tone(Tone::Dark), ],
&[&OFFICE_WORKER.default.default, &OFFICE_WORKER.default.tone(Tone::Light), &OFFICE_WORKER.default.tone(Tone::MediumLight), &OFFICE_WORKER.default.tone(Tone::Medium), &OFFICE_WORKER.default.tone(Tone::MediumDark), &OFFICE_WORKER.default.tone(Tone::Dark), &OFFICE_WORKER.gender(Gender::Male).default, &OFFICE_WORKER.gender(Gender::Male).tone(Tone::Light), &OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumLight), &OFFICE_WORKER.gender(Gender::Male).tone(Tone::Medium), &OFFICE_WORKER.gender(Gender::Male).tone(Tone::MediumDark), &OFFICE_WORKER.gender(Gender::Male).tone(Tone::Dark), &OFFICE_WORKER.gender(Gender::Female).default, &OFFICE_WORKER.gender(Gender::Female).tone(Tone::Light), &OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumLight), &OFFICE_WORKER.gender(Gender::Female).tone(Tone::Medium), &OFFICE_WORKER.gender(Gender::Female).tone(Tone::MediumDark), &OFFICE_WORKER.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_FEEDING_BABY.default.default, &PERSON_FEEDING_BABY.default.tone(Tone::Light), &PERSON_FEEDING_BABY.default.tone(Tone::MediumLight), &PERSON_FEEDING_BABY.default.tone(Tone::Medium), &PERSON_FEEDING_BABY.default.tone(Tone::MediumDark), &PERSON_FEEDING_BABY.default.tone(Tone::Dark), &PERSON_FEEDING_BABY.gender(Gender::Male).default, &PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Light), &PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Medium), &PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_FEEDING_BABY.gender(Gender::Male).tone(Tone::Dark), &PERSON_FEEDING_BABY.gender(Gender::Female).default, &PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Light), &PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Medium), &PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_FEEDING_BABY.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_IN_TUXEDO.default.default, &PERSON_IN_TUXEDO.default.tone(Tone::Light), &PERSON_IN_TUXEDO.default.tone(Tone::MediumLight), &PERSON_IN_TUXEDO.default.tone(Tone::Medium), &PERSON_IN_TUXEDO.default.tone(Tone::MediumDark), &PERSON_IN_TUXEDO.default.tone(Tone::Dark), &PERSON_IN_TUXEDO.gender(Gender::Male).default, &PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Light), &PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Medium), &PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_IN_TUXEDO.gender(Gender::Male).tone(Tone::Dark), &PERSON_IN_TUXEDO.gender(Gender::Female).default, &PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Light), &PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Medium), &PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_IN_TUXEDO.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_WEARING_TURBAN.default.default, &PERSON_WEARING_TURBAN.default.tone(Tone::Light), &PERSON_WEARING_TURBAN.default.tone(Tone::MediumLight), &PERSON_WEARING_TURBAN.default.tone(Tone::Medium), &PERSON_WEARING_TURBAN.default.tone(Tone::MediumDark), &PERSON_WEARING_TURBAN.default.tone(Tone::Dark), &PERSON_WEARING_TURBAN.gender(Gender::Male).default, &PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Light), &PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Medium), &PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_WEARING_TURBAN.gender(Gender::Male).tone(Tone::Dark), &PERSON_WEARING_TURBAN.gender(Gender::Female).default, &PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Light), &PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Medium), &PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_WEARING_TURBAN.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_WITH_SKULLCAP.default, &PERSON_WITH_SKULLCAP.tone(Tone::Light), &PERSON_WITH_SKULLCAP.tone(Tone::MediumLight), &PERSON_WITH_SKULLCAP.tone(Tone::Medium), &PERSON_WITH_SKULLCAP.tone(Tone::MediumDark), &PERSON_WITH_SKULLCAP.tone(Tone::Dark), ],
&[&PERSON_WITH_VEIL.default.default, &PERSON_WITH_VEIL.default.tone(Tone::Light), &PERSON_WITH_VEIL.default.tone(Tone::MediumLight), &PERSON_WITH_VEIL.default.tone(Tone::Medium), &PERSON_WITH_VEIL.default.tone(Tone::MediumDark), &PERSON_WITH_VEIL.default.tone(Tone::Dark), &PERSON_WITH_VEIL.gender(Gender::Male).default, &PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Light), &PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Medium), &PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_WITH_VEIL.gender(Gender::Male).tone(Tone::Dark), &PERSON_WITH_VEIL.gender(Gender::Female).default, &PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Light), &PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Medium), &PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_WITH_VEIL.gender(Gender::Female).tone(Tone::Dark), ],
&[&PILOT.default.default, &PILOT.default.tone(Tone::Light), &PILOT.default.tone(Tone::MediumLight), &PILOT.default.tone(Tone::Medium), &PILOT.default.tone(Tone::MediumDark), &PILOT.default.tone(Tone::Dark), &PILOT.gender(Gender::Male).default, &PILOT.gender(Gender::Male).tone(Tone::Light), &PILOT.gender(Gender::Male).tone(Tone::MediumLight), &PILOT.gender(Gender::Male).tone(Tone::Medium), &PILOT.gender(Gender::Male).tone(Tone::MediumDark), &PILOT.gender(Gender::Male).tone(Tone::Dark), &PILOT.gender(Gender::Female).default, &PILOT.gender(Gender::Female).tone(Tone::Light), &PILOT.gender(Gender::Female).tone(Tone::MediumLight), &PILOT.gender(Gender::Female).tone(Tone::Medium), &PILOT.gender(Gender::Female).tone(Tone::MediumDark), &PILOT.gender(Gender::Female).tone(Tone::Dark), ],
&[&POLICE_OFFICER.default.default, &POLICE_OFFICER.default.tone(Tone::Light), &POLICE_OFFICER.default.tone(Tone::MediumLight), &POLICE_OFFICER.default.tone(Tone::Medium), &POLICE_OFFICER.default.tone(Tone::MediumDark), &POLICE_OFFICER.default.tone(Tone::Dark), &POLICE_OFFICER.gender(Gender::Male).default, &POLICE_OFFICER.gender(Gender::Male).tone(Tone::Light), &POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumLight), &POLICE_OFFICER.gender(Gender::Male).tone(Tone::Medium), &POLICE_OFFICER.gender(Gender::Male).tone(Tone::MediumDark), &POLICE_OFFICER.gender(Gender::Male).tone(Tone::Dark), &POLICE_OFFICER.gender(Gender::Female).default, &POLICE_OFFICER.gender(Gender::Female).tone(Tone::Light), &POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumLight), &POLICE_OFFICER.gender(Gender::Female).tone(Tone::Medium), &POLICE_OFFICER.gender(Gender::Female).tone(Tone::MediumDark), &POLICE_OFFICER.gender(Gender::Female).tone(Tone::Dark), ],
&[&PREGNANT_WOMAN.default, &PREGNANT_WOMAN.tone(Tone::Light), &PREGNANT_WOMAN.tone(Tone::MediumLight), &PREGNANT_WOMAN.tone(Tone::Medium), &PREGNANT_WOMAN.tone(Tone::MediumDark), &PREGNANT_WOMAN.tone(Tone::Dark), ],
&[&PRINCE.default, &PRINCE.tone(Tone::Light), &PRINCE.tone(Tone::MediumLight), &PRINCE.tone(Tone::Medium), &PRINCE.tone(Tone::MediumDark), &PRINCE.tone(Tone::Dark), ],
&[&PRINCESS.default, &PRINCESS.tone(Tone::Light), &PRINCESS.tone(Tone::MediumLight), &PRINCESS.tone(Tone::Medium), &PRINCESS.tone(Tone::MediumDark), &PRINCESS.tone(Tone::Dark), ],
&[&SCIENTIST.default.default, &SCIENTIST.default.tone(Tone::Light), &SCIENTIST.default.tone(Tone::MediumLight), &SCIENTIST.default.tone(Tone::Medium), &SCIENTIST.default.tone(Tone::MediumDark), &SCIENTIST.default.tone(Tone::Dark), &SCIENTIST.gender(Gender::Male).default, &SCIENTIST.gender(Gender::Male).tone(Tone::Light), &SCIENTIST.gender(Gender::Male).tone(Tone::MediumLight), &SCIENTIST.gender(Gender::Male).tone(Tone::Medium), &SCIENTIST.gender(Gender::Male).tone(Tone::MediumDark), &SCIENTIST.gender(Gender::Male).tone(Tone::Dark), &SCIENTIST.gender(Gender::Female).default, &SCIENTIST.gender(Gender::Female).tone(Tone::Light), &SCIENTIST.gender(Gender::Female).tone(Tone::MediumLight), &SCIENTIST.gender(Gender::Female).tone(Tone::Medium), &SCIENTIST.gender(Gender::Female).tone(Tone::MediumDark), &SCIENTIST.gender(Gender::Female).tone(Tone::Dark), ],
&[&SINGER.default.default, &SINGER.default.tone(Tone::Light), &SINGER.default.tone(Tone::MediumLight), &SINGER.default.tone(Tone::Medium), &SINGER.default.tone(Tone::MediumDark), &SINGER.default.tone(Tone::Dark), &SINGER.gender(Gender::Male).default, &SINGER.gender(Gender::Male).tone(Tone::Light), &SINGER.gender(Gender::Male).tone(Tone::MediumLight), &SINGER.gender(Gender::Male).tone(Tone::Medium), &SINGER.gender(Gender::Male).tone(Tone::MediumDark), &SINGER.gender(Gender::Male).tone(Tone::Dark), &SINGER.gender(Gender::Female).default, &SINGER.gender(Gender::Female).tone(Tone::Light), &SINGER.gender(Gender::Female).tone(Tone::MediumLight), &SINGER.gender(Gender::Female).tone(Tone::Medium), &SINGER.gender(Gender::Female).tone(Tone::MediumDark), &SINGER.gender(Gender::Female).tone(Tone::Dark), ],
&[&STUDENT.default.default, &STUDENT.default.tone(Tone::Light), &STUDENT.default.tone(Tone::MediumLight), &STUDENT.default.tone(Tone::Medium), &STUDENT.default.tone(Tone::MediumDark), &STUDENT.default.tone(Tone::Dark), &STUDENT.gender(Gender::Male).default, &STUDENT.gender(Gender::Male).tone(Tone::Light), &STUDENT.gender(Gender::Male).tone(Tone::MediumLight), &STUDENT.gender(Gender::Male).tone(Tone::Medium), &STUDENT.gender(Gender::Male).tone(Tone::MediumDark), &STUDENT.gender(Gender::Male).tone(Tone::Dark), &STUDENT.gender(Gender::Female).default, &STUDENT.gender(Gender::Female).tone(Tone::Light), &STUDENT.gender(Gender::Female).tone(Tone::MediumLight), &STUDENT.gender(Gender::Female).tone(Tone::Medium), &STUDENT.gender(Gender::Female).tone(Tone::MediumDark), &STUDENT.gender(Gender::Female).tone(Tone::Dark), ],
&[&TEACHER.default.default, &TEACHER.default.tone(Tone::Light), &TEACHER.default.tone(Tone::MediumLight), &TEACHER.default.tone(Tone::Medium), &TEACHER.default.tone(Tone::MediumDark), &TEACHER.default.tone(Tone::Dark), &TEACHER.gender(Gender::Male).default, &TEACHER.gender(Gender::Male).tone(Tone::Light), &TEACHER.gender(Gender::Male).tone(Tone::MediumLight), &TEACHER.gender(Gender::Male).tone(Tone::Medium), &TEACHER.gender(Gender::Male).tone(Tone::MediumDark), &TEACHER.gender(Gender::Male).tone(Tone::Dark), &TEACHER.gender(Gender::Female).default, &TEACHER.gender(Gender::Female).tone(Tone::Light), &TEACHER.gender(Gender::Female).tone(Tone::MediumLight), &TEACHER.gender(Gender::Female).tone(Tone::Medium), &TEACHER.gender(Gender::Female).tone(Tone::MediumDark), &TEACHER.gender(Gender::Female).tone(Tone::Dark), ],
&[&TECHNOLOGIST.default.default, &TECHNOLOGIST.default.tone(Tone::Light), &TECHNOLOGIST.default.tone(Tone::MediumLight), &TECHNOLOGIST.default.tone(Tone::Medium), &TECHNOLOGIST.default.tone(Tone::MediumDark), &TECHNOLOGIST.default.tone(Tone::Dark), &TECHNOLOGIST.gender(Gender::Male).default, &TECHNOLOGIST.gender(Gender::Male).tone(Tone::Light), &TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumLight), &TECHNOLOGIST.gender(Gender::Male).tone(Tone::Medium), &TECHNOLOGIST.gender(Gender::Male).tone(Tone::MediumDark), &TECHNOLOGIST.gender(Gender::Male).tone(Tone::Dark), &TECHNOLOGIST.gender(Gender::Female).default, &TECHNOLOGIST.gender(Gender::Female).tone(Tone::Light), &TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumLight), &TECHNOLOGIST.gender(Gender::Female).tone(Tone::Medium), &TECHNOLOGIST.gender(Gender::Female).tone(Tone::MediumDark), &TECHNOLOGIST.gender(Gender::Female).tone(Tone::Dark), ],
&[&WOMAN_WITH_HEADSCARF.default, &WOMAN_WITH_HEADSCARF.tone(Tone::Light), &WOMAN_WITH_HEADSCARF.tone(Tone::MediumLight), &WOMAN_WITH_HEADSCARF.tone(Tone::Medium), &WOMAN_WITH_HEADSCARF.tone(Tone::MediumDark), &WOMAN_WITH_HEADSCARF.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ARTIST.default.default, &ASTRONAUT.default.default, &BREAST_FEEDING.default, &CONSTRUCTION_WORKER.default.default, &COOK.default.default, &DETECTIVE.default.default, &FACTORY_WORKER.default.default, &FARMER.default.default, &FIREFIGHTER.default.default, &GUARD.default.default, &HEALTH_WORKER.default.default, &JUDGE.default.default, &MECHANIC.default.default, &NINJA.default, &OFFICE_WORKER.default.default, &PERSON_FEEDING_BABY.default.default, &PERSON_IN_TUXEDO.default.default, &PERSON_WEARING_TURBAN.default.default, &PERSON_WITH_SKULLCAP.default, &PERSON_WITH_VEIL.default.default, &PILOT.default.default, &POLICE_OFFICER.default.default, &PREGNANT_WOMAN.default, &PRINCE.default, &PRINCESS.default, &SCIENTIST.default.default, &SINGER.default.default, &STUDENT.default.default, &TEACHER.default.default, &TECHNOLOGIST.default.default, &WOMAN_WITH_HEADSCARF.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_role

/// person-sport 🏇🚴⛹️
pub mod person_sport { // people_and_body::person_sport
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="horse racing 🏇"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORSE_RACING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORSE_RACING); // 🏇 (`U+1F3C7`)"] #[doc="# assert_eq!(HORSE_RACING.to_string().as_str(), \"🏇\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::Light)); // 🏇🏻 (`U+1F3C7 U+1F3FB`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::Light).to_string().as_str(), \"🏇🏻\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::MediumLight)); // 🏇🏼 (`U+1F3C7 U+1F3FC`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::MediumLight).to_string().as_str(), \"🏇🏼\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::Medium)); // 🏇🏽 (`U+1F3C7 U+1F3FD`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::Medium).to_string().as_str(), \"🏇🏽\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::MediumDark)); // 🏇🏾 (`U+1F3C7 U+1F3FE`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::MediumDark).to_string().as_str(), \"🏇🏾\");"]#[doc="println!(\"{}\", HORSE_RACING.tone(Tone::Dark)); // 🏇🏿 (`U+1F3C7 U+1F3FF`)"] #[doc="# assert_eq!(HORSE_RACING.tone(Tone::Dark).to_string().as_str(), \"🏇🏿\");"]
#[doc="```"]
pub static HORSE_RACING: With<Tone,Emoji> = With::new(Emoji::new("horse racing","🏇"), 
	&[
		Emoji::new("horse racing: light skin tone","🏇🏻"),
	Emoji::new("horse racing: medium-light skin tone","🏇🏼"),
	Emoji::new("horse racing: medium skin tone","🏇🏽"),
	Emoji::new("horse racing: medium-dark skin tone","🏇🏾"),
	Emoji::new("horse racing: dark skin tone","🏇🏿"),
	]);

#[doc="person biking 🚴"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_BIKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_BIKING); // 🚴 (`U+1F6B4`)"] #[doc="# assert_eq!(PERSON_BIKING.to_string().as_str(), \"🚴\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::Light)); // 🚴🏻 (`U+1F6B4 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::Light).to_string().as_str(), \"🚴🏻\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::MediumLight)); // 🚴🏼 (`U+1F6B4 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::MediumLight).to_string().as_str(), \"🚴🏼\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::Medium)); // 🚴🏽 (`U+1F6B4 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::Medium).to_string().as_str(), \"🚴🏽\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::MediumDark)); // 🚴🏾 (`U+1F6B4 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::MediumDark).to_string().as_str(), \"🚴🏾\");"]#[doc="println!(\"{}\", PERSON_BIKING.tone(Tone::Dark)); // 🚴🏿 (`U+1F6B4 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_BIKING.tone(Tone::Dark).to_string().as_str(), \"🚴🏿\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male)); // 🚴‍♂️ (`U+1F6B4 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).to_string().as_str(), \"🚴‍♂️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::Light)); // 🚴🏻‍♂️ (`U+1F6B4 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🚴🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumLight)); // 🚴🏼‍♂️ (`U+1F6B4 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🚴🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::Medium)); // 🚴🏽‍♂️ (`U+1F6B4 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🚴🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumDark)); // 🚴🏾‍♂️ (`U+1F6B4 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🚴🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Male).tone(Tone::Dark)); // 🚴🏿‍♂️ (`U+1F6B4 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🚴🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female)); // 🚴‍♀️ (`U+1F6B4 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).to_string().as_str(), \"🚴‍♀️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::Light)); // 🚴🏻‍♀️ (`U+1F6B4 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🚴🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumLight)); // 🚴🏼‍♀️ (`U+1F6B4 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🚴🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::Medium)); // 🚴🏽‍♀️ (`U+1F6B4 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🚴🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumDark)); // 🚴🏾‍♀️ (`U+1F6B4 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🚴🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_BIKING.gender(Gender::Female).tone(Tone::Dark)); // 🚴🏿‍♀️ (`U+1F6B4 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BIKING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🚴🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_BIKING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person biking","🚴"), 
	&[
		Emoji::new("person biking: light skin tone","🚴🏻"),
	Emoji::new("person biking: medium-light skin tone","🚴🏼"),
	Emoji::new("person biking: medium skin tone","🚴🏽"),
	Emoji::new("person biking: medium-dark skin tone","🚴🏾"),
	Emoji::new("person biking: dark skin tone","🚴🏿"),
	]), 
	&[
		With::new(Emoji::new("man biking","🚴‍♂️"), 
	&[
		Emoji::new("man biking: light skin tone","🚴🏻‍♂️"),
	Emoji::new("man biking: medium-light skin tone","🚴🏼‍♂️"),
	Emoji::new("man biking: medium skin tone","🚴🏽‍♂️"),
	Emoji::new("man biking: medium-dark skin tone","🚴🏾‍♂️"),
	Emoji::new("man biking: dark skin tone","🚴🏿‍♂️"),
	]),
	With::new(Emoji::new("woman biking","🚴‍♀️"), 
	&[
		Emoji::new("woman biking: light skin tone","🚴🏻‍♀️"),
	Emoji::new("woman biking: medium-light skin tone","🚴🏼‍♀️"),
	Emoji::new("woman biking: medium skin tone","🚴🏽‍♀️"),
	Emoji::new("woman biking: medium-dark skin tone","🚴🏾‍♀️"),
	Emoji::new("woman biking: dark skin tone","🚴🏿‍♀️"),
	]),
	]);

#[doc="person bouncing ball ⛹️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_BOUNCING_BALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_BOUNCING_BALL); // ⛹️ (`U+26F9 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.to_string().as_str(), \"⛹️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::Light)); // ⛹🏻 (`U+26F9 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::Light).to_string().as_str(), \"⛹🏻\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::MediumLight)); // ⛹🏼 (`U+26F9 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::MediumLight).to_string().as_str(), \"⛹🏼\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::Medium)); // ⛹🏽 (`U+26F9 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::Medium).to_string().as_str(), \"⛹🏽\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::MediumDark)); // ⛹🏾 (`U+26F9 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::MediumDark).to_string().as_str(), \"⛹🏾\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.tone(Tone::Dark)); // ⛹🏿 (`U+26F9 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.tone(Tone::Dark).to_string().as_str(), \"⛹🏿\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male)); // ⛹️‍♂️ (`U+26F9 U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).to_string().as_str(), \"⛹️‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Light)); // ⛹🏻‍♂️ (`U+26F9 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"⛹🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumLight)); // ⛹🏼‍♂️ (`U+26F9 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"⛹🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Medium)); // ⛹🏽‍♂️ (`U+26F9 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"⛹🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumDark)); // ⛹🏾‍♂️ (`U+26F9 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"⛹🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Dark)); // ⛹🏿‍♂️ (`U+26F9 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"⛹🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female)); // ⛹️‍♀️ (`U+26F9 U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).to_string().as_str(), \"⛹️‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Light)); // ⛹🏻‍♀️ (`U+26F9 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"⛹🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumLight)); // ⛹🏼‍♀️ (`U+26F9 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"⛹🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Medium)); // ⛹🏽‍♀️ (`U+26F9 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"⛹🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumDark)); // ⛹🏾‍♀️ (`U+26F9 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"⛹🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Dark)); // ⛹🏿‍♀️ (`U+26F9 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"⛹🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_BOUNCING_BALL: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person bouncing ball","⛹️"), 
	&[
		Emoji::new("person bouncing ball: light skin tone","⛹🏻"),
	Emoji::new("person bouncing ball: medium-light skin tone","⛹🏼"),
	Emoji::new("person bouncing ball: medium skin tone","⛹🏽"),
	Emoji::new("person bouncing ball: medium-dark skin tone","⛹🏾"),
	Emoji::new("person bouncing ball: dark skin tone","⛹🏿"),
	]), 
	&[
		With::new(Emoji::new("man bouncing ball","⛹️‍♂️"), 
	&[
		Emoji::new("man bouncing ball: light skin tone","⛹🏻‍♂️"),
	Emoji::new("man bouncing ball: medium-light skin tone","⛹🏼‍♂️"),
	Emoji::new("man bouncing ball: medium skin tone","⛹🏽‍♂️"),
	Emoji::new("man bouncing ball: medium-dark skin tone","⛹🏾‍♂️"),
	Emoji::new("man bouncing ball: dark skin tone","⛹🏿‍♂️"),
	]),
	With::new(Emoji::new("woman bouncing ball","⛹️‍♀️"), 
	&[
		Emoji::new("woman bouncing ball: light skin tone","⛹🏻‍♀️"),
	Emoji::new("woman bouncing ball: medium-light skin tone","⛹🏼‍♀️"),
	Emoji::new("woman bouncing ball: medium skin tone","⛹🏽‍♀️"),
	Emoji::new("woman bouncing ball: medium-dark skin tone","⛹🏾‍♀️"),
	Emoji::new("woman bouncing ball: dark skin tone","⛹🏿‍♀️"),
	]),
	]);

#[doc="person cartwheeling 🤸"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_CARTWHEELING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_CARTWHEELING); // 🤸 (`U+1F938`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.to_string().as_str(), \"🤸\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::Light)); // 🤸🏻 (`U+1F938 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::Light).to_string().as_str(), \"🤸🏻\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::MediumLight)); // 🤸🏼 (`U+1F938 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::MediumLight).to_string().as_str(), \"🤸🏼\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::Medium)); // 🤸🏽 (`U+1F938 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::Medium).to_string().as_str(), \"🤸🏽\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::MediumDark)); // 🤸🏾 (`U+1F938 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::MediumDark).to_string().as_str(), \"🤸🏾\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.tone(Tone::Dark)); // 🤸🏿 (`U+1F938 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.tone(Tone::Dark).to_string().as_str(), \"🤸🏿\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male)); // 🤸‍♂️ (`U+1F938 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).to_string().as_str(), \"🤸‍♂️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Light)); // 🤸🏻‍♂️ (`U+1F938 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤸🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumLight)); // 🤸🏼‍♂️ (`U+1F938 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤸🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Medium)); // 🤸🏽‍♂️ (`U+1F938 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤸🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumDark)); // 🤸🏾‍♂️ (`U+1F938 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤸🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Dark)); // 🤸🏿‍♂️ (`U+1F938 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤸🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female)); // 🤸‍♀️ (`U+1F938 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).to_string().as_str(), \"🤸‍♀️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Light)); // 🤸🏻‍♀️ (`U+1F938 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤸🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumLight)); // 🤸🏼‍♀️ (`U+1F938 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤸🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Medium)); // 🤸🏽‍♀️ (`U+1F938 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤸🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumDark)); // 🤸🏾‍♀️ (`U+1F938 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤸🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Dark)); // 🤸🏿‍♀️ (`U+1F938 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤸🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_CARTWHEELING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person cartwheeling","🤸"), 
	&[
		Emoji::new("person cartwheeling: light skin tone","🤸🏻"),
	Emoji::new("person cartwheeling: medium-light skin tone","🤸🏼"),
	Emoji::new("person cartwheeling: medium skin tone","🤸🏽"),
	Emoji::new("person cartwheeling: medium-dark skin tone","🤸🏾"),
	Emoji::new("person cartwheeling: dark skin tone","🤸🏿"),
	]), 
	&[
		With::new(Emoji::new("man cartwheeling","🤸‍♂️"), 
	&[
		Emoji::new("man cartwheeling: light skin tone","🤸🏻‍♂️"),
	Emoji::new("man cartwheeling: medium-light skin tone","🤸🏼‍♂️"),
	Emoji::new("man cartwheeling: medium skin tone","🤸🏽‍♂️"),
	Emoji::new("man cartwheeling: medium-dark skin tone","🤸🏾‍♂️"),
	Emoji::new("man cartwheeling: dark skin tone","🤸🏿‍♂️"),
	]),
	With::new(Emoji::new("woman cartwheeling","🤸‍♀️"), 
	&[
		Emoji::new("woman cartwheeling: light skin tone","🤸🏻‍♀️"),
	Emoji::new("woman cartwheeling: medium-light skin tone","🤸🏼‍♀️"),
	Emoji::new("woman cartwheeling: medium skin tone","🤸🏽‍♀️"),
	Emoji::new("woman cartwheeling: medium-dark skin tone","🤸🏾‍♀️"),
	Emoji::new("woman cartwheeling: dark skin tone","🤸🏿‍♀️"),
	]),
	]);

#[doc="person fencing 🤺"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_FENCING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_FENCING); // 🤺 (`U+1F93A`)"] #[doc="# assert_eq!(PERSON_FENCING.to_string().as_str(), \"🤺\");"]
#[doc="```"]
pub static PERSON_FENCING: Emoji = Emoji::new("person fencing","🤺");

#[doc="person golfing 🏌️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_GOLFING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_GOLFING); // 🏌️ (`U+1F3CC U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.to_string().as_str(), \"🏌️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::Light)); // 🏌🏻 (`U+1F3CC U+1F3FB`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::Light).to_string().as_str(), \"🏌🏻\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::MediumLight)); // 🏌🏼 (`U+1F3CC U+1F3FC`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::MediumLight).to_string().as_str(), \"🏌🏼\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::Medium)); // 🏌🏽 (`U+1F3CC U+1F3FD`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::Medium).to_string().as_str(), \"🏌🏽\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::MediumDark)); // 🏌🏾 (`U+1F3CC U+1F3FE`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::MediumDark).to_string().as_str(), \"🏌🏾\");"]#[doc="println!(\"{}\", PERSON_GOLFING.tone(Tone::Dark)); // 🏌🏿 (`U+1F3CC U+1F3FF`)"] #[doc="# assert_eq!(PERSON_GOLFING.tone(Tone::Dark).to_string().as_str(), \"🏌🏿\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male)); // 🏌️‍♂️ (`U+1F3CC U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).to_string().as_str(), \"🏌️‍♂️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::Light)); // 🏌🏻‍♂️ (`U+1F3CC U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🏌🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumLight)); // 🏌🏼‍♂️ (`U+1F3CC U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🏌🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::Medium)); // 🏌🏽‍♂️ (`U+1F3CC U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🏌🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumDark)); // 🏌🏾‍♂️ (`U+1F3CC U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🏌🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Male).tone(Tone::Dark)); // 🏌🏿‍♂️ (`U+1F3CC U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🏌🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female)); // 🏌️‍♀️ (`U+1F3CC U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).to_string().as_str(), \"🏌️‍♀️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::Light)); // 🏌🏻‍♀️ (`U+1F3CC U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🏌🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumLight)); // 🏌🏼‍♀️ (`U+1F3CC U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🏌🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::Medium)); // 🏌🏽‍♀️ (`U+1F3CC U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🏌🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumDark)); // 🏌🏾‍♀️ (`U+1F3CC U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🏌🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_GOLFING.gender(Gender::Female).tone(Tone::Dark)); // 🏌🏿‍♀️ (`U+1F3CC U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_GOLFING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🏌🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_GOLFING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person golfing","🏌️"), 
	&[
		Emoji::new("person golfing: light skin tone","🏌🏻"),
	Emoji::new("person golfing: medium-light skin tone","🏌🏼"),
	Emoji::new("person golfing: medium skin tone","🏌🏽"),
	Emoji::new("person golfing: medium-dark skin tone","🏌🏾"),
	Emoji::new("person golfing: dark skin tone","🏌🏿"),
	]), 
	&[
		With::new(Emoji::new("man golfing","🏌️‍♂️"), 
	&[
		Emoji::new("man golfing: light skin tone","🏌🏻‍♂️"),
	Emoji::new("man golfing: medium-light skin tone","🏌🏼‍♂️"),
	Emoji::new("man golfing: medium skin tone","🏌🏽‍♂️"),
	Emoji::new("man golfing: medium-dark skin tone","🏌🏾‍♂️"),
	Emoji::new("man golfing: dark skin tone","🏌🏿‍♂️"),
	]),
	With::new(Emoji::new("woman golfing","🏌️‍♀️"), 
	&[
		Emoji::new("woman golfing: light skin tone","🏌🏻‍♀️"),
	Emoji::new("woman golfing: medium-light skin tone","🏌🏼‍♀️"),
	Emoji::new("woman golfing: medium skin tone","🏌🏽‍♀️"),
	Emoji::new("woman golfing: medium-dark skin tone","🏌🏾‍♀️"),
	Emoji::new("woman golfing: dark skin tone","🏌🏿‍♀️"),
	]),
	]);

#[doc="person juggling 🤹"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_JUGGLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_JUGGLING); // 🤹 (`U+1F939`)"] #[doc="# assert_eq!(PERSON_JUGGLING.to_string().as_str(), \"🤹\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::Light)); // 🤹🏻 (`U+1F939 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::Light).to_string().as_str(), \"🤹🏻\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::MediumLight)); // 🤹🏼 (`U+1F939 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::MediumLight).to_string().as_str(), \"🤹🏼\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::Medium)); // 🤹🏽 (`U+1F939 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::Medium).to_string().as_str(), \"🤹🏽\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::MediumDark)); // 🤹🏾 (`U+1F939 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::MediumDark).to_string().as_str(), \"🤹🏾\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.tone(Tone::Dark)); // 🤹🏿 (`U+1F939 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_JUGGLING.tone(Tone::Dark).to_string().as_str(), \"🤹🏿\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male)); // 🤹‍♂️ (`U+1F939 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).to_string().as_str(), \"🤹‍♂️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Light)); // 🤹🏻‍♂️ (`U+1F939 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤹🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumLight)); // 🤹🏼‍♂️ (`U+1F939 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤹🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Medium)); // 🤹🏽‍♂️ (`U+1F939 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤹🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumDark)); // 🤹🏾‍♂️ (`U+1F939 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤹🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Dark)); // 🤹🏿‍♂️ (`U+1F939 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤹🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female)); // 🤹‍♀️ (`U+1F939 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).to_string().as_str(), \"🤹‍♀️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Light)); // 🤹🏻‍♀️ (`U+1F939 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤹🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumLight)); // 🤹🏼‍♀️ (`U+1F939 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤹🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Medium)); // 🤹🏽‍♀️ (`U+1F939 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤹🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumDark)); // 🤹🏾‍♀️ (`U+1F939 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤹🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Dark)); // 🤹🏿‍♀️ (`U+1F939 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤹🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_JUGGLING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person juggling","🤹"), 
	&[
		Emoji::new("person juggling: light skin tone","🤹🏻"),
	Emoji::new("person juggling: medium-light skin tone","🤹🏼"),
	Emoji::new("person juggling: medium skin tone","🤹🏽"),
	Emoji::new("person juggling: medium-dark skin tone","🤹🏾"),
	Emoji::new("person juggling: dark skin tone","🤹🏿"),
	]), 
	&[
		With::new(Emoji::new("man juggling","🤹‍♂️"), 
	&[
		Emoji::new("man juggling: light skin tone","🤹🏻‍♂️"),
	Emoji::new("man juggling: medium-light skin tone","🤹🏼‍♂️"),
	Emoji::new("man juggling: medium skin tone","🤹🏽‍♂️"),
	Emoji::new("man juggling: medium-dark skin tone","🤹🏾‍♂️"),
	Emoji::new("man juggling: dark skin tone","🤹🏿‍♂️"),
	]),
	With::new(Emoji::new("woman juggling","🤹‍♀️"), 
	&[
		Emoji::new("woman juggling: light skin tone","🤹🏻‍♀️"),
	Emoji::new("woman juggling: medium-light skin tone","🤹🏼‍♀️"),
	Emoji::new("woman juggling: medium skin tone","🤹🏽‍♀️"),
	Emoji::new("woman juggling: medium-dark skin tone","🤹🏾‍♀️"),
	Emoji::new("woman juggling: dark skin tone","🤹🏿‍♀️"),
	]),
	]);

#[doc="person lifting weights 🏋️"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_LIFTING_WEIGHTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS); // 🏋️ (`U+1F3CB U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.to_string().as_str(), \"🏋️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::Light)); // 🏋🏻 (`U+1F3CB U+1F3FB`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::Light).to_string().as_str(), \"🏋🏻\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::MediumLight)); // 🏋🏼 (`U+1F3CB U+1F3FC`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::MediumLight).to_string().as_str(), \"🏋🏼\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::Medium)); // 🏋🏽 (`U+1F3CB U+1F3FD`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::Medium).to_string().as_str(), \"🏋🏽\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::MediumDark)); // 🏋🏾 (`U+1F3CB U+1F3FE`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::MediumDark).to_string().as_str(), \"🏋🏾\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.tone(Tone::Dark)); // 🏋🏿 (`U+1F3CB U+1F3FF`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.tone(Tone::Dark).to_string().as_str(), \"🏋🏿\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male)); // 🏋️‍♂️ (`U+1F3CB U+FE0F U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).to_string().as_str(), \"🏋️‍♂️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Light)); // 🏋🏻‍♂️ (`U+1F3CB U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🏋🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumLight)); // 🏋🏼‍♂️ (`U+1F3CB U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🏋🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Medium)); // 🏋🏽‍♂️ (`U+1F3CB U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🏋🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumDark)); // 🏋🏾‍♂️ (`U+1F3CB U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🏋🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Dark)); // 🏋🏿‍♂️ (`U+1F3CB U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🏋🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female)); // 🏋️‍♀️ (`U+1F3CB U+FE0F U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).to_string().as_str(), \"🏋️‍♀️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Light)); // 🏋🏻‍♀️ (`U+1F3CB U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🏋🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumLight)); // 🏋🏼‍♀️ (`U+1F3CB U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🏋🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Medium)); // 🏋🏽‍♀️ (`U+1F3CB U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🏋🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumDark)); // 🏋🏾‍♀️ (`U+1F3CB U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🏋🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Dark)); // 🏋🏿‍♀️ (`U+1F3CB U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🏋🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_LIFTING_WEIGHTS: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person lifting weights","🏋️"), 
	&[
		Emoji::new("person lifting weights: light skin tone","🏋🏻"),
	Emoji::new("person lifting weights: medium-light skin tone","🏋🏼"),
	Emoji::new("person lifting weights: medium skin tone","🏋🏽"),
	Emoji::new("person lifting weights: medium-dark skin tone","🏋🏾"),
	Emoji::new("person lifting weights: dark skin tone","🏋🏿"),
	]), 
	&[
		With::new(Emoji::new("man lifting weights","🏋️‍♂️"), 
	&[
		Emoji::new("man lifting weights: light skin tone","🏋🏻‍♂️"),
	Emoji::new("man lifting weights: medium-light skin tone","🏋🏼‍♂️"),
	Emoji::new("man lifting weights: medium skin tone","🏋🏽‍♂️"),
	Emoji::new("man lifting weights: medium-dark skin tone","🏋🏾‍♂️"),
	Emoji::new("man lifting weights: dark skin tone","🏋🏿‍♂️"),
	]),
	With::new(Emoji::new("woman lifting weights","🏋️‍♀️"), 
	&[
		Emoji::new("woman lifting weights: light skin tone","🏋🏻‍♀️"),
	Emoji::new("woman lifting weights: medium-light skin tone","🏋🏼‍♀️"),
	Emoji::new("woman lifting weights: medium skin tone","🏋🏽‍♀️"),
	Emoji::new("woman lifting weights: medium-dark skin tone","🏋🏾‍♀️"),
	Emoji::new("woman lifting weights: dark skin tone","🏋🏿‍♀️"),
	]),
	]);

#[doc="person mountain biking 🚵"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_MOUNTAIN_BIKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING); // 🚵 (`U+1F6B5`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.to_string().as_str(), \"🚵\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::Light)); // 🚵🏻 (`U+1F6B5 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::Light).to_string().as_str(), \"🚵🏻\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::MediumLight)); // 🚵🏼 (`U+1F6B5 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::MediumLight).to_string().as_str(), \"🚵🏼\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::Medium)); // 🚵🏽 (`U+1F6B5 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::Medium).to_string().as_str(), \"🚵🏽\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::MediumDark)); // 🚵🏾 (`U+1F6B5 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::MediumDark).to_string().as_str(), \"🚵🏾\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.tone(Tone::Dark)); // 🚵🏿 (`U+1F6B5 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.tone(Tone::Dark).to_string().as_str(), \"🚵🏿\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male)); // 🚵‍♂️ (`U+1F6B5 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).to_string().as_str(), \"🚵‍♂️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Light)); // 🚵🏻‍♂️ (`U+1F6B5 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🚵🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumLight)); // 🚵🏼‍♂️ (`U+1F6B5 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🚵🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Medium)); // 🚵🏽‍♂️ (`U+1F6B5 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🚵🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumDark)); // 🚵🏾‍♂️ (`U+1F6B5 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🚵🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Dark)); // 🚵🏿‍♂️ (`U+1F6B5 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🚵🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female)); // 🚵‍♀️ (`U+1F6B5 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).to_string().as_str(), \"🚵‍♀️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Light)); // 🚵🏻‍♀️ (`U+1F6B5 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🚵🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumLight)); // 🚵🏼‍♀️ (`U+1F6B5 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🚵🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Medium)); // 🚵🏽‍♀️ (`U+1F6B5 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🚵🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumDark)); // 🚵🏾‍♀️ (`U+1F6B5 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🚵🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Dark)); // 🚵🏿‍♀️ (`U+1F6B5 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🚵🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_MOUNTAIN_BIKING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person mountain biking","🚵"), 
	&[
		Emoji::new("person mountain biking: light skin tone","🚵🏻"),
	Emoji::new("person mountain biking: medium-light skin tone","🚵🏼"),
	Emoji::new("person mountain biking: medium skin tone","🚵🏽"),
	Emoji::new("person mountain biking: medium-dark skin tone","🚵🏾"),
	Emoji::new("person mountain biking: dark skin tone","🚵🏿"),
	]), 
	&[
		With::new(Emoji::new("man mountain biking","🚵‍♂️"), 
	&[
		Emoji::new("man mountain biking: light skin tone","🚵🏻‍♂️"),
	Emoji::new("man mountain biking: medium-light skin tone","🚵🏼‍♂️"),
	Emoji::new("man mountain biking: medium skin tone","🚵🏽‍♂️"),
	Emoji::new("man mountain biking: medium-dark skin tone","🚵🏾‍♂️"),
	Emoji::new("man mountain biking: dark skin tone","🚵🏿‍♂️"),
	]),
	With::new(Emoji::new("woman mountain biking","🚵‍♀️"), 
	&[
		Emoji::new("woman mountain biking: light skin tone","🚵🏻‍♀️"),
	Emoji::new("woman mountain biking: medium-light skin tone","🚵🏼‍♀️"),
	Emoji::new("woman mountain biking: medium skin tone","🚵🏽‍♀️"),
	Emoji::new("woman mountain biking: medium-dark skin tone","🚵🏾‍♀️"),
	Emoji::new("woman mountain biking: dark skin tone","🚵🏿‍♀️"),
	]),
	]);

#[doc="person playing handball 🤾"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_PLAYING_HANDBALL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL); // 🤾 (`U+1F93E`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.to_string().as_str(), \"🤾\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::Light)); // 🤾🏻 (`U+1F93E U+1F3FB`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::Light).to_string().as_str(), \"🤾🏻\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::MediumLight)); // 🤾🏼 (`U+1F93E U+1F3FC`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::MediumLight).to_string().as_str(), \"🤾🏼\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::Medium)); // 🤾🏽 (`U+1F93E U+1F3FD`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::Medium).to_string().as_str(), \"🤾🏽\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::MediumDark)); // 🤾🏾 (`U+1F93E U+1F3FE`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::MediumDark).to_string().as_str(), \"🤾🏾\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.tone(Tone::Dark)); // 🤾🏿 (`U+1F93E U+1F3FF`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.tone(Tone::Dark).to_string().as_str(), \"🤾🏿\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male)); // 🤾‍♂️ (`U+1F93E U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).to_string().as_str(), \"🤾‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Light)); // 🤾🏻‍♂️ (`U+1F93E U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤾🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumLight)); // 🤾🏼‍♂️ (`U+1F93E U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤾🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Medium)); // 🤾🏽‍♂️ (`U+1F93E U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤾🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumDark)); // 🤾🏾‍♂️ (`U+1F93E U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤾🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Dark)); // 🤾🏿‍♂️ (`U+1F93E U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤾🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female)); // 🤾‍♀️ (`U+1F93E U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).to_string().as_str(), \"🤾‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Light)); // 🤾🏻‍♀️ (`U+1F93E U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤾🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumLight)); // 🤾🏼‍♀️ (`U+1F93E U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤾🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Medium)); // 🤾🏽‍♀️ (`U+1F93E U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤾🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumDark)); // 🤾🏾‍♀️ (`U+1F93E U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤾🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Dark)); // 🤾🏿‍♀️ (`U+1F93E U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤾🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_PLAYING_HANDBALL: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person playing handball","🤾"), 
	&[
		Emoji::new("person playing handball: light skin tone","🤾🏻"),
	Emoji::new("person playing handball: medium-light skin tone","🤾🏼"),
	Emoji::new("person playing handball: medium skin tone","🤾🏽"),
	Emoji::new("person playing handball: medium-dark skin tone","🤾🏾"),
	Emoji::new("person playing handball: dark skin tone","🤾🏿"),
	]), 
	&[
		With::new(Emoji::new("man playing handball","🤾‍♂️"), 
	&[
		Emoji::new("man playing handball: light skin tone","🤾🏻‍♂️"),
	Emoji::new("man playing handball: medium-light skin tone","🤾🏼‍♂️"),
	Emoji::new("man playing handball: medium skin tone","🤾🏽‍♂️"),
	Emoji::new("man playing handball: medium-dark skin tone","🤾🏾‍♂️"),
	Emoji::new("man playing handball: dark skin tone","🤾🏿‍♂️"),
	]),
	With::new(Emoji::new("woman playing handball","🤾‍♀️"), 
	&[
		Emoji::new("woman playing handball: light skin tone","🤾🏻‍♀️"),
	Emoji::new("woman playing handball: medium-light skin tone","🤾🏼‍♀️"),
	Emoji::new("woman playing handball: medium skin tone","🤾🏽‍♀️"),
	Emoji::new("woman playing handball: medium-dark skin tone","🤾🏾‍♀️"),
	Emoji::new("woman playing handball: dark skin tone","🤾🏿‍♀️"),
	]),
	]);

#[doc="person playing water polo 🤽"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_PLAYING_WATER_POLO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO); // 🤽 (`U+1F93D`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.to_string().as_str(), \"🤽\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::Light)); // 🤽🏻 (`U+1F93D U+1F3FB`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::Light).to_string().as_str(), \"🤽🏻\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::MediumLight)); // 🤽🏼 (`U+1F93D U+1F3FC`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::MediumLight).to_string().as_str(), \"🤽🏼\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::Medium)); // 🤽🏽 (`U+1F93D U+1F3FD`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::Medium).to_string().as_str(), \"🤽🏽\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::MediumDark)); // 🤽🏾 (`U+1F93D U+1F3FE`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::MediumDark).to_string().as_str(), \"🤽🏾\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.tone(Tone::Dark)); // 🤽🏿 (`U+1F93D U+1F3FF`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.tone(Tone::Dark).to_string().as_str(), \"🤽🏿\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male)); // 🤽‍♂️ (`U+1F93D U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).to_string().as_str(), \"🤽‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Light)); // 🤽🏻‍♂️ (`U+1F93D U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🤽🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumLight)); // 🤽🏼‍♂️ (`U+1F93D U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🤽🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Medium)); // 🤽🏽‍♂️ (`U+1F93D U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🤽🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumDark)); // 🤽🏾‍♂️ (`U+1F93D U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🤽🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Dark)); // 🤽🏿‍♂️ (`U+1F93D U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🤽🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female)); // 🤽‍♀️ (`U+1F93D U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).to_string().as_str(), \"🤽‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Light)); // 🤽🏻‍♀️ (`U+1F93D U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🤽🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumLight)); // 🤽🏼‍♀️ (`U+1F93D U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🤽🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Medium)); // 🤽🏽‍♀️ (`U+1F93D U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🤽🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumDark)); // 🤽🏾‍♀️ (`U+1F93D U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🤽🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Dark)); // 🤽🏿‍♀️ (`U+1F93D U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🤽🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_PLAYING_WATER_POLO: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person playing water polo","🤽"), 
	&[
		Emoji::new("person playing water polo: light skin tone","🤽🏻"),
	Emoji::new("person playing water polo: medium-light skin tone","🤽🏼"),
	Emoji::new("person playing water polo: medium skin tone","🤽🏽"),
	Emoji::new("person playing water polo: medium-dark skin tone","🤽🏾"),
	Emoji::new("person playing water polo: dark skin tone","🤽🏿"),
	]), 
	&[
		With::new(Emoji::new("man playing water polo","🤽‍♂️"), 
	&[
		Emoji::new("man playing water polo: light skin tone","🤽🏻‍♂️"),
	Emoji::new("man playing water polo: medium-light skin tone","🤽🏼‍♂️"),
	Emoji::new("man playing water polo: medium skin tone","🤽🏽‍♂️"),
	Emoji::new("man playing water polo: medium-dark skin tone","🤽🏾‍♂️"),
	Emoji::new("man playing water polo: dark skin tone","🤽🏿‍♂️"),
	]),
	With::new(Emoji::new("woman playing water polo","🤽‍♀️"), 
	&[
		Emoji::new("woman playing water polo: light skin tone","🤽🏻‍♀️"),
	Emoji::new("woman playing water polo: medium-light skin tone","🤽🏼‍♀️"),
	Emoji::new("woman playing water polo: medium skin tone","🤽🏽‍♀️"),
	Emoji::new("woman playing water polo: medium-dark skin tone","🤽🏾‍♀️"),
	Emoji::new("woman playing water polo: dark skin tone","🤽🏿‍♀️"),
	]),
	]);

#[doc="person rowing boat 🚣"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_ROWING_BOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_ROWING_BOAT); // 🚣 (`U+1F6A3`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.to_string().as_str(), \"🚣\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::Light)); // 🚣🏻 (`U+1F6A3 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::Light).to_string().as_str(), \"🚣🏻\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::MediumLight)); // 🚣🏼 (`U+1F6A3 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::MediumLight).to_string().as_str(), \"🚣🏼\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::Medium)); // 🚣🏽 (`U+1F6A3 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::Medium).to_string().as_str(), \"🚣🏽\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::MediumDark)); // 🚣🏾 (`U+1F6A3 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::MediumDark).to_string().as_str(), \"🚣🏾\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.tone(Tone::Dark)); // 🚣🏿 (`U+1F6A3 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.tone(Tone::Dark).to_string().as_str(), \"🚣🏿\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male)); // 🚣‍♂️ (`U+1F6A3 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).to_string().as_str(), \"🚣‍♂️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Light)); // 🚣🏻‍♂️ (`U+1F6A3 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🚣🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumLight)); // 🚣🏼‍♂️ (`U+1F6A3 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🚣🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Medium)); // 🚣🏽‍♂️ (`U+1F6A3 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🚣🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumDark)); // 🚣🏾‍♂️ (`U+1F6A3 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🚣🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Dark)); // 🚣🏿‍♂️ (`U+1F6A3 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🚣🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female)); // 🚣‍♀️ (`U+1F6A3 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).to_string().as_str(), \"🚣‍♀️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Light)); // 🚣🏻‍♀️ (`U+1F6A3 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🚣🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumLight)); // 🚣🏼‍♀️ (`U+1F6A3 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🚣🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Medium)); // 🚣🏽‍♀️ (`U+1F6A3 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🚣🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumDark)); // 🚣🏾‍♀️ (`U+1F6A3 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🚣🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Dark)); // 🚣🏿‍♀️ (`U+1F6A3 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🚣🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_ROWING_BOAT: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person rowing boat","🚣"), 
	&[
		Emoji::new("person rowing boat: light skin tone","🚣🏻"),
	Emoji::new("person rowing boat: medium-light skin tone","🚣🏼"),
	Emoji::new("person rowing boat: medium skin tone","🚣🏽"),
	Emoji::new("person rowing boat: medium-dark skin tone","🚣🏾"),
	Emoji::new("person rowing boat: dark skin tone","🚣🏿"),
	]), 
	&[
		With::new(Emoji::new("man rowing boat","🚣‍♂️"), 
	&[
		Emoji::new("man rowing boat: light skin tone","🚣🏻‍♂️"),
	Emoji::new("man rowing boat: medium-light skin tone","🚣🏼‍♂️"),
	Emoji::new("man rowing boat: medium skin tone","🚣🏽‍♂️"),
	Emoji::new("man rowing boat: medium-dark skin tone","🚣🏾‍♂️"),
	Emoji::new("man rowing boat: dark skin tone","🚣🏿‍♂️"),
	]),
	With::new(Emoji::new("woman rowing boat","🚣‍♀️"), 
	&[
		Emoji::new("woman rowing boat: light skin tone","🚣🏻‍♀️"),
	Emoji::new("woman rowing boat: medium-light skin tone","🚣🏼‍♀️"),
	Emoji::new("woman rowing boat: medium skin tone","🚣🏽‍♀️"),
	Emoji::new("woman rowing boat: medium-dark skin tone","🚣🏾‍♀️"),
	Emoji::new("woman rowing boat: dark skin tone","🚣🏿‍♀️"),
	]),
	]);

#[doc="person surfing 🏄"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_SURFING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_SURFING); // 🏄 (`U+1F3C4`)"] #[doc="# assert_eq!(PERSON_SURFING.to_string().as_str(), \"🏄\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::Light)); // 🏄🏻 (`U+1F3C4 U+1F3FB`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::Light).to_string().as_str(), \"🏄🏻\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::MediumLight)); // 🏄🏼 (`U+1F3C4 U+1F3FC`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::MediumLight).to_string().as_str(), \"🏄🏼\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::Medium)); // 🏄🏽 (`U+1F3C4 U+1F3FD`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::Medium).to_string().as_str(), \"🏄🏽\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::MediumDark)); // 🏄🏾 (`U+1F3C4 U+1F3FE`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::MediumDark).to_string().as_str(), \"🏄🏾\");"]#[doc="println!(\"{}\", PERSON_SURFING.tone(Tone::Dark)); // 🏄🏿 (`U+1F3C4 U+1F3FF`)"] #[doc="# assert_eq!(PERSON_SURFING.tone(Tone::Dark).to_string().as_str(), \"🏄🏿\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male)); // 🏄‍♂️ (`U+1F3C4 U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).to_string().as_str(), \"🏄‍♂️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::Light)); // 🏄🏻‍♂️ (`U+1F3C4 U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🏄🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumLight)); // 🏄🏼‍♂️ (`U+1F3C4 U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🏄🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::Medium)); // 🏄🏽‍♂️ (`U+1F3C4 U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🏄🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumDark)); // 🏄🏾‍♂️ (`U+1F3C4 U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🏄🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Male).tone(Tone::Dark)); // 🏄🏿‍♂️ (`U+1F3C4 U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🏄🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female)); // 🏄‍♀️ (`U+1F3C4 U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).to_string().as_str(), \"🏄‍♀️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::Light)); // 🏄🏻‍♀️ (`U+1F3C4 U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🏄🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumLight)); // 🏄🏼‍♀️ (`U+1F3C4 U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🏄🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::Medium)); // 🏄🏽‍♀️ (`U+1F3C4 U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🏄🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumDark)); // 🏄🏾‍♀️ (`U+1F3C4 U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🏄🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_SURFING.gender(Gender::Female).tone(Tone::Dark)); // 🏄🏿‍♀️ (`U+1F3C4 U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SURFING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🏄🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_SURFING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person surfing","🏄"), 
	&[
		Emoji::new("person surfing: light skin tone","🏄🏻"),
	Emoji::new("person surfing: medium-light skin tone","🏄🏼"),
	Emoji::new("person surfing: medium skin tone","🏄🏽"),
	Emoji::new("person surfing: medium-dark skin tone","🏄🏾"),
	Emoji::new("person surfing: dark skin tone","🏄🏿"),
	]), 
	&[
		With::new(Emoji::new("man surfing","🏄‍♂️"), 
	&[
		Emoji::new("man surfing: light skin tone","🏄🏻‍♂️"),
	Emoji::new("man surfing: medium-light skin tone","🏄🏼‍♂️"),
	Emoji::new("man surfing: medium skin tone","🏄🏽‍♂️"),
	Emoji::new("man surfing: medium-dark skin tone","🏄🏾‍♂️"),
	Emoji::new("man surfing: dark skin tone","🏄🏿‍♂️"),
	]),
	With::new(Emoji::new("woman surfing","🏄‍♀️"), 
	&[
		Emoji::new("woman surfing: light skin tone","🏄🏻‍♀️"),
	Emoji::new("woman surfing: medium-light skin tone","🏄🏼‍♀️"),
	Emoji::new("woman surfing: medium skin tone","🏄🏽‍♀️"),
	Emoji::new("woman surfing: medium-dark skin tone","🏄🏾‍♀️"),
	Emoji::new("woman surfing: dark skin tone","🏄🏿‍♀️"),
	]),
	]);

#[doc="person swimming 🏊"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_SWIMMING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_SWIMMING); // 🏊 (`U+1F3CA`)"] #[doc="# assert_eq!(PERSON_SWIMMING.to_string().as_str(), \"🏊\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::Light)); // 🏊🏻 (`U+1F3CA U+1F3FB`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::Light).to_string().as_str(), \"🏊🏻\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::MediumLight)); // 🏊🏼 (`U+1F3CA U+1F3FC`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::MediumLight).to_string().as_str(), \"🏊🏼\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::Medium)); // 🏊🏽 (`U+1F3CA U+1F3FD`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::Medium).to_string().as_str(), \"🏊🏽\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::MediumDark)); // 🏊🏾 (`U+1F3CA U+1F3FE`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::MediumDark).to_string().as_str(), \"🏊🏾\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.tone(Tone::Dark)); // 🏊🏿 (`U+1F3CA U+1F3FF`)"] #[doc="# assert_eq!(PERSON_SWIMMING.tone(Tone::Dark).to_string().as_str(), \"🏊🏿\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male)); // 🏊‍♂️ (`U+1F3CA U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).to_string().as_str(), \"🏊‍♂️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Light)); // 🏊🏻‍♂️ (`U+1F3CA U+1F3FB U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Light).to_string().as_str(), \"🏊🏻‍♂️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumLight)); // 🏊🏼‍♂️ (`U+1F3CA U+1F3FC U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumLight).to_string().as_str(), \"🏊🏼‍♂️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Medium)); // 🏊🏽‍♂️ (`U+1F3CA U+1F3FD U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Medium).to_string().as_str(), \"🏊🏽‍♂️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumDark)); // 🏊🏾‍♂️ (`U+1F3CA U+1F3FE U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumDark).to_string().as_str(), \"🏊🏾‍♂️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Dark)); // 🏊🏿‍♂️ (`U+1F3CA U+1F3FF U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Dark).to_string().as_str(), \"🏊🏿‍♂️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female)); // 🏊‍♀️ (`U+1F3CA U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).to_string().as_str(), \"🏊‍♀️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Light)); // 🏊🏻‍♀️ (`U+1F3CA U+1F3FB U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Light).to_string().as_str(), \"🏊🏻‍♀️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumLight)); // 🏊🏼‍♀️ (`U+1F3CA U+1F3FC U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumLight).to_string().as_str(), \"🏊🏼‍♀️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Medium)); // 🏊🏽‍♀️ (`U+1F3CA U+1F3FD U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Medium).to_string().as_str(), \"🏊🏽‍♀️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumDark)); // 🏊🏾‍♀️ (`U+1F3CA U+1F3FE U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumDark).to_string().as_str(), \"🏊🏾‍♀️\");"]#[doc="println!(\"{}\", PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Dark)); // 🏊🏿‍♀️ (`U+1F3CA U+1F3FF U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Dark).to_string().as_str(), \"🏊🏿‍♀️\");"]
#[doc="```"]
pub static PERSON_SWIMMING: With<Gender,With<Tone,Emoji>> = With::new(With::new(Emoji::new("person swimming","🏊"), 
	&[
		Emoji::new("person swimming: light skin tone","🏊🏻"),
	Emoji::new("person swimming: medium-light skin tone","🏊🏼"),
	Emoji::new("person swimming: medium skin tone","🏊🏽"),
	Emoji::new("person swimming: medium-dark skin tone","🏊🏾"),
	Emoji::new("person swimming: dark skin tone","🏊🏿"),
	]), 
	&[
		With::new(Emoji::new("man swimming","🏊‍♂️"), 
	&[
		Emoji::new("man swimming: light skin tone","🏊🏻‍♂️"),
	Emoji::new("man swimming: medium-light skin tone","🏊🏼‍♂️"),
	Emoji::new("man swimming: medium skin tone","🏊🏽‍♂️"),
	Emoji::new("man swimming: medium-dark skin tone","🏊🏾‍♂️"),
	Emoji::new("man swimming: dark skin tone","🏊🏿‍♂️"),
	]),
	With::new(Emoji::new("woman swimming","🏊‍♀️"), 
	&[
		Emoji::new("woman swimming: light skin tone","🏊🏻‍♀️"),
	Emoji::new("woman swimming: medium-light skin tone","🏊🏼‍♀️"),
	Emoji::new("woman swimming: medium skin tone","🏊🏽‍♀️"),
	Emoji::new("woman swimming: medium-dark skin tone","🏊🏾‍♀️"),
	Emoji::new("woman swimming: dark skin tone","🏊🏿‍♀️"),
	]),
	]);

#[doc="person wrestling 🤼"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_WRESTLING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_WRESTLING); // 🤼 (`U+1F93C`)"] #[doc="# assert_eq!(PERSON_WRESTLING.to_string().as_str(), \"🤼\");"]#[doc="println!(\"{}\", PERSON_WRESTLING.gender(Gender::Male)); // 🤼‍♂️ (`U+1F93C U+200D U+2642 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WRESTLING.gender(Gender::Male).to_string().as_str(), \"🤼‍♂️\");"]#[doc="println!(\"{}\", PERSON_WRESTLING.gender(Gender::Female)); // 🤼‍♀️ (`U+1F93C U+200D U+2640 U+FE0F`)"] #[doc="# assert_eq!(PERSON_WRESTLING.gender(Gender::Female).to_string().as_str(), \"🤼‍♀️\");"]
#[doc="```"]
pub static PERSON_WRESTLING: With<Gender,Emoji> = With::new(Emoji::new("people wrestling","🤼"), 
	&[
		Emoji::new("men wrestling","🤼‍♂️"),
	Emoji::new("women wrestling","🤼‍♀️"),
	]);

#[doc="skier ⛷️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKIER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKIER); // ⛷️ (`U+26F7 U+FE0F`)"] #[doc="# assert_eq!(SKIER.to_string().as_str(), \"⛷️\");"]
#[doc="```"]
pub static SKIER :  Emoji = Emoji::new("skier", "⛷️"); // skier
#[doc="snowboarder 🏂"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWBOARDER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWBOARDER); // 🏂 (`U+1F3C2`)"] #[doc="# assert_eq!(SNOWBOARDER.to_string().as_str(), \"🏂\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::Light)); // 🏂🏻 (`U+1F3C2 U+1F3FB`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::Light).to_string().as_str(), \"🏂🏻\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::MediumLight)); // 🏂🏼 (`U+1F3C2 U+1F3FC`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::MediumLight).to_string().as_str(), \"🏂🏼\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::Medium)); // 🏂🏽 (`U+1F3C2 U+1F3FD`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::Medium).to_string().as_str(), \"🏂🏽\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::MediumDark)); // 🏂🏾 (`U+1F3C2 U+1F3FE`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::MediumDark).to_string().as_str(), \"🏂🏾\");"]#[doc="println!(\"{}\", SNOWBOARDER.tone(Tone::Dark)); // 🏂🏿 (`U+1F3C2 U+1F3FF`)"] #[doc="# assert_eq!(SNOWBOARDER.tone(Tone::Dark).to_string().as_str(), \"🏂🏿\");"]
#[doc="```"]
pub static SNOWBOARDER: With<Tone,Emoji> = With::new(Emoji::new("snowboarder","🏂"), 
	&[
		Emoji::new("snowboarder: light skin tone","🏂🏻"),
	Emoji::new("snowboarder: medium-light skin tone","🏂🏼"),
	Emoji::new("snowboarder: medium skin tone","🏂🏽"),
	Emoji::new("snowboarder: medium-dark skin tone","🏂🏾"),
	Emoji::new("snowboarder: dark skin tone","🏂🏿"),
	]);

pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&HORSE_RACING.default, &HORSE_RACING.tone(Tone::Light), &HORSE_RACING.tone(Tone::MediumLight), &HORSE_RACING.tone(Tone::Medium), &HORSE_RACING.tone(Tone::MediumDark), &HORSE_RACING.tone(Tone::Dark), ],
&[&PERSON_BIKING.default.default, &PERSON_BIKING.default.tone(Tone::Light), &PERSON_BIKING.default.tone(Tone::MediumLight), &PERSON_BIKING.default.tone(Tone::Medium), &PERSON_BIKING.default.tone(Tone::MediumDark), &PERSON_BIKING.default.tone(Tone::Dark), &PERSON_BIKING.gender(Gender::Male).default, &PERSON_BIKING.gender(Gender::Male).tone(Tone::Light), &PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_BIKING.gender(Gender::Male).tone(Tone::Medium), &PERSON_BIKING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_BIKING.gender(Gender::Male).tone(Tone::Dark), &PERSON_BIKING.gender(Gender::Female).default, &PERSON_BIKING.gender(Gender::Female).tone(Tone::Light), &PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_BIKING.gender(Gender::Female).tone(Tone::Medium), &PERSON_BIKING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_BIKING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_BOUNCING_BALL.default.default, &PERSON_BOUNCING_BALL.default.tone(Tone::Light), &PERSON_BOUNCING_BALL.default.tone(Tone::MediumLight), &PERSON_BOUNCING_BALL.default.tone(Tone::Medium), &PERSON_BOUNCING_BALL.default.tone(Tone::MediumDark), &PERSON_BOUNCING_BALL.default.tone(Tone::Dark), &PERSON_BOUNCING_BALL.gender(Gender::Male).default, &PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Light), &PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Medium), &PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_BOUNCING_BALL.gender(Gender::Male).tone(Tone::Dark), &PERSON_BOUNCING_BALL.gender(Gender::Female).default, &PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Light), &PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Medium), &PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_BOUNCING_BALL.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_CARTWHEELING.default.default, &PERSON_CARTWHEELING.default.tone(Tone::Light), &PERSON_CARTWHEELING.default.tone(Tone::MediumLight), &PERSON_CARTWHEELING.default.tone(Tone::Medium), &PERSON_CARTWHEELING.default.tone(Tone::MediumDark), &PERSON_CARTWHEELING.default.tone(Tone::Dark), &PERSON_CARTWHEELING.gender(Gender::Male).default, &PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Light), &PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Medium), &PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_CARTWHEELING.gender(Gender::Male).tone(Tone::Dark), &PERSON_CARTWHEELING.gender(Gender::Female).default, &PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Light), &PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Medium), &PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_CARTWHEELING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_FENCING, ],
&[&PERSON_GOLFING.default.default, &PERSON_GOLFING.default.tone(Tone::Light), &PERSON_GOLFING.default.tone(Tone::MediumLight), &PERSON_GOLFING.default.tone(Tone::Medium), &PERSON_GOLFING.default.tone(Tone::MediumDark), &PERSON_GOLFING.default.tone(Tone::Dark), &PERSON_GOLFING.gender(Gender::Male).default, &PERSON_GOLFING.gender(Gender::Male).tone(Tone::Light), &PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_GOLFING.gender(Gender::Male).tone(Tone::Medium), &PERSON_GOLFING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_GOLFING.gender(Gender::Male).tone(Tone::Dark), &PERSON_GOLFING.gender(Gender::Female).default, &PERSON_GOLFING.gender(Gender::Female).tone(Tone::Light), &PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_GOLFING.gender(Gender::Female).tone(Tone::Medium), &PERSON_GOLFING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_GOLFING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_JUGGLING.default.default, &PERSON_JUGGLING.default.tone(Tone::Light), &PERSON_JUGGLING.default.tone(Tone::MediumLight), &PERSON_JUGGLING.default.tone(Tone::Medium), &PERSON_JUGGLING.default.tone(Tone::MediumDark), &PERSON_JUGGLING.default.tone(Tone::Dark), &PERSON_JUGGLING.gender(Gender::Male).default, &PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Light), &PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Medium), &PERSON_JUGGLING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_JUGGLING.gender(Gender::Male).tone(Tone::Dark), &PERSON_JUGGLING.gender(Gender::Female).default, &PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Light), &PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Medium), &PERSON_JUGGLING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_JUGGLING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_LIFTING_WEIGHTS.default.default, &PERSON_LIFTING_WEIGHTS.default.tone(Tone::Light), &PERSON_LIFTING_WEIGHTS.default.tone(Tone::MediumLight), &PERSON_LIFTING_WEIGHTS.default.tone(Tone::Medium), &PERSON_LIFTING_WEIGHTS.default.tone(Tone::MediumDark), &PERSON_LIFTING_WEIGHTS.default.tone(Tone::Dark), &PERSON_LIFTING_WEIGHTS.gender(Gender::Male).default, &PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Light), &PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Medium), &PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_LIFTING_WEIGHTS.gender(Gender::Male).tone(Tone::Dark), &PERSON_LIFTING_WEIGHTS.gender(Gender::Female).default, &PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Light), &PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Medium), &PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_LIFTING_WEIGHTS.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_MOUNTAIN_BIKING.default.default, &PERSON_MOUNTAIN_BIKING.default.tone(Tone::Light), &PERSON_MOUNTAIN_BIKING.default.tone(Tone::MediumLight), &PERSON_MOUNTAIN_BIKING.default.tone(Tone::Medium), &PERSON_MOUNTAIN_BIKING.default.tone(Tone::MediumDark), &PERSON_MOUNTAIN_BIKING.default.tone(Tone::Dark), &PERSON_MOUNTAIN_BIKING.gender(Gender::Male).default, &PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Light), &PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Medium), &PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_MOUNTAIN_BIKING.gender(Gender::Male).tone(Tone::Dark), &PERSON_MOUNTAIN_BIKING.gender(Gender::Female).default, &PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Light), &PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Medium), &PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_MOUNTAIN_BIKING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_PLAYING_HANDBALL.default.default, &PERSON_PLAYING_HANDBALL.default.tone(Tone::Light), &PERSON_PLAYING_HANDBALL.default.tone(Tone::MediumLight), &PERSON_PLAYING_HANDBALL.default.tone(Tone::Medium), &PERSON_PLAYING_HANDBALL.default.tone(Tone::MediumDark), &PERSON_PLAYING_HANDBALL.default.tone(Tone::Dark), &PERSON_PLAYING_HANDBALL.gender(Gender::Male).default, &PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Light), &PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Medium), &PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_PLAYING_HANDBALL.gender(Gender::Male).tone(Tone::Dark), &PERSON_PLAYING_HANDBALL.gender(Gender::Female).default, &PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Light), &PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Medium), &PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_PLAYING_HANDBALL.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_PLAYING_WATER_POLO.default.default, &PERSON_PLAYING_WATER_POLO.default.tone(Tone::Light), &PERSON_PLAYING_WATER_POLO.default.tone(Tone::MediumLight), &PERSON_PLAYING_WATER_POLO.default.tone(Tone::Medium), &PERSON_PLAYING_WATER_POLO.default.tone(Tone::MediumDark), &PERSON_PLAYING_WATER_POLO.default.tone(Tone::Dark), &PERSON_PLAYING_WATER_POLO.gender(Gender::Male).default, &PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Light), &PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Medium), &PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_PLAYING_WATER_POLO.gender(Gender::Male).tone(Tone::Dark), &PERSON_PLAYING_WATER_POLO.gender(Gender::Female).default, &PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Light), &PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Medium), &PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_PLAYING_WATER_POLO.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_ROWING_BOAT.default.default, &PERSON_ROWING_BOAT.default.tone(Tone::Light), &PERSON_ROWING_BOAT.default.tone(Tone::MediumLight), &PERSON_ROWING_BOAT.default.tone(Tone::Medium), &PERSON_ROWING_BOAT.default.tone(Tone::MediumDark), &PERSON_ROWING_BOAT.default.tone(Tone::Dark), &PERSON_ROWING_BOAT.gender(Gender::Male).default, &PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Light), &PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Medium), &PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_ROWING_BOAT.gender(Gender::Male).tone(Tone::Dark), &PERSON_ROWING_BOAT.gender(Gender::Female).default, &PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Light), &PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Medium), &PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_ROWING_BOAT.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_SURFING.default.default, &PERSON_SURFING.default.tone(Tone::Light), &PERSON_SURFING.default.tone(Tone::MediumLight), &PERSON_SURFING.default.tone(Tone::Medium), &PERSON_SURFING.default.tone(Tone::MediumDark), &PERSON_SURFING.default.tone(Tone::Dark), &PERSON_SURFING.gender(Gender::Male).default, &PERSON_SURFING.gender(Gender::Male).tone(Tone::Light), &PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_SURFING.gender(Gender::Male).tone(Tone::Medium), &PERSON_SURFING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_SURFING.gender(Gender::Male).tone(Tone::Dark), &PERSON_SURFING.gender(Gender::Female).default, &PERSON_SURFING.gender(Gender::Female).tone(Tone::Light), &PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_SURFING.gender(Gender::Female).tone(Tone::Medium), &PERSON_SURFING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_SURFING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_SWIMMING.default.default, &PERSON_SWIMMING.default.tone(Tone::Light), &PERSON_SWIMMING.default.tone(Tone::MediumLight), &PERSON_SWIMMING.default.tone(Tone::Medium), &PERSON_SWIMMING.default.tone(Tone::MediumDark), &PERSON_SWIMMING.default.tone(Tone::Dark), &PERSON_SWIMMING.gender(Gender::Male).default, &PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Light), &PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumLight), &PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Medium), &PERSON_SWIMMING.gender(Gender::Male).tone(Tone::MediumDark), &PERSON_SWIMMING.gender(Gender::Male).tone(Tone::Dark), &PERSON_SWIMMING.gender(Gender::Female).default, &PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Light), &PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumLight), &PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Medium), &PERSON_SWIMMING.gender(Gender::Female).tone(Tone::MediumDark), &PERSON_SWIMMING.gender(Gender::Female).tone(Tone::Dark), ],
&[&PERSON_WRESTLING.default, &PERSON_WRESTLING.gender(Gender::Male), &PERSON_WRESTLING.gender(Gender::Female), ],
&[&SKIER, ],
&[&SNOWBOARDER.default, &SNOWBOARDER.tone(Tone::Light), &SNOWBOARDER.tone(Tone::MediumLight), &SNOWBOARDER.tone(Tone::Medium), &SNOWBOARDER.tone(Tone::MediumDark), &SNOWBOARDER.tone(Tone::Dark), ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&HORSE_RACING.default, &PERSON_BIKING.default.default, &PERSON_BOUNCING_BALL.default.default, &PERSON_CARTWHEELING.default.default, &PERSON_FENCING, &PERSON_GOLFING.default.default, &PERSON_JUGGLING.default.default, &PERSON_LIFTING_WEIGHTS.default.default, &PERSON_MOUNTAIN_BIKING.default.default, &PERSON_PLAYING_HANDBALL.default.default, &PERSON_PLAYING_WATER_POLO.default.default, &PERSON_ROWING_BOAT.default.default, &PERSON_SURFING.default.default, &PERSON_SWIMMING.default.default, &PERSON_WRESTLING.default, &SKIER, &SNOWBOARDER.default, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_sport

/// person-symbol 👥👤👣
pub mod person_symbol { // people_and_body::person_symbol
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="busts in silhouette 👥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUSTS_IN_SILHOUETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUSTS_IN_SILHOUETTE); // 👥 (`U+1F465`)"] #[doc="# assert_eq!(BUSTS_IN_SILHOUETTE.to_string().as_str(), \"👥\");"]
#[doc="```"]
pub static BUSTS_IN_SILHOUETTE :  Emoji = Emoji::new("busts in silhouette", "👥"); // busts in silhouette
#[doc="bust in silhouette 👤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUST_IN_SILHOUETTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUST_IN_SILHOUETTE); // 👤 (`U+1F464`)"] #[doc="# assert_eq!(BUST_IN_SILHOUETTE.to_string().as_str(), \"👤\");"]
#[doc="```"]
pub static BUST_IN_SILHOUETTE :  Emoji = Emoji::new("bust in silhouette", "👤"); // bust in silhouette
#[doc="footprints 👣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOOTPRINTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOOTPRINTS); // 👣 (`U+1F463`)"] #[doc="# assert_eq!(FOOTPRINTS.to_string().as_str(), \"👣\");"]
#[doc="```"]
pub static FOOTPRINTS :  Emoji = Emoji::new("footprints", "👣"); // footprints
#[doc="person hugging 🫂"]#[doc=""] #[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSON_HUGGING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSON_HUGGING); // 🫂 (`U+1FAC2`)"] #[doc="# assert_eq!(PERSON_HUGGING.to_string().as_str(), \"🫂\");"]
#[doc="```"]
pub static PERSON_HUGGING: Emoji = Emoji::new("people hugging","🫂");

#[doc="speaking head 🗣️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAKING_HEAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAKING_HEAD); // 🗣️ (`U+1F5E3 U+FE0F`)"] #[doc="# assert_eq!(SPEAKING_HEAD.to_string().as_str(), \"🗣️\");"]
#[doc="```"]
pub static SPEAKING_HEAD :  Emoji = Emoji::new("speaking head", "🗣️"); // speaking head
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BUSTS_IN_SILHOUETTE, ],
&[&BUST_IN_SILHOUETTE, ],
&[&FOOTPRINTS, ],
&[&PERSON_HUGGING, ],
&[&SPEAKING_HEAD, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BUSTS_IN_SILHOUETTE, &BUST_IN_SILHOUETTE, &FOOTPRINTS, &PERSON_HUGGING, &SPEAKING_HEAD, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // people_and_body::person_symbol
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(body_parts::all_variants())
		.chain(family::all_variants())
		.chain(hand_fingers_closed::all_variants())
		.chain(hand_fingers_open::all_variants())
		.chain(hand_fingers_partial::all_variants())
		.chain(hand_prop::all_variants())
		.chain(hand_single_finger::all_variants())
		.chain(hands::all_variants())
		.chain(person::all_variants())
		.chain(person_activity::all_variants())
		.chain(person_fantasy::all_variants())
		.chain(person_gesture::all_variants())
		.chain(person_resting::all_variants())
		.chain(person_role::all_variants())
		.chain(person_sport::all_variants())
		.chain(person_symbol::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(body_parts::base_emojis())
		.chain(family::base_emojis())
		.chain(hand_fingers_closed::base_emojis())
		.chain(hand_fingers_open::base_emojis())
		.chain(hand_fingers_partial::base_emojis())
		.chain(hand_prop::base_emojis())
		.chain(hand_single_finger::base_emojis())
		.chain(hands::base_emojis())
		.chain(person::base_emojis())
		.chain(person_activity::base_emojis())
		.chain(person_fantasy::base_emojis())
		.chain(person_gesture::base_emojis())
		.chain(person_resting::base_emojis())
		.chain(person_role::base_emojis())
		.chain(person_sport::base_emojis())
		.chain(person_symbol::base_emojis())
}
} // people_and_body

/// Smileys & Emotion 😹💢😘
pub mod smileys_and_emotion {

/// cat-face 😹😼😿
pub mod cat_face { // smileys_and_emotion::cat_face
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="cat with tears of joy 😹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT_WITH_TEARS_OF_JOY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT_WITH_TEARS_OF_JOY); // 😹 (`U+1F639`)"] #[doc="# assert_eq!(CAT_WITH_TEARS_OF_JOY.to_string().as_str(), \"😹\");"]
#[doc="```"]
pub static CAT_WITH_TEARS_OF_JOY :  Emoji = Emoji::new("cat with tears of joy", "😹"); // cat with tears of joy
#[doc="cat with wry smile 😼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAT_WITH_WRY_SMILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAT_WITH_WRY_SMILE); // 😼 (`U+1F63C`)"] #[doc="# assert_eq!(CAT_WITH_WRY_SMILE.to_string().as_str(), \"😼\");"]
#[doc="```"]
pub static CAT_WITH_WRY_SMILE :  Emoji = Emoji::new("cat with wry smile", "😼"); // cat with wry smile
#[doc="crying cat 😿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRYING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRYING_CAT); // 😿 (`U+1F63F`)"] #[doc="# assert_eq!(CRYING_CAT.to_string().as_str(), \"😿\");"]
#[doc="```"]
pub static CRYING_CAT :  Emoji = Emoji::new("crying cat", "😿"); // crying cat
#[doc="grinning cat 😺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_CAT); // 😺 (`U+1F63A`)"] #[doc="# assert_eq!(GRINNING_CAT.to_string().as_str(), \"😺\");"]
#[doc="```"]
pub static GRINNING_CAT :  Emoji = Emoji::new("grinning cat", "😺"); // grinning cat
#[doc="grinning cat with smiling eyes 😸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_CAT_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_CAT_WITH_SMILING_EYES); // 😸 (`U+1F638`)"] #[doc="# assert_eq!(GRINNING_CAT_WITH_SMILING_EYES.to_string().as_str(), \"😸\");"]
#[doc="```"]
pub static GRINNING_CAT_WITH_SMILING_EYES :  Emoji = Emoji::new("grinning cat with smiling eyes", "😸"); // grinning cat with smiling eyes
#[doc="kissing cat 😽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_CAT); // 😽 (`U+1F63D`)"] #[doc="# assert_eq!(KISSING_CAT.to_string().as_str(), \"😽\");"]
#[doc="```"]
pub static KISSING_CAT :  Emoji = Emoji::new("kissing cat", "😽"); // kissing cat
#[doc="pouting cat 😾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POUTING_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POUTING_CAT); // 😾 (`U+1F63E`)"] #[doc="# assert_eq!(POUTING_CAT.to_string().as_str(), \"😾\");"]
#[doc="```"]
pub static POUTING_CAT :  Emoji = Emoji::new("pouting cat", "😾"); // pouting cat
#[doc="smiling cat with heart-eyes 😻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_CAT_WITH_HEART_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_CAT_WITH_HEART_EYES); // 😻 (`U+1F63B`)"] #[doc="# assert_eq!(SMILING_CAT_WITH_HEART_EYES.to_string().as_str(), \"😻\");"]
#[doc="```"]
pub static SMILING_CAT_WITH_HEART_EYES :  Emoji = Emoji::new("smiling cat with heart-eyes", "😻"); // smiling cat with heart-eyes
#[doc="weary cat 🙀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WEARY_CAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WEARY_CAT); // 🙀 (`U+1F640`)"] #[doc="# assert_eq!(WEARY_CAT.to_string().as_str(), \"🙀\");"]
#[doc="```"]
pub static WEARY_CAT :  Emoji = Emoji::new("weary cat", "🙀"); // weary cat
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CAT_WITH_TEARS_OF_JOY, ],
&[&CAT_WITH_WRY_SMILE, ],
&[&CRYING_CAT, ],
&[&GRINNING_CAT, ],
&[&GRINNING_CAT_WITH_SMILING_EYES, ],
&[&KISSING_CAT, ],
&[&POUTING_CAT, ],
&[&SMILING_CAT_WITH_HEART_EYES, ],
&[&WEARY_CAT, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CAT_WITH_TEARS_OF_JOY, &CAT_WITH_WRY_SMILE, &CRYING_CAT, &GRINNING_CAT, &GRINNING_CAT_WITH_SMILING_EYES, &KISSING_CAT, &POUTING_CAT, &SMILING_CAT_WITH_HEART_EYES, &WEARY_CAT, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::cat_face

/// emotion 💢💓🖤
pub mod emotion { // smileys_and_emotion::emotion
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="anger symbol 💢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGER_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGER_SYMBOL); // 💢 (`U+1F4A2`)"] #[doc="# assert_eq!(ANGER_SYMBOL.to_string().as_str(), \"💢\");"]
#[doc="```"]
pub static ANGER_SYMBOL :  Emoji = Emoji::new("anger symbol", "💢"); // anger symbol
#[doc="beating heart 💓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEATING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEATING_HEART); // 💓 (`U+1F493`)"] #[doc="# assert_eq!(BEATING_HEART.to_string().as_str(), \"💓\");"]
#[doc="```"]
pub static BEATING_HEART :  Emoji = Emoji::new("beating heart", "💓"); // beating heart
#[doc="black heart 🖤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_HEART); // 🖤 (`U+1F5A4`)"] #[doc="# assert_eq!(BLACK_HEART.to_string().as_str(), \"🖤\");"]
#[doc="```"]
pub static BLACK_HEART :  Emoji = Emoji::new("black heart", "🖤"); // black heart
#[doc="blue heart 💙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_HEART); // 💙 (`U+1F499`)"] #[doc="# assert_eq!(BLUE_HEART.to_string().as_str(), \"💙\");"]
#[doc="```"]
pub static BLUE_HEART :  Emoji = Emoji::new("blue heart", "💙"); // blue heart
#[doc="bomb 💣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BOMB;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BOMB); // 💣 (`U+1F4A3`)"] #[doc="# assert_eq!(BOMB.to_string().as_str(), \"💣\");"]
#[doc="```"]
pub static BOMB :  Emoji = Emoji::new("bomb", "💣"); // bomb
#[doc="broken heart 💔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROKEN_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROKEN_HEART); // 💔 (`U+1F494`)"] #[doc="# assert_eq!(BROKEN_HEART.to_string().as_str(), \"💔\");"]
#[doc="```"]
pub static BROKEN_HEART :  Emoji = Emoji::new("broken heart", "💔"); // broken heart
#[doc="brown heart 🤎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROWN_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROWN_HEART); // 🤎 (`U+1F90E`)"] #[doc="# assert_eq!(BROWN_HEART.to_string().as_str(), \"🤎\");"]
#[doc="```"]
pub static BROWN_HEART :  Emoji = Emoji::new("brown heart", "🤎"); // brown heart
#[doc="collision 💥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COLLISION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COLLISION); // 💥 (`U+1F4A5`)"] #[doc="# assert_eq!(COLLISION.to_string().as_str(), \"💥\");"]
#[doc="```"]
pub static COLLISION :  Emoji = Emoji::new("collision", "💥"); // collision
#[doc="dashing away 💨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DASHING_AWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DASHING_AWAY); // 💨 (`U+1F4A8`)"] #[doc="# assert_eq!(DASHING_AWAY.to_string().as_str(), \"💨\");"]
#[doc="```"]
pub static DASHING_AWAY :  Emoji = Emoji::new("dashing away", "💨"); // dashing away
#[doc="dizzy 💫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIZZY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIZZY); // 💫 (`U+1F4AB`)"] #[doc="# assert_eq!(DIZZY.to_string().as_str(), \"💫\");"]
#[doc="```"]
pub static DIZZY :  Emoji = Emoji::new("dizzy", "💫"); // dizzy
#[doc="eye in speech bubble 👁️‍🗨️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EYE_IN_SPEECH_BUBBLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EYE_IN_SPEECH_BUBBLE); // 👁️‍🗨️ (`U+1F441 U+FE0F U+200D U+1F5E8 U+FE0F`)"] #[doc="# assert_eq!(EYE_IN_SPEECH_BUBBLE.to_string().as_str(), \"👁️‍🗨️\");"]
#[doc="```"]
pub static EYE_IN_SPEECH_BUBBLE :  Emoji = Emoji::new("eye in speech bubble", "👁️‍🗨️"); // eye in speech bubble
#[doc="green heart 💚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_HEART); // 💚 (`U+1F49A`)"] #[doc="# assert_eq!(GREEN_HEART.to_string().as_str(), \"💚\");"]
#[doc="```"]
pub static GREEN_HEART :  Emoji = Emoji::new("green heart", "💚"); // green heart
#[doc="growing heart 💗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GROWING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GROWING_HEART); // 💗 (`U+1F497`)"] #[doc="# assert_eq!(GROWING_HEART.to_string().as_str(), \"💗\");"]
#[doc="```"]
pub static GROWING_HEART :  Emoji = Emoji::new("growing heart", "💗"); // growing heart
#[doc="heart decoration 💟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_DECORATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_DECORATION); // 💟 (`U+1F49F`)"] #[doc="# assert_eq!(HEART_DECORATION.to_string().as_str(), \"💟\");"]
#[doc="```"]
pub static HEART_DECORATION :  Emoji = Emoji::new("heart decoration", "💟"); // heart decoration
#[doc="heart exclamation ❣️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_EXCLAMATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_EXCLAMATION); // ❣️ (`U+2763 U+FE0F`)"] #[doc="# assert_eq!(HEART_EXCLAMATION.to_string().as_str(), \"❣️\");"]
#[doc="```"]
pub static HEART_EXCLAMATION :  Emoji = Emoji::new("heart exclamation", "❣️"); // heart exclamation
#[doc="heart on fire ❤️‍🔥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_ON_FIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_ON_FIRE); // ❤️‍🔥 (`U+2764 U+FE0F U+200D U+1F525`)"] #[doc="# assert_eq!(HEART_ON_FIRE.to_string().as_str(), \"❤️‍🔥\");"]
#[doc="```"]
pub static HEART_ON_FIRE :  Emoji = Emoji::new("heart on fire", "❤️‍🔥"); // heart on fire
#[doc="heart with arrow 💘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_WITH_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_WITH_ARROW); // 💘 (`U+1F498`)"] #[doc="# assert_eq!(HEART_WITH_ARROW.to_string().as_str(), \"💘\");"]
#[doc="```"]
pub static HEART_WITH_ARROW :  Emoji = Emoji::new("heart with arrow", "💘"); // heart with arrow
#[doc="heart with ribbon 💝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEART_WITH_RIBBON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEART_WITH_RIBBON); // 💝 (`U+1F49D`)"] #[doc="# assert_eq!(HEART_WITH_RIBBON.to_string().as_str(), \"💝\");"]
#[doc="```"]
pub static HEART_WITH_RIBBON :  Emoji = Emoji::new("heart with ribbon", "💝"); // heart with ribbon
#[doc="hole 🕳️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOLE); // 🕳️ (`U+1F573 U+FE0F`)"] #[doc="# assert_eq!(HOLE.to_string().as_str(), \"🕳️\");"]
#[doc="```"]
pub static HOLE :  Emoji = Emoji::new("hole", "🕳️"); // hole
#[doc="hundred points 💯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUNDRED_POINTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUNDRED_POINTS); // 💯 (`U+1F4AF`)"] #[doc="# assert_eq!(HUNDRED_POINTS.to_string().as_str(), \"💯\");"]
#[doc="```"]
pub static HUNDRED_POINTS :  Emoji = Emoji::new("hundred points", "💯"); // hundred points
#[doc="kiss mark 💋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISS_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISS_MARK); // 💋 (`U+1F48B`)"] #[doc="# assert_eq!(KISS_MARK.to_string().as_str(), \"💋\");"]
#[doc="```"]
pub static KISS_MARK :  Emoji = Emoji::new("kiss mark", "💋"); // kiss mark
#[doc="left speech bubble 🗨️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_SPEECH_BUBBLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_SPEECH_BUBBLE); // 🗨️ (`U+1F5E8 U+FE0F`)"] #[doc="# assert_eq!(LEFT_SPEECH_BUBBLE.to_string().as_str(), \"🗨️\");"]
#[doc="```"]
pub static LEFT_SPEECH_BUBBLE :  Emoji = Emoji::new("left speech bubble", "🗨️"); // left speech bubble
#[doc="love letter 💌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOVE_LETTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOVE_LETTER); // 💌 (`U+1F48C`)"] #[doc="# assert_eq!(LOVE_LETTER.to_string().as_str(), \"💌\");"]
#[doc="```"]
pub static LOVE_LETTER :  Emoji = Emoji::new("love letter", "💌"); // love letter
#[doc="mending heart ❤️‍🩹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MENDING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MENDING_HEART); // ❤️‍🩹 (`U+2764 U+FE0F U+200D U+1FA79`)"] #[doc="# assert_eq!(MENDING_HEART.to_string().as_str(), \"❤️‍🩹\");"]
#[doc="```"]
pub static MENDING_HEART :  Emoji = Emoji::new("mending heart", "❤️‍🩹"); // mending heart
#[doc="orange heart 🧡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_HEART); // 🧡 (`U+1F9E1`)"] #[doc="# assert_eq!(ORANGE_HEART.to_string().as_str(), \"🧡\");"]
#[doc="```"]
pub static ORANGE_HEART :  Emoji = Emoji::new("orange heart", "🧡"); // orange heart
#[doc="purple heart 💜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURPLE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURPLE_HEART); // 💜 (`U+1F49C`)"] #[doc="# assert_eq!(PURPLE_HEART.to_string().as_str(), \"💜\");"]
#[doc="```"]
pub static PURPLE_HEART :  Emoji = Emoji::new("purple heart", "💜"); // purple heart
#[doc="red heart ❤️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_HEART); // ❤️ (`U+2764 U+FE0F`)"] #[doc="# assert_eq!(RED_HEART.to_string().as_str(), \"❤️\");"]
#[doc="```"]
pub static RED_HEART :  Emoji = Emoji::new("red heart", "❤️"); // red heart
#[doc="revolving hearts 💞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REVOLVING_HEARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REVOLVING_HEARTS); // 💞 (`U+1F49E`)"] #[doc="# assert_eq!(REVOLVING_HEARTS.to_string().as_str(), \"💞\");"]
#[doc="```"]
pub static REVOLVING_HEARTS :  Emoji = Emoji::new("revolving hearts", "💞"); // revolving hearts
#[doc="right anger bubble 🗯️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ANGER_BUBBLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ANGER_BUBBLE); // 🗯️ (`U+1F5EF U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ANGER_BUBBLE.to_string().as_str(), \"🗯️\");"]
#[doc="```"]
pub static RIGHT_ANGER_BUBBLE :  Emoji = Emoji::new("right anger bubble", "🗯️"); // right anger bubble
#[doc="sparkling heart 💖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLING_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLING_HEART); // 💖 (`U+1F496`)"] #[doc="# assert_eq!(SPARKLING_HEART.to_string().as_str(), \"💖\");"]
#[doc="```"]
pub static SPARKLING_HEART :  Emoji = Emoji::new("sparkling heart", "💖"); // sparkling heart
#[doc="speech balloon 💬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEECH_BALLOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEECH_BALLOON); // 💬 (`U+1F4AC`)"] #[doc="# assert_eq!(SPEECH_BALLOON.to_string().as_str(), \"💬\");"]
#[doc="```"]
pub static SPEECH_BALLOON :  Emoji = Emoji::new("speech balloon", "💬"); // speech balloon
#[doc="sweat droplets 💦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SWEAT_DROPLETS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SWEAT_DROPLETS); // 💦 (`U+1F4A6`)"] #[doc="# assert_eq!(SWEAT_DROPLETS.to_string().as_str(), \"💦\");"]
#[doc="```"]
pub static SWEAT_DROPLETS :  Emoji = Emoji::new("sweat droplets", "💦"); // sweat droplets
#[doc="thought balloon 💭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THOUGHT_BALLOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THOUGHT_BALLOON); // 💭 (`U+1F4AD`)"] #[doc="# assert_eq!(THOUGHT_BALLOON.to_string().as_str(), \"💭\");"]
#[doc="```"]
pub static THOUGHT_BALLOON :  Emoji = Emoji::new("thought balloon", "💭"); // thought balloon
#[doc="two hearts 💕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_HEARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_HEARTS); // 💕 (`U+1F495`)"] #[doc="# assert_eq!(TWO_HEARTS.to_string().as_str(), \"💕\");"]
#[doc="```"]
pub static TWO_HEARTS :  Emoji = Emoji::new("two hearts", "💕"); // two hearts
#[doc="white heart 🤍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_HEART); // 🤍 (`U+1F90D`)"] #[doc="# assert_eq!(WHITE_HEART.to_string().as_str(), \"🤍\");"]
#[doc="```"]
pub static WHITE_HEART :  Emoji = Emoji::new("white heart", "🤍"); // white heart
#[doc="yellow heart 💛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YELLOW_HEART;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YELLOW_HEART); // 💛 (`U+1F49B`)"] #[doc="# assert_eq!(YELLOW_HEART.to_string().as_str(), \"💛\");"]
#[doc="```"]
pub static YELLOW_HEART :  Emoji = Emoji::new("yellow heart", "💛"); // yellow heart
#[doc="zzz 💤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZZZ;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZZZ); // 💤 (`U+1F4A4`)"] #[doc="# assert_eq!(ZZZ.to_string().as_str(), \"💤\");"]
#[doc="```"]
pub static ZZZ :  Emoji = Emoji::new("zzz", "💤"); // zzz
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANGER_SYMBOL, ],
&[&BEATING_HEART, ],
&[&BLACK_HEART, ],
&[&BLUE_HEART, ],
&[&BOMB, ],
&[&BROKEN_HEART, ],
&[&BROWN_HEART, ],
&[&COLLISION, ],
&[&DASHING_AWAY, ],
&[&DIZZY, ],
&[&EYE_IN_SPEECH_BUBBLE, ],
&[&GREEN_HEART, ],
&[&GROWING_HEART, ],
&[&HEART_DECORATION, ],
&[&HEART_EXCLAMATION, ],
&[&HEART_ON_FIRE, ],
&[&HEART_WITH_ARROW, ],
&[&HEART_WITH_RIBBON, ],
&[&HOLE, ],
&[&HUNDRED_POINTS, ],
&[&KISS_MARK, ],
&[&LEFT_SPEECH_BUBBLE, ],
&[&LOVE_LETTER, ],
&[&MENDING_HEART, ],
&[&ORANGE_HEART, ],
&[&PURPLE_HEART, ],
&[&RED_HEART, ],
&[&REVOLVING_HEARTS, ],
&[&RIGHT_ANGER_BUBBLE, ],
&[&SPARKLING_HEART, ],
&[&SPEECH_BALLOON, ],
&[&SWEAT_DROPLETS, ],
&[&THOUGHT_BALLOON, ],
&[&TWO_HEARTS, ],
&[&WHITE_HEART, ],
&[&YELLOW_HEART, ],
&[&ZZZ, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANGER_SYMBOL, &BEATING_HEART, &BLACK_HEART, &BLUE_HEART, &BOMB, &BROKEN_HEART, &BROWN_HEART, &COLLISION, &DASHING_AWAY, &DIZZY, &EYE_IN_SPEECH_BUBBLE, &GREEN_HEART, &GROWING_HEART, &HEART_DECORATION, &HEART_EXCLAMATION, &HEART_ON_FIRE, &HEART_WITH_ARROW, &HEART_WITH_RIBBON, &HOLE, &HUNDRED_POINTS, &KISS_MARK, &LEFT_SPEECH_BUBBLE, &LOVE_LETTER, &MENDING_HEART, &ORANGE_HEART, &PURPLE_HEART, &RED_HEART, &REVOLVING_HEARTS, &RIGHT_ANGER_BUBBLE, &SPARKLING_HEART, &SPEECH_BALLOON, &SWEAT_DROPLETS, &THOUGHT_BALLOON, &TWO_HEARTS, &WHITE_HEART, &YELLOW_HEART, &ZZZ, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::emotion

/// face-affection 😘😗😚
pub mod face_affection { // smileys_and_emotion::face_affection
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="face blowing a kiss 😘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_BLOWING_A_KISS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_BLOWING_A_KISS); // 😘 (`U+1F618`)"] #[doc="# assert_eq!(FACE_BLOWING_A_KISS.to_string().as_str(), \"😘\");"]
#[doc="```"]
pub static FACE_BLOWING_A_KISS :  Emoji = Emoji::new("face blowing a kiss", "😘"); // face blowing a kiss
#[doc="kissing face 😗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_FACE); // 😗 (`U+1F617`)"] #[doc="# assert_eq!(KISSING_FACE.to_string().as_str(), \"😗\");"]
#[doc="```"]
pub static KISSING_FACE :  Emoji = Emoji::new("kissing face", "😗"); // kissing face
#[doc="kissing face with closed eyes 😚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_FACE_WITH_CLOSED_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_FACE_WITH_CLOSED_EYES); // 😚 (`U+1F61A`)"] #[doc="# assert_eq!(KISSING_FACE_WITH_CLOSED_EYES.to_string().as_str(), \"😚\");"]
#[doc="```"]
pub static KISSING_FACE_WITH_CLOSED_EYES :  Emoji = Emoji::new("kissing face with closed eyes", "😚"); // kissing face with closed eyes
#[doc="kissing face with smiling eyes 😙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KISSING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KISSING_FACE_WITH_SMILING_EYES); // 😙 (`U+1F619`)"] #[doc="# assert_eq!(KISSING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"😙\");"]
#[doc="```"]
pub static KISSING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("kissing face with smiling eyes", "😙"); // kissing face with smiling eyes
#[doc="smiling face ☺️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE); // ☺️ (`U+263A U+FE0F`)"] #[doc="# assert_eq!(SMILING_FACE.to_string().as_str(), \"☺️\");"]
#[doc="```"]
pub static SMILING_FACE :  Emoji = Emoji::new("smiling face", "☺️"); // smiling face
#[doc="smiling face with hearts 🥰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HEARTS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HEARTS); // 🥰 (`U+1F970`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HEARTS.to_string().as_str(), \"🥰\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HEARTS :  Emoji = Emoji::new("smiling face with hearts", "🥰"); // smiling face with hearts
#[doc="smiling face with heart-eyes 😍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HEART_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HEART_EYES); // 😍 (`U+1F60D`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HEART_EYES.to_string().as_str(), \"😍\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HEART_EYES :  Emoji = Emoji::new("smiling face with heart-eyes", "😍"); // smiling face with heart-eyes
#[doc="smiling face with tear 🥲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_TEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_TEAR); // 🥲 (`U+1F972`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_TEAR.to_string().as_str(), \"🥲\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_TEAR :  Emoji = Emoji::new("smiling face with tear", "🥲"); // smiling face with tear
#[doc="star-struck 🤩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR_STRUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR_STRUCK); // 🤩 (`U+1F929`)"] #[doc="# assert_eq!(STAR_STRUCK.to_string().as_str(), \"🤩\");"]
#[doc="```"]
pub static STAR_STRUCK :  Emoji = Emoji::new("star-struck", "🤩"); // star-struck
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FACE_BLOWING_A_KISS, ],
&[&KISSING_FACE, ],
&[&KISSING_FACE_WITH_CLOSED_EYES, ],
&[&KISSING_FACE_WITH_SMILING_EYES, ],
&[&SMILING_FACE, ],
&[&SMILING_FACE_WITH_HEARTS, ],
&[&SMILING_FACE_WITH_HEART_EYES, ],
&[&SMILING_FACE_WITH_TEAR, ],
&[&STAR_STRUCK, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FACE_BLOWING_A_KISS, &KISSING_FACE, &KISSING_FACE_WITH_CLOSED_EYES, &KISSING_FACE_WITH_SMILING_EYES, &SMILING_FACE, &SMILING_FACE_WITH_HEARTS, &SMILING_FACE_WITH_HEART_EYES, &SMILING_FACE_WITH_TEAR, &STAR_STRUCK, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_affection

/// face-concerned 😧😰😲
pub mod face_concerned { // smileys_and_emotion::face_concerned
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="anguished face 😧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGUISHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGUISHED_FACE); // 😧 (`U+1F627`)"] #[doc="# assert_eq!(ANGUISHED_FACE.to_string().as_str(), \"😧\");"]
#[doc="```"]
pub static ANGUISHED_FACE :  Emoji = Emoji::new("anguished face", "😧"); // anguished face
#[doc="anxious face with sweat 😰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANXIOUS_FACE_WITH_SWEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANXIOUS_FACE_WITH_SWEAT); // 😰 (`U+1F630`)"] #[doc="# assert_eq!(ANXIOUS_FACE_WITH_SWEAT.to_string().as_str(), \"😰\");"]
#[doc="```"]
pub static ANXIOUS_FACE_WITH_SWEAT :  Emoji = Emoji::new("anxious face with sweat", "😰"); // anxious face with sweat
#[doc="astonished face 😲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ASTONISHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ASTONISHED_FACE); // 😲 (`U+1F632`)"] #[doc="# assert_eq!(ASTONISHED_FACE.to_string().as_str(), \"😲\");"]
#[doc="```"]
pub static ASTONISHED_FACE :  Emoji = Emoji::new("astonished face", "😲"); // astonished face
#[doc="confounded face 😖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONFOUNDED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONFOUNDED_FACE); // 😖 (`U+1F616`)"] #[doc="# assert_eq!(CONFOUNDED_FACE.to_string().as_str(), \"😖\");"]
#[doc="```"]
pub static CONFOUNDED_FACE :  Emoji = Emoji::new("confounded face", "😖"); // confounded face
#[doc="confused face 😕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONFUSED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONFUSED_FACE); // 😕 (`U+1F615`)"] #[doc="# assert_eq!(CONFUSED_FACE.to_string().as_str(), \"😕\");"]
#[doc="```"]
pub static CONFUSED_FACE :  Emoji = Emoji::new("confused face", "😕"); // confused face
#[doc="crying face 😢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRYING_FACE); // 😢 (`U+1F622`)"] #[doc="# assert_eq!(CRYING_FACE.to_string().as_str(), \"😢\");"]
#[doc="```"]
pub static CRYING_FACE :  Emoji = Emoji::new("crying face", "😢"); // crying face
#[doc="disappointed face 😞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DISAPPOINTED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DISAPPOINTED_FACE); // 😞 (`U+1F61E`)"] #[doc="# assert_eq!(DISAPPOINTED_FACE.to_string().as_str(), \"😞\");"]
#[doc="```"]
pub static DISAPPOINTED_FACE :  Emoji = Emoji::new("disappointed face", "😞"); // disappointed face
#[doc="downcast face with sweat 😓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWNCAST_FACE_WITH_SWEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWNCAST_FACE_WITH_SWEAT); // 😓 (`U+1F613`)"] #[doc="# assert_eq!(DOWNCAST_FACE_WITH_SWEAT.to_string().as_str(), \"😓\");"]
#[doc="```"]
pub static DOWNCAST_FACE_WITH_SWEAT :  Emoji = Emoji::new("downcast face with sweat", "😓"); // downcast face with sweat
#[doc="face screaming in fear 😱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_SCREAMING_IN_FEAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_SCREAMING_IN_FEAR); // 😱 (`U+1F631`)"] #[doc="# assert_eq!(FACE_SCREAMING_IN_FEAR.to_string().as_str(), \"😱\");"]
#[doc="```"]
pub static FACE_SCREAMING_IN_FEAR :  Emoji = Emoji::new("face screaming in fear", "😱"); // face screaming in fear
#[doc="face with open mouth 😮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_OPEN_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_OPEN_MOUTH); // 😮 (`U+1F62E`)"] #[doc="# assert_eq!(FACE_WITH_OPEN_MOUTH.to_string().as_str(), \"😮\");"]
#[doc="```"]
pub static FACE_WITH_OPEN_MOUTH :  Emoji = Emoji::new("face with open mouth", "😮"); // face with open mouth
#[doc="fearful face 😨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FEARFUL_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FEARFUL_FACE); // 😨 (`U+1F628`)"] #[doc="# assert_eq!(FEARFUL_FACE.to_string().as_str(), \"😨\");"]
#[doc="```"]
pub static FEARFUL_FACE :  Emoji = Emoji::new("fearful face", "😨"); // fearful face
#[doc="flushed face 😳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLUSHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLUSHED_FACE); // 😳 (`U+1F633`)"] #[doc="# assert_eq!(FLUSHED_FACE.to_string().as_str(), \"😳\");"]
#[doc="```"]
pub static FLUSHED_FACE :  Emoji = Emoji::new("flushed face", "😳"); // flushed face
#[doc="frowning face ☹️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FROWNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FROWNING_FACE); // ☹️ (`U+2639 U+FE0F`)"] #[doc="# assert_eq!(FROWNING_FACE.to_string().as_str(), \"☹️\");"]
#[doc="```"]
pub static FROWNING_FACE :  Emoji = Emoji::new("frowning face", "☹️"); // frowning face
#[doc="frowning face with open mouth 😦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FROWNING_FACE_WITH_OPEN_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FROWNING_FACE_WITH_OPEN_MOUTH); // 😦 (`U+1F626`)"] #[doc="# assert_eq!(FROWNING_FACE_WITH_OPEN_MOUTH.to_string().as_str(), \"😦\");"]
#[doc="```"]
pub static FROWNING_FACE_WITH_OPEN_MOUTH :  Emoji = Emoji::new("frowning face with open mouth", "😦"); // frowning face with open mouth
#[doc="hushed face 😯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUSHED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUSHED_FACE); // 😯 (`U+1F62F`)"] #[doc="# assert_eq!(HUSHED_FACE.to_string().as_str(), \"😯\");"]
#[doc="```"]
pub static HUSHED_FACE :  Emoji = Emoji::new("hushed face", "😯"); // hushed face
#[doc="loudly crying face 😭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOUDLY_CRYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOUDLY_CRYING_FACE); // 😭 (`U+1F62D`)"] #[doc="# assert_eq!(LOUDLY_CRYING_FACE.to_string().as_str(), \"😭\");"]
#[doc="```"]
pub static LOUDLY_CRYING_FACE :  Emoji = Emoji::new("loudly crying face", "😭"); // loudly crying face
#[doc="persevering face 😣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PERSEVERING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PERSEVERING_FACE); // 😣 (`U+1F623`)"] #[doc="# assert_eq!(PERSEVERING_FACE.to_string().as_str(), \"😣\");"]
#[doc="```"]
pub static PERSEVERING_FACE :  Emoji = Emoji::new("persevering face", "😣"); // persevering face
#[doc="pleading face 🥺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLEADING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLEADING_FACE); // 🥺 (`U+1F97A`)"] #[doc="# assert_eq!(PLEADING_FACE.to_string().as_str(), \"🥺\");"]
#[doc="```"]
pub static PLEADING_FACE :  Emoji = Emoji::new("pleading face", "🥺"); // pleading face
#[doc="sad but relieved face 😥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAD_BUT_RELIEVED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAD_BUT_RELIEVED_FACE); // 😥 (`U+1F625`)"] #[doc="# assert_eq!(SAD_BUT_RELIEVED_FACE.to_string().as_str(), \"😥\");"]
#[doc="```"]
pub static SAD_BUT_RELIEVED_FACE :  Emoji = Emoji::new("sad but relieved face", "😥"); // sad but relieved face
#[doc="slightly frowning face 🙁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLIGHTLY_FROWNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLIGHTLY_FROWNING_FACE); // 🙁 (`U+1F641`)"] #[doc="# assert_eq!(SLIGHTLY_FROWNING_FACE.to_string().as_str(), \"🙁\");"]
#[doc="```"]
pub static SLIGHTLY_FROWNING_FACE :  Emoji = Emoji::new("slightly frowning face", "🙁"); // slightly frowning face
#[doc="tired face 😫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIRED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIRED_FACE); // 😫 (`U+1F62B`)"] #[doc="# assert_eq!(TIRED_FACE.to_string().as_str(), \"😫\");"]
#[doc="```"]
pub static TIRED_FACE :  Emoji = Emoji::new("tired face", "😫"); // tired face
#[doc="weary face 😩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WEARY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WEARY_FACE); // 😩 (`U+1F629`)"] #[doc="# assert_eq!(WEARY_FACE.to_string().as_str(), \"😩\");"]
#[doc="```"]
pub static WEARY_FACE :  Emoji = Emoji::new("weary face", "😩"); // weary face
#[doc="worried face 😟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WORRIED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WORRIED_FACE); // 😟 (`U+1F61F`)"] #[doc="# assert_eq!(WORRIED_FACE.to_string().as_str(), \"😟\");"]
#[doc="```"]
pub static WORRIED_FACE :  Emoji = Emoji::new("worried face", "😟"); // worried face
#[doc="yawning face 🥱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YAWNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YAWNING_FACE); // 🥱 (`U+1F971`)"] #[doc="# assert_eq!(YAWNING_FACE.to_string().as_str(), \"🥱\");"]
#[doc="```"]
pub static YAWNING_FACE :  Emoji = Emoji::new("yawning face", "🥱"); // yawning face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANGUISHED_FACE, ],
&[&ANXIOUS_FACE_WITH_SWEAT, ],
&[&ASTONISHED_FACE, ],
&[&CONFOUNDED_FACE, ],
&[&CONFUSED_FACE, ],
&[&CRYING_FACE, ],
&[&DISAPPOINTED_FACE, ],
&[&DOWNCAST_FACE_WITH_SWEAT, ],
&[&FACE_SCREAMING_IN_FEAR, ],
&[&FACE_WITH_OPEN_MOUTH, ],
&[&FEARFUL_FACE, ],
&[&FLUSHED_FACE, ],
&[&FROWNING_FACE, ],
&[&FROWNING_FACE_WITH_OPEN_MOUTH, ],
&[&HUSHED_FACE, ],
&[&LOUDLY_CRYING_FACE, ],
&[&PERSEVERING_FACE, ],
&[&PLEADING_FACE, ],
&[&SAD_BUT_RELIEVED_FACE, ],
&[&SLIGHTLY_FROWNING_FACE, ],
&[&TIRED_FACE, ],
&[&WEARY_FACE, ],
&[&WORRIED_FACE, ],
&[&YAWNING_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANGUISHED_FACE, &ANXIOUS_FACE_WITH_SWEAT, &ASTONISHED_FACE, &CONFOUNDED_FACE, &CONFUSED_FACE, &CRYING_FACE, &DISAPPOINTED_FACE, &DOWNCAST_FACE_WITH_SWEAT, &FACE_SCREAMING_IN_FEAR, &FACE_WITH_OPEN_MOUTH, &FEARFUL_FACE, &FLUSHED_FACE, &FROWNING_FACE, &FROWNING_FACE_WITH_OPEN_MOUTH, &HUSHED_FACE, &LOUDLY_CRYING_FACE, &PERSEVERING_FACE, &PLEADING_FACE, &SAD_BUT_RELIEVED_FACE, &SLIGHTLY_FROWNING_FACE, &TIRED_FACE, &WEARY_FACE, &WORRIED_FACE, &YAWNING_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_concerned

/// face-costume 👽👾🤡
pub mod face_costume { // smileys_and_emotion::face_costume
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="alien 👽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALIEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALIEN); // 👽 (`U+1F47D`)"] #[doc="# assert_eq!(ALIEN.to_string().as_str(), \"👽\");"]
#[doc="```"]
pub static ALIEN :  Emoji = Emoji::new("alien", "👽"); // alien
#[doc="alien monster 👾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALIEN_MONSTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALIEN_MONSTER); // 👾 (`U+1F47E`)"] #[doc="# assert_eq!(ALIEN_MONSTER.to_string().as_str(), \"👾\");"]
#[doc="```"]
pub static ALIEN_MONSTER :  Emoji = Emoji::new("alien monster", "👾"); // alien monster
#[doc="clown face 🤡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOWN_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOWN_FACE); // 🤡 (`U+1F921`)"] #[doc="# assert_eq!(CLOWN_FACE.to_string().as_str(), \"🤡\");"]
#[doc="```"]
pub static CLOWN_FACE :  Emoji = Emoji::new("clown face", "🤡"); // clown face
#[doc="ghost 👻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GHOST;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GHOST); // 👻 (`U+1F47B`)"] #[doc="# assert_eq!(GHOST.to_string().as_str(), \"👻\");"]
#[doc="```"]
pub static GHOST :  Emoji = Emoji::new("ghost", "👻"); // ghost
#[doc="goblin 👺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GOBLIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GOBLIN); // 👺 (`U+1F47A`)"] #[doc="# assert_eq!(GOBLIN.to_string().as_str(), \"👺\");"]
#[doc="```"]
pub static GOBLIN :  Emoji = Emoji::new("goblin", "👺"); // goblin
#[doc="ogre 👹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OGRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OGRE); // 👹 (`U+1F479`)"] #[doc="# assert_eq!(OGRE.to_string().as_str(), \"👹\");"]
#[doc="```"]
pub static OGRE :  Emoji = Emoji::new("ogre", "👹"); // ogre
#[doc="pile of poo 💩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PILE_OF_POO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PILE_OF_POO); // 💩 (`U+1F4A9`)"] #[doc="# assert_eq!(PILE_OF_POO.to_string().as_str(), \"💩\");"]
#[doc="```"]
pub static PILE_OF_POO :  Emoji = Emoji::new("pile of poo", "💩"); // pile of poo
#[doc="robot 🤖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROBOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROBOT); // 🤖 (`U+1F916`)"] #[doc="# assert_eq!(ROBOT.to_string().as_str(), \"🤖\");"]
#[doc="```"]
pub static ROBOT :  Emoji = Emoji::new("robot", "🤖"); // robot
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ALIEN, ],
&[&ALIEN_MONSTER, ],
&[&CLOWN_FACE, ],
&[&GHOST, ],
&[&GOBLIN, ],
&[&OGRE, ],
&[&PILE_OF_POO, ],
&[&ROBOT, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ALIEN, &ALIEN_MONSTER, &CLOWN_FACE, &GHOST, &GOBLIN, &OGRE, &PILE_OF_POO, &ROBOT, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_costume

/// face-glasses 🧐🤓😎
pub mod face_glasses { // smileys_and_emotion::face_glasses
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="face with monocle 🧐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_MONOCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_MONOCLE); // 🧐 (`U+1F9D0`)"] #[doc="# assert_eq!(FACE_WITH_MONOCLE.to_string().as_str(), \"🧐\");"]
#[doc="```"]
pub static FACE_WITH_MONOCLE :  Emoji = Emoji::new("face with monocle", "🧐"); // face with monocle
#[doc="nerd face 🤓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NERD_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NERD_FACE); // 🤓 (`U+1F913`)"] #[doc="# assert_eq!(NERD_FACE.to_string().as_str(), \"🤓\");"]
#[doc="```"]
pub static NERD_FACE :  Emoji = Emoji::new("nerd face", "🤓"); // nerd face
#[doc="smiling face with sunglasses 😎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_SUNGLASSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_SUNGLASSES); // 😎 (`U+1F60E`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_SUNGLASSES.to_string().as_str(), \"😎\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_SUNGLASSES :  Emoji = Emoji::new("smiling face with sunglasses", "😎"); // smiling face with sunglasses
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FACE_WITH_MONOCLE, ],
&[&NERD_FACE, ],
&[&SMILING_FACE_WITH_SUNGLASSES, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FACE_WITH_MONOCLE, &NERD_FACE, &SMILING_FACE_WITH_SUNGLASSES, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_glasses

/// face-hand 🤭🤗🤫
pub mod face_hand { // smileys_and_emotion::face_hand
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="face with hand over mouth 🤭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_HAND_OVER_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_HAND_OVER_MOUTH); // 🤭 (`U+1F92D`)"] #[doc="# assert_eq!(FACE_WITH_HAND_OVER_MOUTH.to_string().as_str(), \"🤭\");"]
#[doc="```"]
pub static FACE_WITH_HAND_OVER_MOUTH :  Emoji = Emoji::new("face with hand over mouth", "🤭"); // face with hand over mouth
#[doc="hugging face 🤗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUGGING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUGGING_FACE); // 🤗 (`U+1F917`)"] #[doc="# assert_eq!(HUGGING_FACE.to_string().as_str(), \"🤗\");"]
#[doc="```"]
pub static HUGGING_FACE :  Emoji = Emoji::new("hugging face", "🤗"); // hugging face
#[doc="shushing face 🤫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHUSHING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHUSHING_FACE); // 🤫 (`U+1F92B`)"] #[doc="# assert_eq!(SHUSHING_FACE.to_string().as_str(), \"🤫\");"]
#[doc="```"]
pub static SHUSHING_FACE :  Emoji = Emoji::new("shushing face", "🤫"); // shushing face
#[doc="thinking face 🤔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THINKING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THINKING_FACE); // 🤔 (`U+1F914`)"] #[doc="# assert_eq!(THINKING_FACE.to_string().as_str(), \"🤔\");"]
#[doc="```"]
pub static THINKING_FACE :  Emoji = Emoji::new("thinking face", "🤔"); // thinking face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FACE_WITH_HAND_OVER_MOUTH, ],
&[&HUGGING_FACE, ],
&[&SHUSHING_FACE, ],
&[&THINKING_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FACE_WITH_HAND_OVER_MOUTH, &HUGGING_FACE, &SHUSHING_FACE, &THINKING_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_hand

/// face-hat 🤠🥸🥳
pub mod face_hat { // smileys_and_emotion::face_hat
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="cowboy hat face 🤠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COWBOY_HAT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COWBOY_HAT_FACE); // 🤠 (`U+1F920`)"] #[doc="# assert_eq!(COWBOY_HAT_FACE.to_string().as_str(), \"🤠\");"]
#[doc="```"]
pub static COWBOY_HAT_FACE :  Emoji = Emoji::new("cowboy hat face", "🤠"); // cowboy hat face
#[doc="disguised face 🥸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DISGUISED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DISGUISED_FACE); // 🥸 (`U+1F978`)"] #[doc="# assert_eq!(DISGUISED_FACE.to_string().as_str(), \"🥸\");"]
#[doc="```"]
pub static DISGUISED_FACE :  Emoji = Emoji::new("disguised face", "🥸"); // disguised face
#[doc="partying face 🥳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARTYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARTYING_FACE); // 🥳 (`U+1F973`)"] #[doc="# assert_eq!(PARTYING_FACE.to_string().as_str(), \"🥳\");"]
#[doc="```"]
pub static PARTYING_FACE :  Emoji = Emoji::new("partying face", "🥳"); // partying face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&COWBOY_HAT_FACE, ],
&[&DISGUISED_FACE, ],
&[&PARTYING_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&COWBOY_HAT_FACE, &DISGUISED_FACE, &PARTYING_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_hat

/// face-negative 😠👿😤
pub mod face_negative { // smileys_and_emotion::face_negative
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="angry face 😠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGRY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGRY_FACE); // 😠 (`U+1F620`)"] #[doc="# assert_eq!(ANGRY_FACE.to_string().as_str(), \"😠\");"]
#[doc="```"]
pub static ANGRY_FACE :  Emoji = Emoji::new("angry face", "😠"); // angry face
#[doc="angry face with horns 👿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANGRY_FACE_WITH_HORNS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANGRY_FACE_WITH_HORNS); // 👿 (`U+1F47F`)"] #[doc="# assert_eq!(ANGRY_FACE_WITH_HORNS.to_string().as_str(), \"👿\");"]
#[doc="```"]
pub static ANGRY_FACE_WITH_HORNS :  Emoji = Emoji::new("angry face with horns", "👿"); // angry face with horns
#[doc="face with steam from nose 😤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_STEAM_FROM_NOSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_STEAM_FROM_NOSE); // 😤 (`U+1F624`)"] #[doc="# assert_eq!(FACE_WITH_STEAM_FROM_NOSE.to_string().as_str(), \"😤\");"]
#[doc="```"]
pub static FACE_WITH_STEAM_FROM_NOSE :  Emoji = Emoji::new("face with steam from nose", "😤"); // face with steam from nose
#[doc="face with symbols on mouth 🤬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_SYMBOLS_ON_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_SYMBOLS_ON_MOUTH); // 🤬 (`U+1F92C`)"] #[doc="# assert_eq!(FACE_WITH_SYMBOLS_ON_MOUTH.to_string().as_str(), \"🤬\");"]
#[doc="```"]
pub static FACE_WITH_SYMBOLS_ON_MOUTH :  Emoji = Emoji::new("face with symbols on mouth", "🤬"); // face with symbols on mouth
#[doc="pouting face 😡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POUTING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POUTING_FACE); // 😡 (`U+1F621`)"] #[doc="# assert_eq!(POUTING_FACE.to_string().as_str(), \"😡\");"]
#[doc="```"]
pub static POUTING_FACE :  Emoji = Emoji::new("pouting face", "😡"); // pouting face
#[doc="skull 💀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKULL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKULL); // 💀 (`U+1F480`)"] #[doc="# assert_eq!(SKULL.to_string().as_str(), \"💀\");"]
#[doc="```"]
pub static SKULL :  Emoji = Emoji::new("skull", "💀"); // skull
#[doc="skull and crossbones ☠️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKULL_AND_CROSSBONES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKULL_AND_CROSSBONES); // ☠️ (`U+2620 U+FE0F`)"] #[doc="# assert_eq!(SKULL_AND_CROSSBONES.to_string().as_str(), \"☠️\");"]
#[doc="```"]
pub static SKULL_AND_CROSSBONES :  Emoji = Emoji::new("skull and crossbones", "☠️"); // skull and crossbones
#[doc="smiling face with horns 😈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HORNS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HORNS); // 😈 (`U+1F608`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HORNS.to_string().as_str(), \"😈\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HORNS :  Emoji = Emoji::new("smiling face with horns", "😈"); // smiling face with horns
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANGRY_FACE, ],
&[&ANGRY_FACE_WITH_HORNS, ],
&[&FACE_WITH_STEAM_FROM_NOSE, ],
&[&FACE_WITH_SYMBOLS_ON_MOUTH, ],
&[&POUTING_FACE, ],
&[&SKULL, ],
&[&SKULL_AND_CROSSBONES, ],
&[&SMILING_FACE_WITH_HORNS, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANGRY_FACE, &ANGRY_FACE_WITH_HORNS, &FACE_WITH_STEAM_FROM_NOSE, &FACE_WITH_SYMBOLS_ON_MOUTH, &POUTING_FACE, &SKULL, &SKULL_AND_CROSSBONES, &SMILING_FACE_WITH_HORNS, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_negative

/// face-neutral-skeptical 😑😮‍💨😶‍🌫️
pub mod face_neutral_skeptical { // smileys_and_emotion::face_neutral_skeptical
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="expressionless face 😑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EXPRESSIONLESS_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EXPRESSIONLESS_FACE); // 😑 (`U+1F611`)"] #[doc="# assert_eq!(EXPRESSIONLESS_FACE.to_string().as_str(), \"😑\");"]
#[doc="```"]
pub static EXPRESSIONLESS_FACE :  Emoji = Emoji::new("expressionless face", "😑"); // expressionless face
#[doc="face exhaling 😮‍💨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_EXHALING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_EXHALING); // 😮‍💨 (`U+1F62E U+200D U+1F4A8`)"] #[doc="# assert_eq!(FACE_EXHALING.to_string().as_str(), \"😮‍💨\");"]
#[doc="```"]
pub static FACE_EXHALING :  Emoji = Emoji::new("face exhaling", "😮‍💨"); // face exhaling
#[doc="face in clouds 😶‍🌫️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_IN_CLOUDS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_IN_CLOUDS); // 😶‍🌫️ (`U+1F636 U+200D U+1F32B U+FE0F`)"] #[doc="# assert_eq!(FACE_IN_CLOUDS.to_string().as_str(), \"😶‍🌫️\");"]
#[doc="```"]
pub static FACE_IN_CLOUDS :  Emoji = Emoji::new("face in clouds", "😶‍🌫️"); // face in clouds
#[doc="face without mouth 😶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITHOUT_MOUTH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITHOUT_MOUTH); // 😶 (`U+1F636`)"] #[doc="# assert_eq!(FACE_WITHOUT_MOUTH.to_string().as_str(), \"😶\");"]
#[doc="```"]
pub static FACE_WITHOUT_MOUTH :  Emoji = Emoji::new("face without mouth", "😶"); // face without mouth
#[doc="face with raised eyebrow 🤨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_RAISED_EYEBROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_RAISED_EYEBROW); // 🤨 (`U+1F928`)"] #[doc="# assert_eq!(FACE_WITH_RAISED_EYEBROW.to_string().as_str(), \"🤨\");"]
#[doc="```"]
pub static FACE_WITH_RAISED_EYEBROW :  Emoji = Emoji::new("face with raised eyebrow", "🤨"); // face with raised eyebrow
#[doc="face with rolling eyes 🙄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_ROLLING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_ROLLING_EYES); // 🙄 (`U+1F644`)"] #[doc="# assert_eq!(FACE_WITH_ROLLING_EYES.to_string().as_str(), \"🙄\");"]
#[doc="```"]
pub static FACE_WITH_ROLLING_EYES :  Emoji = Emoji::new("face with rolling eyes", "🙄"); // face with rolling eyes
#[doc="grimacing face 😬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRIMACING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRIMACING_FACE); // 😬 (`U+1F62C`)"] #[doc="# assert_eq!(GRIMACING_FACE.to_string().as_str(), \"😬\");"]
#[doc="```"]
pub static GRIMACING_FACE :  Emoji = Emoji::new("grimacing face", "😬"); // grimacing face
#[doc="lying face 🤥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LYING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LYING_FACE); // 🤥 (`U+1F925`)"] #[doc="# assert_eq!(LYING_FACE.to_string().as_str(), \"🤥\");"]
#[doc="```"]
pub static LYING_FACE :  Emoji = Emoji::new("lying face", "🤥"); // lying face
#[doc="neutral face 😐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEUTRAL_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEUTRAL_FACE); // 😐 (`U+1F610`)"] #[doc="# assert_eq!(NEUTRAL_FACE.to_string().as_str(), \"😐\");"]
#[doc="```"]
pub static NEUTRAL_FACE :  Emoji = Emoji::new("neutral face", "😐"); // neutral face
#[doc="smirking face 😏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMIRKING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMIRKING_FACE); // 😏 (`U+1F60F`)"] #[doc="# assert_eq!(SMIRKING_FACE.to_string().as_str(), \"😏\");"]
#[doc="```"]
pub static SMIRKING_FACE :  Emoji = Emoji::new("smirking face", "😏"); // smirking face
#[doc="unamused face 😒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UNAMUSED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UNAMUSED_FACE); // 😒 (`U+1F612`)"] #[doc="# assert_eq!(UNAMUSED_FACE.to_string().as_str(), \"😒\");"]
#[doc="```"]
pub static UNAMUSED_FACE :  Emoji = Emoji::new("unamused face", "😒"); // unamused face
#[doc="zipper-mouth face 🤐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZIPPER_MOUTH_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZIPPER_MOUTH_FACE); // 🤐 (`U+1F910`)"] #[doc="# assert_eq!(ZIPPER_MOUTH_FACE.to_string().as_str(), \"🤐\");"]
#[doc="```"]
pub static ZIPPER_MOUTH_FACE :  Emoji = Emoji::new("zipper-mouth face", "🤐"); // zipper-mouth face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&EXPRESSIONLESS_FACE, ],
&[&FACE_EXHALING, ],
&[&FACE_IN_CLOUDS, ],
&[&FACE_WITHOUT_MOUTH, ],
&[&FACE_WITH_RAISED_EYEBROW, ],
&[&FACE_WITH_ROLLING_EYES, ],
&[&GRIMACING_FACE, ],
&[&LYING_FACE, ],
&[&NEUTRAL_FACE, ],
&[&SMIRKING_FACE, ],
&[&UNAMUSED_FACE, ],
&[&ZIPPER_MOUTH_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&EXPRESSIONLESS_FACE, &FACE_EXHALING, &FACE_IN_CLOUDS, &FACE_WITHOUT_MOUTH, &FACE_WITH_RAISED_EYEBROW, &FACE_WITH_ROLLING_EYES, &GRIMACING_FACE, &LYING_FACE, &NEUTRAL_FACE, &SMIRKING_FACE, &UNAMUSED_FACE, &ZIPPER_MOUTH_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_neutral_skeptical

/// face-sleepy 🤤😔😌
pub mod face_sleepy { // smileys_and_emotion::face_sleepy
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="drooling face 🤤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DROOLING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DROOLING_FACE); // 🤤 (`U+1F924`)"] #[doc="# assert_eq!(DROOLING_FACE.to_string().as_str(), \"🤤\");"]
#[doc="```"]
pub static DROOLING_FACE :  Emoji = Emoji::new("drooling face", "🤤"); // drooling face
#[doc="pensive face 😔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PENSIVE_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PENSIVE_FACE); // 😔 (`U+1F614`)"] #[doc="# assert_eq!(PENSIVE_FACE.to_string().as_str(), \"😔\");"]
#[doc="```"]
pub static PENSIVE_FACE :  Emoji = Emoji::new("pensive face", "😔"); // pensive face
#[doc="relieved face 😌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RELIEVED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RELIEVED_FACE); // 😌 (`U+1F60C`)"] #[doc="# assert_eq!(RELIEVED_FACE.to_string().as_str(), \"😌\");"]
#[doc="```"]
pub static RELIEVED_FACE :  Emoji = Emoji::new("relieved face", "😌"); // relieved face
#[doc="sleeping face 😴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLEEPING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLEEPING_FACE); // 😴 (`U+1F634`)"] #[doc="# assert_eq!(SLEEPING_FACE.to_string().as_str(), \"😴\");"]
#[doc="```"]
pub static SLEEPING_FACE :  Emoji = Emoji::new("sleeping face", "😴"); // sleeping face
#[doc="sleepy face 😪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLEEPY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLEEPY_FACE); // 😪 (`U+1F62A`)"] #[doc="# assert_eq!(SLEEPY_FACE.to_string().as_str(), \"😪\");"]
#[doc="```"]
pub static SLEEPY_FACE :  Emoji = Emoji::new("sleepy face", "😪"); // sleepy face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&DROOLING_FACE, ],
&[&PENSIVE_FACE, ],
&[&RELIEVED_FACE, ],
&[&SLEEPING_FACE, ],
&[&SLEEPY_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&DROOLING_FACE, &PENSIVE_FACE, &RELIEVED_FACE, &SLEEPING_FACE, &SLEEPY_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_sleepy

/// face-smiling 😁😂😀
pub mod face_smiling { // smileys_and_emotion::face_smiling
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="beaming face with smiling eyes 😁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEAMING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEAMING_FACE_WITH_SMILING_EYES); // 😁 (`U+1F601`)"] #[doc="# assert_eq!(BEAMING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"😁\");"]
#[doc="```"]
pub static BEAMING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("beaming face with smiling eyes", "😁"); // beaming face with smiling eyes
#[doc="face with tears of joy 😂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_TEARS_OF_JOY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_TEARS_OF_JOY); // 😂 (`U+1F602`)"] #[doc="# assert_eq!(FACE_WITH_TEARS_OF_JOY.to_string().as_str(), \"😂\");"]
#[doc="```"]
pub static FACE_WITH_TEARS_OF_JOY :  Emoji = Emoji::new("face with tears of joy", "😂"); // face with tears of joy
#[doc="grinning face 😀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE); // 😀 (`U+1F600`)"] #[doc="# assert_eq!(GRINNING_FACE.to_string().as_str(), \"😀\");"]
#[doc="```"]
pub static GRINNING_FACE :  Emoji = Emoji::new("grinning face", "😀"); // grinning face
#[doc="grinning face with big eyes 😃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE_WITH_BIG_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE_WITH_BIG_EYES); // 😃 (`U+1F603`)"] #[doc="# assert_eq!(GRINNING_FACE_WITH_BIG_EYES.to_string().as_str(), \"😃\");"]
#[doc="```"]
pub static GRINNING_FACE_WITH_BIG_EYES :  Emoji = Emoji::new("grinning face with big eyes", "😃"); // grinning face with big eyes
#[doc="grinning face with smiling eyes 😄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE_WITH_SMILING_EYES); // 😄 (`U+1F604`)"] #[doc="# assert_eq!(GRINNING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"😄\");"]
#[doc="```"]
pub static GRINNING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("grinning face with smiling eyes", "😄"); // grinning face with smiling eyes
#[doc="grinning face with sweat 😅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_FACE_WITH_SWEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_FACE_WITH_SWEAT); // 😅 (`U+1F605`)"] #[doc="# assert_eq!(GRINNING_FACE_WITH_SWEAT.to_string().as_str(), \"😅\");"]
#[doc="```"]
pub static GRINNING_FACE_WITH_SWEAT :  Emoji = Emoji::new("grinning face with sweat", "😅"); // grinning face with sweat
#[doc="grinning squinting face 😆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GRINNING_SQUINTING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GRINNING_SQUINTING_FACE); // 😆 (`U+1F606`)"] #[doc="# assert_eq!(GRINNING_SQUINTING_FACE.to_string().as_str(), \"😆\");"]
#[doc="```"]
pub static GRINNING_SQUINTING_FACE :  Emoji = Emoji::new("grinning squinting face", "😆"); // grinning squinting face
#[doc="rolling on the floor laughing 🤣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLING_ON_THE_FLOOR_LAUGHING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLING_ON_THE_FLOOR_LAUGHING); // 🤣 (`U+1F923`)"] #[doc="# assert_eq!(ROLLING_ON_THE_FLOOR_LAUGHING.to_string().as_str(), \"🤣\");"]
#[doc="```"]
pub static ROLLING_ON_THE_FLOOR_LAUGHING :  Emoji = Emoji::new("rolling on the floor laughing", "🤣"); // rolling on the floor laughing
#[doc="slightly smiling face 🙂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SLIGHTLY_SMILING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SLIGHTLY_SMILING_FACE); // 🙂 (`U+1F642`)"] #[doc="# assert_eq!(SLIGHTLY_SMILING_FACE.to_string().as_str(), \"🙂\");"]
#[doc="```"]
pub static SLIGHTLY_SMILING_FACE :  Emoji = Emoji::new("slightly smiling face", "🙂"); // slightly smiling face
#[doc="smiling face with halo 😇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_HALO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_HALO); // 😇 (`U+1F607`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_HALO.to_string().as_str(), \"😇\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_HALO :  Emoji = Emoji::new("smiling face with halo", "😇"); // smiling face with halo
#[doc="smiling face with smiling eyes 😊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMILING_FACE_WITH_SMILING_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMILING_FACE_WITH_SMILING_EYES); // 😊 (`U+1F60A`)"] #[doc="# assert_eq!(SMILING_FACE_WITH_SMILING_EYES.to_string().as_str(), \"😊\");"]
#[doc="```"]
pub static SMILING_FACE_WITH_SMILING_EYES :  Emoji = Emoji::new("smiling face with smiling eyes", "😊"); // smiling face with smiling eyes
#[doc="upside-down face 🙃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UPSIDE_DOWN_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UPSIDE_DOWN_FACE); // 🙃 (`U+1F643`)"] #[doc="# assert_eq!(UPSIDE_DOWN_FACE.to_string().as_str(), \"🙃\");"]
#[doc="```"]
pub static UPSIDE_DOWN_FACE :  Emoji = Emoji::new("upside-down face", "🙃"); // upside-down face
#[doc="winking face 😉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINKING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINKING_FACE); // 😉 (`U+1F609`)"] #[doc="# assert_eq!(WINKING_FACE.to_string().as_str(), \"😉\");"]
#[doc="```"]
pub static WINKING_FACE :  Emoji = Emoji::new("winking face", "😉"); // winking face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BEAMING_FACE_WITH_SMILING_EYES, ],
&[&FACE_WITH_TEARS_OF_JOY, ],
&[&GRINNING_FACE, ],
&[&GRINNING_FACE_WITH_BIG_EYES, ],
&[&GRINNING_FACE_WITH_SMILING_EYES, ],
&[&GRINNING_FACE_WITH_SWEAT, ],
&[&GRINNING_SQUINTING_FACE, ],
&[&ROLLING_ON_THE_FLOOR_LAUGHING, ],
&[&SLIGHTLY_SMILING_FACE, ],
&[&SMILING_FACE_WITH_HALO, ],
&[&SMILING_FACE_WITH_SMILING_EYES, ],
&[&UPSIDE_DOWN_FACE, ],
&[&WINKING_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BEAMING_FACE_WITH_SMILING_EYES, &FACE_WITH_TEARS_OF_JOY, &GRINNING_FACE, &GRINNING_FACE_WITH_BIG_EYES, &GRINNING_FACE_WITH_SMILING_EYES, &GRINNING_FACE_WITH_SWEAT, &GRINNING_SQUINTING_FACE, &ROLLING_ON_THE_FLOOR_LAUGHING, &SLIGHTLY_SMILING_FACE, &SMILING_FACE_WITH_HALO, &SMILING_FACE_WITH_SMILING_EYES, &UPSIDE_DOWN_FACE, &WINKING_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_smiling

/// face-tongue 😋😛🤑
pub mod face_tongue { // smileys_and_emotion::face_tongue
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="face savoring food 😋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_SAVORING_FOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_SAVORING_FOOD); // 😋 (`U+1F60B`)"] #[doc="# assert_eq!(FACE_SAVORING_FOOD.to_string().as_str(), \"😋\");"]
#[doc="```"]
pub static FACE_SAVORING_FOOD :  Emoji = Emoji::new("face savoring food", "😋"); // face savoring food
#[doc="face with tongue 😛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_TONGUE); // 😛 (`U+1F61B`)"] #[doc="# assert_eq!(FACE_WITH_TONGUE.to_string().as_str(), \"😛\");"]
#[doc="```"]
pub static FACE_WITH_TONGUE :  Emoji = Emoji::new("face with tongue", "😛"); // face with tongue
#[doc="money-mouth face 🤑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONEY_MOUTH_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONEY_MOUTH_FACE); // 🤑 (`U+1F911`)"] #[doc="# assert_eq!(MONEY_MOUTH_FACE.to_string().as_str(), \"🤑\");"]
#[doc="```"]
pub static MONEY_MOUTH_FACE :  Emoji = Emoji::new("money-mouth face", "🤑"); // money-mouth face
#[doc="squinting face with tongue 😝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SQUINTING_FACE_WITH_TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SQUINTING_FACE_WITH_TONGUE); // 😝 (`U+1F61D`)"] #[doc="# assert_eq!(SQUINTING_FACE_WITH_TONGUE.to_string().as_str(), \"😝\");"]
#[doc="```"]
pub static SQUINTING_FACE_WITH_TONGUE :  Emoji = Emoji::new("squinting face with tongue", "😝"); // squinting face with tongue
#[doc="winking face with tongue 😜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WINKING_FACE_WITH_TONGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WINKING_FACE_WITH_TONGUE); // 😜 (`U+1F61C`)"] #[doc="# assert_eq!(WINKING_FACE_WITH_TONGUE.to_string().as_str(), \"😜\");"]
#[doc="```"]
pub static WINKING_FACE_WITH_TONGUE :  Emoji = Emoji::new("winking face with tongue", "😜"); // winking face with tongue
#[doc="zany face 🤪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ZANY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ZANY_FACE); // 🤪 (`U+1F92A`)"] #[doc="# assert_eq!(ZANY_FACE.to_string().as_str(), \"🤪\");"]
#[doc="```"]
pub static ZANY_FACE :  Emoji = Emoji::new("zany face", "🤪"); // zany face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FACE_SAVORING_FOOD, ],
&[&FACE_WITH_TONGUE, ],
&[&MONEY_MOUTH_FACE, ],
&[&SQUINTING_FACE_WITH_TONGUE, ],
&[&WINKING_FACE_WITH_TONGUE, ],
&[&ZANY_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FACE_SAVORING_FOOD, &FACE_WITH_TONGUE, &MONEY_MOUTH_FACE, &SQUINTING_FACE_WITH_TONGUE, &WINKING_FACE_WITH_TONGUE, &ZANY_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_tongue

/// face-unwell 🥶🤯🤮
pub mod face_unwell { // smileys_and_emotion::face_unwell
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="cold face 🥶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COLD_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COLD_FACE); // 🥶 (`U+1F976`)"] #[doc="# assert_eq!(COLD_FACE.to_string().as_str(), \"🥶\");"]
#[doc="```"]
pub static COLD_FACE :  Emoji = Emoji::new("cold face", "🥶"); // cold face
#[doc="exploding head 🤯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EXPLODING_HEAD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EXPLODING_HEAD); // 🤯 (`U+1F92F`)"] #[doc="# assert_eq!(EXPLODING_HEAD.to_string().as_str(), \"🤯\");"]
#[doc="```"]
pub static EXPLODING_HEAD :  Emoji = Emoji::new("exploding head", "🤯"); // exploding head
#[doc="face vomiting 🤮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_VOMITING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_VOMITING); // 🤮 (`U+1F92E`)"] #[doc="# assert_eq!(FACE_VOMITING.to_string().as_str(), \"🤮\");"]
#[doc="```"]
pub static FACE_VOMITING :  Emoji = Emoji::new("face vomiting", "🤮"); // face vomiting
#[doc="face with head-bandage 🤕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_HEAD_BANDAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_HEAD_BANDAGE); // 🤕 (`U+1F915`)"] #[doc="# assert_eq!(FACE_WITH_HEAD_BANDAGE.to_string().as_str(), \"🤕\");"]
#[doc="```"]
pub static FACE_WITH_HEAD_BANDAGE :  Emoji = Emoji::new("face with head-bandage", "🤕"); // face with head-bandage
#[doc="face with medical mask 😷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_MEDICAL_MASK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_MEDICAL_MASK); // 😷 (`U+1F637`)"] #[doc="# assert_eq!(FACE_WITH_MEDICAL_MASK.to_string().as_str(), \"😷\");"]
#[doc="```"]
pub static FACE_WITH_MEDICAL_MASK :  Emoji = Emoji::new("face with medical mask", "😷"); // face with medical mask
#[doc="face with spiral eyes 😵‍💫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_SPIRAL_EYES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_SPIRAL_EYES); // 😵‍💫 (`U+1F635 U+200D U+1F4AB`)"] #[doc="# assert_eq!(FACE_WITH_SPIRAL_EYES.to_string().as_str(), \"😵‍💫\");"]
#[doc="```"]
pub static FACE_WITH_SPIRAL_EYES :  Emoji = Emoji::new("face with spiral eyes", "😵‍💫"); // face with spiral eyes
#[doc="face with thermometer 🤒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACE_WITH_THERMOMETER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACE_WITH_THERMOMETER); // 🤒 (`U+1F912`)"] #[doc="# assert_eq!(FACE_WITH_THERMOMETER.to_string().as_str(), \"🤒\");"]
#[doc="```"]
pub static FACE_WITH_THERMOMETER :  Emoji = Emoji::new("face with thermometer", "🤒"); // face with thermometer
#[doc="hot face 🥵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_FACE); // 🥵 (`U+1F975`)"] #[doc="# assert_eq!(HOT_FACE.to_string().as_str(), \"🥵\");"]
#[doc="```"]
pub static HOT_FACE :  Emoji = Emoji::new("hot face", "🥵"); // hot face
#[doc="knocked-out face 😵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KNOCKED_OUT_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KNOCKED_OUT_FACE); // 😵 (`U+1F635`)"] #[doc="# assert_eq!(KNOCKED_OUT_FACE.to_string().as_str(), \"😵\");"]
#[doc="```"]
pub static KNOCKED_OUT_FACE :  Emoji = Emoji::new("knocked-out face", "😵"); // knocked-out face
#[doc="nauseated face 🤢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAUSEATED_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAUSEATED_FACE); // 🤢 (`U+1F922`)"] #[doc="# assert_eq!(NAUSEATED_FACE.to_string().as_str(), \"🤢\");"]
#[doc="```"]
pub static NAUSEATED_FACE :  Emoji = Emoji::new("nauseated face", "🤢"); // nauseated face
#[doc="sneezing face 🤧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNEEZING_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNEEZING_FACE); // 🤧 (`U+1F927`)"] #[doc="# assert_eq!(SNEEZING_FACE.to_string().as_str(), \"🤧\");"]
#[doc="```"]
pub static SNEEZING_FACE :  Emoji = Emoji::new("sneezing face", "🤧"); // sneezing face
#[doc="woozy face 🥴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOOZY_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOOZY_FACE); // 🥴 (`U+1F974`)"] #[doc="# assert_eq!(WOOZY_FACE.to_string().as_str(), \"🥴\");"]
#[doc="```"]
pub static WOOZY_FACE :  Emoji = Emoji::new("woozy face", "🥴"); // woozy face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&COLD_FACE, ],
&[&EXPLODING_HEAD, ],
&[&FACE_VOMITING, ],
&[&FACE_WITH_HEAD_BANDAGE, ],
&[&FACE_WITH_MEDICAL_MASK, ],
&[&FACE_WITH_SPIRAL_EYES, ],
&[&FACE_WITH_THERMOMETER, ],
&[&HOT_FACE, ],
&[&KNOCKED_OUT_FACE, ],
&[&NAUSEATED_FACE, ],
&[&SNEEZING_FACE, ],
&[&WOOZY_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&COLD_FACE, &EXPLODING_HEAD, &FACE_VOMITING, &FACE_WITH_HEAD_BANDAGE, &FACE_WITH_MEDICAL_MASK, &FACE_WITH_SPIRAL_EYES, &FACE_WITH_THERMOMETER, &HOT_FACE, &KNOCKED_OUT_FACE, &NAUSEATED_FACE, &SNEEZING_FACE, &WOOZY_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::face_unwell

/// monkey-face 🙉🙈🙊
pub mod monkey_face { // smileys_and_emotion::monkey_face
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="hear-no-evil monkey 🙉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEAR_NO_EVIL_MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEAR_NO_EVIL_MONKEY); // 🙉 (`U+1F649`)"] #[doc="# assert_eq!(HEAR_NO_EVIL_MONKEY.to_string().as_str(), \"🙉\");"]
#[doc="```"]
pub static HEAR_NO_EVIL_MONKEY :  Emoji = Emoji::new("hear-no-evil monkey", "🙉"); // hear-no-evil monkey
#[doc="see-no-evil monkey 🙈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEE_NO_EVIL_MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEE_NO_EVIL_MONKEY); // 🙈 (`U+1F648`)"] #[doc="# assert_eq!(SEE_NO_EVIL_MONKEY.to_string().as_str(), \"🙈\");"]
#[doc="```"]
pub static SEE_NO_EVIL_MONKEY :  Emoji = Emoji::new("see-no-evil monkey", "🙈"); // see-no-evil monkey
#[doc="speak-no-evil monkey 🙊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEAK_NO_EVIL_MONKEY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEAK_NO_EVIL_MONKEY); // 🙊 (`U+1F64A`)"] #[doc="# assert_eq!(SPEAK_NO_EVIL_MONKEY.to_string().as_str(), \"🙊\");"]
#[doc="```"]
pub static SPEAK_NO_EVIL_MONKEY :  Emoji = Emoji::new("speak-no-evil monkey", "🙊"); // speak-no-evil monkey
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&HEAR_NO_EVIL_MONKEY, ],
&[&SEE_NO_EVIL_MONKEY, ],
&[&SPEAK_NO_EVIL_MONKEY, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&HEAR_NO_EVIL_MONKEY, &SEE_NO_EVIL_MONKEY, &SPEAK_NO_EVIL_MONKEY, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // smileys_and_emotion::monkey_face
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(cat_face::all_variants())
		.chain(emotion::all_variants())
		.chain(face_affection::all_variants())
		.chain(face_concerned::all_variants())
		.chain(face_costume::all_variants())
		.chain(face_glasses::all_variants())
		.chain(face_hand::all_variants())
		.chain(face_hat::all_variants())
		.chain(face_negative::all_variants())
		.chain(face_neutral_skeptical::all_variants())
		.chain(face_sleepy::all_variants())
		.chain(face_smiling::all_variants())
		.chain(face_tongue::all_variants())
		.chain(face_unwell::all_variants())
		.chain(monkey_face::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(cat_face::base_emojis())
		.chain(emotion::base_emojis())
		.chain(face_affection::base_emojis())
		.chain(face_concerned::base_emojis())
		.chain(face_costume::base_emojis())
		.chain(face_glasses::base_emojis())
		.chain(face_hand::base_emojis())
		.chain(face_hat::base_emojis())
		.chain(face_negative::base_emojis())
		.chain(face_neutral_skeptical::base_emojis())
		.chain(face_sleepy::base_emojis())
		.chain(face_smiling::base_emojis())
		.chain(face_tongue::base_emojis())
		.chain(face_unwell::base_emojis())
		.chain(monkey_face::base_emojis())
}
} // smileys_and_emotion

/// Symbols 🆎🔙📶
pub mod symbols {

/// alphanum 🆎🅰️🅱️
pub mod alphanum { // symbols::alphanum
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="AB button (blood type) 🆎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AB_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AB_BUTTON_BLOOD_TYPE); // 🆎 (`U+1F18E`)"] #[doc="# assert_eq!(AB_BUTTON_BLOOD_TYPE.to_string().as_str(), \"🆎\");"]
#[doc="```"]
pub static AB_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("AB button (blood type)", "🆎"); // AB button (blood type)
#[doc="A button (blood type) 🅰️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::A_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", A_BUTTON_BLOOD_TYPE); // 🅰️ (`U+1F170 U+FE0F`)"] #[doc="# assert_eq!(A_BUTTON_BLOOD_TYPE.to_string().as_str(), \"🅰️\");"]
#[doc="```"]
pub static A_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("A button (blood type)", "🅰️"); // A button (blood type)
#[doc="B button (blood type) 🅱️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::B_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", B_BUTTON_BLOOD_TYPE); // 🅱️ (`U+1F171 U+FE0F`)"] #[doc="# assert_eq!(B_BUTTON_BLOOD_TYPE.to_string().as_str(), \"🅱️\");"]
#[doc="```"]
pub static B_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("B button (blood type)", "🅱️"); // B button (blood type)
#[doc="circled M Ⓜ️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CIRCLED_M;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CIRCLED_M); // Ⓜ️ (`U+24C2 U+FE0F`)"] #[doc="# assert_eq!(CIRCLED_M.to_string().as_str(), \"Ⓜ️\");"]
#[doc="```"]
pub static CIRCLED_M :  Emoji = Emoji::new("circled M", "Ⓜ️"); // circled M
#[doc="CL button 🆑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CL_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CL_BUTTON); // 🆑 (`U+1F191`)"] #[doc="# assert_eq!(CL_BUTTON.to_string().as_str(), \"🆑\");"]
#[doc="```"]
pub static CL_BUTTON :  Emoji = Emoji::new("CL button", "🆑"); // CL button
#[doc="COOL button 🆒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COOL_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COOL_BUTTON); // 🆒 (`U+1F192`)"] #[doc="# assert_eq!(COOL_BUTTON.to_string().as_str(), \"🆒\");"]
#[doc="```"]
pub static COOL_BUTTON :  Emoji = Emoji::new("COOL button", "🆒"); // COOL button
#[doc="FREE button 🆓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FREE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FREE_BUTTON); // 🆓 (`U+1F193`)"] #[doc="# assert_eq!(FREE_BUTTON.to_string().as_str(), \"🆓\");"]
#[doc="```"]
pub static FREE_BUTTON :  Emoji = Emoji::new("FREE button", "🆓"); // FREE button
#[doc="ID button 🆔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ID_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ID_BUTTON); // 🆔 (`U+1F194`)"] #[doc="# assert_eq!(ID_BUTTON.to_string().as_str(), \"🆔\");"]
#[doc="```"]
pub static ID_BUTTON :  Emoji = Emoji::new("ID button", "🆔"); // ID button
#[doc="information ℹ️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INFORMATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INFORMATION); // ℹ️ (`U+2139 U+FE0F`)"] #[doc="# assert_eq!(INFORMATION.to_string().as_str(), \"ℹ️\");"]
#[doc="```"]
pub static INFORMATION :  Emoji = Emoji::new("information", "ℹ️"); // information
#[doc="input latin letters 🔤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_LATIN_LETTERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_LATIN_LETTERS); // 🔤 (`U+1F524`)"] #[doc="# assert_eq!(INPUT_LATIN_LETTERS.to_string().as_str(), \"🔤\");"]
#[doc="```"]
pub static INPUT_LATIN_LETTERS :  Emoji = Emoji::new("input latin letters", "🔤"); // input latin letters
#[doc="input latin lowercase 🔡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_LATIN_LOWERCASE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_LATIN_LOWERCASE); // 🔡 (`U+1F521`)"] #[doc="# assert_eq!(INPUT_LATIN_LOWERCASE.to_string().as_str(), \"🔡\");"]
#[doc="```"]
pub static INPUT_LATIN_LOWERCASE :  Emoji = Emoji::new("input latin lowercase", "🔡"); // input latin lowercase
#[doc="input latin uppercase 🔠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_LATIN_UPPERCASE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_LATIN_UPPERCASE); // 🔠 (`U+1F520`)"] #[doc="# assert_eq!(INPUT_LATIN_UPPERCASE.to_string().as_str(), \"🔠\");"]
#[doc="```"]
pub static INPUT_LATIN_UPPERCASE :  Emoji = Emoji::new("input latin uppercase", "🔠"); // input latin uppercase
#[doc="input numbers 🔢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_NUMBERS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_NUMBERS); // 🔢 (`U+1F522`)"] #[doc="# assert_eq!(INPUT_NUMBERS.to_string().as_str(), \"🔢\");"]
#[doc="```"]
pub static INPUT_NUMBERS :  Emoji = Emoji::new("input numbers", "🔢"); // input numbers
#[doc="input symbols 🔣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INPUT_SYMBOLS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INPUT_SYMBOLS); // 🔣 (`U+1F523`)"] #[doc="# assert_eq!(INPUT_SYMBOLS.to_string().as_str(), \"🔣\");"]
#[doc="```"]
pub static INPUT_SYMBOLS :  Emoji = Emoji::new("input symbols", "🔣"); // input symbols
#[doc="Japanese “acceptable” button 🉑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_ACCEPTABLE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_ACCEPTABLE_BUTTON); // 🉑 (`U+1F251`)"] #[doc="# assert_eq!(JAPANESE_ACCEPTABLE_BUTTON.to_string().as_str(), \"🉑\");"]
#[doc="```"]
pub static JAPANESE_ACCEPTABLE_BUTTON :  Emoji = Emoji::new("Japanese “acceptable” button", "🉑"); // Japanese “acceptable” button
#[doc="Japanese “application” button 🈸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_APPLICATION_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_APPLICATION_BUTTON); // 🈸 (`U+1F238`)"] #[doc="# assert_eq!(JAPANESE_APPLICATION_BUTTON.to_string().as_str(), \"🈸\");"]
#[doc="```"]
pub static JAPANESE_APPLICATION_BUTTON :  Emoji = Emoji::new("Japanese “application” button", "🈸"); // Japanese “application” button
#[doc="Japanese “bargain” button 🉐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_BARGAIN_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_BARGAIN_BUTTON); // 🉐 (`U+1F250`)"] #[doc="# assert_eq!(JAPANESE_BARGAIN_BUTTON.to_string().as_str(), \"🉐\");"]
#[doc="```"]
pub static JAPANESE_BARGAIN_BUTTON :  Emoji = Emoji::new("Japanese “bargain” button", "🉐"); // Japanese “bargain” button
#[doc="Japanese “congratulations” button ㊗️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_CONGRATULATIONS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_CONGRATULATIONS_BUTTON); // ㊗️ (`U+3297 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_CONGRATULATIONS_BUTTON.to_string().as_str(), \"㊗️\");"]
#[doc="```"]
pub static JAPANESE_CONGRATULATIONS_BUTTON :  Emoji = Emoji::new("Japanese “congratulations” button", "㊗️"); // Japanese “congratulations” button
#[doc="Japanese “discount” button 🈹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_DISCOUNT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_DISCOUNT_BUTTON); // 🈹 (`U+1F239`)"] #[doc="# assert_eq!(JAPANESE_DISCOUNT_BUTTON.to_string().as_str(), \"🈹\");"]
#[doc="```"]
pub static JAPANESE_DISCOUNT_BUTTON :  Emoji = Emoji::new("Japanese “discount” button", "🈹"); // Japanese “discount” button
#[doc="Japanese “free of charge” button 🈚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_FREE_OF_CHARGE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_FREE_OF_CHARGE_BUTTON); // 🈚 (`U+1F21A`)"] #[doc="# assert_eq!(JAPANESE_FREE_OF_CHARGE_BUTTON.to_string().as_str(), \"🈚\");"]
#[doc="```"]
pub static JAPANESE_FREE_OF_CHARGE_BUTTON :  Emoji = Emoji::new("Japanese “free of charge” button", "🈚"); // Japanese “free of charge” button
#[doc="Japanese “here” button 🈁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_HERE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_HERE_BUTTON); // 🈁 (`U+1F201`)"] #[doc="# assert_eq!(JAPANESE_HERE_BUTTON.to_string().as_str(), \"🈁\");"]
#[doc="```"]
pub static JAPANESE_HERE_BUTTON :  Emoji = Emoji::new("Japanese “here” button", "🈁"); // Japanese “here” button
#[doc="Japanese “monthly amount” button 🈷️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_MONTHLY_AMOUNT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_MONTHLY_AMOUNT_BUTTON); // 🈷️ (`U+1F237 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_MONTHLY_AMOUNT_BUTTON.to_string().as_str(), \"🈷️\");"]
#[doc="```"]
pub static JAPANESE_MONTHLY_AMOUNT_BUTTON :  Emoji = Emoji::new("Japanese “monthly amount” button", "🈷️"); // Japanese “monthly amount” button
#[doc="Japanese “not free of charge” button 🈶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_NOT_FREE_OF_CHARGE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_NOT_FREE_OF_CHARGE_BUTTON); // 🈶 (`U+1F236`)"] #[doc="# assert_eq!(JAPANESE_NOT_FREE_OF_CHARGE_BUTTON.to_string().as_str(), \"🈶\");"]
#[doc="```"]
pub static JAPANESE_NOT_FREE_OF_CHARGE_BUTTON :  Emoji = Emoji::new("Japanese “not free of charge” button", "🈶"); // Japanese “not free of charge” button
#[doc="Japanese “no vacancy” button 🈵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_NO_VACANCY_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_NO_VACANCY_BUTTON); // 🈵 (`U+1F235`)"] #[doc="# assert_eq!(JAPANESE_NO_VACANCY_BUTTON.to_string().as_str(), \"🈵\");"]
#[doc="```"]
pub static JAPANESE_NO_VACANCY_BUTTON :  Emoji = Emoji::new("Japanese “no vacancy” button", "🈵"); // Japanese “no vacancy” button
#[doc="Japanese “open for business” button 🈺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_OPEN_FOR_BUSINESS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_OPEN_FOR_BUSINESS_BUTTON); // 🈺 (`U+1F23A`)"] #[doc="# assert_eq!(JAPANESE_OPEN_FOR_BUSINESS_BUTTON.to_string().as_str(), \"🈺\");"]
#[doc="```"]
pub static JAPANESE_OPEN_FOR_BUSINESS_BUTTON :  Emoji = Emoji::new("Japanese “open for business” button", "🈺"); // Japanese “open for business” button
#[doc="Japanese “passing grade” button 🈴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_PASSING_GRADE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_PASSING_GRADE_BUTTON); // 🈴 (`U+1F234`)"] #[doc="# assert_eq!(JAPANESE_PASSING_GRADE_BUTTON.to_string().as_str(), \"🈴\");"]
#[doc="```"]
pub static JAPANESE_PASSING_GRADE_BUTTON :  Emoji = Emoji::new("Japanese “passing grade” button", "🈴"); // Japanese “passing grade” button
#[doc="Japanese “prohibited” button 🈲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_PROHIBITED_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_PROHIBITED_BUTTON); // 🈲 (`U+1F232`)"] #[doc="# assert_eq!(JAPANESE_PROHIBITED_BUTTON.to_string().as_str(), \"🈲\");"]
#[doc="```"]
pub static JAPANESE_PROHIBITED_BUTTON :  Emoji = Emoji::new("Japanese “prohibited” button", "🈲"); // Japanese “prohibited” button
#[doc="Japanese “reserved” button 🈯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_RESERVED_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_RESERVED_BUTTON); // 🈯 (`U+1F22F`)"] #[doc="# assert_eq!(JAPANESE_RESERVED_BUTTON.to_string().as_str(), \"🈯\");"]
#[doc="```"]
pub static JAPANESE_RESERVED_BUTTON :  Emoji = Emoji::new("Japanese “reserved” button", "🈯"); // Japanese “reserved” button
#[doc="Japanese “secret” button ㊙️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_SECRET_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_SECRET_BUTTON); // ㊙️ (`U+3299 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_SECRET_BUTTON.to_string().as_str(), \"㊙️\");"]
#[doc="```"]
pub static JAPANESE_SECRET_BUTTON :  Emoji = Emoji::new("Japanese “secret” button", "㊙️"); // Japanese “secret” button
#[doc="Japanese “service charge” button 🈂️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_SERVICE_CHARGE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_SERVICE_CHARGE_BUTTON); // 🈂️ (`U+1F202 U+FE0F`)"] #[doc="# assert_eq!(JAPANESE_SERVICE_CHARGE_BUTTON.to_string().as_str(), \"🈂️\");"]
#[doc="```"]
pub static JAPANESE_SERVICE_CHARGE_BUTTON :  Emoji = Emoji::new("Japanese “service charge” button", "🈂️"); // Japanese “service charge” button
#[doc="Japanese “vacancy” button 🈳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_VACANCY_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_VACANCY_BUTTON); // 🈳 (`U+1F233`)"] #[doc="# assert_eq!(JAPANESE_VACANCY_BUTTON.to_string().as_str(), \"🈳\");"]
#[doc="```"]
pub static JAPANESE_VACANCY_BUTTON :  Emoji = Emoji::new("Japanese “vacancy” button", "🈳"); // Japanese “vacancy” button
#[doc="NEW button 🆕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEW_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEW_BUTTON); // 🆕 (`U+1F195`)"] #[doc="# assert_eq!(NEW_BUTTON.to_string().as_str(), \"🆕\");"]
#[doc="```"]
pub static NEW_BUTTON :  Emoji = Emoji::new("NEW button", "🆕"); // NEW button
#[doc="NG button 🆖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NG_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NG_BUTTON); // 🆖 (`U+1F196`)"] #[doc="# assert_eq!(NG_BUTTON.to_string().as_str(), \"🆖\");"]
#[doc="```"]
pub static NG_BUTTON :  Emoji = Emoji::new("NG button", "🆖"); // NG button
#[doc="OK button 🆗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OK_BUTTON); // 🆗 (`U+1F197`)"] #[doc="# assert_eq!(OK_BUTTON.to_string().as_str(), \"🆗\");"]
#[doc="```"]
pub static OK_BUTTON :  Emoji = Emoji::new("OK button", "🆗"); // OK button
#[doc="O button (blood type) 🅾️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::O_BUTTON_BLOOD_TYPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", O_BUTTON_BLOOD_TYPE); // 🅾️ (`U+1F17E U+FE0F`)"] #[doc="# assert_eq!(O_BUTTON_BLOOD_TYPE.to_string().as_str(), \"🅾️\");"]
#[doc="```"]
pub static O_BUTTON_BLOOD_TYPE :  Emoji = Emoji::new("O button (blood type)", "🅾️"); // O button (blood type)
#[doc="P button 🅿️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::P_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", P_BUTTON); // 🅿️ (`U+1F17F U+FE0F`)"] #[doc="# assert_eq!(P_BUTTON.to_string().as_str(), \"🅿️\");"]
#[doc="```"]
pub static P_BUTTON :  Emoji = Emoji::new("P button", "🅿️"); // P button
#[doc="SOS button 🆘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOS_BUTTON); // 🆘 (`U+1F198`)"] #[doc="# assert_eq!(SOS_BUTTON.to_string().as_str(), \"🆘\");"]
#[doc="```"]
pub static SOS_BUTTON :  Emoji = Emoji::new("SOS button", "🆘"); // SOS button
#[doc="UP! button 🆙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_BUTTON); // 🆙 (`U+1F199`)"] #[doc="# assert_eq!(UP_BUTTON.to_string().as_str(), \"🆙\");"]
#[doc="```"]
pub static UP_BUTTON :  Emoji = Emoji::new("UP! button", "🆙"); // UP! button
#[doc="VS button 🆚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VS_BUTTON); // 🆚 (`U+1F19A`)"] #[doc="# assert_eq!(VS_BUTTON.to_string().as_str(), \"🆚\");"]
#[doc="```"]
pub static VS_BUTTON :  Emoji = Emoji::new("VS button", "🆚"); // VS button
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AB_BUTTON_BLOOD_TYPE, ],
&[&A_BUTTON_BLOOD_TYPE, ],
&[&B_BUTTON_BLOOD_TYPE, ],
&[&CIRCLED_M, ],
&[&CL_BUTTON, ],
&[&COOL_BUTTON, ],
&[&FREE_BUTTON, ],
&[&ID_BUTTON, ],
&[&INFORMATION, ],
&[&INPUT_LATIN_LETTERS, ],
&[&INPUT_LATIN_LOWERCASE, ],
&[&INPUT_LATIN_UPPERCASE, ],
&[&INPUT_NUMBERS, ],
&[&INPUT_SYMBOLS, ],
&[&JAPANESE_ACCEPTABLE_BUTTON, ],
&[&JAPANESE_APPLICATION_BUTTON, ],
&[&JAPANESE_BARGAIN_BUTTON, ],
&[&JAPANESE_CONGRATULATIONS_BUTTON, ],
&[&JAPANESE_DISCOUNT_BUTTON, ],
&[&JAPANESE_FREE_OF_CHARGE_BUTTON, ],
&[&JAPANESE_HERE_BUTTON, ],
&[&JAPANESE_MONTHLY_AMOUNT_BUTTON, ],
&[&JAPANESE_NOT_FREE_OF_CHARGE_BUTTON, ],
&[&JAPANESE_NO_VACANCY_BUTTON, ],
&[&JAPANESE_OPEN_FOR_BUSINESS_BUTTON, ],
&[&JAPANESE_PASSING_GRADE_BUTTON, ],
&[&JAPANESE_PROHIBITED_BUTTON, ],
&[&JAPANESE_RESERVED_BUTTON, ],
&[&JAPANESE_SECRET_BUTTON, ],
&[&JAPANESE_SERVICE_CHARGE_BUTTON, ],
&[&JAPANESE_VACANCY_BUTTON, ],
&[&NEW_BUTTON, ],
&[&NG_BUTTON, ],
&[&OK_BUTTON, ],
&[&O_BUTTON_BLOOD_TYPE, ],
&[&P_BUTTON, ],
&[&SOS_BUTTON, ],
&[&UP_BUTTON, ],
&[&VS_BUTTON, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AB_BUTTON_BLOOD_TYPE, &A_BUTTON_BLOOD_TYPE, &B_BUTTON_BLOOD_TYPE, &CIRCLED_M, &CL_BUTTON, &COOL_BUTTON, &FREE_BUTTON, &ID_BUTTON, &INFORMATION, &INPUT_LATIN_LETTERS, &INPUT_LATIN_LOWERCASE, &INPUT_LATIN_UPPERCASE, &INPUT_NUMBERS, &INPUT_SYMBOLS, &JAPANESE_ACCEPTABLE_BUTTON, &JAPANESE_APPLICATION_BUTTON, &JAPANESE_BARGAIN_BUTTON, &JAPANESE_CONGRATULATIONS_BUTTON, &JAPANESE_DISCOUNT_BUTTON, &JAPANESE_FREE_OF_CHARGE_BUTTON, &JAPANESE_HERE_BUTTON, &JAPANESE_MONTHLY_AMOUNT_BUTTON, &JAPANESE_NOT_FREE_OF_CHARGE_BUTTON, &JAPANESE_NO_VACANCY_BUTTON, &JAPANESE_OPEN_FOR_BUSINESS_BUTTON, &JAPANESE_PASSING_GRADE_BUTTON, &JAPANESE_PROHIBITED_BUTTON, &JAPANESE_RESERVED_BUTTON, &JAPANESE_SECRET_BUTTON, &JAPANESE_SERVICE_CHARGE_BUTTON, &JAPANESE_VACANCY_BUTTON, &NEW_BUTTON, &NG_BUTTON, &OK_BUTTON, &O_BUTTON_BLOOD_TYPE, &P_BUTTON, &SOS_BUTTON, &UP_BUTTON, &VS_BUTTON, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::alphanum

/// arrow 🔙🔃🔄
pub mod arrow { // symbols::arrow
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="BACK arrow 🔙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BACK_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BACK_ARROW); // 🔙 (`U+1F519`)"] #[doc="# assert_eq!(BACK_ARROW.to_string().as_str(), \"🔙\");"]
#[doc="```"]
pub static BACK_ARROW :  Emoji = Emoji::new("BACK arrow", "🔙"); // BACK arrow
#[doc="clockwise vertical arrows 🔃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOCKWISE_VERTICAL_ARROWS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOCKWISE_VERTICAL_ARROWS); // 🔃 (`U+1F503`)"] #[doc="# assert_eq!(CLOCKWISE_VERTICAL_ARROWS.to_string().as_str(), \"🔃\");"]
#[doc="```"]
pub static CLOCKWISE_VERTICAL_ARROWS :  Emoji = Emoji::new("clockwise vertical arrows", "🔃"); // clockwise vertical arrows
#[doc="counterclockwise arrows button 🔄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COUNTERCLOCKWISE_ARROWS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COUNTERCLOCKWISE_ARROWS_BUTTON); // 🔄 (`U+1F504`)"] #[doc="# assert_eq!(COUNTERCLOCKWISE_ARROWS_BUTTON.to_string().as_str(), \"🔄\");"]
#[doc="```"]
pub static COUNTERCLOCKWISE_ARROWS_BUTTON :  Emoji = Emoji::new("counterclockwise arrows button", "🔄"); // counterclockwise arrows button
#[doc="down arrow ⬇️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWN_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWN_ARROW); // ⬇️ (`U+2B07 U+FE0F`)"] #[doc="# assert_eq!(DOWN_ARROW.to_string().as_str(), \"⬇️\");"]
#[doc="```"]
pub static DOWN_ARROW :  Emoji = Emoji::new("down arrow", "⬇️"); // down arrow
#[doc="down-left arrow ↙️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWN_LEFT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWN_LEFT_ARROW); // ↙️ (`U+2199 U+FE0F`)"] #[doc="# assert_eq!(DOWN_LEFT_ARROW.to_string().as_str(), \"↙️\");"]
#[doc="```"]
pub static DOWN_LEFT_ARROW :  Emoji = Emoji::new("down-left arrow", "↙️"); // down-left arrow
#[doc="down-right arrow ↘️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWN_RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWN_RIGHT_ARROW); // ↘️ (`U+2198 U+FE0F`)"] #[doc="# assert_eq!(DOWN_RIGHT_ARROW.to_string().as_str(), \"↘️\");"]
#[doc="```"]
pub static DOWN_RIGHT_ARROW :  Emoji = Emoji::new("down-right arrow", "↘️"); // down-right arrow
#[doc="END arrow 🔚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::END_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", END_ARROW); // 🔚 (`U+1F51A`)"] #[doc="# assert_eq!(END_ARROW.to_string().as_str(), \"🔚\");"]
#[doc="```"]
pub static END_ARROW :  Emoji = Emoji::new("END arrow", "🔚"); // END arrow
#[doc="left arrow ⬅️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_ARROW); // ⬅️ (`U+2B05 U+FE0F`)"] #[doc="# assert_eq!(LEFT_ARROW.to_string().as_str(), \"⬅️\");"]
#[doc="```"]
pub static LEFT_ARROW :  Emoji = Emoji::new("left arrow", "⬅️"); // left arrow
#[doc="left arrow curving right ↪️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_ARROW_CURVING_RIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_ARROW_CURVING_RIGHT); // ↪️ (`U+21AA U+FE0F`)"] #[doc="# assert_eq!(LEFT_ARROW_CURVING_RIGHT.to_string().as_str(), \"↪️\");"]
#[doc="```"]
pub static LEFT_ARROW_CURVING_RIGHT :  Emoji = Emoji::new("left arrow curving right", "↪️"); // left arrow curving right
#[doc="left-right arrow ↔️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_RIGHT_ARROW); // ↔️ (`U+2194 U+FE0F`)"] #[doc="# assert_eq!(LEFT_RIGHT_ARROW.to_string().as_str(), \"↔️\");"]
#[doc="```"]
pub static LEFT_RIGHT_ARROW :  Emoji = Emoji::new("left-right arrow", "↔️"); // left-right arrow
#[doc="ON! arrow 🔛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ON_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ON_ARROW); // 🔛 (`U+1F51B`)"] #[doc="# assert_eq!(ON_ARROW.to_string().as_str(), \"🔛\");"]
#[doc="```"]
pub static ON_ARROW :  Emoji = Emoji::new("ON! arrow", "🔛"); // ON! arrow
#[doc="right arrow ➡️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW); // ➡️ (`U+27A1 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW.to_string().as_str(), \"➡️\");"]
#[doc="```"]
pub static RIGHT_ARROW :  Emoji = Emoji::new("right arrow", "➡️"); // right arrow
#[doc="right arrow curving down ⤵️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW_CURVING_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW_CURVING_DOWN); // ⤵️ (`U+2935 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW_CURVING_DOWN.to_string().as_str(), \"⤵️\");"]
#[doc="```"]
pub static RIGHT_ARROW_CURVING_DOWN :  Emoji = Emoji::new("right arrow curving down", "⤵️"); // right arrow curving down
#[doc="right arrow curving left ↩️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW_CURVING_LEFT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW_CURVING_LEFT); // ↩️ (`U+21A9 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW_CURVING_LEFT.to_string().as_str(), \"↩️\");"]
#[doc="```"]
pub static RIGHT_ARROW_CURVING_LEFT :  Emoji = Emoji::new("right arrow curving left", "↩️"); // right arrow curving left
#[doc="right arrow curving up ⤴️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RIGHT_ARROW_CURVING_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RIGHT_ARROW_CURVING_UP); // ⤴️ (`U+2934 U+FE0F`)"] #[doc="# assert_eq!(RIGHT_ARROW_CURVING_UP.to_string().as_str(), \"⤴️\");"]
#[doc="```"]
pub static RIGHT_ARROW_CURVING_UP :  Emoji = Emoji::new("right arrow curving up", "⤴️"); // right arrow curving up
#[doc="SOON arrow 🔜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SOON_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SOON_ARROW); // 🔜 (`U+1F51C`)"] #[doc="# assert_eq!(SOON_ARROW.to_string().as_str(), \"🔜\");"]
#[doc="```"]
pub static SOON_ARROW :  Emoji = Emoji::new("SOON arrow", "🔜"); // SOON arrow
#[doc="TOP arrow 🔝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOP_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOP_ARROW); // 🔝 (`U+1F51D`)"] #[doc="# assert_eq!(TOP_ARROW.to_string().as_str(), \"🔝\");"]
#[doc="```"]
pub static TOP_ARROW :  Emoji = Emoji::new("TOP arrow", "🔝"); // TOP arrow
#[doc="up arrow ⬆️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_ARROW); // ⬆️ (`U+2B06 U+FE0F`)"] #[doc="# assert_eq!(UP_ARROW.to_string().as_str(), \"⬆️\");"]
#[doc="```"]
pub static UP_ARROW :  Emoji = Emoji::new("up arrow", "⬆️"); // up arrow
#[doc="up-down arrow ↕️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_DOWN_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_DOWN_ARROW); // ↕️ (`U+2195 U+FE0F`)"] #[doc="# assert_eq!(UP_DOWN_ARROW.to_string().as_str(), \"↕️\");"]
#[doc="```"]
pub static UP_DOWN_ARROW :  Emoji = Emoji::new("up-down arrow", "↕️"); // up-down arrow
#[doc="up-left arrow ↖️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_LEFT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_LEFT_ARROW); // ↖️ (`U+2196 U+FE0F`)"] #[doc="# assert_eq!(UP_LEFT_ARROW.to_string().as_str(), \"↖️\");"]
#[doc="```"]
pub static UP_LEFT_ARROW :  Emoji = Emoji::new("up-left arrow", "↖️"); // up-left arrow
#[doc="up-right arrow ↗️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UP_RIGHT_ARROW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UP_RIGHT_ARROW); // ↗️ (`U+2197 U+FE0F`)"] #[doc="# assert_eq!(UP_RIGHT_ARROW.to_string().as_str(), \"↗️\");"]
#[doc="```"]
pub static UP_RIGHT_ARROW :  Emoji = Emoji::new("up-right arrow", "↗️"); // up-right arrow
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BACK_ARROW, ],
&[&CLOCKWISE_VERTICAL_ARROWS, ],
&[&COUNTERCLOCKWISE_ARROWS_BUTTON, ],
&[&DOWN_ARROW, ],
&[&DOWN_LEFT_ARROW, ],
&[&DOWN_RIGHT_ARROW, ],
&[&END_ARROW, ],
&[&LEFT_ARROW, ],
&[&LEFT_ARROW_CURVING_RIGHT, ],
&[&LEFT_RIGHT_ARROW, ],
&[&ON_ARROW, ],
&[&RIGHT_ARROW, ],
&[&RIGHT_ARROW_CURVING_DOWN, ],
&[&RIGHT_ARROW_CURVING_LEFT, ],
&[&RIGHT_ARROW_CURVING_UP, ],
&[&SOON_ARROW, ],
&[&TOP_ARROW, ],
&[&UP_ARROW, ],
&[&UP_DOWN_ARROW, ],
&[&UP_LEFT_ARROW, ],
&[&UP_RIGHT_ARROW, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BACK_ARROW, &CLOCKWISE_VERTICAL_ARROWS, &COUNTERCLOCKWISE_ARROWS_BUTTON, &DOWN_ARROW, &DOWN_LEFT_ARROW, &DOWN_RIGHT_ARROW, &END_ARROW, &LEFT_ARROW, &LEFT_ARROW_CURVING_RIGHT, &LEFT_RIGHT_ARROW, &ON_ARROW, &RIGHT_ARROW, &RIGHT_ARROW_CURVING_DOWN, &RIGHT_ARROW_CURVING_LEFT, &RIGHT_ARROW_CURVING_UP, &SOON_ARROW, &TOP_ARROW, &UP_ARROW, &UP_DOWN_ARROW, &UP_LEFT_ARROW, &UP_RIGHT_ARROW, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::arrow

/// av-symbol 📶🔆🎦
pub mod av_symbol { // symbols::av_symbol
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="antenna bars 📶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANTENNA_BARS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANTENNA_BARS); // 📶 (`U+1F4F6`)"] #[doc="# assert_eq!(ANTENNA_BARS.to_string().as_str(), \"📶\");"]
#[doc="```"]
pub static ANTENNA_BARS :  Emoji = Emoji::new("antenna bars", "📶"); // antenna bars
#[doc="bright button 🔆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIGHT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIGHT_BUTTON); // 🔆 (`U+1F506`)"] #[doc="# assert_eq!(BRIGHT_BUTTON.to_string().as_str(), \"🔆\");"]
#[doc="```"]
pub static BRIGHT_BUTTON :  Emoji = Emoji::new("bright button", "🔆"); // bright button
#[doc="cinema 🎦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CINEMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CINEMA); // 🎦 (`U+1F3A6`)"] #[doc="# assert_eq!(CINEMA.to_string().as_str(), \"🎦\");"]
#[doc="```"]
pub static CINEMA :  Emoji = Emoji::new("cinema", "🎦"); // cinema
#[doc="dim button 🔅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIM_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIM_BUTTON); // 🔅 (`U+1F505`)"] #[doc="# assert_eq!(DIM_BUTTON.to_string().as_str(), \"🔅\");"]
#[doc="```"]
pub static DIM_BUTTON :  Emoji = Emoji::new("dim button", "🔅"); // dim button
#[doc="downwards button 🔽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOWNWARDS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOWNWARDS_BUTTON); // 🔽 (`U+1F53D`)"] #[doc="# assert_eq!(DOWNWARDS_BUTTON.to_string().as_str(), \"🔽\");"]
#[doc="```"]
pub static DOWNWARDS_BUTTON :  Emoji = Emoji::new("downwards button", "🔽"); // downwards button
#[doc="eject button ⏏️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EJECT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EJECT_BUTTON); // ⏏️ (`U+23CF U+FE0F`)"] #[doc="# assert_eq!(EJECT_BUTTON.to_string().as_str(), \"⏏️\");"]
#[doc="```"]
pub static EJECT_BUTTON :  Emoji = Emoji::new("eject button", "⏏️"); // eject button
#[doc="fast down button ⏬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_DOWN_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_DOWN_BUTTON); // ⏬ (`U+23EC`)"] #[doc="# assert_eq!(FAST_DOWN_BUTTON.to_string().as_str(), \"⏬\");"]
#[doc="```"]
pub static FAST_DOWN_BUTTON :  Emoji = Emoji::new("fast down button", "⏬"); // fast down button
#[doc="fast-forward button ⏩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_FORWARD_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_FORWARD_BUTTON); // ⏩ (`U+23E9`)"] #[doc="# assert_eq!(FAST_FORWARD_BUTTON.to_string().as_str(), \"⏩\");"]
#[doc="```"]
pub static FAST_FORWARD_BUTTON :  Emoji = Emoji::new("fast-forward button", "⏩"); // fast-forward button
#[doc="fast reverse button ⏪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_REVERSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_REVERSE_BUTTON); // ⏪ (`U+23EA`)"] #[doc="# assert_eq!(FAST_REVERSE_BUTTON.to_string().as_str(), \"⏪\");"]
#[doc="```"]
pub static FAST_REVERSE_BUTTON :  Emoji = Emoji::new("fast reverse button", "⏪"); // fast reverse button
#[doc="fast up button ⏫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FAST_UP_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FAST_UP_BUTTON); // ⏫ (`U+23EB`)"] #[doc="# assert_eq!(FAST_UP_BUTTON.to_string().as_str(), \"⏫\");"]
#[doc="```"]
pub static FAST_UP_BUTTON :  Emoji = Emoji::new("fast up button", "⏫"); // fast up button
#[doc="last track button ⏮️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAST_TRACK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAST_TRACK_BUTTON); // ⏮️ (`U+23EE U+FE0F`)"] #[doc="# assert_eq!(LAST_TRACK_BUTTON.to_string().as_str(), \"⏮️\");"]
#[doc="```"]
pub static LAST_TRACK_BUTTON :  Emoji = Emoji::new("last track button", "⏮️"); // last track button
#[doc="mobile phone off 📴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOBILE_PHONE_OFF;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOBILE_PHONE_OFF); // 📴 (`U+1F4F4`)"] #[doc="# assert_eq!(MOBILE_PHONE_OFF.to_string().as_str(), \"📴\");"]
#[doc="```"]
pub static MOBILE_PHONE_OFF :  Emoji = Emoji::new("mobile phone off", "📴"); // mobile phone off
#[doc="next track button ⏭️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEXT_TRACK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEXT_TRACK_BUTTON); // ⏭️ (`U+23ED U+FE0F`)"] #[doc="# assert_eq!(NEXT_TRACK_BUTTON.to_string().as_str(), \"⏭️\");"]
#[doc="```"]
pub static NEXT_TRACK_BUTTON :  Emoji = Emoji::new("next track button", "⏭️"); // next track button
#[doc="pause button ⏸️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PAUSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PAUSE_BUTTON); // ⏸️ (`U+23F8 U+FE0F`)"] #[doc="# assert_eq!(PAUSE_BUTTON.to_string().as_str(), \"⏸️\");"]
#[doc="```"]
pub static PAUSE_BUTTON :  Emoji = Emoji::new("pause button", "⏸️"); // pause button
#[doc="play button ▶️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLAY_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLAY_BUTTON); // ▶️ (`U+25B6 U+FE0F`)"] #[doc="# assert_eq!(PLAY_BUTTON.to_string().as_str(), \"▶️\");"]
#[doc="```"]
pub static PLAY_BUTTON :  Emoji = Emoji::new("play button", "▶️"); // play button
#[doc="play or pause button ⏯️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLAY_OR_PAUSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLAY_OR_PAUSE_BUTTON); // ⏯️ (`U+23EF U+FE0F`)"] #[doc="# assert_eq!(PLAY_OR_PAUSE_BUTTON.to_string().as_str(), \"⏯️\");"]
#[doc="```"]
pub static PLAY_OR_PAUSE_BUTTON :  Emoji = Emoji::new("play or pause button", "⏯️"); // play or pause button
#[doc="record button ⏺️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RECORD_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RECORD_BUTTON); // ⏺️ (`U+23FA U+FE0F`)"] #[doc="# assert_eq!(RECORD_BUTTON.to_string().as_str(), \"⏺️\");"]
#[doc="```"]
pub static RECORD_BUTTON :  Emoji = Emoji::new("record button", "⏺️"); // record button
#[doc="repeat button 🔁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REPEAT_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REPEAT_BUTTON); // 🔁 (`U+1F501`)"] #[doc="# assert_eq!(REPEAT_BUTTON.to_string().as_str(), \"🔁\");"]
#[doc="```"]
pub static REPEAT_BUTTON :  Emoji = Emoji::new("repeat button", "🔁"); // repeat button
#[doc="repeat single button 🔂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REPEAT_SINGLE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REPEAT_SINGLE_BUTTON); // 🔂 (`U+1F502`)"] #[doc="# assert_eq!(REPEAT_SINGLE_BUTTON.to_string().as_str(), \"🔂\");"]
#[doc="```"]
pub static REPEAT_SINGLE_BUTTON :  Emoji = Emoji::new("repeat single button", "🔂"); // repeat single button
#[doc="reverse button ◀️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REVERSE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REVERSE_BUTTON); // ◀️ (`U+25C0 U+FE0F`)"] #[doc="# assert_eq!(REVERSE_BUTTON.to_string().as_str(), \"◀️\");"]
#[doc="```"]
pub static REVERSE_BUTTON :  Emoji = Emoji::new("reverse button", "◀️"); // reverse button
#[doc="shuffle tracks button 🔀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHUFFLE_TRACKS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHUFFLE_TRACKS_BUTTON); // 🔀 (`U+1F500`)"] #[doc="# assert_eq!(SHUFFLE_TRACKS_BUTTON.to_string().as_str(), \"🔀\");"]
#[doc="```"]
pub static SHUFFLE_TRACKS_BUTTON :  Emoji = Emoji::new("shuffle tracks button", "🔀"); // shuffle tracks button
#[doc="stop button ⏹️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STOP_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STOP_BUTTON); // ⏹️ (`U+23F9 U+FE0F`)"] #[doc="# assert_eq!(STOP_BUTTON.to_string().as_str(), \"⏹️\");"]
#[doc="```"]
pub static STOP_BUTTON :  Emoji = Emoji::new("stop button", "⏹️"); // stop button
#[doc="upwards button 🔼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UPWARDS_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UPWARDS_BUTTON); // 🔼 (`U+1F53C`)"] #[doc="# assert_eq!(UPWARDS_BUTTON.to_string().as_str(), \"🔼\");"]
#[doc="```"]
pub static UPWARDS_BUTTON :  Emoji = Emoji::new("upwards button", "🔼"); // upwards button
#[doc="vibration mode 📳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIBRATION_MODE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIBRATION_MODE); // 📳 (`U+1F4F3`)"] #[doc="# assert_eq!(VIBRATION_MODE.to_string().as_str(), \"📳\");"]
#[doc="```"]
pub static VIBRATION_MODE :  Emoji = Emoji::new("vibration mode", "📳"); // vibration mode
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANTENNA_BARS, ],
&[&BRIGHT_BUTTON, ],
&[&CINEMA, ],
&[&DIM_BUTTON, ],
&[&DOWNWARDS_BUTTON, ],
&[&EJECT_BUTTON, ],
&[&FAST_DOWN_BUTTON, ],
&[&FAST_FORWARD_BUTTON, ],
&[&FAST_REVERSE_BUTTON, ],
&[&FAST_UP_BUTTON, ],
&[&LAST_TRACK_BUTTON, ],
&[&MOBILE_PHONE_OFF, ],
&[&NEXT_TRACK_BUTTON, ],
&[&PAUSE_BUTTON, ],
&[&PLAY_BUTTON, ],
&[&PLAY_OR_PAUSE_BUTTON, ],
&[&RECORD_BUTTON, ],
&[&REPEAT_BUTTON, ],
&[&REPEAT_SINGLE_BUTTON, ],
&[&REVERSE_BUTTON, ],
&[&SHUFFLE_TRACKS_BUTTON, ],
&[&STOP_BUTTON, ],
&[&UPWARDS_BUTTON, ],
&[&VIBRATION_MODE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANTENNA_BARS, &BRIGHT_BUTTON, &CINEMA, &DIM_BUTTON, &DOWNWARDS_BUTTON, &EJECT_BUTTON, &FAST_DOWN_BUTTON, &FAST_FORWARD_BUTTON, &FAST_REVERSE_BUTTON, &FAST_UP_BUTTON, &LAST_TRACK_BUTTON, &MOBILE_PHONE_OFF, &NEXT_TRACK_BUTTON, &PAUSE_BUTTON, &PLAY_BUTTON, &PLAY_OR_PAUSE_BUTTON, &RECORD_BUTTON, &REPEAT_BUTTON, &REPEAT_SINGLE_BUTTON, &REVERSE_BUTTON, &SHUFFLE_TRACKS_BUTTON, &STOP_BUTTON, &UPWARDS_BUTTON, &VIBRATION_MODE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::av_symbol

/// currency 💱💲
pub mod currency { // symbols::currency
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="currency exchange 💱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURRENCY_EXCHANGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURRENCY_EXCHANGE); // 💱 (`U+1F4B1`)"] #[doc="# assert_eq!(CURRENCY_EXCHANGE.to_string().as_str(), \"💱\");"]
#[doc="```"]
pub static CURRENCY_EXCHANGE :  Emoji = Emoji::new("currency exchange", "💱"); // currency exchange
#[doc="heavy dollar sign 💲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HEAVY_DOLLAR_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HEAVY_DOLLAR_SIGN); // 💲 (`U+1F4B2`)"] #[doc="# assert_eq!(HEAVY_DOLLAR_SIGN.to_string().as_str(), \"💲\");"]
#[doc="```"]
pub static HEAVY_DOLLAR_SIGN :  Emoji = Emoji::new("heavy dollar sign", "💲"); // heavy dollar sign
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CURRENCY_EXCHANGE, ],
&[&HEAVY_DOLLAR_SIGN, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CURRENCY_EXCHANGE, &HEAVY_DOLLAR_SIGN, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::currency

/// gender ♀️♂️⚧️
pub mod gender { // symbols::gender
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="female sign ♀️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FEMALE_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FEMALE_SIGN); // ♀️ (`U+2640 U+FE0F`)"] #[doc="# assert_eq!(FEMALE_SIGN.to_string().as_str(), \"♀️\");"]
#[doc="```"]
pub static FEMALE_SIGN :  Emoji = Emoji::new("female sign", "♀️"); // female sign
#[doc="male sign ♂️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MALE_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MALE_SIGN); // ♂️ (`U+2642 U+FE0F`)"] #[doc="# assert_eq!(MALE_SIGN.to_string().as_str(), \"♂️\");"]
#[doc="```"]
pub static MALE_SIGN :  Emoji = Emoji::new("male sign", "♂️"); // male sign
#[doc="transgender symbol ⚧️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRANSGENDER_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRANSGENDER_SYMBOL); // ⚧️ (`U+26A7 U+FE0F`)"] #[doc="# assert_eq!(TRANSGENDER_SYMBOL.to_string().as_str(), \"⚧️\");"]
#[doc="```"]
pub static TRANSGENDER_SYMBOL :  Emoji = Emoji::new("transgender symbol", "⚧️"); // transgender symbol
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&FEMALE_SIGN, ],
&[&MALE_SIGN, ],
&[&TRANSGENDER_SYMBOL, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&FEMALE_SIGN, &MALE_SIGN, &TRANSGENDER_SYMBOL, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::gender

/// geometric ⚫⬛◾
pub mod geometric { // symbols::geometric
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="black circle ⚫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_CIRCLE); // ⚫ (`U+26AB`)"] #[doc="# assert_eq!(BLACK_CIRCLE.to_string().as_str(), \"⚫\");"]
#[doc="```"]
pub static BLACK_CIRCLE :  Emoji = Emoji::new("black circle", "⚫"); // black circle
#[doc="black large square ⬛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_LARGE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_LARGE_SQUARE); // ⬛ (`U+2B1B`)"] #[doc="# assert_eq!(BLACK_LARGE_SQUARE.to_string().as_str(), \"⬛\");"]
#[doc="```"]
pub static BLACK_LARGE_SQUARE :  Emoji = Emoji::new("black large square", "⬛"); // black large square
#[doc="black medium-small square ◾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_MEDIUM_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_MEDIUM_SMALL_SQUARE); // ◾ (`U+25FE`)"] #[doc="# assert_eq!(BLACK_MEDIUM_SMALL_SQUARE.to_string().as_str(), \"◾\");"]
#[doc="```"]
pub static BLACK_MEDIUM_SMALL_SQUARE :  Emoji = Emoji::new("black medium-small square", "◾"); // black medium-small square
#[doc="black medium square ◼️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_MEDIUM_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_MEDIUM_SQUARE); // ◼️ (`U+25FC U+FE0F`)"] #[doc="# assert_eq!(BLACK_MEDIUM_SQUARE.to_string().as_str(), \"◼️\");"]
#[doc="```"]
pub static BLACK_MEDIUM_SQUARE :  Emoji = Emoji::new("black medium square", "◼️"); // black medium square
#[doc="black small square ▪️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_SMALL_SQUARE); // ▪️ (`U+25AA U+FE0F`)"] #[doc="# assert_eq!(BLACK_SMALL_SQUARE.to_string().as_str(), \"▪️\");"]
#[doc="```"]
pub static BLACK_SMALL_SQUARE :  Emoji = Emoji::new("black small square", "▪️"); // black small square
#[doc="black square button 🔲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLACK_SQUARE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLACK_SQUARE_BUTTON); // 🔲 (`U+1F532`)"] #[doc="# assert_eq!(BLACK_SQUARE_BUTTON.to_string().as_str(), \"🔲\");"]
#[doc="```"]
pub static BLACK_SQUARE_BUTTON :  Emoji = Emoji::new("black square button", "🔲"); // black square button
#[doc="blue circle 🔵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_CIRCLE); // 🔵 (`U+1F535`)"] #[doc="# assert_eq!(BLUE_CIRCLE.to_string().as_str(), \"🔵\");"]
#[doc="```"]
pub static BLUE_CIRCLE :  Emoji = Emoji::new("blue circle", "🔵"); // blue circle
#[doc="blue square 🟦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BLUE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BLUE_SQUARE); // 🟦 (`U+1F7E6`)"] #[doc="# assert_eq!(BLUE_SQUARE.to_string().as_str(), \"🟦\");"]
#[doc="```"]
pub static BLUE_SQUARE :  Emoji = Emoji::new("blue square", "🟦"); // blue square
#[doc="brown circle 🟤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROWN_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROWN_CIRCLE); // 🟤 (`U+1F7E4`)"] #[doc="# assert_eq!(BROWN_CIRCLE.to_string().as_str(), \"🟤\");"]
#[doc="```"]
pub static BROWN_CIRCLE :  Emoji = Emoji::new("brown circle", "🟤"); // brown circle
#[doc="brown square 🟫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BROWN_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BROWN_SQUARE); // 🟫 (`U+1F7EB`)"] #[doc="# assert_eq!(BROWN_SQUARE.to_string().as_str(), \"🟫\");"]
#[doc="```"]
pub static BROWN_SQUARE :  Emoji = Emoji::new("brown square", "🟫"); // brown square
#[doc="diamond with a dot 💠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIAMOND_WITH_A_DOT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIAMOND_WITH_A_DOT); // 💠 (`U+1F4A0`)"] #[doc="# assert_eq!(DIAMOND_WITH_A_DOT.to_string().as_str(), \"💠\");"]
#[doc="```"]
pub static DIAMOND_WITH_A_DOT :  Emoji = Emoji::new("diamond with a dot", "💠"); // diamond with a dot
#[doc="green circle 🟢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_CIRCLE); // 🟢 (`U+1F7E2`)"] #[doc="# assert_eq!(GREEN_CIRCLE.to_string().as_str(), \"🟢\");"]
#[doc="```"]
pub static GREEN_CIRCLE :  Emoji = Emoji::new("green circle", "🟢"); // green circle
#[doc="green square 🟩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GREEN_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GREEN_SQUARE); // 🟩 (`U+1F7E9`)"] #[doc="# assert_eq!(GREEN_SQUARE.to_string().as_str(), \"🟩\");"]
#[doc="```"]
pub static GREEN_SQUARE :  Emoji = Emoji::new("green square", "🟩"); // green square
#[doc="large blue diamond 🔷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LARGE_BLUE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LARGE_BLUE_DIAMOND); // 🔷 (`U+1F537`)"] #[doc="# assert_eq!(LARGE_BLUE_DIAMOND.to_string().as_str(), \"🔷\");"]
#[doc="```"]
pub static LARGE_BLUE_DIAMOND :  Emoji = Emoji::new("large blue diamond", "🔷"); // large blue diamond
#[doc="large orange diamond 🔶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LARGE_ORANGE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LARGE_ORANGE_DIAMOND); // 🔶 (`U+1F536`)"] #[doc="# assert_eq!(LARGE_ORANGE_DIAMOND.to_string().as_str(), \"🔶\");"]
#[doc="```"]
pub static LARGE_ORANGE_DIAMOND :  Emoji = Emoji::new("large orange diamond", "🔶"); // large orange diamond
#[doc="orange circle 🟠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_CIRCLE); // 🟠 (`U+1F7E0`)"] #[doc="# assert_eq!(ORANGE_CIRCLE.to_string().as_str(), \"🟠\");"]
#[doc="```"]
pub static ORANGE_CIRCLE :  Emoji = Emoji::new("orange circle", "🟠"); // orange circle
#[doc="orange square 🟧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORANGE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORANGE_SQUARE); // 🟧 (`U+1F7E7`)"] #[doc="# assert_eq!(ORANGE_SQUARE.to_string().as_str(), \"🟧\");"]
#[doc="```"]
pub static ORANGE_SQUARE :  Emoji = Emoji::new("orange square", "🟧"); // orange square
#[doc="purple circle 🟣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURPLE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURPLE_CIRCLE); // 🟣 (`U+1F7E3`)"] #[doc="# assert_eq!(PURPLE_CIRCLE.to_string().as_str(), \"🟣\");"]
#[doc="```"]
pub static PURPLE_CIRCLE :  Emoji = Emoji::new("purple circle", "🟣"); // purple circle
#[doc="purple square 🟪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PURPLE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PURPLE_SQUARE); // 🟪 (`U+1F7EA`)"] #[doc="# assert_eq!(PURPLE_SQUARE.to_string().as_str(), \"🟪\");"]
#[doc="```"]
pub static PURPLE_SQUARE :  Emoji = Emoji::new("purple square", "🟪"); // purple square
#[doc="radio button 🔘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RADIO_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RADIO_BUTTON); // 🔘 (`U+1F518`)"] #[doc="# assert_eq!(RADIO_BUTTON.to_string().as_str(), \"🔘\");"]
#[doc="```"]
pub static RADIO_BUTTON :  Emoji = Emoji::new("radio button", "🔘"); // radio button
#[doc="red circle 🔴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_CIRCLE); // 🔴 (`U+1F534`)"] #[doc="# assert_eq!(RED_CIRCLE.to_string().as_str(), \"🔴\");"]
#[doc="```"]
pub static RED_CIRCLE :  Emoji = Emoji::new("red circle", "🔴"); // red circle
#[doc="red square 🟥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_SQUARE); // 🟥 (`U+1F7E5`)"] #[doc="# assert_eq!(RED_SQUARE.to_string().as_str(), \"🟥\");"]
#[doc="```"]
pub static RED_SQUARE :  Emoji = Emoji::new("red square", "🟥"); // red square
#[doc="red triangle pointed down 🔻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_TRIANGLE_POINTED_DOWN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_TRIANGLE_POINTED_DOWN); // 🔻 (`U+1F53B`)"] #[doc="# assert_eq!(RED_TRIANGLE_POINTED_DOWN.to_string().as_str(), \"🔻\");"]
#[doc="```"]
pub static RED_TRIANGLE_POINTED_DOWN :  Emoji = Emoji::new("red triangle pointed down", "🔻"); // red triangle pointed down
#[doc="red triangle pointed up 🔺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_TRIANGLE_POINTED_UP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_TRIANGLE_POINTED_UP); // 🔺 (`U+1F53A`)"] #[doc="# assert_eq!(RED_TRIANGLE_POINTED_UP.to_string().as_str(), \"🔺\");"]
#[doc="```"]
pub static RED_TRIANGLE_POINTED_UP :  Emoji = Emoji::new("red triangle pointed up", "🔺"); // red triangle pointed up
#[doc="small blue diamond 🔹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMALL_BLUE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMALL_BLUE_DIAMOND); // 🔹 (`U+1F539`)"] #[doc="# assert_eq!(SMALL_BLUE_DIAMOND.to_string().as_str(), \"🔹\");"]
#[doc="```"]
pub static SMALL_BLUE_DIAMOND :  Emoji = Emoji::new("small blue diamond", "🔹"); // small blue diamond
#[doc="small orange diamond 🔸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMALL_ORANGE_DIAMOND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMALL_ORANGE_DIAMOND); // 🔸 (`U+1F538`)"] #[doc="# assert_eq!(SMALL_ORANGE_DIAMOND.to_string().as_str(), \"🔸\");"]
#[doc="```"]
pub static SMALL_ORANGE_DIAMOND :  Emoji = Emoji::new("small orange diamond", "🔸"); // small orange diamond
#[doc="white circle ⚪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_CIRCLE); // ⚪ (`U+26AA`)"] #[doc="# assert_eq!(WHITE_CIRCLE.to_string().as_str(), \"⚪\");"]
#[doc="```"]
pub static WHITE_CIRCLE :  Emoji = Emoji::new("white circle", "⚪"); // white circle
#[doc="white large square ⬜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_LARGE_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_LARGE_SQUARE); // ⬜ (`U+2B1C`)"] #[doc="# assert_eq!(WHITE_LARGE_SQUARE.to_string().as_str(), \"⬜\");"]
#[doc="```"]
pub static WHITE_LARGE_SQUARE :  Emoji = Emoji::new("white large square", "⬜"); // white large square
#[doc="white medium-small square ◽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_MEDIUM_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_MEDIUM_SMALL_SQUARE); // ◽ (`U+25FD`)"] #[doc="# assert_eq!(WHITE_MEDIUM_SMALL_SQUARE.to_string().as_str(), \"◽\");"]
#[doc="```"]
pub static WHITE_MEDIUM_SMALL_SQUARE :  Emoji = Emoji::new("white medium-small square", "◽"); // white medium-small square
#[doc="white medium square ◻️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_MEDIUM_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_MEDIUM_SQUARE); // ◻️ (`U+25FB U+FE0F`)"] #[doc="# assert_eq!(WHITE_MEDIUM_SQUARE.to_string().as_str(), \"◻️\");"]
#[doc="```"]
pub static WHITE_MEDIUM_SQUARE :  Emoji = Emoji::new("white medium square", "◻️"); // white medium square
#[doc="white small square ▫️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_SMALL_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_SMALL_SQUARE); // ▫️ (`U+25AB U+FE0F`)"] #[doc="# assert_eq!(WHITE_SMALL_SQUARE.to_string().as_str(), \"▫️\");"]
#[doc="```"]
pub static WHITE_SMALL_SQUARE :  Emoji = Emoji::new("white small square", "▫️"); // white small square
#[doc="white square button 🔳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_SQUARE_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_SQUARE_BUTTON); // 🔳 (`U+1F533`)"] #[doc="# assert_eq!(WHITE_SQUARE_BUTTON.to_string().as_str(), \"🔳\");"]
#[doc="```"]
pub static WHITE_SQUARE_BUTTON :  Emoji = Emoji::new("white square button", "🔳"); // white square button
#[doc="yellow circle 🟡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YELLOW_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YELLOW_CIRCLE); // 🟡 (`U+1F7E1`)"] #[doc="# assert_eq!(YELLOW_CIRCLE.to_string().as_str(), \"🟡\");"]
#[doc="```"]
pub static YELLOW_CIRCLE :  Emoji = Emoji::new("yellow circle", "🟡"); // yellow circle
#[doc="yellow square 🟨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YELLOW_SQUARE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YELLOW_SQUARE); // 🟨 (`U+1F7E8`)"] #[doc="# assert_eq!(YELLOW_SQUARE.to_string().as_str(), \"🟨\");"]
#[doc="```"]
pub static YELLOW_SQUARE :  Emoji = Emoji::new("yellow square", "🟨"); // yellow square
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BLACK_CIRCLE, ],
&[&BLACK_LARGE_SQUARE, ],
&[&BLACK_MEDIUM_SMALL_SQUARE, ],
&[&BLACK_MEDIUM_SQUARE, ],
&[&BLACK_SMALL_SQUARE, ],
&[&BLACK_SQUARE_BUTTON, ],
&[&BLUE_CIRCLE, ],
&[&BLUE_SQUARE, ],
&[&BROWN_CIRCLE, ],
&[&BROWN_SQUARE, ],
&[&DIAMOND_WITH_A_DOT, ],
&[&GREEN_CIRCLE, ],
&[&GREEN_SQUARE, ],
&[&LARGE_BLUE_DIAMOND, ],
&[&LARGE_ORANGE_DIAMOND, ],
&[&ORANGE_CIRCLE, ],
&[&ORANGE_SQUARE, ],
&[&PURPLE_CIRCLE, ],
&[&PURPLE_SQUARE, ],
&[&RADIO_BUTTON, ],
&[&RED_CIRCLE, ],
&[&RED_SQUARE, ],
&[&RED_TRIANGLE_POINTED_DOWN, ],
&[&RED_TRIANGLE_POINTED_UP, ],
&[&SMALL_BLUE_DIAMOND, ],
&[&SMALL_ORANGE_DIAMOND, ],
&[&WHITE_CIRCLE, ],
&[&WHITE_LARGE_SQUARE, ],
&[&WHITE_MEDIUM_SMALL_SQUARE, ],
&[&WHITE_MEDIUM_SQUARE, ],
&[&WHITE_SMALL_SQUARE, ],
&[&WHITE_SQUARE_BUTTON, ],
&[&YELLOW_CIRCLE, ],
&[&YELLOW_SQUARE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BLACK_CIRCLE, &BLACK_LARGE_SQUARE, &BLACK_MEDIUM_SMALL_SQUARE, &BLACK_MEDIUM_SQUARE, &BLACK_SMALL_SQUARE, &BLACK_SQUARE_BUTTON, &BLUE_CIRCLE, &BLUE_SQUARE, &BROWN_CIRCLE, &BROWN_SQUARE, &DIAMOND_WITH_A_DOT, &GREEN_CIRCLE, &GREEN_SQUARE, &LARGE_BLUE_DIAMOND, &LARGE_ORANGE_DIAMOND, &ORANGE_CIRCLE, &ORANGE_SQUARE, &PURPLE_CIRCLE, &PURPLE_SQUARE, &RADIO_BUTTON, &RED_CIRCLE, &RED_SQUARE, &RED_TRIANGLE_POINTED_DOWN, &RED_TRIANGLE_POINTED_UP, &SMALL_BLUE_DIAMOND, &SMALL_ORANGE_DIAMOND, &WHITE_CIRCLE, &WHITE_LARGE_SQUARE, &WHITE_MEDIUM_SMALL_SQUARE, &WHITE_MEDIUM_SQUARE, &WHITE_SMALL_SQUARE, &WHITE_SQUARE_BUTTON, &YELLOW_CIRCLE, &YELLOW_SQUARE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::geometric

/// keycap 0️⃣1️⃣🔟
pub mod keycap { // symbols::keycap
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="keycap: 0 0️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_0;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_0); // 0️⃣ (`U+0030 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_0.to_string().as_str(), \"0️⃣\");"]
#[doc="```"]
pub static KEYCAP_0 :  Emoji = Emoji::new("keycap: 0", "0️⃣"); // keycap: 0
#[doc="keycap: 1 1️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_1;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_1); // 1️⃣ (`U+0031 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_1.to_string().as_str(), \"1️⃣\");"]
#[doc="```"]
pub static KEYCAP_1 :  Emoji = Emoji::new("keycap: 1", "1️⃣"); // keycap: 1
#[doc="keycap: 10 🔟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_10;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_10); // 🔟 (`U+1F51F`)"] #[doc="# assert_eq!(KEYCAP_10.to_string().as_str(), \"🔟\");"]
#[doc="```"]
pub static KEYCAP_10 :  Emoji = Emoji::new("keycap: 10", "🔟"); // keycap: 10
#[doc="keycap: 2 2️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_2;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_2); // 2️⃣ (`U+0032 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_2.to_string().as_str(), \"2️⃣\");"]
#[doc="```"]
pub static KEYCAP_2 :  Emoji = Emoji::new("keycap: 2", "2️⃣"); // keycap: 2
#[doc="keycap: 3 3️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_3;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_3); // 3️⃣ (`U+0033 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_3.to_string().as_str(), \"3️⃣\");"]
#[doc="```"]
pub static KEYCAP_3 :  Emoji = Emoji::new("keycap: 3", "3️⃣"); // keycap: 3
#[doc="keycap: 4 4️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_4;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_4); // 4️⃣ (`U+0034 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_4.to_string().as_str(), \"4️⃣\");"]
#[doc="```"]
pub static KEYCAP_4 :  Emoji = Emoji::new("keycap: 4", "4️⃣"); // keycap: 4
#[doc="keycap: 5 5️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_5;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_5); // 5️⃣ (`U+0035 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_5.to_string().as_str(), \"5️⃣\");"]
#[doc="```"]
pub static KEYCAP_5 :  Emoji = Emoji::new("keycap: 5", "5️⃣"); // keycap: 5
#[doc="keycap: 6 6️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_6;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_6); // 6️⃣ (`U+0036 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_6.to_string().as_str(), \"6️⃣\");"]
#[doc="```"]
pub static KEYCAP_6 :  Emoji = Emoji::new("keycap: 6", "6️⃣"); // keycap: 6
#[doc="keycap: 7 7️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_7;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_7); // 7️⃣ (`U+0037 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_7.to_string().as_str(), \"7️⃣\");"]
#[doc="```"]
pub static KEYCAP_7 :  Emoji = Emoji::new("keycap: 7", "7️⃣"); // keycap: 7
#[doc="keycap: 8 8️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_8;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_8); // 8️⃣ (`U+0038 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_8.to_string().as_str(), \"8️⃣\");"]
#[doc="```"]
pub static KEYCAP_8 :  Emoji = Emoji::new("keycap: 8", "8️⃣"); // keycap: 8
#[doc="keycap: 9 9️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_9;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_9); // 9️⃣ (`U+0039 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_9.to_string().as_str(), \"9️⃣\");"]
#[doc="```"]
pub static KEYCAP_9 :  Emoji = Emoji::new("keycap: 9", "9️⃣"); // keycap: 9
#[doc="keycap: * *️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_ASTERISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_ASTERISK); // *️⃣ (`U+002A U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_ASTERISK.to_string().as_str(), \"*️⃣\");"]
#[doc="```"]
pub static KEYCAP_ASTERISK :  Emoji = Emoji::new("keycap: *", "*️⃣"); // keycap: *
#[doc="keycap: # #️⃣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KEYCAP_HASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KEYCAP_HASH); // #️⃣ (`U+0023 U+FE0F U+20E3`)"] #[doc="# assert_eq!(KEYCAP_HASH.to_string().as_str(), \"#️⃣\");"]
#[doc="```"]
pub static KEYCAP_HASH :  Emoji = Emoji::new("keycap: #", "#️⃣"); // keycap: #
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&KEYCAP_0, ],
&[&KEYCAP_1, ],
&[&KEYCAP_10, ],
&[&KEYCAP_2, ],
&[&KEYCAP_3, ],
&[&KEYCAP_4, ],
&[&KEYCAP_5, ],
&[&KEYCAP_6, ],
&[&KEYCAP_7, ],
&[&KEYCAP_8, ],
&[&KEYCAP_9, ],
&[&KEYCAP_ASTERISK, ],
&[&KEYCAP_HASH, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&KEYCAP_0, &KEYCAP_1, &KEYCAP_10, &KEYCAP_2, &KEYCAP_3, &KEYCAP_4, &KEYCAP_5, &KEYCAP_6, &KEYCAP_7, &KEYCAP_8, &KEYCAP_9, &KEYCAP_ASTERISK, &KEYCAP_HASH, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::keycap

/// math ➗♾️➖
pub mod math { // symbols::math
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="divide ➗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DIVIDE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DIVIDE); // ➗ (`U+2797`)"] #[doc="# assert_eq!(DIVIDE.to_string().as_str(), \"➗\");"]
#[doc="```"]
pub static DIVIDE :  Emoji = Emoji::new("divide", "➗"); // divide
#[doc="infinity ♾️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::INFINITY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", INFINITY); // ♾️ (`U+267E U+FE0F`)"] #[doc="# assert_eq!(INFINITY.to_string().as_str(), \"♾️\");"]
#[doc="```"]
pub static INFINITY :  Emoji = Emoji::new("infinity", "♾️"); // infinity
#[doc="minus ➖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MINUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MINUS); // ➖ (`U+2796`)"] #[doc="# assert_eq!(MINUS.to_string().as_str(), \"➖\");"]
#[doc="```"]
pub static MINUS :  Emoji = Emoji::new("minus", "➖"); // minus
#[doc="multiply ✖️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MULTIPLY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MULTIPLY); // ✖️ (`U+2716 U+FE0F`)"] #[doc="# assert_eq!(MULTIPLY.to_string().as_str(), \"✖️\");"]
#[doc="```"]
pub static MULTIPLY :  Emoji = Emoji::new("multiply", "✖️"); // multiply
#[doc="plus ➕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLUS); // ➕ (`U+2795`)"] #[doc="# assert_eq!(PLUS.to_string().as_str(), \"➕\");"]
#[doc="```"]
pub static PLUS :  Emoji = Emoji::new("plus", "➕"); // plus
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&DIVIDE, ],
&[&INFINITY, ],
&[&MINUS, ],
&[&MULTIPLY, ],
&[&PLUS, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&DIVIDE, &INFINITY, &MINUS, &MULTIPLY, &PLUS, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::math

/// other-symbol ☑️✔️✅
pub mod other_symbol { // symbols::other_symbol
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="check box with check ☑️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHECK_BOX_WITH_CHECK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHECK_BOX_WITH_CHECK); // ☑️ (`U+2611 U+FE0F`)"] #[doc="# assert_eq!(CHECK_BOX_WITH_CHECK.to_string().as_str(), \"☑️\");"]
#[doc="```"]
pub static CHECK_BOX_WITH_CHECK :  Emoji = Emoji::new("check box with check", "☑️"); // check box with check
#[doc="check mark ✔️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHECK_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHECK_MARK); // ✔️ (`U+2714 U+FE0F`)"] #[doc="# assert_eq!(CHECK_MARK.to_string().as_str(), \"✔️\");"]
#[doc="```"]
pub static CHECK_MARK :  Emoji = Emoji::new("check mark", "✔️"); // check mark
#[doc="check mark button ✅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHECK_MARK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHECK_MARK_BUTTON); // ✅ (`U+2705`)"] #[doc="# assert_eq!(CHECK_MARK_BUTTON.to_string().as_str(), \"✅\");"]
#[doc="```"]
pub static CHECK_MARK_BUTTON :  Emoji = Emoji::new("check mark button", "✅"); // check mark button
#[doc="copyright ©️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COPYRIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COPYRIGHT); // ©️ (`U+00A9 U+FE0F`)"] #[doc="# assert_eq!(COPYRIGHT.to_string().as_str(), \"©️\");"]
#[doc="```"]
pub static COPYRIGHT :  Emoji = Emoji::new("copyright", "©️"); // copyright
#[doc="cross mark ❌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSS_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSS_MARK); // ❌ (`U+274C`)"] #[doc="# assert_eq!(CROSS_MARK.to_string().as_str(), \"❌\");"]
#[doc="```"]
pub static CROSS_MARK :  Emoji = Emoji::new("cross mark", "❌"); // cross mark
#[doc="cross mark button ❎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CROSS_MARK_BUTTON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CROSS_MARK_BUTTON); // ❎ (`U+274E`)"] #[doc="# assert_eq!(CROSS_MARK_BUTTON.to_string().as_str(), \"❎\");"]
#[doc="```"]
pub static CROSS_MARK_BUTTON :  Emoji = Emoji::new("cross mark button", "❎"); // cross mark button
#[doc="curly loop ➰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CURLY_LOOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CURLY_LOOP); // ➰ (`U+27B0`)"] #[doc="# assert_eq!(CURLY_LOOP.to_string().as_str(), \"➰\");"]
#[doc="```"]
pub static CURLY_LOOP :  Emoji = Emoji::new("curly loop", "➰"); // curly loop
#[doc="double curly loop ➿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOUBLE_CURLY_LOOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOUBLE_CURLY_LOOP); // ➿ (`U+27BF`)"] #[doc="# assert_eq!(DOUBLE_CURLY_LOOP.to_string().as_str(), \"➿\");"]
#[doc="```"]
pub static DOUBLE_CURLY_LOOP :  Emoji = Emoji::new("double curly loop", "➿"); // double curly loop
#[doc="eight-pointed star ✴️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_POINTED_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_POINTED_STAR); // ✴️ (`U+2734 U+FE0F`)"] #[doc="# assert_eq!(EIGHT_POINTED_STAR.to_string().as_str(), \"✴️\");"]
#[doc="```"]
pub static EIGHT_POINTED_STAR :  Emoji = Emoji::new("eight-pointed star", "✴️"); // eight-pointed star
#[doc="eight-spoked asterisk ✳️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_SPOKED_ASTERISK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_SPOKED_ASTERISK); // ✳️ (`U+2733 U+FE0F`)"] #[doc="# assert_eq!(EIGHT_SPOKED_ASTERISK.to_string().as_str(), \"✳️\");"]
#[doc="```"]
pub static EIGHT_SPOKED_ASTERISK :  Emoji = Emoji::new("eight-spoked asterisk", "✳️"); // eight-spoked asterisk
#[doc="fleur-de-lis ⚜️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLEUR_DE_LIS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLEUR_DE_LIS); // ⚜️ (`U+269C U+FE0F`)"] #[doc="# assert_eq!(FLEUR_DE_LIS.to_string().as_str(), \"⚜️\");"]
#[doc="```"]
pub static FLEUR_DE_LIS :  Emoji = Emoji::new("fleur-de-lis", "⚜️"); // fleur-de-lis
#[doc="hollow red circle ⭕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOLLOW_RED_CIRCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOLLOW_RED_CIRCLE); // ⭕ (`U+2B55`)"] #[doc="# assert_eq!(HOLLOW_RED_CIRCLE.to_string().as_str(), \"⭕\");"]
#[doc="```"]
pub static HOLLOW_RED_CIRCLE :  Emoji = Emoji::new("hollow red circle", "⭕"); // hollow red circle
#[doc="Japanese symbol for beginner 🔰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_SYMBOL_FOR_BEGINNER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_SYMBOL_FOR_BEGINNER); // 🔰 (`U+1F530`)"] #[doc="# assert_eq!(JAPANESE_SYMBOL_FOR_BEGINNER.to_string().as_str(), \"🔰\");"]
#[doc="```"]
pub static JAPANESE_SYMBOL_FOR_BEGINNER :  Emoji = Emoji::new("Japanese symbol for beginner", "🔰"); // Japanese symbol for beginner
#[doc="medical symbol ⚕️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEDICAL_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEDICAL_SYMBOL); // ⚕️ (`U+2695 U+FE0F`)"] #[doc="# assert_eq!(MEDICAL_SYMBOL.to_string().as_str(), \"⚕️\");"]
#[doc="```"]
pub static MEDICAL_SYMBOL :  Emoji = Emoji::new("medical symbol", "⚕️"); // medical symbol
#[doc="name badge 📛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NAME_BADGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NAME_BADGE); // 📛 (`U+1F4DB`)"] #[doc="# assert_eq!(NAME_BADGE.to_string().as_str(), \"📛\");"]
#[doc="```"]
pub static NAME_BADGE :  Emoji = Emoji::new("name badge", "📛"); // name badge
#[doc="part alternation mark 〽️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PART_ALTERNATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PART_ALTERNATION_MARK); // 〽️ (`U+303D U+FE0F`)"] #[doc="# assert_eq!(PART_ALTERNATION_MARK.to_string().as_str(), \"〽️\");"]
#[doc="```"]
pub static PART_ALTERNATION_MARK :  Emoji = Emoji::new("part alternation mark", "〽️"); // part alternation mark
#[doc="recycling symbol ♻️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RECYCLING_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RECYCLING_SYMBOL); // ♻️ (`U+267B U+FE0F`)"] #[doc="# assert_eq!(RECYCLING_SYMBOL.to_string().as_str(), \"♻️\");"]
#[doc="```"]
pub static RECYCLING_SYMBOL :  Emoji = Emoji::new("recycling symbol", "♻️"); // recycling symbol
#[doc="registered ®️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::REGISTERED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", REGISTERED); // ®️ (`U+00AE U+FE0F`)"] #[doc="# assert_eq!(REGISTERED.to_string().as_str(), \"®️\");"]
#[doc="```"]
pub static REGISTERED :  Emoji = Emoji::new("registered", "®️"); // registered
#[doc="sparkle ❇️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPARKLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPARKLE); // ❇️ (`U+2747 U+FE0F`)"] #[doc="# assert_eq!(SPARKLE.to_string().as_str(), \"❇️\");"]
#[doc="```"]
pub static SPARKLE :  Emoji = Emoji::new("sparkle", "❇️"); // sparkle
#[doc="trade mark ™️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRADE_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRADE_MARK); // ™️ (`U+2122 U+FE0F`)"] #[doc="# assert_eq!(TRADE_MARK.to_string().as_str(), \"™️\");"]
#[doc="```"]
pub static TRADE_MARK :  Emoji = Emoji::new("trade mark", "™️"); // trade mark
#[doc="trident emblem 🔱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRIDENT_EMBLEM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRIDENT_EMBLEM); // 🔱 (`U+1F531`)"] #[doc="# assert_eq!(TRIDENT_EMBLEM.to_string().as_str(), \"🔱\");"]
#[doc="```"]
pub static TRIDENT_EMBLEM :  Emoji = Emoji::new("trident emblem", "🔱"); // trident emblem
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CHECK_BOX_WITH_CHECK, ],
&[&CHECK_MARK, ],
&[&CHECK_MARK_BUTTON, ],
&[&COPYRIGHT, ],
&[&CROSS_MARK, ],
&[&CROSS_MARK_BUTTON, ],
&[&CURLY_LOOP, ],
&[&DOUBLE_CURLY_LOOP, ],
&[&EIGHT_POINTED_STAR, ],
&[&EIGHT_SPOKED_ASTERISK, ],
&[&FLEUR_DE_LIS, ],
&[&HOLLOW_RED_CIRCLE, ],
&[&JAPANESE_SYMBOL_FOR_BEGINNER, ],
&[&MEDICAL_SYMBOL, ],
&[&NAME_BADGE, ],
&[&PART_ALTERNATION_MARK, ],
&[&RECYCLING_SYMBOL, ],
&[&REGISTERED, ],
&[&SPARKLE, ],
&[&TRADE_MARK, ],
&[&TRIDENT_EMBLEM, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CHECK_BOX_WITH_CHECK, &CHECK_MARK, &CHECK_MARK_BUTTON, &COPYRIGHT, &CROSS_MARK, &CROSS_MARK_BUTTON, &CURLY_LOOP, &DOUBLE_CURLY_LOOP, &EIGHT_POINTED_STAR, &EIGHT_SPOKED_ASTERISK, &FLEUR_DE_LIS, &HOLLOW_RED_CIRCLE, &JAPANESE_SYMBOL_FOR_BEGINNER, &MEDICAL_SYMBOL, &NAME_BADGE, &PART_ALTERNATION_MARK, &RECYCLING_SYMBOL, &REGISTERED, &SPARKLE, &TRADE_MARK, &TRIDENT_EMBLEM, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::other_symbol

/// punctuation ‼️⁉️❗
pub mod punctuation { // symbols::punctuation
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="double exclamation mark ‼️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOUBLE_EXCLAMATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOUBLE_EXCLAMATION_MARK); // ‼️ (`U+203C U+FE0F`)"] #[doc="# assert_eq!(DOUBLE_EXCLAMATION_MARK.to_string().as_str(), \"‼️\");"]
#[doc="```"]
pub static DOUBLE_EXCLAMATION_MARK :  Emoji = Emoji::new("double exclamation mark", "‼️"); // double exclamation mark
#[doc="exclamation question mark ⁉️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EXCLAMATION_QUESTION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EXCLAMATION_QUESTION_MARK); // ⁉️ (`U+2049 U+FE0F`)"] #[doc="# assert_eq!(EXCLAMATION_QUESTION_MARK.to_string().as_str(), \"⁉️\");"]
#[doc="```"]
pub static EXCLAMATION_QUESTION_MARK :  Emoji = Emoji::new("exclamation question mark", "⁉️"); // exclamation question mark
#[doc="red exclamation mark ❗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_EXCLAMATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_EXCLAMATION_MARK); // ❗ (`U+2757`)"] #[doc="# assert_eq!(RED_EXCLAMATION_MARK.to_string().as_str(), \"❗\");"]
#[doc="```"]
pub static RED_EXCLAMATION_MARK :  Emoji = Emoji::new("red exclamation mark", "❗"); // red exclamation mark
#[doc="red question mark ❓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RED_QUESTION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RED_QUESTION_MARK); // ❓ (`U+2753`)"] #[doc="# assert_eq!(RED_QUESTION_MARK.to_string().as_str(), \"❓\");"]
#[doc="```"]
pub static RED_QUESTION_MARK :  Emoji = Emoji::new("red question mark", "❓"); // red question mark
#[doc="wavy dash 〰️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAVY_DASH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAVY_DASH); // 〰️ (`U+3030 U+FE0F`)"] #[doc="# assert_eq!(WAVY_DASH.to_string().as_str(), \"〰️\");"]
#[doc="```"]
pub static WAVY_DASH :  Emoji = Emoji::new("wavy dash", "〰️"); // wavy dash
#[doc="white exclamation mark ❕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_EXCLAMATION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_EXCLAMATION_MARK); // ❕ (`U+2755`)"] #[doc="# assert_eq!(WHITE_EXCLAMATION_MARK.to_string().as_str(), \"❕\");"]
#[doc="```"]
pub static WHITE_EXCLAMATION_MARK :  Emoji = Emoji::new("white exclamation mark", "❕"); // white exclamation mark
#[doc="white question mark ❔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHITE_QUESTION_MARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHITE_QUESTION_MARK); // ❔ (`U+2754`)"] #[doc="# assert_eq!(WHITE_QUESTION_MARK.to_string().as_str(), \"❔\");"]
#[doc="```"]
pub static WHITE_QUESTION_MARK :  Emoji = Emoji::new("white question mark", "❔"); // white question mark
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&DOUBLE_EXCLAMATION_MARK, ],
&[&EXCLAMATION_QUESTION_MARK, ],
&[&RED_EXCLAMATION_MARK, ],
&[&RED_QUESTION_MARK, ],
&[&WAVY_DASH, ],
&[&WHITE_EXCLAMATION_MARK, ],
&[&WHITE_QUESTION_MARK, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&DOUBLE_EXCLAMATION_MARK, &EXCLAMATION_QUESTION_MARK, &RED_EXCLAMATION_MARK, &RED_QUESTION_MARK, &WAVY_DASH, &WHITE_EXCLAMATION_MARK, &WHITE_QUESTION_MARK, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::punctuation

/// religion ⚛️🔯✝️
pub mod religion { // symbols::religion
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="atom symbol ⚛️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ATOM_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ATOM_SYMBOL); // ⚛️ (`U+269B U+FE0F`)"] #[doc="# assert_eq!(ATOM_SYMBOL.to_string().as_str(), \"⚛️\");"]
#[doc="```"]
pub static ATOM_SYMBOL :  Emoji = Emoji::new("atom symbol", "⚛️"); // atom symbol
#[doc="dotted six-pointed star 🔯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DOTTED_SIX_POINTED_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DOTTED_SIX_POINTED_STAR); // 🔯 (`U+1F52F`)"] #[doc="# assert_eq!(DOTTED_SIX_POINTED_STAR.to_string().as_str(), \"🔯\");"]
#[doc="```"]
pub static DOTTED_SIX_POINTED_STAR :  Emoji = Emoji::new("dotted six-pointed star", "🔯"); // dotted six-pointed star
#[doc="latin cross ✝️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LATIN_CROSS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LATIN_CROSS); // ✝️ (`U+271D U+FE0F`)"] #[doc="# assert_eq!(LATIN_CROSS.to_string().as_str(), \"✝️\");"]
#[doc="```"]
pub static LATIN_CROSS :  Emoji = Emoji::new("latin cross", "✝️"); // latin cross
#[doc="menorah 🕎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MENORAH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MENORAH); // 🕎 (`U+1F54E`)"] #[doc="# assert_eq!(MENORAH.to_string().as_str(), \"🕎\");"]
#[doc="```"]
pub static MENORAH :  Emoji = Emoji::new("menorah", "🕎"); // menorah
#[doc="om 🕉️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OM); // 🕉️ (`U+1F549 U+FE0F`)"] #[doc="# assert_eq!(OM.to_string().as_str(), \"🕉️\");"]
#[doc="```"]
pub static OM :  Emoji = Emoji::new("om", "🕉️"); // om
#[doc="orthodox cross ☦️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ORTHODOX_CROSS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ORTHODOX_CROSS); // ☦️ (`U+2626 U+FE0F`)"] #[doc="# assert_eq!(ORTHODOX_CROSS.to_string().as_str(), \"☦️\");"]
#[doc="```"]
pub static ORTHODOX_CROSS :  Emoji = Emoji::new("orthodox cross", "☦️"); // orthodox cross
#[doc="peace symbol ☮️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PEACE_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PEACE_SYMBOL); // ☮️ (`U+262E U+FE0F`)"] #[doc="# assert_eq!(PEACE_SYMBOL.to_string().as_str(), \"☮️\");"]
#[doc="```"]
pub static PEACE_SYMBOL :  Emoji = Emoji::new("peace symbol", "☮️"); // peace symbol
#[doc="place of worship 🛐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PLACE_OF_WORSHIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PLACE_OF_WORSHIP); // 🛐 (`U+1F6D0`)"] #[doc="# assert_eq!(PLACE_OF_WORSHIP.to_string().as_str(), \"🛐\");"]
#[doc="```"]
pub static PLACE_OF_WORSHIP :  Emoji = Emoji::new("place of worship", "🛐"); // place of worship
#[doc="star and crescent ☪️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR_AND_CRESCENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR_AND_CRESCENT); // ☪️ (`U+262A U+FE0F`)"] #[doc="# assert_eq!(STAR_AND_CRESCENT.to_string().as_str(), \"☪️\");"]
#[doc="```"]
pub static STAR_AND_CRESCENT :  Emoji = Emoji::new("star and crescent", "☪️"); // star and crescent
#[doc="star of David ✡️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR_OF_DAVID;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR_OF_DAVID); // ✡️ (`U+2721 U+FE0F`)"] #[doc="# assert_eq!(STAR_OF_DAVID.to_string().as_str(), \"✡️\");"]
#[doc="```"]
pub static STAR_OF_DAVID :  Emoji = Emoji::new("star of David", "✡️"); // star of David
#[doc="wheel of dharma ☸️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHEEL_OF_DHARMA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHEEL_OF_DHARMA); // ☸️ (`U+2638 U+FE0F`)"] #[doc="# assert_eq!(WHEEL_OF_DHARMA.to_string().as_str(), \"☸️\");"]
#[doc="```"]
pub static WHEEL_OF_DHARMA :  Emoji = Emoji::new("wheel of dharma", "☸️"); // wheel of dharma
#[doc="yin yang ☯️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::YIN_YANG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", YIN_YANG); // ☯️ (`U+262F U+FE0F`)"] #[doc="# assert_eq!(YIN_YANG.to_string().as_str(), \"☯️\");"]
#[doc="```"]
pub static YIN_YANG :  Emoji = Emoji::new("yin yang", "☯️"); // yin yang
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ATOM_SYMBOL, ],
&[&DOTTED_SIX_POINTED_STAR, ],
&[&LATIN_CROSS, ],
&[&MENORAH, ],
&[&OM, ],
&[&ORTHODOX_CROSS, ],
&[&PEACE_SYMBOL, ],
&[&PLACE_OF_WORSHIP, ],
&[&STAR_AND_CRESCENT, ],
&[&STAR_OF_DAVID, ],
&[&WHEEL_OF_DHARMA, ],
&[&YIN_YANG, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ATOM_SYMBOL, &DOTTED_SIX_POINTED_STAR, &LATIN_CROSS, &MENORAH, &OM, &ORTHODOX_CROSS, &PEACE_SYMBOL, &PLACE_OF_WORSHIP, &STAR_AND_CRESCENT, &STAR_OF_DAVID, &WHEEL_OF_DHARMA, &YIN_YANG, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::religion

/// transport-sign 🏧🚼🛄
pub mod transport_sign { // symbols::transport_sign
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="ATM sign 🏧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ATM_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ATM_SIGN); // 🏧 (`U+1F3E7`)"] #[doc="# assert_eq!(ATM_SIGN.to_string().as_str(), \"🏧\");"]
#[doc="```"]
pub static ATM_SIGN :  Emoji = Emoji::new("ATM sign", "🏧"); // ATM sign
#[doc="baby symbol 🚼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BABY_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BABY_SYMBOL); // 🚼 (`U+1F6BC`)"] #[doc="# assert_eq!(BABY_SYMBOL.to_string().as_str(), \"🚼\");"]
#[doc="```"]
pub static BABY_SYMBOL :  Emoji = Emoji::new("baby symbol", "🚼"); // baby symbol
#[doc="baggage claim 🛄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BAGGAGE_CLAIM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BAGGAGE_CLAIM); // 🛄 (`U+1F6C4`)"] #[doc="# assert_eq!(BAGGAGE_CLAIM.to_string().as_str(), \"🛄\");"]
#[doc="```"]
pub static BAGGAGE_CLAIM :  Emoji = Emoji::new("baggage claim", "🛄"); // baggage claim
#[doc="customs 🛃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CUSTOMS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CUSTOMS); // 🛃 (`U+1F6C3`)"] #[doc="# assert_eq!(CUSTOMS.to_string().as_str(), \"🛃\");"]
#[doc="```"]
pub static CUSTOMS :  Emoji = Emoji::new("customs", "🛃"); // customs
#[doc="left luggage 🛅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEFT_LUGGAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEFT_LUGGAGE); // 🛅 (`U+1F6C5`)"] #[doc="# assert_eq!(LEFT_LUGGAGE.to_string().as_str(), \"🛅\");"]
#[doc="```"]
pub static LEFT_LUGGAGE :  Emoji = Emoji::new("left luggage", "🛅"); // left luggage
#[doc="litter in bin sign 🚮"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LITTER_IN_BIN_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LITTER_IN_BIN_SIGN); // 🚮 (`U+1F6AE`)"] #[doc="# assert_eq!(LITTER_IN_BIN_SIGN.to_string().as_str(), \"🚮\");"]
#[doc="```"]
pub static LITTER_IN_BIN_SIGN :  Emoji = Emoji::new("litter in bin sign", "🚮"); // litter in bin sign
#[doc="men’s room 🚹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MEN_S_ROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MEN_S_ROOM); // 🚹 (`U+1F6B9`)"] #[doc="# assert_eq!(MEN_S_ROOM.to_string().as_str(), \"🚹\");"]
#[doc="```"]
pub static MEN_S_ROOM :  Emoji = Emoji::new("men’s room", "🚹"); // men’s room
#[doc="passport control 🛂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PASSPORT_CONTROL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PASSPORT_CONTROL); // 🛂 (`U+1F6C2`)"] #[doc="# assert_eq!(PASSPORT_CONTROL.to_string().as_str(), \"🛂\");"]
#[doc="```"]
pub static PASSPORT_CONTROL :  Emoji = Emoji::new("passport control", "🛂"); // passport control
#[doc="potable water 🚰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POTABLE_WATER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POTABLE_WATER); // 🚰 (`U+1F6B0`)"] #[doc="# assert_eq!(POTABLE_WATER.to_string().as_str(), \"🚰\");"]
#[doc="```"]
pub static POTABLE_WATER :  Emoji = Emoji::new("potable water", "🚰"); // potable water
#[doc="restroom 🚻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RESTROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RESTROOM); // 🚻 (`U+1F6BB`)"] #[doc="# assert_eq!(RESTROOM.to_string().as_str(), \"🚻\");"]
#[doc="```"]
pub static RESTROOM :  Emoji = Emoji::new("restroom", "🚻"); // restroom
#[doc="water closet 🚾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_CLOSET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_CLOSET); // 🚾 (`U+1F6BE`)"] #[doc="# assert_eq!(WATER_CLOSET.to_string().as_str(), \"🚾\");"]
#[doc="```"]
pub static WATER_CLOSET :  Emoji = Emoji::new("water closet", "🚾"); // water closet
#[doc="wheelchair symbol ♿"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WHEELCHAIR_SYMBOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WHEELCHAIR_SYMBOL); // ♿ (`U+267F`)"] #[doc="# assert_eq!(WHEELCHAIR_SYMBOL.to_string().as_str(), \"♿\");"]
#[doc="```"]
pub static WHEELCHAIR_SYMBOL :  Emoji = Emoji::new("wheelchair symbol", "♿"); // wheelchair symbol
#[doc="women’s room 🚺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOMEN_S_ROOM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOMEN_S_ROOM); // 🚺 (`U+1F6BA`)"] #[doc="# assert_eq!(WOMEN_S_ROOM.to_string().as_str(), \"🚺\");"]
#[doc="```"]
pub static WOMEN_S_ROOM :  Emoji = Emoji::new("women’s room", "🚺"); // women’s room
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ATM_SIGN, ],
&[&BABY_SYMBOL, ],
&[&BAGGAGE_CLAIM, ],
&[&CUSTOMS, ],
&[&LEFT_LUGGAGE, ],
&[&LITTER_IN_BIN_SIGN, ],
&[&MEN_S_ROOM, ],
&[&PASSPORT_CONTROL, ],
&[&POTABLE_WATER, ],
&[&RESTROOM, ],
&[&WATER_CLOSET, ],
&[&WHEELCHAIR_SYMBOL, ],
&[&WOMEN_S_ROOM, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ATM_SIGN, &BABY_SYMBOL, &BAGGAGE_CLAIM, &CUSTOMS, &LEFT_LUGGAGE, &LITTER_IN_BIN_SIGN, &MEN_S_ROOM, &PASSPORT_CONTROL, &POTABLE_WATER, &RESTROOM, &WATER_CLOSET, &WHEELCHAIR_SYMBOL, &WOMEN_S_ROOM, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::transport_sign

/// warning ☣️🚸🚱
pub mod warning { // symbols::warning
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="biohazard ☣️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BIOHAZARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BIOHAZARD); // ☣️ (`U+2623 U+FE0F`)"] #[doc="# assert_eq!(BIOHAZARD.to_string().as_str(), \"☣️\");"]
#[doc="```"]
pub static BIOHAZARD :  Emoji = Emoji::new("biohazard", "☣️"); // biohazard
#[doc="children crossing 🚸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHILDREN_CROSSING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHILDREN_CROSSING); // 🚸 (`U+1F6B8`)"] #[doc="# assert_eq!(CHILDREN_CROSSING.to_string().as_str(), \"🚸\");"]
#[doc="```"]
pub static CHILDREN_CROSSING :  Emoji = Emoji::new("children crossing", "🚸"); // children crossing
#[doc="non-potable water 🚱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NON_POTABLE_WATER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NON_POTABLE_WATER); // 🚱 (`U+1F6B1`)"] #[doc="# assert_eq!(NON_POTABLE_WATER.to_string().as_str(), \"🚱\");"]
#[doc="```"]
pub static NON_POTABLE_WATER :  Emoji = Emoji::new("non-potable water", "🚱"); // non-potable water
#[doc="no bicycles 🚳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_BICYCLES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_BICYCLES); // 🚳 (`U+1F6B3`)"] #[doc="# assert_eq!(NO_BICYCLES.to_string().as_str(), \"🚳\");"]
#[doc="```"]
pub static NO_BICYCLES :  Emoji = Emoji::new("no bicycles", "🚳"); // no bicycles
#[doc="no entry ⛔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_ENTRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_ENTRY); // ⛔ (`U+26D4`)"] #[doc="# assert_eq!(NO_ENTRY.to_string().as_str(), \"⛔\");"]
#[doc="```"]
pub static NO_ENTRY :  Emoji = Emoji::new("no entry", "⛔"); // no entry
#[doc="no littering 🚯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_LITTERING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_LITTERING); // 🚯 (`U+1F6AF`)"] #[doc="# assert_eq!(NO_LITTERING.to_string().as_str(), \"🚯\");"]
#[doc="```"]
pub static NO_LITTERING :  Emoji = Emoji::new("no littering", "🚯"); // no littering
#[doc="no mobile phones 📵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_MOBILE_PHONES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_MOBILE_PHONES); // 📵 (`U+1F4F5`)"] #[doc="# assert_eq!(NO_MOBILE_PHONES.to_string().as_str(), \"📵\");"]
#[doc="```"]
pub static NO_MOBILE_PHONES :  Emoji = Emoji::new("no mobile phones", "📵"); // no mobile phones
#[doc="no one under eighteen 🔞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_ONE_UNDER_EIGHTEEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_ONE_UNDER_EIGHTEEN); // 🔞 (`U+1F51E`)"] #[doc="# assert_eq!(NO_ONE_UNDER_EIGHTEEN.to_string().as_str(), \"🔞\");"]
#[doc="```"]
pub static NO_ONE_UNDER_EIGHTEEN :  Emoji = Emoji::new("no one under eighteen", "🔞"); // no one under eighteen
#[doc="no pedestrians 🚷"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_PEDESTRIANS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_PEDESTRIANS); // 🚷 (`U+1F6B7`)"] #[doc="# assert_eq!(NO_PEDESTRIANS.to_string().as_str(), \"🚷\");"]
#[doc="```"]
pub static NO_PEDESTRIANS :  Emoji = Emoji::new("no pedestrians", "🚷"); // no pedestrians
#[doc="no smoking 🚭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NO_SMOKING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NO_SMOKING); // 🚭 (`U+1F6AD`)"] #[doc="# assert_eq!(NO_SMOKING.to_string().as_str(), \"🚭\");"]
#[doc="```"]
pub static NO_SMOKING :  Emoji = Emoji::new("no smoking", "🚭"); // no smoking
#[doc="prohibited 🚫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PROHIBITED;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PROHIBITED); // 🚫 (`U+1F6AB`)"] #[doc="# assert_eq!(PROHIBITED.to_string().as_str(), \"🚫\");"]
#[doc="```"]
pub static PROHIBITED :  Emoji = Emoji::new("prohibited", "🚫"); // prohibited
#[doc="radioactive ☢️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RADIOACTIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RADIOACTIVE); // ☢️ (`U+2622 U+FE0F`)"] #[doc="# assert_eq!(RADIOACTIVE.to_string().as_str(), \"☢️\");"]
#[doc="```"]
pub static RADIOACTIVE :  Emoji = Emoji::new("radioactive", "☢️"); // radioactive
#[doc="warning ⚠️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WARNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WARNING); // ⚠️ (`U+26A0 U+FE0F`)"] #[doc="# assert_eq!(WARNING.to_string().as_str(), \"⚠️\");"]
#[doc="```"]
pub static WARNING :  Emoji = Emoji::new("warning", "⚠️"); // warning
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BIOHAZARD, ],
&[&CHILDREN_CROSSING, ],
&[&NON_POTABLE_WATER, ],
&[&NO_BICYCLES, ],
&[&NO_ENTRY, ],
&[&NO_LITTERING, ],
&[&NO_MOBILE_PHONES, ],
&[&NO_ONE_UNDER_EIGHTEEN, ],
&[&NO_PEDESTRIANS, ],
&[&NO_SMOKING, ],
&[&PROHIBITED, ],
&[&RADIOACTIVE, ],
&[&WARNING, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BIOHAZARD, &CHILDREN_CROSSING, &NON_POTABLE_WATER, &NO_BICYCLES, &NO_ENTRY, &NO_LITTERING, &NO_MOBILE_PHONES, &NO_ONE_UNDER_EIGHTEEN, &NO_PEDESTRIANS, &NO_SMOKING, &PROHIBITED, &RADIOACTIVE, &WARNING, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::warning

/// zodiac ♒♈♋
pub mod zodiac { // symbols::zodiac
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="Aquarius ♒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AQUARIUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AQUARIUS); // ♒ (`U+2652`)"] #[doc="# assert_eq!(AQUARIUS.to_string().as_str(), \"♒\");"]
#[doc="```"]
pub static AQUARIUS :  Emoji = Emoji::new("Aquarius", "♒"); // Aquarius
#[doc="Aries ♈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARIES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARIES); // ♈ (`U+2648`)"] #[doc="# assert_eq!(ARIES.to_string().as_str(), \"♈\");"]
#[doc="```"]
pub static ARIES :  Emoji = Emoji::new("Aries", "♈"); // Aries
#[doc="Cancer ♋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANCER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANCER); // ♋ (`U+264B`)"] #[doc="# assert_eq!(CANCER.to_string().as_str(), \"♋\");"]
#[doc="```"]
pub static CANCER :  Emoji = Emoji::new("Cancer", "♋"); // Cancer
#[doc="Capricorn ♑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAPRICORN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAPRICORN); // ♑ (`U+2651`)"] #[doc="# assert_eq!(CAPRICORN.to_string().as_str(), \"♑\");"]
#[doc="```"]
pub static CAPRICORN :  Emoji = Emoji::new("Capricorn", "♑"); // Capricorn
#[doc="Gemini ♊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GEMINI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GEMINI); // ♊ (`U+264A`)"] #[doc="# assert_eq!(GEMINI.to_string().as_str(), \"♊\");"]
#[doc="```"]
pub static GEMINI :  Emoji = Emoji::new("Gemini", "♊"); // Gemini
#[doc="Leo ♌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LEO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LEO); // ♌ (`U+264C`)"] #[doc="# assert_eq!(LEO.to_string().as_str(), \"♌\");"]
#[doc="```"]
pub static LEO :  Emoji = Emoji::new("Leo", "♌"); // Leo
#[doc="Libra ♎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIBRA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIBRA); // ♎ (`U+264E`)"] #[doc="# assert_eq!(LIBRA.to_string().as_str(), \"♎\");"]
#[doc="```"]
pub static LIBRA :  Emoji = Emoji::new("Libra", "♎"); // Libra
#[doc="Ophiuchus ⛎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OPHIUCHUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OPHIUCHUS); // ⛎ (`U+26CE`)"] #[doc="# assert_eq!(OPHIUCHUS.to_string().as_str(), \"⛎\");"]
#[doc="```"]
pub static OPHIUCHUS :  Emoji = Emoji::new("Ophiuchus", "⛎"); // Ophiuchus
#[doc="Pisces ♓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PISCES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PISCES); // ♓ (`U+2653`)"] #[doc="# assert_eq!(PISCES.to_string().as_str(), \"♓\");"]
#[doc="```"]
pub static PISCES :  Emoji = Emoji::new("Pisces", "♓"); // Pisces
#[doc="Sagittarius ♐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAGITTARIUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAGITTARIUS); // ♐ (`U+2650`)"] #[doc="# assert_eq!(SAGITTARIUS.to_string().as_str(), \"♐\");"]
#[doc="```"]
pub static SAGITTARIUS :  Emoji = Emoji::new("Sagittarius", "♐"); // Sagittarius
#[doc="Scorpio ♏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCORPIO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCORPIO); // ♏ (`U+264F`)"] #[doc="# assert_eq!(SCORPIO.to_string().as_str(), \"♏\");"]
#[doc="```"]
pub static SCORPIO :  Emoji = Emoji::new("Scorpio", "♏"); // Scorpio
#[doc="Taurus ♉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAURUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAURUS); // ♉ (`U+2649`)"] #[doc="# assert_eq!(TAURUS.to_string().as_str(), \"♉\");"]
#[doc="```"]
pub static TAURUS :  Emoji = Emoji::new("Taurus", "♉"); // Taurus
#[doc="Virgo ♍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VIRGO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VIRGO); // ♍ (`U+264D`)"] #[doc="# assert_eq!(VIRGO.to_string().as_str(), \"♍\");"]
#[doc="```"]
pub static VIRGO :  Emoji = Emoji::new("Virgo", "♍"); // Virgo
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AQUARIUS, ],
&[&ARIES, ],
&[&CANCER, ],
&[&CAPRICORN, ],
&[&GEMINI, ],
&[&LEO, ],
&[&LIBRA, ],
&[&OPHIUCHUS, ],
&[&PISCES, ],
&[&SAGITTARIUS, ],
&[&SCORPIO, ],
&[&TAURUS, ],
&[&VIRGO, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AQUARIUS, &ARIES, &CANCER, &CAPRICORN, &GEMINI, &LEO, &LIBRA, &OPHIUCHUS, &PISCES, &SAGITTARIUS, &SCORPIO, &TAURUS, &VIRGO, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // symbols::zodiac
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(alphanum::all_variants())
		.chain(arrow::all_variants())
		.chain(av_symbol::all_variants())
		.chain(currency::all_variants())
		.chain(gender::all_variants())
		.chain(geometric::all_variants())
		.chain(keycap::all_variants())
		.chain(math::all_variants())
		.chain(other_symbol::all_variants())
		.chain(punctuation::all_variants())
		.chain(religion::all_variants())
		.chain(transport_sign::all_variants())
		.chain(warning::all_variants())
		.chain(zodiac::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(alphanum::base_emojis())
		.chain(arrow::base_emojis())
		.chain(av_symbol::base_emojis())
		.chain(currency::base_emojis())
		.chain(gender::base_emojis())
		.chain(geometric::base_emojis())
		.chain(keycap::base_emojis())
		.chain(math::base_emojis())
		.chain(other_symbol::base_emojis())
		.chain(punctuation::base_emojis())
		.chain(religion::base_emojis())
		.chain(transport_sign::base_emojis())
		.chain(warning::base_emojis())
		.chain(zodiac::base_emojis())
}
} // symbols

/// Travel & Places 🛎️🏦🏖️
pub mod travel_and_places {

/// hotel 🛎️🧳
pub mod hotel { // travel_and_places::hotel
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bellhop bell 🛎️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BELLHOP_BELL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BELLHOP_BELL); // 🛎️ (`U+1F6CE U+FE0F`)"] #[doc="# assert_eq!(BELLHOP_BELL.to_string().as_str(), \"🛎️\");"]
#[doc="```"]
pub static BELLHOP_BELL :  Emoji = Emoji::new("bellhop bell", "🛎️"); // bellhop bell
#[doc="luggage 🧳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LUGGAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LUGGAGE); // 🧳 (`U+1F9F3`)"] #[doc="# assert_eq!(LUGGAGE.to_string().as_str(), \"🧳\");"]
#[doc="```"]
pub static LUGGAGE :  Emoji = Emoji::new("luggage", "🧳"); // luggage
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BELLHOP_BELL, ],
&[&LUGGAGE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BELLHOP_BELL, &LUGGAGE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::hotel

/// place-building 🏦🧱🏗️
pub mod place_building { // travel_and_places::place_building
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="bank 🏦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BANK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BANK); // 🏦 (`U+1F3E6`)"] #[doc="# assert_eq!(BANK.to_string().as_str(), \"🏦\");"]
#[doc="```"]
pub static BANK :  Emoji = Emoji::new("bank", "🏦"); // bank
#[doc="brick 🧱"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRICK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRICK); // 🧱 (`U+1F9F1`)"] #[doc="# assert_eq!(BRICK.to_string().as_str(), \"🧱\");"]
#[doc="```"]
pub static BRICK :  Emoji = Emoji::new("brick", "🧱"); // brick
#[doc="building construction 🏗️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUILDING_CONSTRUCTION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUILDING_CONSTRUCTION); // 🏗️ (`U+1F3D7 U+FE0F`)"] #[doc="# assert_eq!(BUILDING_CONSTRUCTION.to_string().as_str(), \"🏗️\");"]
#[doc="```"]
pub static BUILDING_CONSTRUCTION :  Emoji = Emoji::new("building construction", "🏗️"); // building construction
#[doc="castle 🏰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CASTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CASTLE); // 🏰 (`U+1F3F0`)"] #[doc="# assert_eq!(CASTLE.to_string().as_str(), \"🏰\");"]
#[doc="```"]
pub static CASTLE :  Emoji = Emoji::new("castle", "🏰"); // castle
#[doc="classical building 🏛️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLASSICAL_BUILDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLASSICAL_BUILDING); // 🏛️ (`U+1F3DB U+FE0F`)"] #[doc="# assert_eq!(CLASSICAL_BUILDING.to_string().as_str(), \"🏛️\");"]
#[doc="```"]
pub static CLASSICAL_BUILDING :  Emoji = Emoji::new("classical building", "🏛️"); // classical building
#[doc="convenience store 🏪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONVENIENCE_STORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONVENIENCE_STORE); // 🏪 (`U+1F3EA`)"] #[doc="# assert_eq!(CONVENIENCE_STORE.to_string().as_str(), \"🏪\");"]
#[doc="```"]
pub static CONVENIENCE_STORE :  Emoji = Emoji::new("convenience store", "🏪"); // convenience store
#[doc="department store 🏬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DEPARTMENT_STORE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DEPARTMENT_STORE); // 🏬 (`U+1F3EC`)"] #[doc="# assert_eq!(DEPARTMENT_STORE.to_string().as_str(), \"🏬\");"]
#[doc="```"]
pub static DEPARTMENT_STORE :  Emoji = Emoji::new("department store", "🏬"); // department store
#[doc="derelict house 🏚️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DERELICT_HOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DERELICT_HOUSE); // 🏚️ (`U+1F3DA U+FE0F`)"] #[doc="# assert_eq!(DERELICT_HOUSE.to_string().as_str(), \"🏚️\");"]
#[doc="```"]
pub static DERELICT_HOUSE :  Emoji = Emoji::new("derelict house", "🏚️"); // derelict house
#[doc="factory 🏭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FACTORY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FACTORY); // 🏭 (`U+1F3ED`)"] #[doc="# assert_eq!(FACTORY.to_string().as_str(), \"🏭\");"]
#[doc="```"]
pub static FACTORY :  Emoji = Emoji::new("factory", "🏭"); // factory
#[doc="hospital 🏥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOSPITAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOSPITAL); // 🏥 (`U+1F3E5`)"] #[doc="# assert_eq!(HOSPITAL.to_string().as_str(), \"🏥\");"]
#[doc="```"]
pub static HOSPITAL :  Emoji = Emoji::new("hospital", "🏥"); // hospital
#[doc="hotel 🏨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOTEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOTEL); // 🏨 (`U+1F3E8`)"] #[doc="# assert_eq!(HOTEL.to_string().as_str(), \"🏨\");"]
#[doc="```"]
pub static HOTEL :  Emoji = Emoji::new("hotel", "🏨"); // hotel
#[doc="house 🏠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOUSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOUSE); // 🏠 (`U+1F3E0`)"] #[doc="# assert_eq!(HOUSE.to_string().as_str(), \"🏠\");"]
#[doc="```"]
pub static HOUSE :  Emoji = Emoji::new("house", "🏠"); // house
#[doc="houses 🏘️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOUSES;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOUSES); // 🏘️ (`U+1F3D8 U+FE0F`)"] #[doc="# assert_eq!(HOUSES.to_string().as_str(), \"🏘️\");"]
#[doc="```"]
pub static HOUSES :  Emoji = Emoji::new("houses", "🏘️"); // houses
#[doc="house with garden 🏡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOUSE_WITH_GARDEN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOUSE_WITH_GARDEN); // 🏡 (`U+1F3E1`)"] #[doc="# assert_eq!(HOUSE_WITH_GARDEN.to_string().as_str(), \"🏡\");"]
#[doc="```"]
pub static HOUSE_WITH_GARDEN :  Emoji = Emoji::new("house with garden", "🏡"); // house with garden
#[doc="hut 🛖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HUT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HUT); // 🛖 (`U+1F6D6`)"] #[doc="# assert_eq!(HUT.to_string().as_str(), \"🛖\");"]
#[doc="```"]
pub static HUT :  Emoji = Emoji::new("hut", "🛖"); // hut
#[doc="Japanese castle 🏯"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_CASTLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_CASTLE); // 🏯 (`U+1F3EF`)"] #[doc="# assert_eq!(JAPANESE_CASTLE.to_string().as_str(), \"🏯\");"]
#[doc="```"]
pub static JAPANESE_CASTLE :  Emoji = Emoji::new("Japanese castle", "🏯"); // Japanese castle
#[doc="Japanese post office 🏣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::JAPANESE_POST_OFFICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", JAPANESE_POST_OFFICE); // 🏣 (`U+1F3E3`)"] #[doc="# assert_eq!(JAPANESE_POST_OFFICE.to_string().as_str(), \"🏣\");"]
#[doc="```"]
pub static JAPANESE_POST_OFFICE :  Emoji = Emoji::new("Japanese post office", "🏣"); // Japanese post office
#[doc="love hotel 🏩"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOVE_HOTEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOVE_HOTEL); // 🏩 (`U+1F3E9`)"] #[doc="# assert_eq!(LOVE_HOTEL.to_string().as_str(), \"🏩\");"]
#[doc="```"]
pub static LOVE_HOTEL :  Emoji = Emoji::new("love hotel", "🏩"); // love hotel
#[doc="office building 🏢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OFFICE_BUILDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OFFICE_BUILDING); // 🏢 (`U+1F3E2`)"] #[doc="# assert_eq!(OFFICE_BUILDING.to_string().as_str(), \"🏢\");"]
#[doc="```"]
pub static OFFICE_BUILDING :  Emoji = Emoji::new("office building", "🏢"); // office building
#[doc="post office 🏤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POST_OFFICE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POST_OFFICE); // 🏤 (`U+1F3E4`)"] #[doc="# assert_eq!(POST_OFFICE.to_string().as_str(), \"🏤\");"]
#[doc="```"]
pub static POST_OFFICE :  Emoji = Emoji::new("post office", "🏤"); // post office
#[doc="rock 🪨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROCK); // 🪨 (`U+1FAA8`)"] #[doc="# assert_eq!(ROCK.to_string().as_str(), \"🪨\");"]
#[doc="```"]
pub static ROCK :  Emoji = Emoji::new("rock", "🪨"); // rock
#[doc="school 🏫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SCHOOL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SCHOOL); // 🏫 (`U+1F3EB`)"] #[doc="# assert_eq!(SCHOOL.to_string().as_str(), \"🏫\");"]
#[doc="```"]
pub static SCHOOL :  Emoji = Emoji::new("school", "🏫"); // school
#[doc="stadium 🏟️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STADIUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STADIUM); // 🏟️ (`U+1F3DF U+FE0F`)"] #[doc="# assert_eq!(STADIUM.to_string().as_str(), \"🏟️\");"]
#[doc="```"]
pub static STADIUM :  Emoji = Emoji::new("stadium", "🏟️"); // stadium
#[doc="Statue of Liberty 🗽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STATUE_OF_LIBERTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STATUE_OF_LIBERTY); // 🗽 (`U+1F5FD`)"] #[doc="# assert_eq!(STATUE_OF_LIBERTY.to_string().as_str(), \"🗽\");"]
#[doc="```"]
pub static STATUE_OF_LIBERTY :  Emoji = Emoji::new("Statue of Liberty", "🗽"); // Statue of Liberty
#[doc="Tokyo tower 🗼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TOKYO_TOWER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TOKYO_TOWER); // 🗼 (`U+1F5FC`)"] #[doc="# assert_eq!(TOKYO_TOWER.to_string().as_str(), \"🗼\");"]
#[doc="```"]
pub static TOKYO_TOWER :  Emoji = Emoji::new("Tokyo tower", "🗼"); // Tokyo tower
#[doc="wedding 💒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WEDDING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WEDDING); // 💒 (`U+1F492`)"] #[doc="# assert_eq!(WEDDING.to_string().as_str(), \"💒\");"]
#[doc="```"]
pub static WEDDING :  Emoji = Emoji::new("wedding", "💒"); // wedding
#[doc="wood 🪵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WOOD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WOOD); // 🪵 (`U+1FAB5`)"] #[doc="# assert_eq!(WOOD.to_string().as_str(), \"🪵\");"]
#[doc="```"]
pub static WOOD :  Emoji = Emoji::new("wood", "🪵"); // wood
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BANK, ],
&[&BRICK, ],
&[&BUILDING_CONSTRUCTION, ],
&[&CASTLE, ],
&[&CLASSICAL_BUILDING, ],
&[&CONVENIENCE_STORE, ],
&[&DEPARTMENT_STORE, ],
&[&DERELICT_HOUSE, ],
&[&FACTORY, ],
&[&HOSPITAL, ],
&[&HOTEL, ],
&[&HOUSE, ],
&[&HOUSES, ],
&[&HOUSE_WITH_GARDEN, ],
&[&HUT, ],
&[&JAPANESE_CASTLE, ],
&[&JAPANESE_POST_OFFICE, ],
&[&LOVE_HOTEL, ],
&[&OFFICE_BUILDING, ],
&[&POST_OFFICE, ],
&[&ROCK, ],
&[&SCHOOL, ],
&[&STADIUM, ],
&[&STATUE_OF_LIBERTY, ],
&[&TOKYO_TOWER, ],
&[&WEDDING, ],
&[&WOOD, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BANK, &BRICK, &BUILDING_CONSTRUCTION, &CASTLE, &CLASSICAL_BUILDING, &CONVENIENCE_STORE, &DEPARTMENT_STORE, &DERELICT_HOUSE, &FACTORY, &HOSPITAL, &HOTEL, &HOUSE, &HOUSES, &HOUSE_WITH_GARDEN, &HUT, &JAPANESE_CASTLE, &JAPANESE_POST_OFFICE, &LOVE_HOTEL, &OFFICE_BUILDING, &POST_OFFICE, &ROCK, &SCHOOL, &STADIUM, &STATUE_OF_LIBERTY, &TOKYO_TOWER, &WEDDING, &WOOD, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::place_building

/// place-geographic 🏖️🏕️🏜️
pub mod place_geographic { // travel_and_places::place_geographic
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="beach with umbrella 🏖️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BEACH_WITH_UMBRELLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BEACH_WITH_UMBRELLA); // 🏖️ (`U+1F3D6 U+FE0F`)"] #[doc="# assert_eq!(BEACH_WITH_UMBRELLA.to_string().as_str(), \"🏖️\");"]
#[doc="```"]
pub static BEACH_WITH_UMBRELLA :  Emoji = Emoji::new("beach with umbrella", "🏖️"); // beach with umbrella
#[doc="camping 🏕️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAMPING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAMPING); // 🏕️ (`U+1F3D5 U+FE0F`)"] #[doc="# assert_eq!(CAMPING.to_string().as_str(), \"🏕️\");"]
#[doc="```"]
pub static CAMPING :  Emoji = Emoji::new("camping", "🏕️"); // camping
#[doc="desert 🏜️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DESERT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DESERT); // 🏜️ (`U+1F3DC U+FE0F`)"] #[doc="# assert_eq!(DESERT.to_string().as_str(), \"🏜️\");"]
#[doc="```"]
pub static DESERT :  Emoji = Emoji::new("desert", "🏜️"); // desert
#[doc="desert island 🏝️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DESERT_ISLAND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DESERT_ISLAND); // 🏝️ (`U+1F3DD U+FE0F`)"] #[doc="# assert_eq!(DESERT_ISLAND.to_string().as_str(), \"🏝️\");"]
#[doc="```"]
pub static DESERT_ISLAND :  Emoji = Emoji::new("desert island", "🏝️"); // desert island
#[doc="mountain ⛰️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNTAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNTAIN); // ⛰️ (`U+26F0 U+FE0F`)"] #[doc="# assert_eq!(MOUNTAIN.to_string().as_str(), \"⛰️\");"]
#[doc="```"]
pub static MOUNTAIN :  Emoji = Emoji::new("mountain", "⛰️"); // mountain
#[doc="mount fuji 🗻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNT_FUJI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNT_FUJI); // 🗻 (`U+1F5FB`)"] #[doc="# assert_eq!(MOUNT_FUJI.to_string().as_str(), \"🗻\");"]
#[doc="```"]
pub static MOUNT_FUJI :  Emoji = Emoji::new("mount fuji", "🗻"); // mount fuji
#[doc="national park 🏞️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NATIONAL_PARK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NATIONAL_PARK); // 🏞️ (`U+1F3DE U+FE0F`)"] #[doc="# assert_eq!(NATIONAL_PARK.to_string().as_str(), \"🏞️\");"]
#[doc="```"]
pub static NATIONAL_PARK :  Emoji = Emoji::new("national park", "🏞️"); // national park
#[doc="snow-capped mountain 🏔️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOW_CAPPED_MOUNTAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOW_CAPPED_MOUNTAIN); // 🏔️ (`U+1F3D4 U+FE0F`)"] #[doc="# assert_eq!(SNOW_CAPPED_MOUNTAIN.to_string().as_str(), \"🏔️\");"]
#[doc="```"]
pub static SNOW_CAPPED_MOUNTAIN :  Emoji = Emoji::new("snow-capped mountain", "🏔️"); // snow-capped mountain
#[doc="volcano 🌋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VOLCANO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VOLCANO); // 🌋 (`U+1F30B`)"] #[doc="# assert_eq!(VOLCANO.to_string().as_str(), \"🌋\");"]
#[doc="```"]
pub static VOLCANO :  Emoji = Emoji::new("volcano", "🌋"); // volcano
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BEACH_WITH_UMBRELLA, ],
&[&CAMPING, ],
&[&DESERT, ],
&[&DESERT_ISLAND, ],
&[&MOUNTAIN, ],
&[&MOUNT_FUJI, ],
&[&NATIONAL_PARK, ],
&[&SNOW_CAPPED_MOUNTAIN, ],
&[&VOLCANO, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BEACH_WITH_UMBRELLA, &CAMPING, &DESERT, &DESERT_ISLAND, &MOUNTAIN, &MOUNT_FUJI, &NATIONAL_PARK, &SNOW_CAPPED_MOUNTAIN, &VOLCANO, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::place_geographic

/// place-map 🧭🌎🌏
pub mod place_map { // travel_and_places::place_map
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="compass 🧭"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMPASS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMPASS); // 🧭 (`U+1F9ED`)"] #[doc="# assert_eq!(COMPASS.to_string().as_str(), \"🧭\");"]
#[doc="```"]
pub static COMPASS :  Emoji = Emoji::new("compass", "🧭"); // compass
#[doc="globe showing Americas 🌎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_SHOWING_AMERICAS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_SHOWING_AMERICAS); // 🌎 (`U+1F30E`)"] #[doc="# assert_eq!(GLOBE_SHOWING_AMERICAS.to_string().as_str(), \"🌎\");"]
#[doc="```"]
pub static GLOBE_SHOWING_AMERICAS :  Emoji = Emoji::new("globe showing Americas", "🌎"); // globe showing Americas
#[doc="globe showing Asia-Australia 🌏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_SHOWING_ASIA_AUSTRALIA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_SHOWING_ASIA_AUSTRALIA); // 🌏 (`U+1F30F`)"] #[doc="# assert_eq!(GLOBE_SHOWING_ASIA_AUSTRALIA.to_string().as_str(), \"🌏\");"]
#[doc="```"]
pub static GLOBE_SHOWING_ASIA_AUSTRALIA :  Emoji = Emoji::new("globe showing Asia-Australia", "🌏"); // globe showing Asia-Australia
#[doc="globe showing Europe-Africa 🌍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_SHOWING_EUROPE_AFRICA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_SHOWING_EUROPE_AFRICA); // 🌍 (`U+1F30D`)"] #[doc="# assert_eq!(GLOBE_SHOWING_EUROPE_AFRICA.to_string().as_str(), \"🌍\");"]
#[doc="```"]
pub static GLOBE_SHOWING_EUROPE_AFRICA :  Emoji = Emoji::new("globe showing Europe-Africa", "🌍"); // globe showing Europe-Africa
#[doc="globe with meridians 🌐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOBE_WITH_MERIDIANS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOBE_WITH_MERIDIANS); // 🌐 (`U+1F310`)"] #[doc="# assert_eq!(GLOBE_WITH_MERIDIANS.to_string().as_str(), \"🌐\");"]
#[doc="```"]
pub static GLOBE_WITH_MERIDIANS :  Emoji = Emoji::new("globe with meridians", "🌐"); // globe with meridians
#[doc="map of Japan 🗾"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MAP_OF_JAPAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MAP_OF_JAPAN); // 🗾 (`U+1F5FE`)"] #[doc="# assert_eq!(MAP_OF_JAPAN.to_string().as_str(), \"🗾\");"]
#[doc="```"]
pub static MAP_OF_JAPAN :  Emoji = Emoji::new("map of Japan", "🗾"); // map of Japan
#[doc="world map 🗺️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WORLD_MAP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WORLD_MAP); // 🗺️ (`U+1F5FA U+FE0F`)"] #[doc="# assert_eq!(WORLD_MAP.to_string().as_str(), \"🗺️\");"]
#[doc="```"]
pub static WORLD_MAP :  Emoji = Emoji::new("world map", "🗺️"); // world map
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&COMPASS, ],
&[&GLOBE_SHOWING_AMERICAS, ],
&[&GLOBE_SHOWING_ASIA_AUSTRALIA, ],
&[&GLOBE_SHOWING_EUROPE_AFRICA, ],
&[&GLOBE_WITH_MERIDIANS, ],
&[&MAP_OF_JAPAN, ],
&[&WORLD_MAP, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&COMPASS, &GLOBE_SHOWING_AMERICAS, &GLOBE_SHOWING_ASIA_AUSTRALIA, &GLOBE_SHOWING_EUROPE_AFRICA, &GLOBE_WITH_MERIDIANS, &MAP_OF_JAPAN, &WORLD_MAP, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::place_map

/// place-other 💈🌉🎠
pub mod place_other { // travel_and_places::place_other
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="barber pole 💈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BARBER_POLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BARBER_POLE); // 💈 (`U+1F488`)"] #[doc="# assert_eq!(BARBER_POLE.to_string().as_str(), \"💈\");"]
#[doc="```"]
pub static BARBER_POLE :  Emoji = Emoji::new("barber pole", "💈"); // barber pole
#[doc="bridge at night 🌉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BRIDGE_AT_NIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BRIDGE_AT_NIGHT); // 🌉 (`U+1F309`)"] #[doc="# assert_eq!(BRIDGE_AT_NIGHT.to_string().as_str(), \"🌉\");"]
#[doc="```"]
pub static BRIDGE_AT_NIGHT :  Emoji = Emoji::new("bridge at night", "🌉"); // bridge at night
#[doc="carousel horse 🎠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CAROUSEL_HORSE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CAROUSEL_HORSE); // 🎠 (`U+1F3A0`)"] #[doc="# assert_eq!(CAROUSEL_HORSE.to_string().as_str(), \"🎠\");"]
#[doc="```"]
pub static CAROUSEL_HORSE :  Emoji = Emoji::new("carousel horse", "🎠"); // carousel horse
#[doc="circus tent 🎪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CIRCUS_TENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CIRCUS_TENT); // 🎪 (`U+1F3AA`)"] #[doc="# assert_eq!(CIRCUS_TENT.to_string().as_str(), \"🎪\");"]
#[doc="```"]
pub static CIRCUS_TENT :  Emoji = Emoji::new("circus tent", "🎪"); // circus tent
#[doc="cityscape 🏙️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CITYSCAPE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CITYSCAPE); // 🏙️ (`U+1F3D9 U+FE0F`)"] #[doc="# assert_eq!(CITYSCAPE.to_string().as_str(), \"🏙️\");"]
#[doc="```"]
pub static CITYSCAPE :  Emoji = Emoji::new("cityscape", "🏙️"); // cityscape
#[doc="cityscape at dusk 🌆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CITYSCAPE_AT_DUSK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CITYSCAPE_AT_DUSK); // 🌆 (`U+1F306`)"] #[doc="# assert_eq!(CITYSCAPE_AT_DUSK.to_string().as_str(), \"🌆\");"]
#[doc="```"]
pub static CITYSCAPE_AT_DUSK :  Emoji = Emoji::new("cityscape at dusk", "🌆"); // cityscape at dusk
#[doc="ferris wheel 🎡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FERRIS_WHEEL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FERRIS_WHEEL); // 🎡 (`U+1F3A1`)"] #[doc="# assert_eq!(FERRIS_WHEEL.to_string().as_str(), \"🎡\");"]
#[doc="```"]
pub static FERRIS_WHEEL :  Emoji = Emoji::new("ferris wheel", "🎡"); // ferris wheel
#[doc="foggy 🌁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOGGY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOGGY); // 🌁 (`U+1F301`)"] #[doc="# assert_eq!(FOGGY.to_string().as_str(), \"🌁\");"]
#[doc="```"]
pub static FOGGY :  Emoji = Emoji::new("foggy", "🌁"); // foggy
#[doc="fountain ⛲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUNTAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUNTAIN); // ⛲ (`U+26F2`)"] #[doc="# assert_eq!(FOUNTAIN.to_string().as_str(), \"⛲\");"]
#[doc="```"]
pub static FOUNTAIN :  Emoji = Emoji::new("fountain", "⛲"); // fountain
#[doc="hot springs ♨️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOT_SPRINGS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOT_SPRINGS); // ♨️ (`U+2668 U+FE0F`)"] #[doc="# assert_eq!(HOT_SPRINGS.to_string().as_str(), \"♨️\");"]
#[doc="```"]
pub static HOT_SPRINGS :  Emoji = Emoji::new("hot springs", "♨️"); // hot springs
#[doc="night with stars 🌃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NIGHT_WITH_STARS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NIGHT_WITH_STARS); // 🌃 (`U+1F303`)"] #[doc="# assert_eq!(NIGHT_WITH_STARS.to_string().as_str(), \"🌃\");"]
#[doc="```"]
pub static NIGHT_WITH_STARS :  Emoji = Emoji::new("night with stars", "🌃"); // night with stars
#[doc="roller coaster 🎢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLER_COASTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLER_COASTER); // 🎢 (`U+1F3A2`)"] #[doc="# assert_eq!(ROLLER_COASTER.to_string().as_str(), \"🎢\");"]
#[doc="```"]
pub static ROLLER_COASTER :  Emoji = Emoji::new("roller coaster", "🎢"); // roller coaster
#[doc="sunrise 🌅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNRISE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNRISE); // 🌅 (`U+1F305`)"] #[doc="# assert_eq!(SUNRISE.to_string().as_str(), \"🌅\");"]
#[doc="```"]
pub static SUNRISE :  Emoji = Emoji::new("sunrise", "🌅"); // sunrise
#[doc="sunrise over mountains 🌄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNRISE_OVER_MOUNTAINS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNRISE_OVER_MOUNTAINS); // 🌄 (`U+1F304`)"] #[doc="# assert_eq!(SUNRISE_OVER_MOUNTAINS.to_string().as_str(), \"🌄\");"]
#[doc="```"]
pub static SUNRISE_OVER_MOUNTAINS :  Emoji = Emoji::new("sunrise over mountains", "🌄"); // sunrise over mountains
#[doc="sunset 🌇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUNSET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUNSET); // 🌇 (`U+1F307`)"] #[doc="# assert_eq!(SUNSET.to_string().as_str(), \"🌇\");"]
#[doc="```"]
pub static SUNSET :  Emoji = Emoji::new("sunset", "🌇"); // sunset
#[doc="tent ⛺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TENT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TENT); // ⛺ (`U+26FA`)"] #[doc="# assert_eq!(TENT.to_string().as_str(), \"⛺\");"]
#[doc="```"]
pub static TENT :  Emoji = Emoji::new("tent", "⛺"); // tent
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&BARBER_POLE, ],
&[&BRIDGE_AT_NIGHT, ],
&[&CAROUSEL_HORSE, ],
&[&CIRCUS_TENT, ],
&[&CITYSCAPE, ],
&[&CITYSCAPE_AT_DUSK, ],
&[&FERRIS_WHEEL, ],
&[&FOGGY, ],
&[&FOUNTAIN, ],
&[&HOT_SPRINGS, ],
&[&NIGHT_WITH_STARS, ],
&[&ROLLER_COASTER, ],
&[&SUNRISE, ],
&[&SUNRISE_OVER_MOUNTAINS, ],
&[&SUNSET, ],
&[&TENT, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&BARBER_POLE, &BRIDGE_AT_NIGHT, &CAROUSEL_HORSE, &CIRCUS_TENT, &CITYSCAPE, &CITYSCAPE_AT_DUSK, &FERRIS_WHEEL, &FOGGY, &FOUNTAIN, &HOT_SPRINGS, &NIGHT_WITH_STARS, &ROLLER_COASTER, &SUNRISE, &SUNRISE_OVER_MOUNTAINS, &SUNSET, &TENT, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::place_other

/// place-religious ⛪🛕🕋
pub mod place_religious { // travel_and_places::place_religious
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="church ⛪"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CHURCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CHURCH); // ⛪ (`U+26EA`)"] #[doc="# assert_eq!(CHURCH.to_string().as_str(), \"⛪\");"]
#[doc="```"]
pub static CHURCH :  Emoji = Emoji::new("church", "⛪"); // church
#[doc="hindu temple 🛕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HINDU_TEMPLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HINDU_TEMPLE); // 🛕 (`U+1F6D5`)"] #[doc="# assert_eq!(HINDU_TEMPLE.to_string().as_str(), \"🛕\");"]
#[doc="```"]
pub static HINDU_TEMPLE :  Emoji = Emoji::new("hindu temple", "🛕"); // hindu temple
#[doc="kaaba 🕋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KAABA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KAABA); // 🕋 (`U+1F54B`)"] #[doc="# assert_eq!(KAABA.to_string().as_str(), \"🕋\");"]
#[doc="```"]
pub static KAABA :  Emoji = Emoji::new("kaaba", "🕋"); // kaaba
#[doc="mosque 🕌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOSQUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOSQUE); // 🕌 (`U+1F54C`)"] #[doc="# assert_eq!(MOSQUE.to_string().as_str(), \"🕌\");"]
#[doc="```"]
pub static MOSQUE :  Emoji = Emoji::new("mosque", "🕌"); // mosque
#[doc="shinto shrine ⛩️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHINTO_SHRINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHINTO_SHRINE); // ⛩️ (`U+26E9 U+FE0F`)"] #[doc="# assert_eq!(SHINTO_SHRINE.to_string().as_str(), \"⛩️\");"]
#[doc="```"]
pub static SHINTO_SHRINE :  Emoji = Emoji::new("shinto shrine", "⛩️"); // shinto shrine
#[doc="synagogue 🕍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SYNAGOGUE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SYNAGOGUE); // 🕍 (`U+1F54D`)"] #[doc="# assert_eq!(SYNAGOGUE.to_string().as_str(), \"🕍\");"]
#[doc="```"]
pub static SYNAGOGUE :  Emoji = Emoji::new("synagogue", "🕍"); // synagogue
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CHURCH, ],
&[&HINDU_TEMPLE, ],
&[&KAABA, ],
&[&MOSQUE, ],
&[&SHINTO_SHRINE, ],
&[&SYNAGOGUE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CHURCH, &HINDU_TEMPLE, &KAABA, &MOSQUE, &SHINTO_SHRINE, &SYNAGOGUE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::place_religious

/// sky & weather 🌂☁️🌩️
pub mod sky_and_weather { // travel_and_places::sky_and_weather
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="closed umbrella 🌂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOSED_UMBRELLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOSED_UMBRELLA); // 🌂 (`U+1F302`)"] #[doc="# assert_eq!(CLOSED_UMBRELLA.to_string().as_str(), \"🌂\");"]
#[doc="```"]
pub static CLOSED_UMBRELLA :  Emoji = Emoji::new("closed umbrella", "🌂"); // closed umbrella
#[doc="cloud ☁️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD); // ☁️ (`U+2601 U+FE0F`)"] #[doc="# assert_eq!(CLOUD.to_string().as_str(), \"☁️\");"]
#[doc="```"]
pub static CLOUD :  Emoji = Emoji::new("cloud", "☁️"); // cloud
#[doc="cloud with lightning 🌩️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_LIGHTNING;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_LIGHTNING); // 🌩️ (`U+1F329 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_LIGHTNING.to_string().as_str(), \"🌩️\");"]
#[doc="```"]
pub static CLOUD_WITH_LIGHTNING :  Emoji = Emoji::new("cloud with lightning", "🌩️"); // cloud with lightning
#[doc="cloud with lightning and rain ⛈️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_LIGHTNING_AND_RAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_LIGHTNING_AND_RAIN); // ⛈️ (`U+26C8 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_LIGHTNING_AND_RAIN.to_string().as_str(), \"⛈️\");"]
#[doc="```"]
pub static CLOUD_WITH_LIGHTNING_AND_RAIN :  Emoji = Emoji::new("cloud with lightning and rain", "⛈️"); // cloud with lightning and rain
#[doc="cloud with rain 🌧️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_RAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_RAIN); // 🌧️ (`U+1F327 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_RAIN.to_string().as_str(), \"🌧️\");"]
#[doc="```"]
pub static CLOUD_WITH_RAIN :  Emoji = Emoji::new("cloud with rain", "🌧️"); // cloud with rain
#[doc="cloud with snow 🌨️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CLOUD_WITH_SNOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CLOUD_WITH_SNOW); // 🌨️ (`U+1F328 U+FE0F`)"] #[doc="# assert_eq!(CLOUD_WITH_SNOW.to_string().as_str(), \"🌨️\");"]
#[doc="```"]
pub static CLOUD_WITH_SNOW :  Emoji = Emoji::new("cloud with snow", "🌨️"); // cloud with snow
#[doc="comet ☄️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::COMET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", COMET); // ☄️ (`U+2604 U+FE0F`)"] #[doc="# assert_eq!(COMET.to_string().as_str(), \"☄️\");"]
#[doc="```"]
pub static COMET :  Emoji = Emoji::new("comet", "☄️"); // comet
#[doc="crescent moon 🌙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CRESCENT_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CRESCENT_MOON); // 🌙 (`U+1F319`)"] #[doc="# assert_eq!(CRESCENT_MOON.to_string().as_str(), \"🌙\");"]
#[doc="```"]
pub static CRESCENT_MOON :  Emoji = Emoji::new("crescent moon", "🌙"); // crescent moon
#[doc="cyclone 🌀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CYCLONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CYCLONE); // 🌀 (`U+1F300`)"] #[doc="# assert_eq!(CYCLONE.to_string().as_str(), \"🌀\");"]
#[doc="```"]
pub static CYCLONE :  Emoji = Emoji::new("cyclone", "🌀"); // cyclone
#[doc="droplet 💧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DROPLET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DROPLET); // 💧 (`U+1F4A7`)"] #[doc="# assert_eq!(DROPLET.to_string().as_str(), \"💧\");"]
#[doc="```"]
pub static DROPLET :  Emoji = Emoji::new("droplet", "💧"); // droplet
#[doc="fire 🔥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRE); // 🔥 (`U+1F525`)"] #[doc="# assert_eq!(FIRE.to_string().as_str(), \"🔥\");"]
#[doc="```"]
pub static FIRE :  Emoji = Emoji::new("fire", "🔥"); // fire
#[doc="first quarter moon 🌓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRST_QUARTER_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRST_QUARTER_MOON); // 🌓 (`U+1F313`)"] #[doc="# assert_eq!(FIRST_QUARTER_MOON.to_string().as_str(), \"🌓\");"]
#[doc="```"]
pub static FIRST_QUARTER_MOON :  Emoji = Emoji::new("first quarter moon", "🌓"); // first quarter moon
#[doc="first quarter moon face 🌛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRST_QUARTER_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRST_QUARTER_MOON_FACE); // 🌛 (`U+1F31B`)"] #[doc="# assert_eq!(FIRST_QUARTER_MOON_FACE.to_string().as_str(), \"🌛\");"]
#[doc="```"]
pub static FIRST_QUARTER_MOON_FACE :  Emoji = Emoji::new("first quarter moon face", "🌛"); // first quarter moon face
#[doc="fog 🌫️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOG;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOG); // 🌫️ (`U+1F32B U+FE0F`)"] #[doc="# assert_eq!(FOG.to_string().as_str(), \"🌫️\");"]
#[doc="```"]
pub static FOG :  Emoji = Emoji::new("fog", "🌫️"); // fog
#[doc="full moon 🌕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FULL_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FULL_MOON); // 🌕 (`U+1F315`)"] #[doc="# assert_eq!(FULL_MOON.to_string().as_str(), \"🌕\");"]
#[doc="```"]
pub static FULL_MOON :  Emoji = Emoji::new("full moon", "🌕"); // full moon
#[doc="full moon face 🌝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FULL_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FULL_MOON_FACE); // 🌝 (`U+1F31D`)"] #[doc="# assert_eq!(FULL_MOON_FACE.to_string().as_str(), \"🌝\");"]
#[doc="```"]
pub static FULL_MOON_FACE :  Emoji = Emoji::new("full moon face", "🌝"); // full moon face
#[doc="glowing star 🌟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::GLOWING_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", GLOWING_STAR); // 🌟 (`U+1F31F`)"] #[doc="# assert_eq!(GLOWING_STAR.to_string().as_str(), \"🌟\");"]
#[doc="```"]
pub static GLOWING_STAR :  Emoji = Emoji::new("glowing star", "🌟"); // glowing star
#[doc="high voltage ⚡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIGH_VOLTAGE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIGH_VOLTAGE); // ⚡ (`U+26A1`)"] #[doc="# assert_eq!(HIGH_VOLTAGE.to_string().as_str(), \"⚡\");"]
#[doc="```"]
pub static HIGH_VOLTAGE :  Emoji = Emoji::new("high voltage", "⚡"); // high voltage
#[doc="last quarter moon 🌗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAST_QUARTER_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAST_QUARTER_MOON); // 🌗 (`U+1F317`)"] #[doc="# assert_eq!(LAST_QUARTER_MOON.to_string().as_str(), \"🌗\");"]
#[doc="```"]
pub static LAST_QUARTER_MOON :  Emoji = Emoji::new("last quarter moon", "🌗"); // last quarter moon
#[doc="last quarter moon face 🌜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LAST_QUARTER_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LAST_QUARTER_MOON_FACE); // 🌜 (`U+1F31C`)"] #[doc="# assert_eq!(LAST_QUARTER_MOON_FACE.to_string().as_str(), \"🌜\");"]
#[doc="```"]
pub static LAST_QUARTER_MOON_FACE :  Emoji = Emoji::new("last quarter moon face", "🌜"); // last quarter moon face
#[doc="milky way 🌌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MILKY_WAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MILKY_WAY); // 🌌 (`U+1F30C`)"] #[doc="# assert_eq!(MILKY_WAY.to_string().as_str(), \"🌌\");"]
#[doc="```"]
pub static MILKY_WAY :  Emoji = Emoji::new("milky way", "🌌"); // milky way
#[doc="new moon 🌑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEW_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEW_MOON); // 🌑 (`U+1F311`)"] #[doc="# assert_eq!(NEW_MOON.to_string().as_str(), \"🌑\");"]
#[doc="```"]
pub static NEW_MOON :  Emoji = Emoji::new("new moon", "🌑"); // new moon
#[doc="new moon face 🌚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NEW_MOON_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NEW_MOON_FACE); // 🌚 (`U+1F31A`)"] #[doc="# assert_eq!(NEW_MOON_FACE.to_string().as_str(), \"🌚\");"]
#[doc="```"]
pub static NEW_MOON_FACE :  Emoji = Emoji::new("new moon face", "🌚"); // new moon face
#[doc="rainbow 🌈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAINBOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAINBOW); // 🌈 (`U+1F308`)"] #[doc="# assert_eq!(RAINBOW.to_string().as_str(), \"🌈\");"]
#[doc="```"]
pub static RAINBOW :  Emoji = Emoji::new("rainbow", "🌈"); // rainbow
#[doc="ringed planet 🪐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RINGED_PLANET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RINGED_PLANET); // 🪐 (`U+1FA90`)"] #[doc="# assert_eq!(RINGED_PLANET.to_string().as_str(), \"🪐\");"]
#[doc="```"]
pub static RINGED_PLANET :  Emoji = Emoji::new("ringed planet", "🪐"); // ringed planet
#[doc="shooting star 🌠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHOOTING_STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHOOTING_STAR); // 🌠 (`U+1F320`)"] #[doc="# assert_eq!(SHOOTING_STAR.to_string().as_str(), \"🌠\");"]
#[doc="```"]
pub static SHOOTING_STAR :  Emoji = Emoji::new("shooting star", "🌠"); // shooting star
#[doc="snowflake ❄️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWFLAKE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWFLAKE); // ❄️ (`U+2744 U+FE0F`)"] #[doc="# assert_eq!(SNOWFLAKE.to_string().as_str(), \"❄️\");"]
#[doc="```"]
pub static SNOWFLAKE :  Emoji = Emoji::new("snowflake", "❄️"); // snowflake
#[doc="snowman ☃️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWMAN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWMAN); // ☃️ (`U+2603 U+FE0F`)"] #[doc="# assert_eq!(SNOWMAN.to_string().as_str(), \"☃️\");"]
#[doc="```"]
pub static SNOWMAN :  Emoji = Emoji::new("snowman", "☃️"); // snowman
#[doc="snowman without snow ⛄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SNOWMAN_WITHOUT_SNOW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SNOWMAN_WITHOUT_SNOW); // ⛄ (`U+26C4`)"] #[doc="# assert_eq!(SNOWMAN_WITHOUT_SNOW.to_string().as_str(), \"⛄\");"]
#[doc="```"]
pub static SNOWMAN_WITHOUT_SNOW :  Emoji = Emoji::new("snowman without snow", "⛄"); // snowman without snow
#[doc="star ⭐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STAR); // ⭐ (`U+2B50`)"] #[doc="# assert_eq!(STAR.to_string().as_str(), \"⭐\");"]
#[doc="```"]
pub static STAR :  Emoji = Emoji::new("star", "⭐"); // star
#[doc="sun ☀️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN); // ☀️ (`U+2600 U+FE0F`)"] #[doc="# assert_eq!(SUN.to_string().as_str(), \"☀️\");"]
#[doc="```"]
pub static SUN :  Emoji = Emoji::new("sun", "☀️"); // sun
#[doc="sun behind cloud ⛅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_CLOUD); // ⛅ (`U+26C5`)"] #[doc="# assert_eq!(SUN_BEHIND_CLOUD.to_string().as_str(), \"⛅\");"]
#[doc="```"]
pub static SUN_BEHIND_CLOUD :  Emoji = Emoji::new("sun behind cloud", "⛅"); // sun behind cloud
#[doc="sun behind large cloud 🌥️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_LARGE_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_LARGE_CLOUD); // 🌥️ (`U+1F325 U+FE0F`)"] #[doc="# assert_eq!(SUN_BEHIND_LARGE_CLOUD.to_string().as_str(), \"🌥️\");"]
#[doc="```"]
pub static SUN_BEHIND_LARGE_CLOUD :  Emoji = Emoji::new("sun behind large cloud", "🌥️"); // sun behind large cloud
#[doc="sun behind rain cloud 🌦️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_RAIN_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_RAIN_CLOUD); // 🌦️ (`U+1F326 U+FE0F`)"] #[doc="# assert_eq!(SUN_BEHIND_RAIN_CLOUD.to_string().as_str(), \"🌦️\");"]
#[doc="```"]
pub static SUN_BEHIND_RAIN_CLOUD :  Emoji = Emoji::new("sun behind rain cloud", "🌦️"); // sun behind rain cloud
#[doc="sun behind small cloud 🌤️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_BEHIND_SMALL_CLOUD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_BEHIND_SMALL_CLOUD); // 🌤️ (`U+1F324 U+FE0F`)"] #[doc="# assert_eq!(SUN_BEHIND_SMALL_CLOUD.to_string().as_str(), \"🌤️\");"]
#[doc="```"]
pub static SUN_BEHIND_SMALL_CLOUD :  Emoji = Emoji::new("sun behind small cloud", "🌤️"); // sun behind small cloud
#[doc="sun with face 🌞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUN_WITH_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUN_WITH_FACE); // 🌞 (`U+1F31E`)"] #[doc="# assert_eq!(SUN_WITH_FACE.to_string().as_str(), \"🌞\");"]
#[doc="```"]
pub static SUN_WITH_FACE :  Emoji = Emoji::new("sun with face", "🌞"); // sun with face
#[doc="thermometer 🌡️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THERMOMETER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THERMOMETER); // 🌡️ (`U+1F321 U+FE0F`)"] #[doc="# assert_eq!(THERMOMETER.to_string().as_str(), \"🌡️\");"]
#[doc="```"]
pub static THERMOMETER :  Emoji = Emoji::new("thermometer", "🌡️"); // thermometer
#[doc="tornado 🌪️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TORNADO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TORNADO); // 🌪️ (`U+1F32A U+FE0F`)"] #[doc="# assert_eq!(TORNADO.to_string().as_str(), \"🌪️\");"]
#[doc="```"]
pub static TORNADO :  Emoji = Emoji::new("tornado", "🌪️"); // tornado
#[doc="umbrella ☂️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UMBRELLA;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UMBRELLA); // ☂️ (`U+2602 U+FE0F`)"] #[doc="# assert_eq!(UMBRELLA.to_string().as_str(), \"☂️\");"]
#[doc="```"]
pub static UMBRELLA :  Emoji = Emoji::new("umbrella", "☂️"); // umbrella
#[doc="umbrella on ground ⛱️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UMBRELLA_ON_GROUND;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UMBRELLA_ON_GROUND); // ⛱️ (`U+26F1 U+FE0F`)"] #[doc="# assert_eq!(UMBRELLA_ON_GROUND.to_string().as_str(), \"⛱️\");"]
#[doc="```"]
pub static UMBRELLA_ON_GROUND :  Emoji = Emoji::new("umbrella on ground", "⛱️"); // umbrella on ground
#[doc="umbrella with rain drops ☔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::UMBRELLA_WITH_RAIN_DROPS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", UMBRELLA_WITH_RAIN_DROPS); // ☔ (`U+2614`)"] #[doc="# assert_eq!(UMBRELLA_WITH_RAIN_DROPS.to_string().as_str(), \"☔\");"]
#[doc="```"]
pub static UMBRELLA_WITH_RAIN_DROPS :  Emoji = Emoji::new("umbrella with rain drops", "☔"); // umbrella with rain drops
#[doc="waning crescent moon 🌘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WANING_CRESCENT_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WANING_CRESCENT_MOON); // 🌘 (`U+1F318`)"] #[doc="# assert_eq!(WANING_CRESCENT_MOON.to_string().as_str(), \"🌘\");"]
#[doc="```"]
pub static WANING_CRESCENT_MOON :  Emoji = Emoji::new("waning crescent moon", "🌘"); // waning crescent moon
#[doc="waning gibbous moon 🌖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WANING_GIBBOUS_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WANING_GIBBOUS_MOON); // 🌖 (`U+1F316`)"] #[doc="# assert_eq!(WANING_GIBBOUS_MOON.to_string().as_str(), \"🌖\");"]
#[doc="```"]
pub static WANING_GIBBOUS_MOON :  Emoji = Emoji::new("waning gibbous moon", "🌖"); // waning gibbous moon
#[doc="water wave 🌊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATER_WAVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATER_WAVE); // 🌊 (`U+1F30A`)"] #[doc="# assert_eq!(WATER_WAVE.to_string().as_str(), \"🌊\");"]
#[doc="```"]
pub static WATER_WAVE :  Emoji = Emoji::new("water wave", "🌊"); // water wave
#[doc="waxing crescent moon 🌒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAXING_CRESCENT_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAXING_CRESCENT_MOON); // 🌒 (`U+1F312`)"] #[doc="# assert_eq!(WAXING_CRESCENT_MOON.to_string().as_str(), \"🌒\");"]
#[doc="```"]
pub static WAXING_CRESCENT_MOON :  Emoji = Emoji::new("waxing crescent moon", "🌒"); // waxing crescent moon
#[doc="waxing gibbous moon 🌔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WAXING_GIBBOUS_MOON;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WAXING_GIBBOUS_MOON); // 🌔 (`U+1F314`)"] #[doc="# assert_eq!(WAXING_GIBBOUS_MOON.to_string().as_str(), \"🌔\");"]
#[doc="```"]
pub static WAXING_GIBBOUS_MOON :  Emoji = Emoji::new("waxing gibbous moon", "🌔"); // waxing gibbous moon
#[doc="wind face 🌬️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WIND_FACE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WIND_FACE); // 🌬️ (`U+1F32C U+FE0F`)"] #[doc="# assert_eq!(WIND_FACE.to_string().as_str(), \"🌬️\");"]
#[doc="```"]
pub static WIND_FACE :  Emoji = Emoji::new("wind face", "🌬️"); // wind face
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&CLOSED_UMBRELLA, ],
&[&CLOUD, ],
&[&CLOUD_WITH_LIGHTNING, ],
&[&CLOUD_WITH_LIGHTNING_AND_RAIN, ],
&[&CLOUD_WITH_RAIN, ],
&[&CLOUD_WITH_SNOW, ],
&[&COMET, ],
&[&CRESCENT_MOON, ],
&[&CYCLONE, ],
&[&DROPLET, ],
&[&FIRE, ],
&[&FIRST_QUARTER_MOON, ],
&[&FIRST_QUARTER_MOON_FACE, ],
&[&FOG, ],
&[&FULL_MOON, ],
&[&FULL_MOON_FACE, ],
&[&GLOWING_STAR, ],
&[&HIGH_VOLTAGE, ],
&[&LAST_QUARTER_MOON, ],
&[&LAST_QUARTER_MOON_FACE, ],
&[&MILKY_WAY, ],
&[&NEW_MOON, ],
&[&NEW_MOON_FACE, ],
&[&RAINBOW, ],
&[&RINGED_PLANET, ],
&[&SHOOTING_STAR, ],
&[&SNOWFLAKE, ],
&[&SNOWMAN, ],
&[&SNOWMAN_WITHOUT_SNOW, ],
&[&STAR, ],
&[&SUN, ],
&[&SUN_BEHIND_CLOUD, ],
&[&SUN_BEHIND_LARGE_CLOUD, ],
&[&SUN_BEHIND_RAIN_CLOUD, ],
&[&SUN_BEHIND_SMALL_CLOUD, ],
&[&SUN_WITH_FACE, ],
&[&THERMOMETER, ],
&[&TORNADO, ],
&[&UMBRELLA, ],
&[&UMBRELLA_ON_GROUND, ],
&[&UMBRELLA_WITH_RAIN_DROPS, ],
&[&WANING_CRESCENT_MOON, ],
&[&WANING_GIBBOUS_MOON, ],
&[&WATER_WAVE, ],
&[&WAXING_CRESCENT_MOON, ],
&[&WAXING_GIBBOUS_MOON, ],
&[&WIND_FACE, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&CLOSED_UMBRELLA, &CLOUD, &CLOUD_WITH_LIGHTNING, &CLOUD_WITH_LIGHTNING_AND_RAIN, &CLOUD_WITH_RAIN, &CLOUD_WITH_SNOW, &COMET, &CRESCENT_MOON, &CYCLONE, &DROPLET, &FIRE, &FIRST_QUARTER_MOON, &FIRST_QUARTER_MOON_FACE, &FOG, &FULL_MOON, &FULL_MOON_FACE, &GLOWING_STAR, &HIGH_VOLTAGE, &LAST_QUARTER_MOON, &LAST_QUARTER_MOON_FACE, &MILKY_WAY, &NEW_MOON, &NEW_MOON_FACE, &RAINBOW, &RINGED_PLANET, &SHOOTING_STAR, &SNOWFLAKE, &SNOWMAN, &SNOWMAN_WITHOUT_SNOW, &STAR, &SUN, &SUN_BEHIND_CLOUD, &SUN_BEHIND_LARGE_CLOUD, &SUN_BEHIND_RAIN_CLOUD, &SUN_BEHIND_SMALL_CLOUD, &SUN_WITH_FACE, &THERMOMETER, &TORNADO, &UMBRELLA, &UMBRELLA_ON_GROUND, &UMBRELLA_WITH_RAIN_DROPS, &WANING_CRESCENT_MOON, &WANING_GIBBOUS_MOON, &WATER_WAVE, &WAXING_CRESCENT_MOON, &WAXING_GIBBOUS_MOON, &WIND_FACE, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::sky_and_weather

/// time ⏰🕗🕣
pub mod time { // travel_and_places::time
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="alarm clock ⏰"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ALARM_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ALARM_CLOCK); // ⏰ (`U+23F0`)"] #[doc="# assert_eq!(ALARM_CLOCK.to_string().as_str(), \"⏰\");"]
#[doc="```"]
pub static ALARM_CLOCK :  Emoji = Emoji::new("alarm clock", "⏰"); // alarm clock
#[doc="eight o’clock 🕗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_O_CLOCK); // 🕗 (`U+1F557`)"] #[doc="# assert_eq!(EIGHT_O_CLOCK.to_string().as_str(), \"🕗\");"]
#[doc="```"]
pub static EIGHT_O_CLOCK :  Emoji = Emoji::new("eight o’clock", "🕗"); // eight o’clock
#[doc="eight-thirty 🕣"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::EIGHT_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", EIGHT_THIRTY); // 🕣 (`U+1F563`)"] #[doc="# assert_eq!(EIGHT_THIRTY.to_string().as_str(), \"🕣\");"]
#[doc="```"]
pub static EIGHT_THIRTY :  Emoji = Emoji::new("eight-thirty", "🕣"); // eight-thirty
#[doc="eleven o’clock 🕚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEVEN_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEVEN_O_CLOCK); // 🕚 (`U+1F55A`)"] #[doc="# assert_eq!(ELEVEN_O_CLOCK.to_string().as_str(), \"🕚\");"]
#[doc="```"]
pub static ELEVEN_O_CLOCK :  Emoji = Emoji::new("eleven o’clock", "🕚"); // eleven o’clock
#[doc="eleven-thirty 🕦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ELEVEN_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ELEVEN_THIRTY); // 🕦 (`U+1F566`)"] #[doc="# assert_eq!(ELEVEN_THIRTY.to_string().as_str(), \"🕦\");"]
#[doc="```"]
pub static ELEVEN_THIRTY :  Emoji = Emoji::new("eleven-thirty", "🕦"); // eleven-thirty
#[doc="five o’clock 🕔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIVE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIVE_O_CLOCK); // 🕔 (`U+1F554`)"] #[doc="# assert_eq!(FIVE_O_CLOCK.to_string().as_str(), \"🕔\");"]
#[doc="```"]
pub static FIVE_O_CLOCK :  Emoji = Emoji::new("five o’clock", "🕔"); // five o’clock
#[doc="five-thirty 🕠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIVE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIVE_THIRTY); // 🕠 (`U+1F560`)"] #[doc="# assert_eq!(FIVE_THIRTY.to_string().as_str(), \"🕠\");"]
#[doc="```"]
pub static FIVE_THIRTY :  Emoji = Emoji::new("five-thirty", "🕠"); // five-thirty
#[doc="four o’clock 🕓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUR_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUR_O_CLOCK); // 🕓 (`U+1F553`)"] #[doc="# assert_eq!(FOUR_O_CLOCK.to_string().as_str(), \"🕓\");"]
#[doc="```"]
pub static FOUR_O_CLOCK :  Emoji = Emoji::new("four o’clock", "🕓"); // four o’clock
#[doc="four-thirty 🕟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FOUR_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FOUR_THIRTY); // 🕟 (`U+1F55F`)"] #[doc="# assert_eq!(FOUR_THIRTY.to_string().as_str(), \"🕟\");"]
#[doc="```"]
pub static FOUR_THIRTY :  Emoji = Emoji::new("four-thirty", "🕟"); // four-thirty
#[doc="hourglass done ⌛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOURGLASS_DONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOURGLASS_DONE); // ⌛ (`U+231B`)"] #[doc="# assert_eq!(HOURGLASS_DONE.to_string().as_str(), \"⌛\");"]
#[doc="```"]
pub static HOURGLASS_DONE :  Emoji = Emoji::new("hourglass done", "⌛"); // hourglass done
#[doc="hourglass not done ⏳"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HOURGLASS_NOT_DONE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HOURGLASS_NOT_DONE); // ⏳ (`U+23F3`)"] #[doc="# assert_eq!(HOURGLASS_NOT_DONE.to_string().as_str(), \"⏳\");"]
#[doc="```"]
pub static HOURGLASS_NOT_DONE :  Emoji = Emoji::new("hourglass not done", "⏳"); // hourglass not done
#[doc="mantelpiece clock 🕰️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MANTELPIECE_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MANTELPIECE_CLOCK); // 🕰️ (`U+1F570 U+FE0F`)"] #[doc="# assert_eq!(MANTELPIECE_CLOCK.to_string().as_str(), \"🕰️\");"]
#[doc="```"]
pub static MANTELPIECE_CLOCK :  Emoji = Emoji::new("mantelpiece clock", "🕰️"); // mantelpiece clock
#[doc="nine o’clock 🕘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NINE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NINE_O_CLOCK); // 🕘 (`U+1F558`)"] #[doc="# assert_eq!(NINE_O_CLOCK.to_string().as_str(), \"🕘\");"]
#[doc="```"]
pub static NINE_O_CLOCK :  Emoji = Emoji::new("nine o’clock", "🕘"); // nine o’clock
#[doc="nine-thirty 🕤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::NINE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", NINE_THIRTY); // 🕤 (`U+1F564`)"] #[doc="# assert_eq!(NINE_THIRTY.to_string().as_str(), \"🕤\");"]
#[doc="```"]
pub static NINE_THIRTY :  Emoji = Emoji::new("nine-thirty", "🕤"); // nine-thirty
#[doc="one o’clock 🕐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONE_O_CLOCK); // 🕐 (`U+1F550`)"] #[doc="# assert_eq!(ONE_O_CLOCK.to_string().as_str(), \"🕐\");"]
#[doc="```"]
pub static ONE_O_CLOCK :  Emoji = Emoji::new("one o’clock", "🕐"); // one o’clock
#[doc="one-thirty 🕜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONE_THIRTY); // 🕜 (`U+1F55C`)"] #[doc="# assert_eq!(ONE_THIRTY.to_string().as_str(), \"🕜\");"]
#[doc="```"]
pub static ONE_THIRTY :  Emoji = Emoji::new("one-thirty", "🕜"); // one-thirty
#[doc="seven o’clock 🕖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEVEN_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEVEN_O_CLOCK); // 🕖 (`U+1F556`)"] #[doc="# assert_eq!(SEVEN_O_CLOCK.to_string().as_str(), \"🕖\");"]
#[doc="```"]
pub static SEVEN_O_CLOCK :  Emoji = Emoji::new("seven o’clock", "🕖"); // seven o’clock
#[doc="seven-thirty 🕢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEVEN_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEVEN_THIRTY); // 🕢 (`U+1F562`)"] #[doc="# assert_eq!(SEVEN_THIRTY.to_string().as_str(), \"🕢\");"]
#[doc="```"]
pub static SEVEN_THIRTY :  Emoji = Emoji::new("seven-thirty", "🕢"); // seven-thirty
#[doc="six o’clock 🕕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SIX_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SIX_O_CLOCK); // 🕕 (`U+1F555`)"] #[doc="# assert_eq!(SIX_O_CLOCK.to_string().as_str(), \"🕕\");"]
#[doc="```"]
pub static SIX_O_CLOCK :  Emoji = Emoji::new("six o’clock", "🕕"); // six o’clock
#[doc="six-thirty 🕡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SIX_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SIX_THIRTY); // 🕡 (`U+1F561`)"] #[doc="# assert_eq!(SIX_THIRTY.to_string().as_str(), \"🕡\");"]
#[doc="```"]
pub static SIX_THIRTY :  Emoji = Emoji::new("six-thirty", "🕡"); // six-thirty
#[doc="stopwatch ⏱️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STOPWATCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STOPWATCH); // ⏱️ (`U+23F1 U+FE0F`)"] #[doc="# assert_eq!(STOPWATCH.to_string().as_str(), \"⏱️\");"]
#[doc="```"]
pub static STOPWATCH :  Emoji = Emoji::new("stopwatch", "⏱️"); // stopwatch
#[doc="ten o’clock 🕙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEN_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEN_O_CLOCK); // 🕙 (`U+1F559`)"] #[doc="# assert_eq!(TEN_O_CLOCK.to_string().as_str(), \"🕙\");"]
#[doc="```"]
pub static TEN_O_CLOCK :  Emoji = Emoji::new("ten o’clock", "🕙"); // ten o’clock
#[doc="ten-thirty 🕥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TEN_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TEN_THIRTY); // 🕥 (`U+1F565`)"] #[doc="# assert_eq!(TEN_THIRTY.to_string().as_str(), \"🕥\");"]
#[doc="```"]
pub static TEN_THIRTY :  Emoji = Emoji::new("ten-thirty", "🕥"); // ten-thirty
#[doc="three o’clock 🕒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THREE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THREE_O_CLOCK); // 🕒 (`U+1F552`)"] #[doc="# assert_eq!(THREE_O_CLOCK.to_string().as_str(), \"🕒\");"]
#[doc="```"]
pub static THREE_O_CLOCK :  Emoji = Emoji::new("three o’clock", "🕒"); // three o’clock
#[doc="three-thirty 🕞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::THREE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", THREE_THIRTY); // 🕞 (`U+1F55E`)"] #[doc="# assert_eq!(THREE_THIRTY.to_string().as_str(), \"🕞\");"]
#[doc="```"]
pub static THREE_THIRTY :  Emoji = Emoji::new("three-thirty", "🕞"); // three-thirty
#[doc="timer clock ⏲️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TIMER_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TIMER_CLOCK); // ⏲️ (`U+23F2 U+FE0F`)"] #[doc="# assert_eq!(TIMER_CLOCK.to_string().as_str(), \"⏲️\");"]
#[doc="```"]
pub static TIMER_CLOCK :  Emoji = Emoji::new("timer clock", "⏲️"); // timer clock
#[doc="twelve o’clock 🕛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWELVE_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWELVE_O_CLOCK); // 🕛 (`U+1F55B`)"] #[doc="# assert_eq!(TWELVE_O_CLOCK.to_string().as_str(), \"🕛\");"]
#[doc="```"]
pub static TWELVE_O_CLOCK :  Emoji = Emoji::new("twelve o’clock", "🕛"); // twelve o’clock
#[doc="twelve-thirty 🕧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWELVE_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWELVE_THIRTY); // 🕧 (`U+1F567`)"] #[doc="# assert_eq!(TWELVE_THIRTY.to_string().as_str(), \"🕧\");"]
#[doc="```"]
pub static TWELVE_THIRTY :  Emoji = Emoji::new("twelve-thirty", "🕧"); // twelve-thirty
#[doc="two o’clock 🕑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_O_CLOCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_O_CLOCK); // 🕑 (`U+1F551`)"] #[doc="# assert_eq!(TWO_O_CLOCK.to_string().as_str(), \"🕑\");"]
#[doc="```"]
pub static TWO_O_CLOCK :  Emoji = Emoji::new("two o’clock", "🕑"); // two o’clock
#[doc="two-thirty 🕝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TWO_THIRTY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TWO_THIRTY); // 🕝 (`U+1F55D`)"] #[doc="# assert_eq!(TWO_THIRTY.to_string().as_str(), \"🕝\");"]
#[doc="```"]
pub static TWO_THIRTY :  Emoji = Emoji::new("two-thirty", "🕝"); // two-thirty
#[doc="watch ⌚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::WATCH;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", WATCH); // ⌚ (`U+231A`)"] #[doc="# assert_eq!(WATCH.to_string().as_str(), \"⌚\");"]
#[doc="```"]
pub static WATCH :  Emoji = Emoji::new("watch", "⌚"); // watch
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ALARM_CLOCK, ],
&[&EIGHT_O_CLOCK, ],
&[&EIGHT_THIRTY, ],
&[&ELEVEN_O_CLOCK, ],
&[&ELEVEN_THIRTY, ],
&[&FIVE_O_CLOCK, ],
&[&FIVE_THIRTY, ],
&[&FOUR_O_CLOCK, ],
&[&FOUR_THIRTY, ],
&[&HOURGLASS_DONE, ],
&[&HOURGLASS_NOT_DONE, ],
&[&MANTELPIECE_CLOCK, ],
&[&NINE_O_CLOCK, ],
&[&NINE_THIRTY, ],
&[&ONE_O_CLOCK, ],
&[&ONE_THIRTY, ],
&[&SEVEN_O_CLOCK, ],
&[&SEVEN_THIRTY, ],
&[&SIX_O_CLOCK, ],
&[&SIX_THIRTY, ],
&[&STOPWATCH, ],
&[&TEN_O_CLOCK, ],
&[&TEN_THIRTY, ],
&[&THREE_O_CLOCK, ],
&[&THREE_THIRTY, ],
&[&TIMER_CLOCK, ],
&[&TWELVE_O_CLOCK, ],
&[&TWELVE_THIRTY, ],
&[&TWO_O_CLOCK, ],
&[&TWO_THIRTY, ],
&[&WATCH, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ALARM_CLOCK, &EIGHT_O_CLOCK, &EIGHT_THIRTY, &ELEVEN_O_CLOCK, &ELEVEN_THIRTY, &FIVE_O_CLOCK, &FIVE_THIRTY, &FOUR_O_CLOCK, &FOUR_THIRTY, &HOURGLASS_DONE, &HOURGLASS_NOT_DONE, &MANTELPIECE_CLOCK, &NINE_O_CLOCK, &NINE_THIRTY, &ONE_O_CLOCK, &ONE_THIRTY, &SEVEN_O_CLOCK, &SEVEN_THIRTY, &SIX_O_CLOCK, &SIX_THIRTY, &STOPWATCH, &TEN_O_CLOCK, &TEN_THIRTY, &THREE_O_CLOCK, &THREE_THIRTY, &TIMER_CLOCK, &TWELVE_O_CLOCK, &TWELVE_THIRTY, &TWO_O_CLOCK, &TWO_THIRTY, &WATCH, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::time

/// transport-air 🚡✈️🛬
pub mod transport_air { // travel_and_places::transport_air
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="aerial tramway 🚡"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AERIAL_TRAMWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AERIAL_TRAMWAY); // 🚡 (`U+1F6A1`)"] #[doc="# assert_eq!(AERIAL_TRAMWAY.to_string().as_str(), \"🚡\");"]
#[doc="```"]
pub static AERIAL_TRAMWAY :  Emoji = Emoji::new("aerial tramway", "🚡"); // aerial tramway
#[doc="airplane ✈️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AIRPLANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AIRPLANE); // ✈️ (`U+2708 U+FE0F`)"] #[doc="# assert_eq!(AIRPLANE.to_string().as_str(), \"✈️\");"]
#[doc="```"]
pub static AIRPLANE :  Emoji = Emoji::new("airplane", "✈️"); // airplane
#[doc="airplane arrival 🛬"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AIRPLANE_ARRIVAL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AIRPLANE_ARRIVAL); // 🛬 (`U+1F6EC`)"] #[doc="# assert_eq!(AIRPLANE_ARRIVAL.to_string().as_str(), \"🛬\");"]
#[doc="```"]
pub static AIRPLANE_ARRIVAL :  Emoji = Emoji::new("airplane arrival", "🛬"); // airplane arrival
#[doc="airplane departure 🛫"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AIRPLANE_DEPARTURE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AIRPLANE_DEPARTURE); // 🛫 (`U+1F6EB`)"] #[doc="# assert_eq!(AIRPLANE_DEPARTURE.to_string().as_str(), \"🛫\");"]
#[doc="```"]
pub static AIRPLANE_DEPARTURE :  Emoji = Emoji::new("airplane departure", "🛫"); // airplane departure
#[doc="flying saucer 🛸"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FLYING_SAUCER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FLYING_SAUCER); // 🛸 (`U+1F6F8`)"] #[doc="# assert_eq!(FLYING_SAUCER.to_string().as_str(), \"🛸\");"]
#[doc="```"]
pub static FLYING_SAUCER :  Emoji = Emoji::new("flying saucer", "🛸"); // flying saucer
#[doc="helicopter 🚁"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HELICOPTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HELICOPTER); // 🚁 (`U+1F681`)"] #[doc="# assert_eq!(HELICOPTER.to_string().as_str(), \"🚁\");"]
#[doc="```"]
pub static HELICOPTER :  Emoji = Emoji::new("helicopter", "🚁"); // helicopter
#[doc="mountain cableway 🚠"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNTAIN_CABLEWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNTAIN_CABLEWAY); // 🚠 (`U+1F6A0`)"] #[doc="# assert_eq!(MOUNTAIN_CABLEWAY.to_string().as_str(), \"🚠\");"]
#[doc="```"]
pub static MOUNTAIN_CABLEWAY :  Emoji = Emoji::new("mountain cableway", "🚠"); // mountain cableway
#[doc="parachute 🪂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PARACHUTE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PARACHUTE); // 🪂 (`U+1FA82`)"] #[doc="# assert_eq!(PARACHUTE.to_string().as_str(), \"🪂\");"]
#[doc="```"]
pub static PARACHUTE :  Emoji = Emoji::new("parachute", "🪂"); // parachute
#[doc="rocket 🚀"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROCKET;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROCKET); // 🚀 (`U+1F680`)"] #[doc="# assert_eq!(ROCKET.to_string().as_str(), \"🚀\");"]
#[doc="```"]
pub static ROCKET :  Emoji = Emoji::new("rocket", "🚀"); // rocket
#[doc="satellite 🛰️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SATELLITE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SATELLITE); // 🛰️ (`U+1F6F0 U+FE0F`)"] #[doc="# assert_eq!(SATELLITE.to_string().as_str(), \"🛰️\");"]
#[doc="```"]
pub static SATELLITE :  Emoji = Emoji::new("satellite", "🛰️"); // satellite
#[doc="seat 💺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SEAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SEAT); // 💺 (`U+1F4BA`)"] #[doc="# assert_eq!(SEAT.to_string().as_str(), \"💺\");"]
#[doc="```"]
pub static SEAT :  Emoji = Emoji::new("seat", "💺"); // seat
#[doc="small airplane 🛩️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SMALL_AIRPLANE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SMALL_AIRPLANE); // 🛩️ (`U+1F6E9 U+FE0F`)"] #[doc="# assert_eq!(SMALL_AIRPLANE.to_string().as_str(), \"🛩️\");"]
#[doc="```"]
pub static SMALL_AIRPLANE :  Emoji = Emoji::new("small airplane", "🛩️"); // small airplane
#[doc="suspension railway 🚟"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SUSPENSION_RAILWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SUSPENSION_RAILWAY); // 🚟 (`U+1F69F`)"] #[doc="# assert_eq!(SUSPENSION_RAILWAY.to_string().as_str(), \"🚟\");"]
#[doc="```"]
pub static SUSPENSION_RAILWAY :  Emoji = Emoji::new("suspension railway", "🚟"); // suspension railway
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AERIAL_TRAMWAY, ],
&[&AIRPLANE, ],
&[&AIRPLANE_ARRIVAL, ],
&[&AIRPLANE_DEPARTURE, ],
&[&FLYING_SAUCER, ],
&[&HELICOPTER, ],
&[&MOUNTAIN_CABLEWAY, ],
&[&PARACHUTE, ],
&[&ROCKET, ],
&[&SATELLITE, ],
&[&SEAT, ],
&[&SMALL_AIRPLANE, ],
&[&SUSPENSION_RAILWAY, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AERIAL_TRAMWAY, &AIRPLANE, &AIRPLANE_ARRIVAL, &AIRPLANE_DEPARTURE, &FLYING_SAUCER, &HELICOPTER, &MOUNTAIN_CABLEWAY, &PARACHUTE, &ROCKET, &SATELLITE, &SEAT, &SMALL_AIRPLANE, &SUSPENSION_RAILWAY, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::transport_air

/// transport-ground 🚑🚛🚗
pub mod transport_ground { // travel_and_places::transport_ground
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="ambulance 🚑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AMBULANCE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AMBULANCE); // 🚑 (`U+1F691`)"] #[doc="# assert_eq!(AMBULANCE.to_string().as_str(), \"🚑\");"]
#[doc="```"]
pub static AMBULANCE :  Emoji = Emoji::new("ambulance", "🚑"); // ambulance
#[doc="articulated lorry 🚛"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ARTICULATED_LORRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ARTICULATED_LORRY); // 🚛 (`U+1F69B`)"] #[doc="# assert_eq!(ARTICULATED_LORRY.to_string().as_str(), \"🚛\");"]
#[doc="```"]
pub static ARTICULATED_LORRY :  Emoji = Emoji::new("articulated lorry", "🚛"); // articulated lorry
#[doc="automobile 🚗"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AUTOMOBILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AUTOMOBILE); // 🚗 (`U+1F697`)"] #[doc="# assert_eq!(AUTOMOBILE.to_string().as_str(), \"🚗\");"]
#[doc="```"]
pub static AUTOMOBILE :  Emoji = Emoji::new("automobile", "🚗"); // automobile
#[doc="auto rickshaw 🛺"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::AUTO_RICKSHAW;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", AUTO_RICKSHAW); // 🛺 (`U+1F6FA`)"] #[doc="# assert_eq!(AUTO_RICKSHAW.to_string().as_str(), \"🛺\");"]
#[doc="```"]
pub static AUTO_RICKSHAW :  Emoji = Emoji::new("auto rickshaw", "🛺"); // auto rickshaw
#[doc="bicycle 🚲"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BICYCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BICYCLE); // 🚲 (`U+1F6B2`)"] #[doc="# assert_eq!(BICYCLE.to_string().as_str(), \"🚲\");"]
#[doc="```"]
pub static BICYCLE :  Emoji = Emoji::new("bicycle", "🚲"); // bicycle
#[doc="bullet train 🚅"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BULLET_TRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BULLET_TRAIN); // 🚅 (`U+1F685`)"] #[doc="# assert_eq!(BULLET_TRAIN.to_string().as_str(), \"🚅\");"]
#[doc="```"]
pub static BULLET_TRAIN :  Emoji = Emoji::new("bullet train", "🚅"); // bullet train
#[doc="bus 🚌"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUS); // 🚌 (`U+1F68C`)"] #[doc="# assert_eq!(BUS.to_string().as_str(), \"🚌\");"]
#[doc="```"]
pub static BUS :  Emoji = Emoji::new("bus", "🚌"); // bus
#[doc="bus stop 🚏"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::BUS_STOP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", BUS_STOP); // 🚏 (`U+1F68F`)"] #[doc="# assert_eq!(BUS_STOP.to_string().as_str(), \"🚏\");"]
#[doc="```"]
pub static BUS_STOP :  Emoji = Emoji::new("bus stop", "🚏"); // bus stop
#[doc="construction 🚧"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CONSTRUCTION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CONSTRUCTION); // 🚧 (`U+1F6A7`)"] #[doc="# assert_eq!(CONSTRUCTION.to_string().as_str(), \"🚧\");"]
#[doc="```"]
pub static CONSTRUCTION :  Emoji = Emoji::new("construction", "🚧"); // construction
#[doc="delivery truck 🚚"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::DELIVERY_TRUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", DELIVERY_TRUCK); // 🚚 (`U+1F69A`)"] #[doc="# assert_eq!(DELIVERY_TRUCK.to_string().as_str(), \"🚚\");"]
#[doc="```"]
pub static DELIVERY_TRUCK :  Emoji = Emoji::new("delivery truck", "🚚"); // delivery truck
#[doc="fire engine 🚒"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FIRE_ENGINE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FIRE_ENGINE); // 🚒 (`U+1F692`)"] #[doc="# assert_eq!(FIRE_ENGINE.to_string().as_str(), \"🚒\");"]
#[doc="```"]
pub static FIRE_ENGINE :  Emoji = Emoji::new("fire engine", "🚒"); // fire engine
#[doc="fuel pump ⛽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FUEL_PUMP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FUEL_PUMP); // ⛽ (`U+26FD`)"] #[doc="# assert_eq!(FUEL_PUMP.to_string().as_str(), \"⛽\");"]
#[doc="```"]
pub static FUEL_PUMP :  Emoji = Emoji::new("fuel pump", "⛽"); // fuel pump
#[doc="high-speed train 🚄"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HIGH_SPEED_TRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HIGH_SPEED_TRAIN); // 🚄 (`U+1F684`)"] #[doc="# assert_eq!(HIGH_SPEED_TRAIN.to_string().as_str(), \"🚄\");"]
#[doc="```"]
pub static HIGH_SPEED_TRAIN :  Emoji = Emoji::new("high-speed train", "🚄"); // high-speed train
#[doc="horizontal traffic light 🚥"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::HORIZONTAL_TRAFFIC_LIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", HORIZONTAL_TRAFFIC_LIGHT); // 🚥 (`U+1F6A5`)"] #[doc="# assert_eq!(HORIZONTAL_TRAFFIC_LIGHT.to_string().as_str(), \"🚥\");"]
#[doc="```"]
pub static HORIZONTAL_TRAFFIC_LIGHT :  Emoji = Emoji::new("horizontal traffic light", "🚥"); // horizontal traffic light
#[doc="kick scooter 🛴"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::KICK_SCOOTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", KICK_SCOOTER); // 🛴 (`U+1F6F4`)"] #[doc="# assert_eq!(KICK_SCOOTER.to_string().as_str(), \"🛴\");"]
#[doc="```"]
pub static KICK_SCOOTER :  Emoji = Emoji::new("kick scooter", "🛴"); // kick scooter
#[doc="light rail 🚈"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LIGHT_RAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LIGHT_RAIL); // 🚈 (`U+1F688`)"] #[doc="# assert_eq!(LIGHT_RAIL.to_string().as_str(), \"🚈\");"]
#[doc="```"]
pub static LIGHT_RAIL :  Emoji = Emoji::new("light rail", "🚈"); // light rail
#[doc="locomotive 🚂"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::LOCOMOTIVE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", LOCOMOTIVE); // 🚂 (`U+1F682`)"] #[doc="# assert_eq!(LOCOMOTIVE.to_string().as_str(), \"🚂\");"]
#[doc="```"]
pub static LOCOMOTIVE :  Emoji = Emoji::new("locomotive", "🚂"); // locomotive
#[doc="manual wheelchair 🦽"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MANUAL_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MANUAL_WHEELCHAIR); // 🦽 (`U+1F9BD`)"] #[doc="# assert_eq!(MANUAL_WHEELCHAIR.to_string().as_str(), \"🦽\");"]
#[doc="```"]
pub static MANUAL_WHEELCHAIR :  Emoji = Emoji::new("manual wheelchair", "🦽"); // manual wheelchair
#[doc="metro 🚇"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::METRO;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", METRO); // 🚇 (`U+1F687`)"] #[doc="# assert_eq!(METRO.to_string().as_str(), \"🚇\");"]
#[doc="```"]
pub static METRO :  Emoji = Emoji::new("metro", "🚇"); // metro
#[doc="minibus 🚐"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MINIBUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MINIBUS); // 🚐 (`U+1F690`)"] #[doc="# assert_eq!(MINIBUS.to_string().as_str(), \"🚐\");"]
#[doc="```"]
pub static MINIBUS :  Emoji = Emoji::new("minibus", "🚐"); // minibus
#[doc="monorail 🚝"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MONORAIL;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MONORAIL); // 🚝 (`U+1F69D`)"] #[doc="# assert_eq!(MONORAIL.to_string().as_str(), \"🚝\");"]
#[doc="```"]
pub static MONORAIL :  Emoji = Emoji::new("monorail", "🚝"); // monorail
#[doc="motorcycle 🏍️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTORCYCLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTORCYCLE); // 🏍️ (`U+1F3CD U+FE0F`)"] #[doc="# assert_eq!(MOTORCYCLE.to_string().as_str(), \"🏍️\");"]
#[doc="```"]
pub static MOTORCYCLE :  Emoji = Emoji::new("motorcycle", "🏍️"); // motorcycle
#[doc="motorized wheelchair 🦼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTORIZED_WHEELCHAIR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTORIZED_WHEELCHAIR); // 🦼 (`U+1F9BC`)"] #[doc="# assert_eq!(MOTORIZED_WHEELCHAIR.to_string().as_str(), \"🦼\");"]
#[doc="```"]
pub static MOTORIZED_WHEELCHAIR :  Emoji = Emoji::new("motorized wheelchair", "🦼"); // motorized wheelchair
#[doc="motorway 🛣️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTORWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTORWAY); // 🛣️ (`U+1F6E3 U+FE0F`)"] #[doc="# assert_eq!(MOTORWAY.to_string().as_str(), \"🛣️\");"]
#[doc="```"]
pub static MOTORWAY :  Emoji = Emoji::new("motorway", "🛣️"); // motorway
#[doc="motor scooter 🛵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTOR_SCOOTER;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTOR_SCOOTER); // 🛵 (`U+1F6F5`)"] #[doc="# assert_eq!(MOTOR_SCOOTER.to_string().as_str(), \"🛵\");"]
#[doc="```"]
pub static MOTOR_SCOOTER :  Emoji = Emoji::new("motor scooter", "🛵"); // motor scooter
#[doc="mountain railway 🚞"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOUNTAIN_RAILWAY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOUNTAIN_RAILWAY); // 🚞 (`U+1F69E`)"] #[doc="# assert_eq!(MOUNTAIN_RAILWAY.to_string().as_str(), \"🚞\");"]
#[doc="```"]
pub static MOUNTAIN_RAILWAY :  Emoji = Emoji::new("mountain railway", "🚞"); // mountain railway
#[doc="oil drum 🛢️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::OIL_DRUM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", OIL_DRUM); // 🛢️ (`U+1F6E2 U+FE0F`)"] #[doc="# assert_eq!(OIL_DRUM.to_string().as_str(), \"🛢️\");"]
#[doc="```"]
pub static OIL_DRUM :  Emoji = Emoji::new("oil drum", "🛢️"); // oil drum
#[doc="oncoming automobile 🚘"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_AUTOMOBILE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_AUTOMOBILE); // 🚘 (`U+1F698`)"] #[doc="# assert_eq!(ONCOMING_AUTOMOBILE.to_string().as_str(), \"🚘\");"]
#[doc="```"]
pub static ONCOMING_AUTOMOBILE :  Emoji = Emoji::new("oncoming automobile", "🚘"); // oncoming automobile
#[doc="oncoming bus 🚍"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_BUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_BUS); // 🚍 (`U+1F68D`)"] #[doc="# assert_eq!(ONCOMING_BUS.to_string().as_str(), \"🚍\");"]
#[doc="```"]
pub static ONCOMING_BUS :  Emoji = Emoji::new("oncoming bus", "🚍"); // oncoming bus
#[doc="oncoming police car 🚔"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_POLICE_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_POLICE_CAR); // 🚔 (`U+1F694`)"] #[doc="# assert_eq!(ONCOMING_POLICE_CAR.to_string().as_str(), \"🚔\");"]
#[doc="```"]
pub static ONCOMING_POLICE_CAR :  Emoji = Emoji::new("oncoming police car", "🚔"); // oncoming police car
#[doc="oncoming taxi 🚖"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ONCOMING_TAXI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ONCOMING_TAXI); // 🚖 (`U+1F696`)"] #[doc="# assert_eq!(ONCOMING_TAXI.to_string().as_str(), \"🚖\");"]
#[doc="```"]
pub static ONCOMING_TAXI :  Emoji = Emoji::new("oncoming taxi", "🚖"); // oncoming taxi
#[doc="pickup truck 🛻"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PICKUP_TRUCK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PICKUP_TRUCK); // 🛻 (`U+1F6FB`)"] #[doc="# assert_eq!(PICKUP_TRUCK.to_string().as_str(), \"🛻\");"]
#[doc="```"]
pub static PICKUP_TRUCK :  Emoji = Emoji::new("pickup truck", "🛻"); // pickup truck
#[doc="police car 🚓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLICE_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLICE_CAR); // 🚓 (`U+1F693`)"] #[doc="# assert_eq!(POLICE_CAR.to_string().as_str(), \"🚓\");"]
#[doc="```"]
pub static POLICE_CAR :  Emoji = Emoji::new("police car", "🚓"); // police car
#[doc="police car light 🚨"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::POLICE_CAR_LIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", POLICE_CAR_LIGHT); // 🚨 (`U+1F6A8`)"] #[doc="# assert_eq!(POLICE_CAR_LIGHT.to_string().as_str(), \"🚨\");"]
#[doc="```"]
pub static POLICE_CAR_LIGHT :  Emoji = Emoji::new("police car light", "🚨"); // police car light
#[doc="racing car 🏎️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RACING_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RACING_CAR); // 🏎️ (`U+1F3CE U+FE0F`)"] #[doc="# assert_eq!(RACING_CAR.to_string().as_str(), \"🏎️\");"]
#[doc="```"]
pub static RACING_CAR :  Emoji = Emoji::new("racing car", "🏎️"); // racing car
#[doc="railway car 🚃"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAILWAY_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAILWAY_CAR); // 🚃 (`U+1F683`)"] #[doc="# assert_eq!(RAILWAY_CAR.to_string().as_str(), \"🚃\");"]
#[doc="```"]
pub static RAILWAY_CAR :  Emoji = Emoji::new("railway car", "🚃"); // railway car
#[doc="railway track 🛤️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::RAILWAY_TRACK;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", RAILWAY_TRACK); // 🛤️ (`U+1F6E4 U+FE0F`)"] #[doc="# assert_eq!(RAILWAY_TRACK.to_string().as_str(), \"🛤️\");"]
#[doc="```"]
pub static RAILWAY_TRACK :  Emoji = Emoji::new("railway track", "🛤️"); // railway track
#[doc="roller skate 🛼"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ROLLER_SKATE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ROLLER_SKATE); // 🛼 (`U+1F6FC`)"] #[doc="# assert_eq!(ROLLER_SKATE.to_string().as_str(), \"🛼\");"]
#[doc="```"]
pub static ROLLER_SKATE :  Emoji = Emoji::new("roller skate", "🛼"); // roller skate
#[doc="skateboard 🛹"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SKATEBOARD;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SKATEBOARD); // 🛹 (`U+1F6F9`)"] #[doc="# assert_eq!(SKATEBOARD.to_string().as_str(), \"🛹\");"]
#[doc="```"]
pub static SKATEBOARD :  Emoji = Emoji::new("skateboard", "🛹"); // skateboard
#[doc="sport utility vehicle 🚙"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPORT_UTILITY_VEHICLE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPORT_UTILITY_VEHICLE); // 🚙 (`U+1F699`)"] #[doc="# assert_eq!(SPORT_UTILITY_VEHICLE.to_string().as_str(), \"🚙\");"]
#[doc="```"]
pub static SPORT_UTILITY_VEHICLE :  Emoji = Emoji::new("sport utility vehicle", "🚙"); // sport utility vehicle
#[doc="station 🚉"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STATION;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STATION); // 🚉 (`U+1F689`)"] #[doc="# assert_eq!(STATION.to_string().as_str(), \"🚉\");"]
#[doc="```"]
pub static STATION :  Emoji = Emoji::new("station", "🚉"); // station
#[doc="stop sign 🛑"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::STOP_SIGN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", STOP_SIGN); // 🛑 (`U+1F6D1`)"] #[doc="# assert_eq!(STOP_SIGN.to_string().as_str(), \"🛑\");"]
#[doc="```"]
pub static STOP_SIGN :  Emoji = Emoji::new("stop sign", "🛑"); // stop sign
#[doc="taxi 🚕"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TAXI;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TAXI); // 🚕 (`U+1F695`)"] #[doc="# assert_eq!(TAXI.to_string().as_str(), \"🚕\");"]
#[doc="```"]
pub static TAXI :  Emoji = Emoji::new("taxi", "🚕"); // taxi
#[doc="tractor 🚜"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRACTOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRACTOR); // 🚜 (`U+1F69C`)"] #[doc="# assert_eq!(TRACTOR.to_string().as_str(), \"🚜\");"]
#[doc="```"]
pub static TRACTOR :  Emoji = Emoji::new("tractor", "🚜"); // tractor
#[doc="train 🚆"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRAIN;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRAIN); // 🚆 (`U+1F686`)"] #[doc="# assert_eq!(TRAIN.to_string().as_str(), \"🚆\");"]
#[doc="```"]
pub static TRAIN :  Emoji = Emoji::new("train", "🚆"); // train
#[doc="tram 🚊"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRAM;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRAM); // 🚊 (`U+1F68A`)"] #[doc="# assert_eq!(TRAM.to_string().as_str(), \"🚊\");"]
#[doc="```"]
pub static TRAM :  Emoji = Emoji::new("tram", "🚊"); // tram
#[doc="tram car 🚋"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TRAM_CAR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TRAM_CAR); // 🚋 (`U+1F68B`)"] #[doc="# assert_eq!(TRAM_CAR.to_string().as_str(), \"🚋\");"]
#[doc="```"]
pub static TRAM_CAR :  Emoji = Emoji::new("tram car", "🚋"); // tram car
#[doc="trolleybus 🚎"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::TROLLEYBUS;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", TROLLEYBUS); // 🚎 (`U+1F68E`)"] #[doc="# assert_eq!(TROLLEYBUS.to_string().as_str(), \"🚎\");"]
#[doc="```"]
pub static TROLLEYBUS :  Emoji = Emoji::new("trolleybus", "🚎"); // trolleybus
#[doc="vertical traffic light 🚦"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::VERTICAL_TRAFFIC_LIGHT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", VERTICAL_TRAFFIC_LIGHT); // 🚦 (`U+1F6A6`)"] #[doc="# assert_eq!(VERTICAL_TRAFFIC_LIGHT.to_string().as_str(), \"🚦\");"]
#[doc="```"]
pub static VERTICAL_TRAFFIC_LIGHT :  Emoji = Emoji::new("vertical traffic light", "🚦"); // vertical traffic light
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&AMBULANCE, ],
&[&ARTICULATED_LORRY, ],
&[&AUTOMOBILE, ],
&[&AUTO_RICKSHAW, ],
&[&BICYCLE, ],
&[&BULLET_TRAIN, ],
&[&BUS, ],
&[&BUS_STOP, ],
&[&CONSTRUCTION, ],
&[&DELIVERY_TRUCK, ],
&[&FIRE_ENGINE, ],
&[&FUEL_PUMP, ],
&[&HIGH_SPEED_TRAIN, ],
&[&HORIZONTAL_TRAFFIC_LIGHT, ],
&[&KICK_SCOOTER, ],
&[&LIGHT_RAIL, ],
&[&LOCOMOTIVE, ],
&[&MANUAL_WHEELCHAIR, ],
&[&METRO, ],
&[&MINIBUS, ],
&[&MONORAIL, ],
&[&MOTORCYCLE, ],
&[&MOTORIZED_WHEELCHAIR, ],
&[&MOTORWAY, ],
&[&MOTOR_SCOOTER, ],
&[&MOUNTAIN_RAILWAY, ],
&[&OIL_DRUM, ],
&[&ONCOMING_AUTOMOBILE, ],
&[&ONCOMING_BUS, ],
&[&ONCOMING_POLICE_CAR, ],
&[&ONCOMING_TAXI, ],
&[&PICKUP_TRUCK, ],
&[&POLICE_CAR, ],
&[&POLICE_CAR_LIGHT, ],
&[&RACING_CAR, ],
&[&RAILWAY_CAR, ],
&[&RAILWAY_TRACK, ],
&[&ROLLER_SKATE, ],
&[&SKATEBOARD, ],
&[&SPORT_UTILITY_VEHICLE, ],
&[&STATION, ],
&[&STOP_SIGN, ],
&[&TAXI, ],
&[&TRACTOR, ],
&[&TRAIN, ],
&[&TRAM, ],
&[&TRAM_CAR, ],
&[&TROLLEYBUS, ],
&[&VERTICAL_TRAFFIC_LIGHT, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&AMBULANCE, &ARTICULATED_LORRY, &AUTOMOBILE, &AUTO_RICKSHAW, &BICYCLE, &BULLET_TRAIN, &BUS, &BUS_STOP, &CONSTRUCTION, &DELIVERY_TRUCK, &FIRE_ENGINE, &FUEL_PUMP, &HIGH_SPEED_TRAIN, &HORIZONTAL_TRAFFIC_LIGHT, &KICK_SCOOTER, &LIGHT_RAIL, &LOCOMOTIVE, &MANUAL_WHEELCHAIR, &METRO, &MINIBUS, &MONORAIL, &MOTORCYCLE, &MOTORIZED_WHEELCHAIR, &MOTORWAY, &MOTOR_SCOOTER, &MOUNTAIN_RAILWAY, &OIL_DRUM, &ONCOMING_AUTOMOBILE, &ONCOMING_BUS, &ONCOMING_POLICE_CAR, &ONCOMING_TAXI, &PICKUP_TRUCK, &POLICE_CAR, &POLICE_CAR_LIGHT, &RACING_CAR, &RAILWAY_CAR, &RAILWAY_TRACK, &ROLLER_SKATE, &SKATEBOARD, &SPORT_UTILITY_VEHICLE, &STATION, &STOP_SIGN, &TAXI, &TRACTOR, &TRAIN, &TRAM, &TRAM_CAR, &TROLLEYBUS, &VERTICAL_TRAFFIC_LIGHT, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::transport_ground

/// transport-water ⚓🛶⛴️
pub mod transport_water { // travel_and_places::transport_water
use crate::emojis::Emoji;
use crate::emojis::Family;
use crate::emojis::Gender;
use crate::emojis::Hair;
use crate::emojis::OneOrTwo;
use crate::emojis::Pair;
use crate::emojis::Tone;
use crate::emojis::TonePair;
use crate::emojis::With;
use crate::emojis::WithNoDef;
#[doc="anchor ⚓"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::ANCHOR;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", ANCHOR); // ⚓ (`U+2693`)"] #[doc="# assert_eq!(ANCHOR.to_string().as_str(), \"⚓\");"]
#[doc="```"]
pub static ANCHOR :  Emoji = Emoji::new("anchor", "⚓"); // anchor
#[doc="canoe 🛶"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::CANOE;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", CANOE); // 🛶 (`U+1F6F6`)"] #[doc="# assert_eq!(CANOE.to_string().as_str(), \"🛶\");"]
#[doc="```"]
pub static CANOE :  Emoji = Emoji::new("canoe", "🛶"); // canoe
#[doc="ferry ⛴️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::FERRY;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", FERRY); // ⛴️ (`U+26F4 U+FE0F`)"] #[doc="# assert_eq!(FERRY.to_string().as_str(), \"⛴️\");"]
#[doc="```"]
pub static FERRY :  Emoji = Emoji::new("ferry", "⛴️"); // ferry
#[doc="motor boat 🛥️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::MOTOR_BOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", MOTOR_BOAT); // 🛥️ (`U+1F6E5 U+FE0F`)"] #[doc="# assert_eq!(MOTOR_BOAT.to_string().as_str(), \"🛥️\");"]
#[doc="```"]
pub static MOTOR_BOAT :  Emoji = Emoji::new("motor boat", "🛥️"); // motor boat
#[doc="passenger ship 🛳️"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::PASSENGER_SHIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", PASSENGER_SHIP); // 🛳️ (`U+1F6F3 U+FE0F`)"] #[doc="# assert_eq!(PASSENGER_SHIP.to_string().as_str(), \"🛳️\");"]
#[doc="```"]
pub static PASSENGER_SHIP :  Emoji = Emoji::new("passenger ship", "🛳️"); // passenger ship
#[doc="sailboat ⛵"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SAILBOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SAILBOAT); // ⛵ (`U+26F5`)"] #[doc="# assert_eq!(SAILBOAT.to_string().as_str(), \"⛵\");"]
#[doc="```"]
pub static SAILBOAT :  Emoji = Emoji::new("sailboat", "⛵"); // sailboat
#[doc="ship 🚢"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SHIP;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SHIP); // 🚢 (`U+1F6A2`)"] #[doc="# assert_eq!(SHIP.to_string().as_str(), \"🚢\");"]
#[doc="```"]
pub static SHIP :  Emoji = Emoji::new("ship", "🚢"); // ship
#[doc="speedboat 🚤"]#[doc=""]#[doc="# Examples"] #[doc="```"]
#[doc="use emojic::flat::SPEEDBOAT;"]#[doc="use emojic::Tone;"]#[doc="use emojic::Gender;"]#[doc="use emojic::Hair;"]#[doc="use emojic::Pair;"] #[doc=""]
#[doc="println!(\"{}\", SPEEDBOAT); // 🚤 (`U+1F6A4`)"] #[doc="# assert_eq!(SPEEDBOAT.to_string().as_str(), \"🚤\");"]
#[doc="```"]
pub static SPEEDBOAT :  Emoji = Emoji::new("speedboat", "🚤"); // speedboat
pub(crate) static ALL_VARIANTS: &[&[&Emoji]] = &[
&[&ANCHOR, ],
&[&CANOE, ],
&[&FERRY, ],
&[&MOTOR_BOAT, ],
&[&PASSENGER_SHIP, ],
&[&SAILBOAT, ],
&[&SHIP, ],
&[&SPEEDBOAT, ],
];
pub(crate) static ALL_BASE_EMOJI: &[&Emoji] = &[
&ANCHOR, &CANOE, &FERRY, &MOTOR_BOAT, &PASSENGER_SHIP, &SAILBOAT, &SHIP, &SPEEDBOAT, ];

/// Returns an iterator over all emoji variants of this subgroup grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {ALL_VARIANTS.iter().copied()}

/// Returns an iterator over all base emojis of this subgroup (i.e. one for each static here)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {ALL_BASE_EMOJI.iter().copied()}
} // travel_and_places::transport_water
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of these subgroups grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(hotel::all_variants())
		.chain(place_building::all_variants())
		.chain(place_geographic::all_variants())
		.chain(place_map::all_variants())
		.chain(place_other::all_variants())
		.chain(place_religious::all_variants())
		.chain(sky_and_weather::all_variants())
		.chain(time::all_variants())
		.chain(transport_air::all_variants())
		.chain(transport_ground::all_variants())
		.chain(transport_water::all_variants())
}

/// Returns an iterator over all base emojis of these subgroups (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(hotel::base_emojis())
		.chain(place_building::base_emojis())
		.chain(place_geographic::base_emojis())
		.chain(place_map::base_emojis())
		.chain(place_other::base_emojis())
		.chain(place_religious::base_emojis())
		.chain(sky_and_weather::base_emojis())
		.chain(time::base_emojis())
		.chain(transport_air::base_emojis())
		.chain(transport_ground::base_emojis())
		.chain(transport_water::base_emojis())
}
} // travel_and_places
use crate::emojis::Emoji;

/// Returns an iterator over all emoji variants of all groups together grouped by base emojis
pub fn all_variants() -> impl Iterator<Item=&'static [&'static Emoji]> {
	std::iter::empty()
		.chain(activities::all_variants())
		.chain(animals_and_nature::all_variants())
		.chain(component::all_variants())
		.chain(flags::all_variants())
		.chain(food_and_drink::all_variants())
		.chain(objects::all_variants())
		.chain(people_and_body::all_variants())
		.chain(smileys_and_emotion::all_variants())
		.chain(symbols::all_variants())
		.chain(travel_and_places::all_variants())
}

/// Returns an iterator over all base emojis of all groups together (i.e. one for each static)
pub fn base_emojis() -> impl Iterator<Item=&'static Emoji> {
	std::iter::empty()
		.chain(activities::base_emojis())
		.chain(animals_and_nature::base_emojis())
		.chain(component::base_emojis())
		.chain(flags::base_emojis())
		.chain(food_and_drink::base_emojis())
		.chain(objects::base_emojis())
		.chain(people_and_body::base_emojis())
		.chain(smileys_and_emotion::base_emojis())
		.chain(symbols::base_emojis())
		.chain(travel_and_places::base_emojis())
}
}

/// Flat list of all emojis without sub modules.
///
/// This module contains the same set of emojis as the [`crate::grouped`] module, but
/// without the sub modules. This make it a bit more messy but allows for shorter
/// references from code.
///
/// # Examples
///
/// ```rust
/// // prints: 🖼️
/// println!("{}", emojic::flat::FRAMED_PICTURE);
/// ```
	pub mod flat {
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::ARTIST_PALETTE;
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::FRAMED_PICTURE;
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::KNOT;
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::PERFORMING_ARTS;
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::SEWING_NEEDLE;
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::THREAD;
#[doc(inline)]
pub use crate::grouped::activities::arts_and_crafts::YARN;
#[doc(inline)]
pub use crate::grouped::activities::award_medal::FIRST_PLACE_MEDAL;
#[doc(inline)]
pub use crate::grouped::activities::award_medal::MILITARY_MEDAL;
#[doc(inline)]
pub use crate::grouped::activities::award_medal::SECOND_PLACE_MEDAL;
#[doc(inline)]
pub use crate::grouped::activities::award_medal::SPORTS_MEDAL;
#[doc(inline)]
pub use crate::grouped::activities::award_medal::THIRD_PLACE_MEDAL;
#[doc(inline)]
pub use crate::grouped::activities::award_medal::TROPHY;
#[doc(inline)]
pub use crate::grouped::activities::event::ADMISSION_TICKETS;
#[doc(inline)]
pub use crate::grouped::activities::event::BALLOON;
#[doc(inline)]
pub use crate::grouped::activities::event::CARP_STREAMER;
#[doc(inline)]
pub use crate::grouped::activities::event::CHRISTMAS_TREE;
#[doc(inline)]
pub use crate::grouped::activities::event::CONFETTI_BALL;
#[doc(inline)]
pub use crate::grouped::activities::event::FIRECRACKER;
#[doc(inline)]
pub use crate::grouped::activities::event::FIREWORKS;
#[doc(inline)]
pub use crate::grouped::activities::event::JACK_O_LANTERN;
#[doc(inline)]
pub use crate::grouped::activities::event::JAPANESE_DOLLS;
#[doc(inline)]
pub use crate::grouped::activities::event::MOON_VIEWING_CEREMONY;
#[doc(inline)]
pub use crate::grouped::activities::event::PARTY_POPPER;
#[doc(inline)]
pub use crate::grouped::activities::event::PINE_DECORATION;
#[doc(inline)]
pub use crate::grouped::activities::event::RED_ENVELOPE;
#[doc(inline)]
pub use crate::grouped::activities::event::REMINDER_RIBBON;
#[doc(inline)]
pub use crate::grouped::activities::event::RIBBON;
#[doc(inline)]
pub use crate::grouped::activities::event::SPARKLER;
#[doc(inline)]
pub use crate::grouped::activities::event::SPARKLES;
#[doc(inline)]
pub use crate::grouped::activities::event::TANABATA_TREE;
#[doc(inline)]
pub use crate::grouped::activities::event::TICKET;
#[doc(inline)]
pub use crate::grouped::activities::event::WIND_CHIME;
#[doc(inline)]
pub use crate::grouped::activities::event::WRAPPED_GIFT;
#[doc(inline)]
pub use crate::grouped::activities::game::BULLSEYE;
#[doc(inline)]
pub use crate::grouped::activities::game::CHESS_PAWN;
#[doc(inline)]
pub use crate::grouped::activities::game::CLUB_SUIT;
#[doc(inline)]
pub use crate::grouped::activities::game::CRYSTAL_BALL;
#[doc(inline)]
pub use crate::grouped::activities::game::DIAMOND_SUIT;
#[doc(inline)]
pub use crate::grouped::activities::game::FLOWER_PLAYING_CARDS;
#[doc(inline)]
pub use crate::grouped::activities::game::GAME_DIE;
#[doc(inline)]
pub use crate::grouped::activities::game::HEART_SUIT;
#[doc(inline)]
pub use crate::grouped::activities::game::JOKER;
#[doc(inline)]
pub use crate::grouped::activities::game::JOYSTICK;
#[doc(inline)]
pub use crate::grouped::activities::game::KITE;
#[doc(inline)]
pub use crate::grouped::activities::game::MAGIC_WAND;
#[doc(inline)]
pub use crate::grouped::activities::game::MAHJONG_RED_DRAGON;
#[doc(inline)]
pub use crate::grouped::activities::game::NAZAR_AMULET;
#[doc(inline)]
pub use crate::grouped::activities::game::NESTING_DOLLS;
#[doc(inline)]
pub use crate::grouped::activities::game::PINATA;
#[doc(inline)]
pub use crate::grouped::activities::game::POOL_8_BALL;
#[doc(inline)]
pub use crate::grouped::activities::game::PUZZLE_PIECE;
#[doc(inline)]
pub use crate::grouped::activities::game::SLOT_MACHINE;
#[doc(inline)]
pub use crate::grouped::activities::game::SPADE_SUIT;
#[doc(inline)]
pub use crate::grouped::activities::game::TEDDY_BEAR;
#[doc(inline)]
pub use crate::grouped::activities::game::VIDEO_GAME;
#[doc(inline)]
pub use crate::grouped::activities::game::YO_YO;
#[doc(inline)]
pub use crate::grouped::activities::sport::AMERICAN_FOOTBALL;
#[doc(inline)]
pub use crate::grouped::activities::sport::BADMINTON;
#[doc(inline)]
pub use crate::grouped::activities::sport::BASEBALL;
#[doc(inline)]
pub use crate::grouped::activities::sport::BASKETBALL;
#[doc(inline)]
pub use crate::grouped::activities::sport::BOWLING;
#[doc(inline)]
pub use crate::grouped::activities::sport::BOXING_GLOVE;
#[doc(inline)]
pub use crate::grouped::activities::sport::CRICKET_GAME;
#[doc(inline)]
pub use crate::grouped::activities::sport::CURLING_STONE;
#[doc(inline)]
pub use crate::grouped::activities::sport::DIVING_MASK;
#[doc(inline)]
pub use crate::grouped::activities::sport::FIELD_HOCKEY;
#[doc(inline)]
pub use crate::grouped::activities::sport::FISHING_POLE;
#[doc(inline)]
pub use crate::grouped::activities::sport::FLAG_IN_HOLE;
#[doc(inline)]
pub use crate::grouped::activities::sport::FLYING_DISC;
#[doc(inline)]
pub use crate::grouped::activities::sport::GOAL_NET;
#[doc(inline)]
pub use crate::grouped::activities::sport::ICE_HOCKEY;
#[doc(inline)]
pub use crate::grouped::activities::sport::ICE_SKATE;
#[doc(inline)]
pub use crate::grouped::activities::sport::LACROSSE;
#[doc(inline)]
pub use crate::grouped::activities::sport::MARTIAL_ARTS_UNIFORM;
#[doc(inline)]
pub use crate::grouped::activities::sport::PING_PONG;
#[doc(inline)]
pub use crate::grouped::activities::sport::RUGBY_FOOTBALL;
#[doc(inline)]
pub use crate::grouped::activities::sport::RUNNING_SHIRT;
#[doc(inline)]
pub use crate::grouped::activities::sport::SKIS;
#[doc(inline)]
pub use crate::grouped::activities::sport::SLED;
#[doc(inline)]
pub use crate::grouped::activities::sport::SOCCER_BALL;
#[doc(inline)]
pub use crate::grouped::activities::sport::SOFTBALL;
#[doc(inline)]
pub use crate::grouped::activities::sport::TENNIS;
#[doc(inline)]
pub use crate::grouped::activities::sport::VOLLEYBALL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_amphibian::FROG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::BABY_CHICK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::BIRD;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::CHICKEN;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::DODO;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::DOVE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::DUCK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::EAGLE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::FEATHER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::FLAMINGO;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::FRONT_FACING_BABY_CHICK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::HATCHING_CHICK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::OWL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::PARROT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::PEACOCK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::PENGUIN;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::ROOSTER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::SWAN;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bird::TURKEY;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::ANT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::BEETLE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::BUG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::BUTTERFLY;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::COCKROACH;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::CRICKET;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::FLY;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::HONEYBEE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::LADY_BEETLE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::MICROBE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::MOSQUITO;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::SCORPION;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::SNAIL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::SPIDER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::SPIDER_WEB;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_bug::WORM;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BADGER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BAT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BEAR;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BEAVER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BISON;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BLACK_CAT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::BOAR;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::CAMEL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::CAT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::CAT_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::CHIPMUNK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::COW;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::COW_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::DEER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::DOG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::DOG_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::ELEPHANT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::EWE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::FOX;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::GIRAFFE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::GOAT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::GORILLA;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::GUIDE_DOG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::HAMSTER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::HEDGEHOG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::HIPPOPOTAMUS;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::HORSE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::HORSE_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::KANGAROO;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::KOALA;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::LEOPARD;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::LION;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::LLAMA;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::MAMMOTH;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::MONKEY;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::MONKEY_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::MOUSE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::MOUSE_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::ORANGUTAN;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::OTTER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::OX;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::PANDA;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::PAW_PRINTS;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::PIG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::PIG_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::PIG_NOSE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::POLAR_BEAR;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::POODLE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::RABBIT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::RABBIT_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::RACCOON;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::RAM;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::RAT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::RHINOCEROS;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::SERVICE_DOG;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::SKUNK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::SLOTH;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::TIGER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::TIGER_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::TWO_HUMP_CAMEL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::UNICORN;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::WATER_BUFFALO;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::WOLF;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_mammal::ZEBRA;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::BLOWFISH;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::DOLPHIN;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::FISH;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::OCTOPUS;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::SEAL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::SHARK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::SPIRAL_SHELL;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::SPOUTING_WHALE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::TROPICAL_FISH;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_marine::WHALE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::CROCODILE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::DRAGON;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::DRAGON_FACE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::LIZARD;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::SAUROPOD;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::SNAKE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::TURTLE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::animal_reptile::T_REX;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::BLOSSOM;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::BOUQUET;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::CHERRY_BLOSSOM;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::HIBISCUS;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::ROSE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::ROSETTE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::SUNFLOWER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::TULIP;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::WHITE_FLOWER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_flower::WILTED_FLOWER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::CACTUS;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::DECIDUOUS_TREE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::EVERGREEN_TREE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::FALLEN_LEAF;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::FOUR_LEAF_CLOVER;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::HERB;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::LEAF_FLUTTERING_IN_WIND;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::MAPLE_LEAF;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::PALM_TREE;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::POTTED_PLANT;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::SEEDLING;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::SHAMROCK;
#[doc(inline)]
pub use crate::grouped::animals_and_nature::plant_other::SHEAF_OF_RICE;
#[doc(inline)]
pub use crate::grouped::component::hair_style::BALD;
#[doc(inline)]
pub use crate::grouped::component::hair_style::CURLY_HAIR;
#[doc(inline)]
pub use crate::grouped::component::hair_style::RED_HAIR;
#[doc(inline)]
pub use crate::grouped::component::hair_style::WHITE_HAIR;
#[doc(inline)]
pub use crate::grouped::component::skin_tone::DARK_SKIN_TONE;
#[doc(inline)]
pub use crate::grouped::component::skin_tone::LIGHT_SKIN_TONE;
#[doc(inline)]
pub use crate::grouped::component::skin_tone::MEDIUM_DARK_SKIN_TONE;
#[doc(inline)]
pub use crate::grouped::component::skin_tone::MEDIUM_LIGHT_SKIN_TONE;
#[doc(inline)]
pub use crate::grouped::component::skin_tone::MEDIUM_SKIN_TONE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_AFGHANISTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ALAND_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ALBANIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ALGERIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_AMERICAN_SAMOA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ANDORRA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ANGOLA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ANGUILLA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ANTARCTICA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ANTIGUA_AND_BARBUDA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ARGENTINA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ARMENIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ARUBA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ASCENSION_ISLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_AUSTRALIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_AUSTRIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_AZERBAIJAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BAHAMAS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BAHRAIN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BANGLADESH;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BARBADOS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BELARUS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BELGIUM;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BELIZE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BENIN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BERMUDA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BHUTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BOLIVIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BOSNIA_AND_HERZEGOVINA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BOTSWANA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BOUVET_ISLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BRAZIL;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BRITISH_INDIAN_OCEAN_TERRITORY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BRITISH_VIRGIN_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BRUNEI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BULGARIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BURKINA_FASO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_BURUNDI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CAMBODIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CAMEROON;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CANADA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CANARY_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CAPE_VERDE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CARIBBEAN_NETHERLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CAYMAN_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CENTRAL_AFRICAN_REPUBLIC;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CEUTA_AND_MELILLA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CHAD;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CHILE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CHINA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CHRISTMAS_ISLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CLIPPERTON_ISLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_COCOS_KEELING_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_COLOMBIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_COMOROS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CONGO_BRAZZAVILLE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CONGO_KINSHASA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_COOK_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_COSTA_RICA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_COTE_D_IVOIRE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CROATIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CUBA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CURACAO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CYPRUS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_CZECHIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_DENMARK;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_DIEGO_GARCIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_DJIBOUTI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_DOMINICA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_DOMINICAN_REPUBLIC;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ECUADOR;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_EGYPT;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_EL_SALVADOR;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_EQUATORIAL_GUINEA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ERITREA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ESTONIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ESWATINI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ETHIOPIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_EUROPEAN_UNION;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FALKLAND_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FAROE_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FIJI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FINLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FRANCE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FRENCH_GUIANA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FRENCH_POLYNESIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_FRENCH_SOUTHERN_TERRITORIES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GABON;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GAMBIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GEORGIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GERMANY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GHANA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GIBRALTAR;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GREECE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GREENLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GRENADA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUADELOUPE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUAM;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUATEMALA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUERNSEY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUINEA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUINEA_BISSAU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_GUYANA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_HAITI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_HEARD_AND_MCDONALD_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_HONDURAS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_HONG_KONG_SAR_CHINA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_HUNGARY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ICELAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_INDIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_INDONESIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_IRAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_IRAQ;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_IRELAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ISLE_OF_MAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ISRAEL;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ITALY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_JAMAICA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_JAPAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_JERSEY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_JORDAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_KAZAKHSTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_KENYA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_KIRIBATI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_KOSOVO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_KUWAIT;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_KYRGYZSTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LAOS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LATVIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LEBANON;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LESOTHO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LIBERIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LIBYA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LIECHTENSTEIN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LITHUANIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_LUXEMBOURG;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MACAO_SAR_CHINA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MADAGASCAR;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MALAWI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MALAYSIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MALDIVES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MALI;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MALTA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MARSHALL_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MARTINIQUE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MAURITANIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MAURITIUS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MAYOTTE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MEXICO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MICRONESIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MOLDOVA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MONACO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MONGOLIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MONTENEGRO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MONTSERRAT;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MOROCCO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MOZAMBIQUE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_MYANMAR_BURMA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NAMIBIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NAURU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NEPAL;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NETHERLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NEW_CALEDONIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NEW_ZEALAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NICARAGUA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NIGER;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NIGERIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NIUE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NORFOLK_ISLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NORTHERN_MARIANA_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NORTH_KOREA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NORTH_MACEDONIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_NORWAY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_OMAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PAKISTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PALAU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PALESTINIAN_TERRITORIES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PANAMA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PAPUA_NEW_GUINEA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PARAGUAY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PERU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PHILIPPINES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PITCAIRN_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_POLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PORTUGAL;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_PUERTO_RICO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_QATAR;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_REUNION;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ROMANIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_RUSSIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_RWANDA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SAMOA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SAN_MARINO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SAO_TOME_AND_PRINCIPE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SAUDI_ARABIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SENEGAL;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SERBIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SEYCHELLES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SIERRA_LEONE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SINGAPORE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SINT_MAARTEN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SLOVAKIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SLOVENIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SOLOMON_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SOMALIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SOUTH_AFRICA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SOUTH_KOREA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SOUTH_SUDAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SPAIN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SRI_LANKA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_BARTHELEMY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_HELENA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_KITTS_AND_NEVIS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_LUCIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_MARTIN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_PIERRE_AND_MIQUELON;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ST_VINCENT_AND_GRENADINES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SUDAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SURINAME;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SVALBARD_AND_JAN_MAYEN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SWEDEN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SWITZERLAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_SYRIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TAIWAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TAJIKISTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TANZANIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_THAILAND;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TIMOR_LESTE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TOGO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TOKELAU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TONGA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TRINIDAD_AND_TOBAGO;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TRISTAN_DA_CUNHA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TUNISIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TURKEY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TURKMENISTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TURKS_AND_CAICOS_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_TUVALU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UGANDA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UKRAINE;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UNITED_ARAB_EMIRATES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UNITED_KINGDOM;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UNITED_NATIONS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UNITED_STATES;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_URUGUAY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_US_OUTLYING_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_US_VIRGIN_ISLANDS;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_UZBEKISTAN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_VANUATU;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_VATICAN_CITY;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_VENEZUELA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_VIETNAM;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_WALLIS_AND_FUTUNA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_WESTERN_SAHARA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_YEMEN;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ZAMBIA;
#[doc(inline)]
pub use crate::grouped::flags::country_flag::FLAG_ZIMBABWE;
#[doc(inline)]
pub use crate::grouped::flags::flag::BLACK_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::flag::CHEQUERED_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::flag::CROSSED_FLAGS;
#[doc(inline)]
pub use crate::grouped::flags::flag::PIRATE_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::flag::RAINBOW_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::flag::TRANSGENDER_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::flag::TRIANGULAR_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::flag::WHITE_FLAG;
#[doc(inline)]
pub use crate::grouped::flags::subdivision_flag::FLAG_ENGLAND;
#[doc(inline)]
pub use crate::grouped::flags::subdivision_flag::FLAG_SCOTLAND;
#[doc(inline)]
pub use crate::grouped::flags::subdivision_flag::FLAG_WALES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::dishware::AMPHORA;
#[doc(inline)]
pub use crate::grouped::food_and_drink::dishware::CHOPSTICKS;
#[doc(inline)]
pub use crate::grouped::food_and_drink::dishware::FORK_AND_KNIFE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::dishware::FORK_AND_KNIFE_WITH_PLATE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::dishware::KITCHEN_KNIFE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::dishware::SPOON;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::BABY_BOTTLE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::BEER_MUG;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::BEVERAGE_BOX;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::BOTTLE_WITH_POPPING_CORK;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::BUBBLE_TEA;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::CLINKING_BEER_MUGS;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::CLINKING_GLASSES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::COCKTAIL_GLASS;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::CUP_WITH_STRAW;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::GLASS_OF_MILK;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::HOT_BEVERAGE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::ICE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::MATE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::SAKE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::TEACUP_WITHOUT_HANDLE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::TEAPOT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::TROPICAL_DRINK;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::TUMBLER_GLASS;
#[doc(inline)]
pub use crate::grouped::food_and_drink::drink::WINE_GLASS;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::BENTO_BOX;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::COOKED_RICE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::CURRY_RICE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::DANGO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::DUMPLING;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::FISH_CAKE_WITH_SWIRL;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::FORTUNE_COOKIE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::FRIED_SHRIMP;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::MOON_CAKE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::ODEN;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::RICE_BALL;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::RICE_CRACKER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::ROASTED_SWEET_POTATO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::SPAGHETTI;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::STEAMING_BOWL;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::SUSHI;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_asian::TAKEOUT_BOX;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::BANANA;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::BLUEBERRIES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::CHERRIES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::COCONUT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::GRAPES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::GREEN_APPLE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::KIWI_FRUIT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::LEMON;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::MANGO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::MELON;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::OLIVE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::PEACH;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::PEAR;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::PINEAPPLE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::RED_APPLE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::STRAWBERRY;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::TANGERINE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::TOMATO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_fruit::WATERMELON;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_marine::CRAB;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_marine::LOBSTER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_marine::OYSTER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_marine::SHRIMP;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_marine::SQUID;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BACON;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BAGEL;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BAGUETTE_BREAD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BOWL_WITH_SPOON;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BREAD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BURRITO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::BUTTER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::CANNED_FOOD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::CHEESE_WEDGE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::COOKING;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::CROISSANT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::CUT_OF_MEAT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::EGG;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::FALAFEL;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::FLATBREAD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::FONDUE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::FRENCH_FRIES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::GREEN_SALAD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::HAMBURGER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::HOT_DOG;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::MEAT_ON_BONE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::PANCAKES;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::PIZZA;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::POPCORN;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::POT_OF_FOOD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::POULTRY_LEG;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::PRETZEL;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::SALT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::SANDWICH;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::SHALLOW_PAN_OF_FOOD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::STUFFED_FLATBREAD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::TACO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::TAMALE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_prepared::WAFFLE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::BIRTHDAY_CAKE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::CANDY;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::CHOCOLATE_BAR;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::COOKIE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::CUPCAKE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::CUSTARD;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::DOUGHNUT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::HONEY_POT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::ICE_CREAM;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::LOLLIPOP;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::PIE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::SHAVED_ICE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::SHORTCAKE;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_sweet::SOFT_ICE_CREAM;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::AVOCADO;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::BELL_PEPPER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::BROCCOLI;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::CARROT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::CHESTNUT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::CUCUMBER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::EAR_OF_CORN;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::EGGPLANT;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::GARLIC;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::HOT_PEPPER;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::LEAFY_GREEN;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::MUSHROOM;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::ONION;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::PEANUTS;
#[doc(inline)]
pub use crate::grouped::food_and_drink::food_vegetable::POTATO;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::BLUE_BOOK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::BOOKMARK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::BOOKMARK_TABS;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::BOOKS;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::CLOSED_BOOK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::GREEN_BOOK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::LABEL;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::LEDGER;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::NEWSPAPER;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::NOTEBOOK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::NOTEBOOK_WITH_DECORATIVE_COVER;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::OPEN_BOOK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::ORANGE_BOOK;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::PAGE_FACING_UP;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::PAGE_WITH_CURL;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::ROLLED_UP_NEWSPAPER;
#[doc(inline)]
pub use crate::grouped::objects::book_paper::SCROLL;
#[doc(inline)]
pub use crate::grouped::objects::clothing::BACKPACK;
#[doc(inline)]
pub use crate::grouped::objects::clothing::BALLET_SHOES;
#[doc(inline)]
pub use crate::grouped::objects::clothing::BIKINI;
#[doc(inline)]
pub use crate::grouped::objects::clothing::BILLED_CAP;
#[doc(inline)]
pub use crate::grouped::objects::clothing::BRIEFS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::CLUTCH_BAG;
#[doc(inline)]
pub use crate::grouped::objects::clothing::COAT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::CROWN;
#[doc(inline)]
pub use crate::grouped::objects::clothing::DRESS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::FLAT_SHOE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::GEM_STONE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::GLASSES;
#[doc(inline)]
pub use crate::grouped::objects::clothing::GLOVES;
#[doc(inline)]
pub use crate::grouped::objects::clothing::GOGGLES;
#[doc(inline)]
pub use crate::grouped::objects::clothing::GRADUATION_CAP;
#[doc(inline)]
pub use crate::grouped::objects::clothing::HANDBAG;
#[doc(inline)]
pub use crate::grouped::objects::clothing::HIGH_HEELED_SHOE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::HIKING_BOOT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::JEANS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::KIMONO;
#[doc(inline)]
pub use crate::grouped::objects::clothing::LAB_COAT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::LIPSTICK;
#[doc(inline)]
pub use crate::grouped::objects::clothing::MAN_S_SHOE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::MILITARY_HELMET;
#[doc(inline)]
pub use crate::grouped::objects::clothing::NECKTIE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::ONE_PIECE_SWIMSUIT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::PRAYER_BEADS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::PURSE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::RESCUE_WORKER_S_HELMET;
#[doc(inline)]
pub use crate::grouped::objects::clothing::RING;
#[doc(inline)]
pub use crate::grouped::objects::clothing::RUNNING_SHOE;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SAFETY_VEST;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SARI;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SCARF;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SHOPPING_BAGS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SHORTS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SOCKS;
#[doc(inline)]
pub use crate::grouped::objects::clothing::SUNGLASSES;
#[doc(inline)]
pub use crate::grouped::objects::clothing::THONG_SANDAL;
#[doc(inline)]
pub use crate::grouped::objects::clothing::TOP_HAT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::T_SHIRT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::WOMAN_S_BOOT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::WOMAN_S_CLOTHES;
#[doc(inline)]
pub use crate::grouped::objects::clothing::WOMAN_S_HAT;
#[doc(inline)]
pub use crate::grouped::objects::clothing::WOMAN_S_SANDAL;
#[doc(inline)]
pub use crate::grouped::objects::computer::ABACUS;
#[doc(inline)]
pub use crate::grouped::objects::computer::BATTERY;
#[doc(inline)]
pub use crate::grouped::objects::computer::COMPUTER_DISK;
#[doc(inline)]
pub use crate::grouped::objects::computer::COMPUTER_MOUSE;
#[doc(inline)]
pub use crate::grouped::objects::computer::DESKTOP_COMPUTER;
#[doc(inline)]
pub use crate::grouped::objects::computer::DVD;
#[doc(inline)]
pub use crate::grouped::objects::computer::ELECTRIC_PLUG;
#[doc(inline)]
pub use crate::grouped::objects::computer::FLOPPY_DISK;
#[doc(inline)]
pub use crate::grouped::objects::computer::KEYBOARD;
#[doc(inline)]
pub use crate::grouped::objects::computer::LAPTOP;
#[doc(inline)]
pub use crate::grouped::objects::computer::OPTICAL_DISK;
#[doc(inline)]
pub use crate::grouped::objects::computer::PRINTER;
#[doc(inline)]
pub use crate::grouped::objects::computer::TRACKBALL;
#[doc(inline)]
pub use crate::grouped::objects::household::BASKET;
#[doc(inline)]
pub use crate::grouped::objects::household::BATHTUB;
#[doc(inline)]
pub use crate::grouped::objects::household::BED;
#[doc(inline)]
pub use crate::grouped::objects::household::BROOM;
#[doc(inline)]
pub use crate::grouped::objects::household::BUCKET;
#[doc(inline)]
pub use crate::grouped::objects::household::CHAIR;
#[doc(inline)]
pub use crate::grouped::objects::household::COUCH_AND_LAMP;
#[doc(inline)]
pub use crate::grouped::objects::household::DOOR;
#[doc(inline)]
pub use crate::grouped::objects::household::ELEVATOR;
#[doc(inline)]
pub use crate::grouped::objects::household::FIRE_EXTINGUISHER;
#[doc(inline)]
pub use crate::grouped::objects::household::LOTION_BOTTLE;
#[doc(inline)]
pub use crate::grouped::objects::household::MIRROR;
#[doc(inline)]
pub use crate::grouped::objects::household::MOUSE_TRAP;
#[doc(inline)]
pub use crate::grouped::objects::household::PLUNGER;
#[doc(inline)]
pub use crate::grouped::objects::household::RAZOR;
#[doc(inline)]
pub use crate::grouped::objects::household::ROLL_OF_PAPER;
#[doc(inline)]
pub use crate::grouped::objects::household::SAFETY_PIN;
#[doc(inline)]
pub use crate::grouped::objects::household::SHOPPING_CART;
#[doc(inline)]
pub use crate::grouped::objects::household::SHOWER;
#[doc(inline)]
pub use crate::grouped::objects::household::SOAP;
#[doc(inline)]
pub use crate::grouped::objects::household::SPONGE;
#[doc(inline)]
pub use crate::grouped::objects::household::TOILET;
#[doc(inline)]
pub use crate::grouped::objects::household::TOOTHBRUSH;
#[doc(inline)]
pub use crate::grouped::objects::household::WINDOW;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::CAMERA;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::CAMERA_WITH_FLASH;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::CANDLE;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::CLAPPER_BOARD;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::DIYA_LAMP;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::FILM_FRAMES;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::FILM_PROJECTOR;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::FLASHLIGHT;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::LIGHT_BULB;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::MAGNIFYING_GLASS_TILTED_LEFT;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::MAGNIFYING_GLASS_TILTED_RIGHT;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::MOVIE_CAMERA;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::RED_PAPER_LANTERN;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::TELEVISION;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::VIDEOCASSETTE;
#[doc(inline)]
pub use crate::grouped::objects::light_and_video::VIDEO_CAMERA;
#[doc(inline)]
pub use crate::grouped::objects::lock::KEY;
#[doc(inline)]
pub use crate::grouped::objects::lock::LOCKED;
#[doc(inline)]
pub use crate::grouped::objects::lock::LOCKED_WITH_KEY;
#[doc(inline)]
pub use crate::grouped::objects::lock::LOCKED_WITH_PEN;
#[doc(inline)]
pub use crate::grouped::objects::lock::OLD_KEY;
#[doc(inline)]
pub use crate::grouped::objects::lock::UNLOCKED;
#[doc(inline)]
pub use crate::grouped::objects::mail::BALLOT_BOX_WITH_BALLOT;
#[doc(inline)]
pub use crate::grouped::objects::mail::CLOSED_MAILBOX_WITH_LOWERED_FLAG;
#[doc(inline)]
pub use crate::grouped::objects::mail::CLOSED_MAILBOX_WITH_RAISED_FLAG;
#[doc(inline)]
pub use crate::grouped::objects::mail::ENVELOPE;
#[doc(inline)]
pub use crate::grouped::objects::mail::ENVELOPE_WITH_ARROW;
#[doc(inline)]
pub use crate::grouped::objects::mail::E_MAIL;
#[doc(inline)]
pub use crate::grouped::objects::mail::INBOX_TRAY;
#[doc(inline)]
pub use crate::grouped::objects::mail::INCOMING_ENVELOPE;
#[doc(inline)]
pub use crate::grouped::objects::mail::OPEN_MAILBOX_WITH_LOWERED_FLAG;
#[doc(inline)]
pub use crate::grouped::objects::mail::OPEN_MAILBOX_WITH_RAISED_FLAG;
#[doc(inline)]
pub use crate::grouped::objects::mail::OUTBOX_TRAY;
#[doc(inline)]
pub use crate::grouped::objects::mail::PACKAGE;
#[doc(inline)]
pub use crate::grouped::objects::mail::POSTBOX;
#[doc(inline)]
pub use crate::grouped::objects::medical::ADHESIVE_BANDAGE;
#[doc(inline)]
pub use crate::grouped::objects::medical::DROP_OF_BLOOD;
#[doc(inline)]
pub use crate::grouped::objects::medical::PILL;
#[doc(inline)]
pub use crate::grouped::objects::medical::STETHOSCOPE;
#[doc(inline)]
pub use crate::grouped::objects::medical::SYRINGE;
#[doc(inline)]
pub use crate::grouped::objects::money::CHART_INCREASING_WITH_YEN;
#[doc(inline)]
pub use crate::grouped::objects::money::COIN;
#[doc(inline)]
pub use crate::grouped::objects::money::CREDIT_CARD;
#[doc(inline)]
pub use crate::grouped::objects::money::DOLLAR_BANKNOTE;
#[doc(inline)]
pub use crate::grouped::objects::money::EURO_BANKNOTE;
#[doc(inline)]
pub use crate::grouped::objects::money::MONEY_BAG;
#[doc(inline)]
pub use crate::grouped::objects::money::MONEY_WITH_WINGS;
#[doc(inline)]
pub use crate::grouped::objects::money::POUND_BANKNOTE;
#[doc(inline)]
pub use crate::grouped::objects::money::RECEIPT;
#[doc(inline)]
pub use crate::grouped::objects::money::YEN_BANKNOTE;
#[doc(inline)]
pub use crate::grouped::objects::music::CONTROL_KNOBS;
#[doc(inline)]
pub use crate::grouped::objects::music::HEADPHONE;
#[doc(inline)]
pub use crate::grouped::objects::music::LEVEL_SLIDER;
#[doc(inline)]
pub use crate::grouped::objects::music::MICROPHONE;
#[doc(inline)]
pub use crate::grouped::objects::music::MUSICAL_NOTE;
#[doc(inline)]
pub use crate::grouped::objects::music::MUSICAL_NOTES;
#[doc(inline)]
pub use crate::grouped::objects::music::MUSICAL_SCORE;
#[doc(inline)]
pub use crate::grouped::objects::music::RADIO;
#[doc(inline)]
pub use crate::grouped::objects::music::STUDIO_MICROPHONE;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::ACCORDION;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::BANJO;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::DRUM;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::GUITAR;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::LONG_DRUM;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::MUSICAL_KEYBOARD;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::SAXOPHONE;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::TRUMPET;
#[doc(inline)]
pub use crate::grouped::objects::musical_instrument::VIOLIN;
#[doc(inline)]
pub use crate::grouped::objects::office::BAR_CHART;
#[doc(inline)]
pub use crate::grouped::objects::office::BRIEFCASE;
#[doc(inline)]
pub use crate::grouped::objects::office::CALENDAR;
#[doc(inline)]
pub use crate::grouped::objects::office::CARD_FILE_BOX;
#[doc(inline)]
pub use crate::grouped::objects::office::CARD_INDEX;
#[doc(inline)]
pub use crate::grouped::objects::office::CARD_INDEX_DIVIDERS;
#[doc(inline)]
pub use crate::grouped::objects::office::CHART_DECREASING;
#[doc(inline)]
pub use crate::grouped::objects::office::CHART_INCREASING;
#[doc(inline)]
pub use crate::grouped::objects::office::CLIPBOARD;
#[doc(inline)]
pub use crate::grouped::objects::office::FILE_CABINET;
#[doc(inline)]
pub use crate::grouped::objects::office::FILE_FOLDER;
#[doc(inline)]
pub use crate::grouped::objects::office::LINKED_PAPERCLIPS;
#[doc(inline)]
pub use crate::grouped::objects::office::OPEN_FILE_FOLDER;
#[doc(inline)]
pub use crate::grouped::objects::office::PAPERCLIP;
#[doc(inline)]
pub use crate::grouped::objects::office::PUSHPIN;
#[doc(inline)]
pub use crate::grouped::objects::office::ROUND_PUSHPIN;
#[doc(inline)]
pub use crate::grouped::objects::office::SCISSORS;
#[doc(inline)]
pub use crate::grouped::objects::office::SPIRAL_CALENDAR;
#[doc(inline)]
pub use crate::grouped::objects::office::SPIRAL_NOTEPAD;
#[doc(inline)]
pub use crate::grouped::objects::office::STRAIGHT_RULER;
#[doc(inline)]
pub use crate::grouped::objects::office::TEAR_OFF_CALENDAR;
#[doc(inline)]
pub use crate::grouped::objects::office::TRIANGULAR_RULER;
#[doc(inline)]
pub use crate::grouped::objects::office::WASTEBASKET;
#[doc(inline)]
pub use crate::grouped::objects::other_object::CIGARETTE;
#[doc(inline)]
pub use crate::grouped::objects::other_object::COFFIN;
#[doc(inline)]
pub use crate::grouped::objects::other_object::FUNERAL_URN;
#[doc(inline)]
pub use crate::grouped::objects::other_object::HEADSTONE;
#[doc(inline)]
pub use crate::grouped::objects::other_object::MOAI;
#[doc(inline)]
pub use crate::grouped::objects::other_object::PLACARD;
#[doc(inline)]
pub use crate::grouped::objects::phone::FAX_MACHINE;
#[doc(inline)]
pub use crate::grouped::objects::phone::MOBILE_PHONE;
#[doc(inline)]
pub use crate::grouped::objects::phone::MOBILE_PHONE_WITH_ARROW;
#[doc(inline)]
pub use crate::grouped::objects::phone::PAGER;
#[doc(inline)]
pub use crate::grouped::objects::phone::TELEPHONE;
#[doc(inline)]
pub use crate::grouped::objects::phone::TELEPHONE_RECEIVER;
#[doc(inline)]
pub use crate::grouped::objects::science::ALEMBIC;
#[doc(inline)]
pub use crate::grouped::objects::science::DNA;
#[doc(inline)]
pub use crate::grouped::objects::science::MICROSCOPE;
#[doc(inline)]
pub use crate::grouped::objects::science::PETRI_DISH;
#[doc(inline)]
pub use crate::grouped::objects::science::SATELLITE_ANTENNA;
#[doc(inline)]
pub use crate::grouped::objects::science::TELESCOPE;
#[doc(inline)]
pub use crate::grouped::objects::science::TEST_TUBE;
#[doc(inline)]
pub use crate::grouped::objects::sound::BELL;
#[doc(inline)]
pub use crate::grouped::objects::sound::BELL_WITH_SLASH;
#[doc(inline)]
pub use crate::grouped::objects::sound::LOUDSPEAKER;
#[doc(inline)]
pub use crate::grouped::objects::sound::MEGAPHONE;
#[doc(inline)]
pub use crate::grouped::objects::sound::MUTED_SPEAKER;
#[doc(inline)]
pub use crate::grouped::objects::sound::POSTAL_HORN;
#[doc(inline)]
pub use crate::grouped::objects::sound::SPEAKER_HIGH_VOLUME;
#[doc(inline)]
pub use crate::grouped::objects::sound::SPEAKER_LOW_VOLUME;
#[doc(inline)]
pub use crate::grouped::objects::sound::SPEAKER_MEDIUM_VOLUME;
#[doc(inline)]
pub use crate::grouped::objects::tool::AXE;
#[doc(inline)]
pub use crate::grouped::objects::tool::BALANCE_SCALE;
#[doc(inline)]
pub use crate::grouped::objects::tool::BOOMERANG;
#[doc(inline)]
pub use crate::grouped::objects::tool::BOW_AND_ARROW;
#[doc(inline)]
pub use crate::grouped::objects::tool::CARPENTRY_SAW;
#[doc(inline)]
pub use crate::grouped::objects::tool::CHAINS;
#[doc(inline)]
pub use crate::grouped::objects::tool::CLAMP;
#[doc(inline)]
pub use crate::grouped::objects::tool::CROSSED_SWORDS;
#[doc(inline)]
pub use crate::grouped::objects::tool::DAGGER;
#[doc(inline)]
pub use crate::grouped::objects::tool::GEAR;
#[doc(inline)]
pub use crate::grouped::objects::tool::HAMMER;
#[doc(inline)]
pub use crate::grouped::objects::tool::HAMMER_AND_PICK;
#[doc(inline)]
pub use crate::grouped::objects::tool::HAMMER_AND_WRENCH;
#[doc(inline)]
pub use crate::grouped::objects::tool::HOOK;
#[doc(inline)]
pub use crate::grouped::objects::tool::LADDER;
#[doc(inline)]
pub use crate::grouped::objects::tool::LINK;
#[doc(inline)]
pub use crate::grouped::objects::tool::MAGNET;
#[doc(inline)]
pub use crate::grouped::objects::tool::NUT_AND_BOLT;
#[doc(inline)]
pub use crate::grouped::objects::tool::PICK;
#[doc(inline)]
pub use crate::grouped::objects::tool::SCREWDRIVER;
#[doc(inline)]
pub use crate::grouped::objects::tool::SHIELD;
#[doc(inline)]
pub use crate::grouped::objects::tool::TOOLBOX;
#[doc(inline)]
pub use crate::grouped::objects::tool::WATER_PISTOL;
#[doc(inline)]
pub use crate::grouped::objects::tool::WHITE_CANE;
#[doc(inline)]
pub use crate::grouped::objects::tool::WRENCH;
#[doc(inline)]
pub use crate::grouped::objects::writing::BLACK_NIB;
#[doc(inline)]
pub use crate::grouped::objects::writing::CRAYON;
#[doc(inline)]
pub use crate::grouped::objects::writing::FOUNTAIN_PEN;
#[doc(inline)]
pub use crate::grouped::objects::writing::MEMO;
#[doc(inline)]
pub use crate::grouped::objects::writing::PAINTBRUSH;
#[doc(inline)]
pub use crate::grouped::objects::writing::PEN;
#[doc(inline)]
pub use crate::grouped::objects::writing::PENCIL;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::ANATOMICAL_HEART;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::BONE;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::BRAIN;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::EAR;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::EAR_WITH_HEARING_AID;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::EYE;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::EYES;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::FLEXED_BICEPS;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::FOOT;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::LEG;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::LUNGS;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::MECHANICAL_ARM;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::MECHANICAL_LEG;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::MOUTH;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::NOSE;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::TONGUE;
#[doc(inline)]
pub use crate::grouped::people_and_body::body_parts::TOOTH;
#[doc(inline)]
pub use crate::grouped::people_and_body::family::COUPLE_WITH_HEART;
#[doc(inline)]
pub use crate::grouped::people_and_body::family::FAMILY;
#[doc(inline)]
pub use crate::grouped::people_and_body::family::KISS;
#[doc(inline)]
pub use crate::grouped::people_and_body::family::PERSON_HOLDING_HANDS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_closed::LEFT_FACING_FIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_closed::ONCOMING_FIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_closed::RAISED_FIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_closed::RIGHT_FACING_FIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_closed::THUMBS_DOWN;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_closed::THUMBS_UP;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_open::HAND_WITH_FINGERS_SPLAYED;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_open::RAISED_BACK_OF_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_open::RAISED_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_open::VULCAN_SALUTE;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_open::WAVING_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::CALL_ME_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::CROSSED_FINGERS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::LOVE_YOU_GESTURE;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::OK_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::PINCHED_FINGERS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::PINCHING_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::SIGN_OF_THE_HORNS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_fingers_partial::VICTORY_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_prop::NAIL_POLISH;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_prop::SELFIE;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_prop::WRITING_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_single_finger::BACKHAND_INDEX_POINTING_DOWN;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_single_finger::BACKHAND_INDEX_POINTING_LEFT;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_single_finger::BACKHAND_INDEX_POINTING_RIGHT;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_single_finger::BACKHAND_INDEX_POINTING_UP;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_single_finger::INDEX_POINTING_UP;
#[doc(inline)]
pub use crate::grouped::people_and_body::hand_single_finger::MIDDLE_FINGER;
#[doc(inline)]
pub use crate::grouped::people_and_body::hands::CLAPPING_HANDS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hands::FOLDED_HANDS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hands::HANDSHAKE;
#[doc(inline)]
pub use crate::grouped::people_and_body::hands::OPEN_HANDS;
#[doc(inline)]
pub use crate::grouped::people_and_body::hands::PALMS_UP_TOGETHER;
#[doc(inline)]
pub use crate::grouped::people_and_body::hands::RAISING_HANDS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::BABY;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::BOY;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::CHILD;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::GIRL;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::OLDER_PERSON;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::OLD_PERSON;
#[doc(inline)]
pub use crate::grouped::people_and_body::person::PERSON;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_CLIMBING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_DANCING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_GETTING_HAIRCUT;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_GETTING_MASSAGE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_IN_MANUAL_WHEELCHAIR;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_IN_MOTORIZED_WHEELCHAIR;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_IN_STEAMY_ROOM;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_IN_SUIT_LEVITATING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_KNEELING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_RUNNING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_STANDING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_WALKING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_WITH_BUNNY_EARS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_activity::PERSON_WITH_WHITE_CANE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::BABY_ANGEL;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::ELF;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::FAIRY;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::GENIE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::MAGE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::MERMAID;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::MERMAN;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::MERPERSON;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::MRS_CLAUS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::MX_CLAUS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::SANTA_CLAUS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::SUPERHERO;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::SUPERVILLAIN;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::VAMPIRE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_fantasy::ZOMBIE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::DEAF_PERSON;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_BOWING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_FACEPALMING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_FROWNING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_GESTURING_NO;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_GESTURING_OK;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_POUTING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_RAISING_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_SHRUGGING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_gesture::PERSON_TIPPING_HAND;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_resting::PERSON_IN_BED;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_resting::PERSON_IN_LOTUS_POSITION;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_resting::PERSON_TAKING_BATH;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::ARTIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::ASTRONAUT;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::BREAST_FEEDING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::CONSTRUCTION_WORKER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::COOK;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::DETECTIVE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::FACTORY_WORKER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::FARMER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::FIREFIGHTER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::GUARD;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::HEALTH_WORKER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::JUDGE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::MECHANIC;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::NINJA;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::OFFICE_WORKER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PERSON_FEEDING_BABY;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PERSON_IN_TUXEDO;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PERSON_WEARING_TURBAN;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PERSON_WITH_SKULLCAP;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PERSON_WITH_VEIL;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PILOT;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::POLICE_OFFICER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PREGNANT_WOMAN;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PRINCE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::PRINCESS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::SCIENTIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::SINGER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::STUDENT;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::TEACHER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::TECHNOLOGIST;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_role::WOMAN_WITH_HEADSCARF;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::HORSE_RACING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_BIKING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_BOUNCING_BALL;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_CARTWHEELING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_FENCING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_GOLFING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_JUGGLING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_LIFTING_WEIGHTS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_MOUNTAIN_BIKING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_PLAYING_HANDBALL;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_PLAYING_WATER_POLO;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_ROWING_BOAT;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_SURFING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_SWIMMING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::PERSON_WRESTLING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::SKIER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_sport::SNOWBOARDER;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_symbol::BUSTS_IN_SILHOUETTE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_symbol::BUST_IN_SILHOUETTE;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_symbol::FOOTPRINTS;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_symbol::PERSON_HUGGING;
#[doc(inline)]
pub use crate::grouped::people_and_body::person_symbol::SPEAKING_HEAD;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::CAT_WITH_TEARS_OF_JOY;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::CAT_WITH_WRY_SMILE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::CRYING_CAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::GRINNING_CAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::GRINNING_CAT_WITH_SMILING_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::KISSING_CAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::POUTING_CAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::SMILING_CAT_WITH_HEART_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::cat_face::WEARY_CAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::ANGER_SYMBOL;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::BEATING_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::BLACK_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::BLUE_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::BOMB;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::BROKEN_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::BROWN_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::COLLISION;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::DASHING_AWAY;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::DIZZY;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::EYE_IN_SPEECH_BUBBLE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::GREEN_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::GROWING_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HEART_DECORATION;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HEART_EXCLAMATION;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HEART_ON_FIRE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HEART_WITH_ARROW;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HEART_WITH_RIBBON;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HOLE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::HUNDRED_POINTS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::KISS_MARK;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::LEFT_SPEECH_BUBBLE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::LOVE_LETTER;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::MENDING_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::ORANGE_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::PURPLE_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::RED_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::REVOLVING_HEARTS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::RIGHT_ANGER_BUBBLE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::SPARKLING_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::SPEECH_BALLOON;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::SWEAT_DROPLETS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::THOUGHT_BALLOON;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::TWO_HEARTS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::WHITE_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::YELLOW_HEART;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::emotion::ZZZ;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::FACE_BLOWING_A_KISS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::KISSING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::KISSING_FACE_WITH_CLOSED_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::KISSING_FACE_WITH_SMILING_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::SMILING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::SMILING_FACE_WITH_HEARTS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::SMILING_FACE_WITH_HEART_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::SMILING_FACE_WITH_TEAR;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_affection::STAR_STRUCK;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::ANGUISHED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::ANXIOUS_FACE_WITH_SWEAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::ASTONISHED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::CONFOUNDED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::CONFUSED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::CRYING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::DISAPPOINTED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::DOWNCAST_FACE_WITH_SWEAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::FACE_SCREAMING_IN_FEAR;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::FACE_WITH_OPEN_MOUTH;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::FEARFUL_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::FLUSHED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::FROWNING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::FROWNING_FACE_WITH_OPEN_MOUTH;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::HUSHED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::LOUDLY_CRYING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::PERSEVERING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::PLEADING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::SAD_BUT_RELIEVED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::SLIGHTLY_FROWNING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::TIRED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::WEARY_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::WORRIED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_concerned::YAWNING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::ALIEN;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::ALIEN_MONSTER;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::CLOWN_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::GHOST;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::GOBLIN;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::OGRE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::PILE_OF_POO;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_costume::ROBOT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_glasses::FACE_WITH_MONOCLE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_glasses::NERD_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_glasses::SMILING_FACE_WITH_SUNGLASSES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hand::FACE_WITH_HAND_OVER_MOUTH;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hand::HUGGING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hand::SHUSHING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hand::THINKING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hat::COWBOY_HAT_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hat::DISGUISED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_hat::PARTYING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::ANGRY_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::ANGRY_FACE_WITH_HORNS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::FACE_WITH_STEAM_FROM_NOSE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::FACE_WITH_SYMBOLS_ON_MOUTH;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::POUTING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::SKULL;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::SKULL_AND_CROSSBONES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_negative::SMILING_FACE_WITH_HORNS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::EXPRESSIONLESS_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::FACE_EXHALING;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::FACE_IN_CLOUDS;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::FACE_WITHOUT_MOUTH;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::FACE_WITH_RAISED_EYEBROW;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::FACE_WITH_ROLLING_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::GRIMACING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::LYING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::NEUTRAL_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::SMIRKING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::UNAMUSED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_neutral_skeptical::ZIPPER_MOUTH_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_sleepy::DROOLING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_sleepy::PENSIVE_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_sleepy::RELIEVED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_sleepy::SLEEPING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_sleepy::SLEEPY_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::BEAMING_FACE_WITH_SMILING_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::FACE_WITH_TEARS_OF_JOY;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::GRINNING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::GRINNING_FACE_WITH_BIG_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::GRINNING_FACE_WITH_SMILING_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::GRINNING_FACE_WITH_SWEAT;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::GRINNING_SQUINTING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::ROLLING_ON_THE_FLOOR_LAUGHING;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::SLIGHTLY_SMILING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::SMILING_FACE_WITH_HALO;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::SMILING_FACE_WITH_SMILING_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::UPSIDE_DOWN_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_smiling::WINKING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_tongue::FACE_SAVORING_FOOD;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_tongue::FACE_WITH_TONGUE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_tongue::MONEY_MOUTH_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_tongue::SQUINTING_FACE_WITH_TONGUE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_tongue::WINKING_FACE_WITH_TONGUE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_tongue::ZANY_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::COLD_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::EXPLODING_HEAD;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::FACE_VOMITING;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::FACE_WITH_HEAD_BANDAGE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::FACE_WITH_MEDICAL_MASK;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::FACE_WITH_SPIRAL_EYES;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::FACE_WITH_THERMOMETER;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::HOT_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::KNOCKED_OUT_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::NAUSEATED_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::SNEEZING_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::face_unwell::WOOZY_FACE;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::monkey_face::HEAR_NO_EVIL_MONKEY;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::monkey_face::SEE_NO_EVIL_MONKEY;
#[doc(inline)]
pub use crate::grouped::smileys_and_emotion::monkey_face::SPEAK_NO_EVIL_MONKEY;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::AB_BUTTON_BLOOD_TYPE;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::A_BUTTON_BLOOD_TYPE;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::B_BUTTON_BLOOD_TYPE;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::CIRCLED_M;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::CL_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::COOL_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::FREE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::ID_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::INFORMATION;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::INPUT_LATIN_LETTERS;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::INPUT_LATIN_LOWERCASE;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::INPUT_LATIN_UPPERCASE;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::INPUT_NUMBERS;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::INPUT_SYMBOLS;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_ACCEPTABLE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_APPLICATION_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_BARGAIN_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_CONGRATULATIONS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_DISCOUNT_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_FREE_OF_CHARGE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_HERE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_MONTHLY_AMOUNT_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_NOT_FREE_OF_CHARGE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_NO_VACANCY_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_OPEN_FOR_BUSINESS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_PASSING_GRADE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_PROHIBITED_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_RESERVED_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_SECRET_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_SERVICE_CHARGE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::JAPANESE_VACANCY_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::NEW_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::NG_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::OK_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::O_BUTTON_BLOOD_TYPE;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::P_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::SOS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::UP_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::alphanum::VS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::BACK_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::CLOCKWISE_VERTICAL_ARROWS;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::COUNTERCLOCKWISE_ARROWS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::DOWN_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::DOWN_LEFT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::DOWN_RIGHT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::END_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::LEFT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::LEFT_ARROW_CURVING_RIGHT;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::LEFT_RIGHT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::ON_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::RIGHT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::RIGHT_ARROW_CURVING_DOWN;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::RIGHT_ARROW_CURVING_LEFT;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::RIGHT_ARROW_CURVING_UP;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::SOON_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::TOP_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::UP_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::UP_DOWN_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::UP_LEFT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::arrow::UP_RIGHT_ARROW;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::ANTENNA_BARS;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::BRIGHT_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::CINEMA;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::DIM_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::DOWNWARDS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::EJECT_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::FAST_DOWN_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::FAST_FORWARD_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::FAST_REVERSE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::FAST_UP_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::LAST_TRACK_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::MOBILE_PHONE_OFF;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::NEXT_TRACK_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::PAUSE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::PLAY_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::PLAY_OR_PAUSE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::RECORD_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::REPEAT_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::REPEAT_SINGLE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::REVERSE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::SHUFFLE_TRACKS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::STOP_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::UPWARDS_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::av_symbol::VIBRATION_MODE;
#[doc(inline)]
pub use crate::grouped::symbols::currency::CURRENCY_EXCHANGE;
#[doc(inline)]
pub use crate::grouped::symbols::currency::HEAVY_DOLLAR_SIGN;
#[doc(inline)]
pub use crate::grouped::symbols::gender::FEMALE_SIGN;
#[doc(inline)]
pub use crate::grouped::symbols::gender::MALE_SIGN;
#[doc(inline)]
pub use crate::grouped::symbols::gender::TRANSGENDER_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLACK_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLACK_LARGE_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLACK_MEDIUM_SMALL_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLACK_MEDIUM_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLACK_SMALL_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLACK_SQUARE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLUE_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BLUE_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BROWN_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::BROWN_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::DIAMOND_WITH_A_DOT;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::GREEN_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::GREEN_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::LARGE_BLUE_DIAMOND;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::LARGE_ORANGE_DIAMOND;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::ORANGE_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::ORANGE_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::PURPLE_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::PURPLE_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::RADIO_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::RED_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::RED_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::RED_TRIANGLE_POINTED_DOWN;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::RED_TRIANGLE_POINTED_UP;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::SMALL_BLUE_DIAMOND;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::SMALL_ORANGE_DIAMOND;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::WHITE_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::WHITE_LARGE_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::WHITE_MEDIUM_SMALL_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::WHITE_MEDIUM_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::WHITE_SMALL_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::WHITE_SQUARE_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::YELLOW_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::geometric::YELLOW_SQUARE;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_0;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_1;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_10;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_2;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_3;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_4;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_5;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_6;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_7;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_8;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_9;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_ASTERISK;
#[doc(inline)]
pub use crate::grouped::symbols::keycap::KEYCAP_HASH;
#[doc(inline)]
pub use crate::grouped::symbols::math::DIVIDE;
#[doc(inline)]
pub use crate::grouped::symbols::math::INFINITY;
#[doc(inline)]
pub use crate::grouped::symbols::math::MINUS;
#[doc(inline)]
pub use crate::grouped::symbols::math::MULTIPLY;
#[doc(inline)]
pub use crate::grouped::symbols::math::PLUS;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::CHECK_BOX_WITH_CHECK;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::CHECK_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::CHECK_MARK_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::COPYRIGHT;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::CROSS_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::CROSS_MARK_BUTTON;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::CURLY_LOOP;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::DOUBLE_CURLY_LOOP;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::EIGHT_POINTED_STAR;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::EIGHT_SPOKED_ASTERISK;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::FLEUR_DE_LIS;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::HOLLOW_RED_CIRCLE;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::JAPANESE_SYMBOL_FOR_BEGINNER;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::MEDICAL_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::NAME_BADGE;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::PART_ALTERNATION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::RECYCLING_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::REGISTERED;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::SPARKLE;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::TRADE_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::other_symbol::TRIDENT_EMBLEM;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::DOUBLE_EXCLAMATION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::EXCLAMATION_QUESTION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::RED_EXCLAMATION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::RED_QUESTION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::WAVY_DASH;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::WHITE_EXCLAMATION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::punctuation::WHITE_QUESTION_MARK;
#[doc(inline)]
pub use crate::grouped::symbols::religion::ATOM_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::religion::DOTTED_SIX_POINTED_STAR;
#[doc(inline)]
pub use crate::grouped::symbols::religion::LATIN_CROSS;
#[doc(inline)]
pub use crate::grouped::symbols::religion::MENORAH;
#[doc(inline)]
pub use crate::grouped::symbols::religion::OM;
#[doc(inline)]
pub use crate::grouped::symbols::religion::ORTHODOX_CROSS;
#[doc(inline)]
pub use crate::grouped::symbols::religion::PEACE_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::religion::PLACE_OF_WORSHIP;
#[doc(inline)]
pub use crate::grouped::symbols::religion::STAR_AND_CRESCENT;
#[doc(inline)]
pub use crate::grouped::symbols::religion::STAR_OF_DAVID;
#[doc(inline)]
pub use crate::grouped::symbols::religion::WHEEL_OF_DHARMA;
#[doc(inline)]
pub use crate::grouped::symbols::religion::YIN_YANG;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::ATM_SIGN;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::BABY_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::BAGGAGE_CLAIM;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::CUSTOMS;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::LEFT_LUGGAGE;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::LITTER_IN_BIN_SIGN;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::MEN_S_ROOM;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::PASSPORT_CONTROL;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::POTABLE_WATER;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::RESTROOM;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::WATER_CLOSET;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::WHEELCHAIR_SYMBOL;
#[doc(inline)]
pub use crate::grouped::symbols::transport_sign::WOMEN_S_ROOM;
#[doc(inline)]
pub use crate::grouped::symbols::warning::BIOHAZARD;
#[doc(inline)]
pub use crate::grouped::symbols::warning::CHILDREN_CROSSING;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NON_POTABLE_WATER;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_BICYCLES;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_ENTRY;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_LITTERING;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_MOBILE_PHONES;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_ONE_UNDER_EIGHTEEN;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_PEDESTRIANS;
#[doc(inline)]
pub use crate::grouped::symbols::warning::NO_SMOKING;
#[doc(inline)]
pub use crate::grouped::symbols::warning::PROHIBITED;
#[doc(inline)]
pub use crate::grouped::symbols::warning::RADIOACTIVE;
#[doc(inline)]
pub use crate::grouped::symbols::warning::WARNING;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::AQUARIUS;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::ARIES;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::CANCER;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::CAPRICORN;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::GEMINI;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::LEO;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::LIBRA;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::OPHIUCHUS;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::PISCES;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::SAGITTARIUS;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::SCORPIO;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::TAURUS;
#[doc(inline)]
pub use crate::grouped::symbols::zodiac::VIRGO;
#[doc(inline)]
pub use crate::grouped::travel_and_places::hotel::BELLHOP_BELL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::hotel::LUGGAGE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::BANK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::BRICK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::BUILDING_CONSTRUCTION;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::CASTLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::CLASSICAL_BUILDING;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::CONVENIENCE_STORE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::DEPARTMENT_STORE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::DERELICT_HOUSE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::FACTORY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::HOSPITAL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::HOTEL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::HOUSE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::HOUSES;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::HOUSE_WITH_GARDEN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::HUT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::JAPANESE_CASTLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::JAPANESE_POST_OFFICE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::LOVE_HOTEL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::OFFICE_BUILDING;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::POST_OFFICE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::ROCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::SCHOOL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::STADIUM;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::STATUE_OF_LIBERTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::TOKYO_TOWER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::WEDDING;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_building::WOOD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::BEACH_WITH_UMBRELLA;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::CAMPING;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::DESERT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::DESERT_ISLAND;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::MOUNTAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::MOUNT_FUJI;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::NATIONAL_PARK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::SNOW_CAPPED_MOUNTAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_geographic::VOLCANO;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::COMPASS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::GLOBE_SHOWING_AMERICAS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::GLOBE_SHOWING_ASIA_AUSTRALIA;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::GLOBE_SHOWING_EUROPE_AFRICA;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::GLOBE_WITH_MERIDIANS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::MAP_OF_JAPAN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_map::WORLD_MAP;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::BARBER_POLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::BRIDGE_AT_NIGHT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::CAROUSEL_HORSE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::CIRCUS_TENT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::CITYSCAPE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::CITYSCAPE_AT_DUSK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::FERRIS_WHEEL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::FOGGY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::FOUNTAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::HOT_SPRINGS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::NIGHT_WITH_STARS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::ROLLER_COASTER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::SUNRISE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::SUNRISE_OVER_MOUNTAINS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::SUNSET;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_other::TENT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_religious::CHURCH;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_religious::HINDU_TEMPLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_religious::KAABA;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_religious::MOSQUE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_religious::SHINTO_SHRINE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::place_religious::SYNAGOGUE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CLOSED_UMBRELLA;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CLOUD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CLOUD_WITH_LIGHTNING;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CLOUD_WITH_LIGHTNING_AND_RAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CLOUD_WITH_RAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CLOUD_WITH_SNOW;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::COMET;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CRESCENT_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::CYCLONE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::DROPLET;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::FIRE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::FIRST_QUARTER_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::FIRST_QUARTER_MOON_FACE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::FOG;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::FULL_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::FULL_MOON_FACE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::GLOWING_STAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::HIGH_VOLTAGE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::LAST_QUARTER_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::LAST_QUARTER_MOON_FACE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::MILKY_WAY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::NEW_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::NEW_MOON_FACE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::RAINBOW;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::RINGED_PLANET;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SHOOTING_STAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SNOWFLAKE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SNOWMAN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SNOWMAN_WITHOUT_SNOW;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::STAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SUN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SUN_BEHIND_CLOUD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SUN_BEHIND_LARGE_CLOUD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SUN_BEHIND_RAIN_CLOUD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SUN_BEHIND_SMALL_CLOUD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::SUN_WITH_FACE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::THERMOMETER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::TORNADO;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::UMBRELLA;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::UMBRELLA_ON_GROUND;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::UMBRELLA_WITH_RAIN_DROPS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::WANING_CRESCENT_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::WANING_GIBBOUS_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::WATER_WAVE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::WAXING_CRESCENT_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::WAXING_GIBBOUS_MOON;
#[doc(inline)]
pub use crate::grouped::travel_and_places::sky_and_weather::WIND_FACE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::ALARM_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::EIGHT_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::EIGHT_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::ELEVEN_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::ELEVEN_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::FIVE_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::FIVE_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::FOUR_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::FOUR_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::HOURGLASS_DONE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::HOURGLASS_NOT_DONE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::MANTELPIECE_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::NINE_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::NINE_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::ONE_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::ONE_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::SEVEN_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::SEVEN_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::SIX_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::SIX_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::STOPWATCH;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TEN_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TEN_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::THREE_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::THREE_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TIMER_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TWELVE_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TWELVE_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TWO_O_CLOCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::TWO_THIRTY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::time::WATCH;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::AERIAL_TRAMWAY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::AIRPLANE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::AIRPLANE_ARRIVAL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::AIRPLANE_DEPARTURE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::FLYING_SAUCER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::HELICOPTER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::MOUNTAIN_CABLEWAY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::PARACHUTE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::ROCKET;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::SATELLITE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::SEAT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::SMALL_AIRPLANE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_air::SUSPENSION_RAILWAY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::AMBULANCE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::ARTICULATED_LORRY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::AUTOMOBILE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::AUTO_RICKSHAW;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::BICYCLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::BULLET_TRAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::BUS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::BUS_STOP;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::CONSTRUCTION;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::DELIVERY_TRUCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::FIRE_ENGINE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::FUEL_PUMP;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::HIGH_SPEED_TRAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::HORIZONTAL_TRAFFIC_LIGHT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::KICK_SCOOTER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::LIGHT_RAIL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::LOCOMOTIVE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MANUAL_WHEELCHAIR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::METRO;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MINIBUS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MONORAIL;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MOTORCYCLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MOTORIZED_WHEELCHAIR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MOTORWAY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MOTOR_SCOOTER;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::MOUNTAIN_RAILWAY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::OIL_DRUM;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::ONCOMING_AUTOMOBILE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::ONCOMING_BUS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::ONCOMING_POLICE_CAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::ONCOMING_TAXI;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::PICKUP_TRUCK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::POLICE_CAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::POLICE_CAR_LIGHT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::RACING_CAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::RAILWAY_CAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::RAILWAY_TRACK;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::ROLLER_SKATE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::SKATEBOARD;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::SPORT_UTILITY_VEHICLE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::STATION;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::STOP_SIGN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::TAXI;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::TRACTOR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::TRAIN;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::TRAM;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::TRAM_CAR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::TROLLEYBUS;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_ground::VERTICAL_TRAFFIC_LIGHT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::ANCHOR;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::CANOE;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::FERRY;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::MOTOR_BOAT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::PASSENGER_SHIP;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::SAILBOAT;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::SHIP;
#[doc(inline)]
pub use crate::grouped::travel_and_places::transport_water::SPEEDBOAT;
}


// EOF